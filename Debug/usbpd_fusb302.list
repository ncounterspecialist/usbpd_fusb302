
usbpd_fusb302.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a678  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800a784  0800a784  0001a784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7ac  0800a7ac  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800a7ac  0800a7ac  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a7ac  0800a7ac  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7ac  0800a7ac  0001a7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7b0  0800a7b0  0001a7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800a7b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  20000014  0800a7c8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000678  0800a7c8  00020678  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dbf0  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035b8  00000000  00000000  0003dc2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  000411e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  00042500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e27  00000000  00000000  00043700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013af3  00000000  00000000  0005c527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f64f  00000000  00000000  0007001a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff669  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f74  00000000  00000000  000ff6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a76c 	.word	0x0800a76c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	0800a76c 	.word	0x0800a76c

0800014c <InitializeBoard>:
static Port_t ports[NUM_PORTS]; /* Array of ports */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void InitializeBoard(void) {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
    /* Initialize Host com */
    HCom_Init(ports, 1);
    /* Initialize the USB interface */
    InitializeUSB();
#endif /* FSC_DEBUG */
}
 8000150:	bf00      	nop
 8000152:	46bd      	mov	sp, r7
 8000154:	bc80      	pop	{r7}
 8000156:	4770      	bx	lr

08000158 <InitializeSystem>:

static void InitializeSystem(void) {
 8000158:	b580      	push	{r7, lr}
 800015a:	af00      	add	r7, sp, #0
	InitializeBoard();
 800015c:	f7ff fff6 	bl	800014c <InitializeBoard>
	InitializeTickTimer();
 8000160:	f007 faae 	bl	80076c0 <InitializeTickTimer>
	InitializeTSTimer();
 8000164:	f007 fb1a 	bl	800779c <InitializeTSTimer>
}
 8000168:	bf00      	nop
 800016a:	bd80      	pop	{r7, pc}

0800016c <handle_core_event>:

void platform_set_debug(FSC_U8 port, FSC_BOOL enable) {

}

void handle_core_event(int event, int portid, void *usr_ctx, void *app_ctx) {
 800016c:	b480      	push	{r7}
 800016e:	b087      	sub	sp, #28
 8000170:	af00      	add	r7, sp, #0
 8000172:	60f8      	str	r0, [r7, #12]
 8000174:	60b9      	str	r1, [r7, #8]
 8000176:	607a      	str	r2, [r7, #4]
 8000178:	603b      	str	r3, [r7, #0]
       doDataObject_t pdo;
       if (event & PD_NEW_CONTRACT)
       {
//          pdo = (doDataObject_t*)app_ctx;
          /* handle event */
} }
 800017a:	bf00      	nop
 800017c:	371c      	adds	r7, #28
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr

08000184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b088      	sub	sp, #32
 8000188:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018a:	f007 fb39 	bl	8007800 <HAL_Init>

  /* USER CODE BEGIN Init */
	HAL_InitTick(1);
 800018e:	2001      	movs	r0, #1
 8000190:	f007 fb4c 	bl	800782c <HAL_InitTick>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000194:	f000 f896 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000198:	f000 fa14 	bl	80005c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800019c:	f000 f9ec 	bl	8000578 <MX_DMA_Init>
  MX_I2C1_Init();
 80001a0:	f000 f8d2 	bl	8000348 <MX_I2C1_Init>
  MX_TIM1_Init();
 80001a4:	f000 f8fe 	bl	80003a4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80001a8:	f000 f998 	bl	80004dc <MX_TIM3_Init>
  MX_TIM2_Init();
 80001ac:	f000 f94a 	bl	8000444 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	while (1) {
		bufin[0] = REG_DEVICE_ID;
 80001b0:	2301      	movs	r3, #1
 80001b2:	733b      	strb	r3, [r7, #12]
		ret = HAL_I2C_Master_Transmit(&hi2c1, FUSB300SlaveAddr, bufin, 1,
 80001b4:	f107 020c 	add.w	r2, r7, #12
 80001b8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80001bc:	9300      	str	r3, [sp, #0]
 80001be:	2301      	movs	r3, #1
 80001c0:	2144      	movs	r1, #68	; 0x44
 80001c2:	483a      	ldr	r0, [pc, #232]	; (80002ac <main+0x128>)
 80001c4:	f008 f8cc 	bl	8008360 <HAL_I2C_Master_Transmit>
 80001c8:	4603      	mov	r3, r0
 80001ca:	75fb      	strb	r3, [r7, #23]
				3000);
		if (ret != HAL_OK) {
 80001cc:	7dfb      	ldrb	r3, [r7, #23]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d10c      	bne.n	80001ec <main+0x68>
		} else {
			// Read 2 bytes from the temperature register
			ret = HAL_I2C_Master_Receive(&hi2c1, FUSB102_ADDR, bufout, 1,
 80001d2:	2344      	movs	r3, #68	; 0x44
 80001d4:	b299      	uxth	r1, r3
 80001d6:	f107 0208 	add.w	r2, r7, #8
 80001da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80001de:	9300      	str	r3, [sp, #0]
 80001e0:	2301      	movs	r3, #1
 80001e2:	4832      	ldr	r0, [pc, #200]	; (80002ac <main+0x128>)
 80001e4:	f008 f9ba 	bl	800855c <HAL_I2C_Master_Receive>
 80001e8:	4603      	mov	r3, r0
 80001ea:	75fb      	strb	r3, [r7, #23]
					3000);
			if (ret == HAL_OK) {
			}
		}

		FSC_BOOL status = DeviceRead(FUSB300SlaveAddr, regDeviceID, 1, bufout2);
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2201      	movs	r2, #1
 80001f0:	2101      	movs	r1, #1
 80001f2:	2044      	movs	r0, #68	; 0x44
 80001f4:	f006 fe3f 	bl	8006e76 <DeviceRead>
 80001f8:	4603      	mov	r3, r0
 80001fa:	75bb      	strb	r3, [r7, #22]
		if (status == TRUE) {
 80001fc:	7dbb      	ldrb	r3, [r7, #22]
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d000      	beq.n	8000204 <main+0x80>
	while (1) {
 8000202:	e7d5      	b.n	80001b0 <main+0x2c>
			break;
 8000204:	bf00      	nop

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	FSC_U32 timer_value;

	InitializeSystem();
 8000206:	f7ff ffa7 	bl	8000158 <InitializeSystem>

	DPM_Init(&dpm);
 800020a:	4829      	ldr	r0, [pc, #164]	; (80002b0 <main+0x12c>)
 800020c:	f006 ffdc 	bl	80071c8 <DPM_Init>

	ports[0].dpm = dpm;
 8000210:	4b27      	ldr	r3, [pc, #156]	; (80002b0 <main+0x12c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a27      	ldr	r2, [pc, #156]	; (80002b4 <main+0x130>)
 8000216:	6013      	str	r3, [r2, #0]
	ports[0].PortID = 0;
 8000218:	4b26      	ldr	r3, [pc, #152]	; (80002b4 <main+0x130>)
 800021a:	2200      	movs	r2, #0
 800021c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
//	&ports[0]->PortConfig.SinkUSBSuspendOperation = TRUE;
//	&ports[0]->PortConfig.SinkUSBCommCapable = TRUE;
	core_initialize(&ports[0], FUSB300SlaveAddr);
 8000220:	2144      	movs	r1, #68	; 0x44
 8000222:	4824      	ldr	r0, [pc, #144]	; (80002b4 <main+0x130>)
 8000224:	f006 fd6e 	bl	8006d04 <core_initialize>

	DPM_AddPort(dpm, &ports[0]);
 8000228:	4b21      	ldr	r3, [pc, #132]	; (80002b0 <main+0x12c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4921      	ldr	r1, [pc, #132]	; (80002b4 <main+0x130>)
 800022e:	4618      	mov	r0, r3
 8000230:	f006 ffde 	bl	80071f0 <DPM_AddPort>
	register_observer(EVENT_ALL, handle_core_event, 0);
 8000234:	2200      	movs	r2, #0
 8000236:	4920      	ldr	r1, [pc, #128]	; (80002b8 <main+0x134>)
 8000238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800023c:	f007 f9c2 	bl	80075c4 <register_observer>
      platform_set_debug(ports[0].PortID,FALSE);
  #endif /* FSC_DEBUG */

	while (1) {
//  #ifdef this
		haveINTReady = TRUE;
 8000240:	4b1e      	ldr	r3, [pc, #120]	; (80002bc <main+0x138>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
//  #endif /* FSC_POLLING_MODE */

		/* Run the Type-C state machine */
		if (haveINTReady
 8000246:	4b1d      	ldr	r3, [pc, #116]	; (80002bc <main+0x138>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	b2db      	uxtb	r3, r3
 800024c:	2b00      	cmp	r3, #0
 800024e:	d0f7      	beq.n	8000240 <main+0xbc>
#ifdef FSC_DEBUG
                  || haveUSBInMsg
  #endif /* FSC_DEBUG */
		) {
			/* Disable the timer interrupt */
			ClearTimeInterrupt();
 8000250:	f007 fa96 	bl	8007780 <ClearTimeInterrupt>

#ifdef FSC_DEBUG
              platform_set_debug(ports[0].PortID,TRUE);
  #endif /* FSC_DEBUG */

			core_state_machine(&ports[0]);
 8000254:	4817      	ldr	r0, [pc, #92]	; (80002b4 <main+0x130>)
 8000256:	f006 fd8d 	bl	8006d74 <core_state_machine>
			if(ports[0].ConnState == AttachedSink && &ports[0].PolicyState == peSinkTransitionDefault) {
 800025a:	4b16      	ldr	r3, [pc, #88]	; (80002b4 <main+0x130>)
 800025c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000260:	2b04      	cmp	r3, #4
 8000262:	d101      	bne.n	8000268 <main+0xe4>
 8000264:	4b16      	ldr	r3, [pc, #88]	; (80002c0 <main+0x13c>)
 8000266:	2b1d      	cmp	r3, #29

#ifdef FSC_DEBUG
              platform_set_debug(ports[0].PortID,FALSE);
  #endif /* FSC_DEBUG */

			haveINTReady = FALSE;
 8000268:	4b14      	ldr	r3, [pc, #80]	; (80002bc <main+0x138>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
			 * It is possible for the state machine to go into idle mode with
			 * the interrupt pin still low and as a result the edge-sensitive
			 * IRQ won't get triggered.  Check here before returning to wait
			 * on the IRQ.
			 */
			if (platform_get_device_irq_state(ports[0].PortID)) {
 800026e:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <main+0x130>)
 8000270:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000274:	4618      	mov	r0, r3
 8000276:	f000 fa67 	bl	8000748 <platform_get_device_irq_state>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d003      	beq.n	8000288 <main+0x104>
				haveINTReady = TRUE;
 8000280:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <main+0x138>)
 8000282:	2201      	movs	r2, #1
 8000284:	701a      	strb	r2, [r3, #0]
 8000286:	e7db      	b.n	8000240 <main+0xbc>
			} else {
				/* If needed, enable timer interrupt before idling */
				timer_value = core_get_next_timeout(&ports[0]);
 8000288:	480a      	ldr	r0, [pc, #40]	; (80002b4 <main+0x130>)
 800028a:	f006 fd9c 	bl	8006dc6 <core_get_next_timeout>
 800028e:	6138      	str	r0, [r7, #16]

				if (timer_value > 0) {
 8000290:	693b      	ldr	r3, [r7, #16]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d0d4      	beq.n	8000240 <main+0xbc>
					if (timer_value == 1) {
 8000296:	693b      	ldr	r3, [r7, #16]
 8000298:	2b01      	cmp	r3, #1
 800029a:	d103      	bne.n	80002a4 <main+0x120>
						/* A value of 1 indicates that a timer has expired
						 * or is about to expire and needs further processing.
						 */
						haveINTReady = TRUE;
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <main+0x138>)
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
 80002a2:	e7cd      	b.n	8000240 <main+0xbc>
					} else {
						/* A non-zero time requires a future timer interrupt */
						SetTimeInterrupt(timer_value);
 80002a4:	6938      	ldr	r0, [r7, #16]
 80002a6:	f007 fa4e 	bl	8007746 <SetTimeInterrupt>
		haveINTReady = TRUE;
 80002aa:	e7c9      	b.n	8000240 <main+0xbc>
 80002ac:	20000504 	.word	0x20000504
 80002b0:	20000034 	.word	0x20000034
 80002b4:	20000038 	.word	0x20000038
 80002b8:	0800016d 	.word	0x0800016d
 80002bc:	20000030 	.word	0x20000030
 80002c0:	2000008e 	.word	0x2000008e

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b090      	sub	sp, #64	; 0x40
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0318 	add.w	r3, r7, #24
 80002ce:	2228      	movs	r2, #40	; 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f00a fa42 	bl	800a75c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e6:	2302      	movs	r3, #2
 80002e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ea:	2301      	movs	r3, #1
 80002ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ee:	2310      	movs	r3, #16
 80002f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f2:	2302      	movs	r3, #2
 80002f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002f6:	2300      	movs	r3, #0
 80002f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002fa:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80002fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000300:	f107 0318 	add.w	r3, r7, #24
 8000304:	4618      	mov	r0, r3
 8000306:	f009 fb95 	bl	8009a34 <HAL_RCC_OscConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000310:	f000 f986 	bl	8000620 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000314:	230f      	movs	r3, #15
 8000316:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000318:	2302      	movs	r3, #2
 800031a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2101      	movs	r1, #1
 800032e:	4618      	mov	r0, r3
 8000330:	f009 fe00 	bl	8009f34 <HAL_RCC_ClockConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800033a:	f000 f971 	bl	8000620 <Error_Handler>
  }
}
 800033e:	bf00      	nop
 8000340:	3740      	adds	r7, #64	; 0x40
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800034c:	4b12      	ldr	r3, [pc, #72]	; (8000398 <MX_I2C1_Init+0x50>)
 800034e:	4a13      	ldr	r2, [pc, #76]	; (800039c <MX_I2C1_Init+0x54>)
 8000350:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <MX_I2C1_Init+0x50>)
 8000354:	4a12      	ldr	r2, [pc, #72]	; (80003a0 <MX_I2C1_Init+0x58>)
 8000356:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_I2C1_Init+0x50>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <MX_I2C1_Init+0x50>)
 8000360:	2200      	movs	r2, #0
 8000362:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_I2C1_Init+0x50>)
 8000366:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800036a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <MX_I2C1_Init+0x50>)
 800036e:	2200      	movs	r2, #0
 8000370:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000372:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MX_I2C1_Init+0x50>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <MX_I2C1_Init+0x50>)
 800037a:	2200      	movs	r2, #0
 800037c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <MX_I2C1_Init+0x50>)
 8000380:	2200      	movs	r2, #0
 8000382:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <MX_I2C1_Init+0x50>)
 8000386:	f007 fea7 	bl	80080d8 <HAL_I2C_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000390:	f000 f946 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000504 	.word	0x20000504
 800039c:	40005400 	.word	0x40005400
 80003a0:	00061a80 	.word	0x00061a80

080003a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003aa:	f107 0308 	add.w	r3, r7, #8
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b8:	463b      	mov	r3, r7
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003c0:	4b1e      	ldr	r3, [pc, #120]	; (800043c <MX_TIM1_Init+0x98>)
 80003c2:	4a1f      	ldr	r2, [pc, #124]	; (8000440 <MX_TIM1_Init+0x9c>)
 80003c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003c6:	4b1d      	ldr	r3, [pc, #116]	; (800043c <MX_TIM1_Init+0x98>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003cc:	4b1b      	ldr	r3, [pc, #108]	; (800043c <MX_TIM1_Init+0x98>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80003d2:	4b1a      	ldr	r3, [pc, #104]	; (800043c <MX_TIM1_Init+0x98>)
 80003d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003da:	4b18      	ldr	r3, [pc, #96]	; (800043c <MX_TIM1_Init+0x98>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003e0:	4b16      	ldr	r3, [pc, #88]	; (800043c <MX_TIM1_Init+0x98>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <MX_TIM1_Init+0x98>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003ec:	4813      	ldr	r0, [pc, #76]	; (800043c <MX_TIM1_Init+0x98>)
 80003ee:	f009 ff27 	bl	800a240 <HAL_TIM_Base_Init>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80003f8:	f000 f912 	bl	8000620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000400:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000402:	f107 0308 	add.w	r3, r7, #8
 8000406:	4619      	mov	r1, r3
 8000408:	480c      	ldr	r0, [pc, #48]	; (800043c <MX_TIM1_Init+0x98>)
 800040a:	f009 ff68 	bl	800a2de <HAL_TIM_ConfigClockSource>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000414:	f000 f904 	bl	8000620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000418:	2300      	movs	r3, #0
 800041a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800041c:	2300      	movs	r3, #0
 800041e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000420:	463b      	mov	r3, r7
 8000422:	4619      	mov	r1, r3
 8000424:	4805      	ldr	r0, [pc, #20]	; (800043c <MX_TIM1_Init+0x98>)
 8000426:	f00a f917 	bl	800a658 <HAL_TIMEx_MasterConfigSynchronization>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000430:	f000 f8f6 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000434:	bf00      	nop
 8000436:	3718      	adds	r7, #24
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	200005a0 	.word	0x200005a0
 8000440:	40012c00 	.word	0x40012c00

08000444 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800044a:	f107 0308 	add.w	r3, r7, #8
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000458:	463b      	mov	r3, r7
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000460:	4b1d      	ldr	r3, [pc, #116]	; (80004d8 <MX_TIM2_Init+0x94>)
 8000462:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000466:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8000468:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <MX_TIM2_Init+0x94>)
 800046a:	222f      	movs	r2, #47	; 0x2f
 800046c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800046e:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <MX_TIM2_Init+0x94>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <MX_TIM2_Init+0x94>)
 8000476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800047a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800047c:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <MX_TIM2_Init+0x94>)
 800047e:	2200      	movs	r2, #0
 8000480:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <MX_TIM2_Init+0x94>)
 8000484:	2200      	movs	r2, #0
 8000486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000488:	4813      	ldr	r0, [pc, #76]	; (80004d8 <MX_TIM2_Init+0x94>)
 800048a:	f009 fed9 	bl	800a240 <HAL_TIM_Base_Init>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000494:	f000 f8c4 	bl	8000620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800049c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800049e:	f107 0308 	add.w	r3, r7, #8
 80004a2:	4619      	mov	r1, r3
 80004a4:	480c      	ldr	r0, [pc, #48]	; (80004d8 <MX_TIM2_Init+0x94>)
 80004a6:	f009 ff1a 	bl	800a2de <HAL_TIM_ConfigClockSource>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004b0:	f000 f8b6 	bl	8000620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b4:	2300      	movs	r3, #0
 80004b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004bc:	463b      	mov	r3, r7
 80004be:	4619      	mov	r1, r3
 80004c0:	4805      	ldr	r0, [pc, #20]	; (80004d8 <MX_TIM2_Init+0x94>)
 80004c2:	f00a f8c9 	bl	800a658 <HAL_TIMEx_MasterConfigSynchronization>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004cc:	f000 f8a8 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004d0:	bf00      	nop
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	2000062c 	.word	0x2000062c

080004dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004e2:	f107 0308 	add.w	r3, r7, #8
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004f0:	463b      	mov	r3, r7
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004f8:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <MX_TIM3_Init+0x94>)
 80004fa:	4a1e      	ldr	r2, [pc, #120]	; (8000574 <MX_TIM3_Init+0x98>)
 80004fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004fe:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <MX_TIM3_Init+0x94>)
 8000500:	2200      	movs	r2, #0
 8000502:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000504:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <MX_TIM3_Init+0x94>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800050a:	4b19      	ldr	r3, [pc, #100]	; (8000570 <MX_TIM3_Init+0x94>)
 800050c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000510:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <MX_TIM3_Init+0x94>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_TIM3_Init+0x94>)
 800051a:	2200      	movs	r2, #0
 800051c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800051e:	4814      	ldr	r0, [pc, #80]	; (8000570 <MX_TIM3_Init+0x94>)
 8000520:	f009 fe8e 	bl	800a240 <HAL_TIM_Base_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800052a:	f000 f879 	bl	8000620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800052e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000532:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000534:	f107 0308 	add.w	r3, r7, #8
 8000538:	4619      	mov	r1, r3
 800053a:	480d      	ldr	r0, [pc, #52]	; (8000570 <MX_TIM3_Init+0x94>)
 800053c:	f009 fecf 	bl	800a2de <HAL_TIM_ConfigClockSource>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000546:	f000 f86b 	bl	8000620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800054a:	2300      	movs	r3, #0
 800054c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000552:	463b      	mov	r3, r7
 8000554:	4619      	mov	r1, r3
 8000556:	4806      	ldr	r0, [pc, #24]	; (8000570 <MX_TIM3_Init+0x94>)
 8000558:	f00a f87e 	bl	800a658 <HAL_TIMEx_MasterConfigSynchronization>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000562:	f000 f85d 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	3718      	adds	r7, #24
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000558 	.word	0x20000558
 8000574:	40000400 	.word	0x40000400

08000578 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <MX_DMA_Init+0x48>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a0f      	ldr	r2, [pc, #60]	; (80005c0 <MX_DMA_Init+0x48>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6153      	str	r3, [r2, #20]
 800058a:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <MX_DMA_Init+0x48>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2100      	movs	r1, #0
 800059a:	2010      	movs	r0, #16
 800059c:	f007 fa69 	bl	8007a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80005a0:	2010      	movs	r0, #16
 80005a2:	f007 fa82 	bl	8007aaa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	2011      	movs	r0, #17
 80005ac:	f007 fa61 	bl	8007a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80005b0:	2011      	movs	r0, #17
 80005b2:	f007 fa7a 	bl	8007aaa <HAL_NVIC_EnableIRQ>

}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000

080005c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <MX_GPIO_Init+0x58>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	4a13      	ldr	r2, [pc, #76]	; (800061c <MX_GPIO_Init+0x58>)
 80005d0:	f043 0320 	orr.w	r3, r3, #32
 80005d4:	6193      	str	r3, [r2, #24]
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_GPIO_Init+0x58>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	f003 0320 	and.w	r3, r3, #32
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_GPIO_Init+0x58>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	4a0d      	ldr	r2, [pc, #52]	; (800061c <MX_GPIO_Init+0x58>)
 80005e8:	f043 0304 	orr.w	r3, r3, #4
 80005ec:	6193      	str	r3, [r2, #24]
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <MX_GPIO_Init+0x58>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	f003 0304 	and.w	r3, r3, #4
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <MX_GPIO_Init+0x58>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <MX_GPIO_Init+0x58>)
 8000600:	f043 0308 	orr.w	r3, r3, #8
 8000604:	6193      	str	r3, [r2, #24]
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <MX_GPIO_Init+0x58>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f003 0308 	and.w	r3, r3, #8
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	40021000 	.word	0x40021000

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000628:	e7fe      	b.n	8000628 <Error_Handler+0x8>
	...

0800062c <platform_set_vbus_lvl_enable>:
 * @param disableOthers Disable other sources in make-before-break fashion
 * @return None or state of vbus.
 */
void platform_set_vbus_lvl_enable(FSC_U8 port, VBUS_LVL level, FSC_BOOL enable,
                                  FSC_BOOL disableOthers)
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4604      	mov	r4, r0
 8000634:	4608      	mov	r0, r1
 8000636:	4611      	mov	r1, r2
 8000638:	461a      	mov	r2, r3
 800063a:	4623      	mov	r3, r4
 800063c:	71fb      	strb	r3, [r7, #7]
 800063e:	4603      	mov	r3, r0
 8000640:	71bb      	strb	r3, [r7, #6]
 8000642:	460b      	mov	r3, r1
 8000644:	717b      	strb	r3, [r7, #5]
 8000646:	4613      	mov	r3, r2
 8000648:	713b      	strb	r3, [r7, #4]
    if (level == VBUS_LVL_5V)
 800064a:	79bb      	ldrb	r3, [r7, #6]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d113      	bne.n	8000678 <platform_set_vbus_lvl_enable+0x4c>
    {
        /* Enable/Disable the 5V Source */
        HAL_GPIO_WritePin( VBUS_PORT, VBUS_5V_PIN,
 8000650:	797b      	ldrb	r3, [r7, #5]
 8000652:	2b00      	cmp	r3, #0
 8000654:	bf14      	ite	ne
 8000656:	2301      	movne	r3, #1
 8000658:	2300      	moveq	r3, #0
 800065a:	b2db      	uxtb	r3, r3
 800065c:	461a      	mov	r2, r3
 800065e:	2108      	movs	r1, #8
 8000660:	481a      	ldr	r0, [pc, #104]	; (80006cc <platform_set_vbus_lvl_enable+0xa0>)
 8000662:	f007 fd21 	bl	80080a8 <HAL_GPIO_WritePin>
                           enable ? GPIO_PIN_SET : GPIO_PIN_RESET );

        if (disableOthers)
 8000666:	793b      	ldrb	r3, [r7, #4]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d01b      	beq.n	80006a4 <platform_set_vbus_lvl_enable+0x78>
        {
          HAL_GPIO_WritePin( VBUS_PORT, VBUS_HV_PIN, GPIO_PIN_RESET );
 800066c:	2200      	movs	r2, #0
 800066e:	2110      	movs	r1, #16
 8000670:	4816      	ldr	r0, [pc, #88]	; (80006cc <platform_set_vbus_lvl_enable+0xa0>)
 8000672:	f007 fd19 	bl	80080a8 <HAL_GPIO_WritePin>
 8000676:	e015      	b.n	80006a4 <platform_set_vbus_lvl_enable+0x78>
        }
    }
    else if (level == VBUS_LVL_HV)
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d112      	bne.n	80006a4 <platform_set_vbus_lvl_enable+0x78>
    {
        /* Enable/Disable the HV Source */
        HAL_GPIO_WritePin( VBUS_PORT, VBUS_HV_PIN,
 800067e:	797b      	ldrb	r3, [r7, #5]
 8000680:	2b00      	cmp	r3, #0
 8000682:	bf14      	ite	ne
 8000684:	2301      	movne	r3, #1
 8000686:	2300      	moveq	r3, #0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	461a      	mov	r2, r3
 800068c:	2110      	movs	r1, #16
 800068e:	480f      	ldr	r0, [pc, #60]	; (80006cc <platform_set_vbus_lvl_enable+0xa0>)
 8000690:	f007 fd0a 	bl	80080a8 <HAL_GPIO_WritePin>
                           enable ? GPIO_PIN_SET : GPIO_PIN_RESET );

        if (disableOthers)
 8000694:	793b      	ldrb	r3, [r7, #4]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d004      	beq.n	80006a4 <platform_set_vbus_lvl_enable+0x78>
        {
          HAL_GPIO_WritePin( VBUS_PORT, VBUS_5V_PIN, GPIO_PIN_RESET );
 800069a:	2200      	movs	r2, #0
 800069c:	2108      	movs	r1, #8
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <platform_set_vbus_lvl_enable+0xa0>)
 80006a0:	f007 fd02 	bl	80080a8 <HAL_GPIO_WritePin>
        }
    }

    /* Turn off all levels, if requested */
    if ((level == VBUS_LVL_ALL) && (enable == FALSE))
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	2b02      	cmp	r3, #2
 80006a8:	d10c      	bne.n	80006c4 <platform_set_vbus_lvl_enable+0x98>
 80006aa:	797b      	ldrb	r3, [r7, #5]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d109      	bne.n	80006c4 <platform_set_vbus_lvl_enable+0x98>
    {
      HAL_GPIO_WritePin( VBUS_PORT, VBUS_5V_PIN, GPIO_PIN_RESET );
 80006b0:	2200      	movs	r2, #0
 80006b2:	2108      	movs	r1, #8
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <platform_set_vbus_lvl_enable+0xa0>)
 80006b6:	f007 fcf7 	bl	80080a8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin( VBUS_PORT, VBUS_HV_PIN, GPIO_PIN_RESET );
 80006ba:	2200      	movs	r2, #0
 80006bc:	2110      	movs	r1, #16
 80006be:	4803      	ldr	r0, [pc, #12]	; (80006cc <platform_set_vbus_lvl_enable+0xa0>)
 80006c0:	f007 fcf2 	bl	80080a8 <HAL_GPIO_WritePin>
    }
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd90      	pop	{r4, r7, pc}
 80006cc:	40011000 	.word	0x40011000

080006d0 <platform_set_pps_voltage>:
 * @param port ID for multiple port controls
 * @param mv Voltage in millivolts
 * @return None or Value in mv/ma.
 */
void platform_set_pps_voltage(FSC_U8 port, FSC_U32 mv)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	6039      	str	r1, [r7, #0]
 80006da:	71fb      	strb	r3, [r7, #7]
  {
    FAN6295_SetVoltage(mv);
    FAN6295_SetEnable(TRUE);
  }
#endif /* FSC_HAVE_PPS_SOURCE */
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr

080006e6 <platform_get_pps_voltage>:
 *
 * @param port ID for multiple port controls
 * @return VBUS level supplied by PPS in milivolt resolution
 */
FSC_U16 platform_get_pps_voltage(FSC_U8 port)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b083      	sub	sp, #12
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	4603      	mov	r3, r0
 80006ee:	71fb      	strb	r3, [r7, #7]
    return 0;
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <platform_set_pps_current>:
 * @param port ID for multiple port controls
 * @param ma Current in milliamps
 * @return None
 */
void platform_set_pps_current(FSC_U8 port, FSC_U32 ma)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	71fb      	strb	r3, [r7, #7]
#ifdef FSC_HAVE_PPS_SOURCE
    FAN6295_SetILimit(ma);
#endif /* FSC_HAVE_PPS_SOURCE */
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
	...

08000714 <platform_set_vbus_discharge>:
 * @param port ID for multiple port controls
 * @param enable TRUE = discharge path ON.
 * @return None
 */
void platform_set_vbus_discharge(FSC_U8 port, FSC_BOOL enable)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	460a      	mov	r2, r1
 800071e:	71fb      	strb	r3, [r7, #7]
 8000720:	4613      	mov	r3, r2
 8000722:	71bb      	strb	r3, [r7, #6]
    /**
     *  Enable/Disable the discharge path
     * @todo - Implement as needed on platforms that support this feature.
     */
    HAL_GPIO_WritePin( VBUS_PORT, VBUS_DISC_PIN,
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	2b01      	cmp	r3, #1
 8000728:	bf0c      	ite	eq
 800072a:	2301      	moveq	r3, #1
 800072c:	2300      	movne	r3, #0
 800072e:	b2db      	uxtb	r3, r3
 8000730:	461a      	mov	r2, r3
 8000732:	2101      	movs	r1, #1
 8000734:	4803      	ldr	r0, [pc, #12]	; (8000744 <platform_set_vbus_discharge+0x30>)
 8000736:	f007 fcb7 	bl	80080a8 <HAL_GPIO_WritePin>
                       (enable == TRUE) ? GPIO_PIN_SET : GPIO_PIN_RESET );
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40011000 	.word	0x40011000

08000748 <platform_get_device_irq_state>:
 *
 * @param port ID for multiple port controls
 * @return TRUE if interrupt condition present.  Note: pin is active low.
 */
FSC_BOOL platform_get_device_irq_state(FSC_U8 port)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
    /**
     * Return the state of the device interrupt signal.
     * Port A, GPIO_PIN_1 -- ACTIVE LOW!
     */
#ifdef FSC_POLLING_MODE
    return TRUE;
 8000752:	2301      	movs	r3, #1
#else
    return HAL_GPIO_ReadPin(INT_N_PORT, INT_N_PIN) ? FALSE : TRUE;
#endif /* FSC_POLLING MODE */
}
 8000754:	4618      	mov	r0, r3
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
	...

08000760 <platform_i2c_write>:
                            FSC_U8 DataLength,
                            FSC_U8 PacketSize,
                            FSC_U8 IncSize,
                            FSC_U32 RegisterAddress,
                            FSC_U8* Data)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b089      	sub	sp, #36	; 0x24
 8000764:	af04      	add	r7, sp, #16
 8000766:	4604      	mov	r4, r0
 8000768:	4608      	mov	r0, r1
 800076a:	4611      	mov	r1, r2
 800076c:	461a      	mov	r2, r3
 800076e:	4623      	mov	r3, r4
 8000770:	71fb      	strb	r3, [r7, #7]
 8000772:	4603      	mov	r3, r0
 8000774:	71bb      	strb	r3, [r7, #6]
 8000776:	460b      	mov	r3, r1
 8000778:	717b      	strb	r3, [r7, #5]
 800077a:	4613      	mov	r3, r2
 800077c:	713b      	strb	r3, [r7, #4]
    HAL_StatusTypeDef result = HAL_OK;
 800077e:	2300      	movs	r3, #0
 8000780:	73fb      	strb	r3, [r7, #15]

    result = HAL_I2C_Mem_Write(&hi2c1, SlaveAddress, RegisterAddress,
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	b299      	uxth	r1, r3
 8000786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000788:	b29a      	uxth	r2, r3
 800078a:	79bb      	ldrb	r3, [r7, #6]
 800078c:	b298      	uxth	r0, r3
 800078e:	797b      	ldrb	r3, [r7, #5]
 8000790:	b29b      	uxth	r3, r3
 8000792:	240f      	movs	r4, #15
 8000794:	9402      	str	r4, [sp, #8]
 8000796:	9301      	str	r3, [sp, #4]
 8000798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	4603      	mov	r3, r0
 800079e:	4807      	ldr	r0, [pc, #28]	; (80007bc <platform_i2c_write+0x5c>)
 80007a0:	f008 f93c 	bl	8008a1c <HAL_I2C_Mem_Write>
 80007a4:	4603      	mov	r3, r0
 80007a6:	73fb      	strb	r3, [r7, #15]
                               RegAddrLength, Data, DataLength,
                               I2C1_TIMEOUT_MAX);

    return ((result == HAL_OK) ? TRUE : FALSE);
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	bf0c      	ite	eq
 80007ae:	2301      	moveq	r3, #1
 80007b0:	2300      	movne	r3, #0
 80007b2:	b2db      	uxtb	r3, r3
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd90      	pop	{r4, r7, pc}
 80007bc:	20000504 	.word	0x20000504

080007c0 <platform_i2c_read>:
                            FSC_U8 DataLength,
                            FSC_U8 PacketSize,
                            FSC_U8 IncSize,
                            FSC_U32 RegisterAddress,
                            FSC_U8* Data)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b089      	sub	sp, #36	; 0x24
 80007c4:	af04      	add	r7, sp, #16
 80007c6:	4604      	mov	r4, r0
 80007c8:	4608      	mov	r0, r1
 80007ca:	4611      	mov	r1, r2
 80007cc:	461a      	mov	r2, r3
 80007ce:	4623      	mov	r3, r4
 80007d0:	71fb      	strb	r3, [r7, #7]
 80007d2:	4603      	mov	r3, r0
 80007d4:	71bb      	strb	r3, [r7, #6]
 80007d6:	460b      	mov	r3, r1
 80007d8:	717b      	strb	r3, [r7, #5]
 80007da:	4613      	mov	r3, r2
 80007dc:	713b      	strb	r3, [r7, #4]
    HAL_StatusTypeDef result = HAL_OK;
 80007de:	2300      	movs	r3, #0
 80007e0:	73fb      	strb	r3, [r7, #15]

    result = HAL_I2C_Mem_Read(&hi2c1, SlaveAddress, RegisterAddress,
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	b299      	uxth	r1, r3
 80007e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	79bb      	ldrb	r3, [r7, #6]
 80007ec:	b298      	uxth	r0, r3
 80007ee:	797b      	ldrb	r3, [r7, #5]
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	240f      	movs	r4, #15
 80007f4:	9402      	str	r4, [sp, #8]
 80007f6:	9301      	str	r3, [sp, #4]
 80007f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	4603      	mov	r3, r0
 80007fe:	4807      	ldr	r0, [pc, #28]	; (800081c <platform_i2c_read+0x5c>)
 8000800:	f008 fa06 	bl	8008c10 <HAL_I2C_Mem_Read>
 8000804:	4603      	mov	r3, r0
 8000806:	73fb      	strb	r3, [r7, #15]
                              RegAddrLength, Data, DataLength,
                              I2C1_TIMEOUT_MAX);

    return ((result == HAL_OK) ? TRUE : FALSE);
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	2b00      	cmp	r3, #0
 800080c:	bf0c      	ite	eq
 800080e:	2301      	moveq	r3, #1
 8000810:	2300      	movne	r3, #0
 8000812:	b2db      	uxtb	r3, r3
}
 8000814:	4618      	mov	r0, r3
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	bd90      	pop	{r4, r7, pc}
 800081c:	20000504 	.word	0x20000504

08000820 <platform_delay_10us>:
 *
 * @param delayCount - Number of 10us delays to wait
 * @return None
 */
void platform_delay_10us(FSC_U32 tenMicroSecondCounter)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
    platform_delay(tenMicroSecondCounter * 10);
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	4613      	mov	r3, r2
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	4413      	add	r3, r2
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	4618      	mov	r0, r3
 8000834:	f000 f804 	bl	8000840 <platform_delay>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <platform_delay>:
 *
 * @param delayCount - Number of us delays to wait
 * @return None
 */
void platform_delay(FSC_U32 microseconds)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
    FSC_U32 currentTime = TIM2->CNT;
 8000848:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800084c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084e:	60fb      	str	r3, [r7, #12]
//    HAL_Delay(1);

    /* Use the free running clock */
    while ((FSC_U32)((FSC_U32)TIM2->CNT - currentTime) < microseconds);
 8000850:	bf00      	nop
 8000852:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	429a      	cmp	r2, r3
 8000860:	d8f7      	bhi.n	8000852 <platform_delay+0x12>
}
 8000862:	bf00      	nop
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr

0800086e <platform_get_system_time>:
 *
 * @param None
 * @return System time value in units of (milliseconds / TICK_SCALE_TO_MS)
 */
FSC_U32 platform_get_system_time(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  return TIM2->CNT;
 8000872:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000878:	4618      	mov	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <HAL_MspInit+0x5c>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	4a14      	ldr	r2, [pc, #80]	; (80008dc <HAL_MspInit+0x5c>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6193      	str	r3, [r2, #24]
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_MspInit+0x5c>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <HAL_MspInit+0x5c>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <HAL_MspInit+0x5c>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a8:	61d3      	str	r3, [r2, #28]
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_MspInit+0x5c>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008b6:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <HAL_MspInit+0x60>)
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <HAL_MspInit+0x60>)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40010000 	.word	0x40010000

080008e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a3b      	ldr	r2, [pc, #236]	; (80009ec <HAL_I2C_MspInit+0x108>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d16f      	bne.n	80009e4 <HAL_I2C_MspInit+0x100>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000904:	4b3a      	ldr	r3, [pc, #232]	; (80009f0 <HAL_I2C_MspInit+0x10c>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	4a39      	ldr	r2, [pc, #228]	; (80009f0 <HAL_I2C_MspInit+0x10c>)
 800090a:	f043 0308 	orr.w	r3, r3, #8
 800090e:	6193      	str	r3, [r2, #24]
 8000910:	4b37      	ldr	r3, [pc, #220]	; (80009f0 <HAL_I2C_MspInit+0x10c>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f003 0308 	and.w	r3, r3, #8
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800091c:	23c0      	movs	r3, #192	; 0xc0
 800091e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4619      	mov	r1, r3
 800092e:	4831      	ldr	r0, [pc, #196]	; (80009f4 <HAL_I2C_MspInit+0x110>)
 8000930:	f007 fa36 	bl	8007da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000934:	4b2e      	ldr	r3, [pc, #184]	; (80009f0 <HAL_I2C_MspInit+0x10c>)
 8000936:	69db      	ldr	r3, [r3, #28]
 8000938:	4a2d      	ldr	r2, [pc, #180]	; (80009f0 <HAL_I2C_MspInit+0x10c>)
 800093a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800093e:	61d3      	str	r3, [r2, #28]
 8000940:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <HAL_I2C_MspInit+0x10c>)
 8000942:	69db      	ldr	r3, [r3, #28]
 8000944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800094c:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <HAL_I2C_MspInit+0x114>)
 800094e:	4a2b      	ldr	r2, [pc, #172]	; (80009fc <HAL_I2C_MspInit+0x118>)
 8000950:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000952:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <HAL_I2C_MspInit+0x114>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000958:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <HAL_I2C_MspInit+0x114>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800095e:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <HAL_I2C_MspInit+0x114>)
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000964:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <HAL_I2C_MspInit+0x114>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800096a:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <HAL_I2C_MspInit+0x114>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <HAL_I2C_MspInit+0x114>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000976:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <HAL_I2C_MspInit+0x114>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800097c:	481e      	ldr	r0, [pc, #120]	; (80009f8 <HAL_I2C_MspInit+0x114>)
 800097e:	f007 f8af 	bl	8007ae0 <HAL_DMA_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8000988:	f7ff fe4a 	bl	8000620 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a1a      	ldr	r2, [pc, #104]	; (80009f8 <HAL_I2C_MspInit+0x114>)
 8000990:	639a      	str	r2, [r3, #56]	; 0x38
 8000992:	4a19      	ldr	r2, [pc, #100]	; (80009f8 <HAL_I2C_MspInit+0x114>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <HAL_I2C_MspInit+0x11c>)
 800099a:	4a1a      	ldr	r2, [pc, #104]	; (8000a04 <HAL_I2C_MspInit+0x120>)
 800099c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <HAL_I2C_MspInit+0x11c>)
 80009a0:	2210      	movs	r2, #16
 80009a2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <HAL_I2C_MspInit+0x11c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_I2C_MspInit+0x11c>)
 80009ac:	2280      	movs	r2, #128	; 0x80
 80009ae:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <HAL_I2C_MspInit+0x11c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009b6:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_I2C_MspInit+0x11c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80009bc:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_I2C_MspInit+0x11c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <HAL_I2C_MspInit+0x11c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80009c8:	480d      	ldr	r0, [pc, #52]	; (8000a00 <HAL_I2C_MspInit+0x11c>)
 80009ca:	f007 f889 	bl	8007ae0 <HAL_DMA_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 80009d4:	f7ff fe24 	bl	8000620 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a09      	ldr	r2, [pc, #36]	; (8000a00 <HAL_I2C_MspInit+0x11c>)
 80009dc:	635a      	str	r2, [r3, #52]	; 0x34
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <HAL_I2C_MspInit+0x11c>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009e4:	bf00      	nop
 80009e6:	3720      	adds	r7, #32
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40005400 	.word	0x40005400
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40010c00 	.word	0x40010c00
 80009f8:	200005e8 	.word	0x200005e8
 80009fc:	40020080 	.word	0x40020080
 8000a00:	200004c0 	.word	0x200004c0
 8000a04:	4002006c 	.word	0x4002006c

08000a08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b087      	sub	sp, #28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <HAL_TIM_Base_MspInit+0x7c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d10c      	bne.n	8000a34 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <HAL_TIM_Base_MspInit+0x80>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	4a1a      	ldr	r2, [pc, #104]	; (8000a88 <HAL_TIM_Base_MspInit+0x80>)
 8000a20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a24:	6193      	str	r3, [r2, #24]
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <HAL_TIM_Base_MspInit+0x80>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a32:	e022      	b.n	8000a7a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a3c:	d10c      	bne.n	8000a58 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_TIM_Base_MspInit+0x80>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	4a11      	ldr	r2, [pc, #68]	; (8000a88 <HAL_TIM_Base_MspInit+0x80>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	61d3      	str	r3, [r2, #28]
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_TIM_Base_MspInit+0x80>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
}
 8000a56:	e010      	b.n	8000a7a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <HAL_TIM_Base_MspInit+0x84>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d10b      	bne.n	8000a7a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_TIM_Base_MspInit+0x80>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <HAL_TIM_Base_MspInit+0x80>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	61d3      	str	r3, [r2, #28]
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_TIM_Base_MspInit+0x80>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
}
 8000a7a:	bf00      	nop
 8000a7c:	371c      	adds	r7, #28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	40012c00 	.word	0x40012c00
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40000400 	.word	0x40000400

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr

08000ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr

08000ad2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad6:	f006 fed9 	bl	800788c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <DMA1_Channel6_IRQHandler+0x10>)
 8000ae6:	f007 f855 	bl	8007b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200004c0 	.word	0x200004c0

08000af4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <DMA1_Channel7_IRQHandler+0x10>)
 8000afa:	f007 f84b 	bl	8007b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200005e8 	.word	0x200005e8

08000b08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b14:	480c      	ldr	r0, [pc, #48]	; (8000b48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b16:	490d      	ldr	r1, [pc, #52]	; (8000b4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b1c:	e002      	b.n	8000b24 <LoopCopyDataInit>

08000b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b22:	3304      	adds	r3, #4

08000b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b28:	d3f9      	bcc.n	8000b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b2c:	4c0a      	ldr	r4, [pc, #40]	; (8000b58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b30:	e001      	b.n	8000b36 <LoopFillZerobss>

08000b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b34:	3204      	adds	r2, #4

08000b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b38:	d3fb      	bcc.n	8000b32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b3a:	f7ff ffe5 	bl	8000b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b3e:	f009 fde9 	bl	800a714 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b42:	f7ff fb1f 	bl	8000184 <main>
  bx lr
 8000b46:	4770      	bx	lr
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b50:	0800a7b4 	.word	0x0800a7b4
  ldr r2, =_sbss
 8000b54:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b58:	20000678 	.word	0x20000678

08000b5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC1_2_IRQHandler>

08000b5e <USBPDEnable>:
#include "Log.h"
#endif /* FSC_DEBUG */

/* USB PD Enable / Disable Routines */
void USBPDEnable(Port_t *port, FSC_BOOL DeviceUpdate, SourceOrSink TypeCDFP)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	460b      	mov	r3, r1
 8000b68:	70fb      	strb	r3, [r7, #3]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	70bb      	strb	r3, [r7, #2]
    port->PortConfig.reqPRSwapAsSrc = Requests_PR_Swap_As_Src;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2200      	movs	r2, #0
 8000b72:	779a      	strb	r2, [r3, #30]
    port->PortConfig.reqPRSwapAsSnk = Requests_PR_Swap_As_Snk;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	77da      	strb	r2, [r3, #31]
    port->PortConfig.reqDRSwapToDfpAsSink = Attempt_DR_Swap_to_Dfp_As_Sink;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	769a      	strb	r2, [r3, #26]
    port->PortConfig.reqDRSwapToUfpAsSrc = Attempt_DR_Swap_to_Ufp_As_Src;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	76da      	strb	r2, [r3, #27]
    port->PortConfig.reqVconnSwapToOnAsSink = Attempt_Vconn_Swap_to_On_As_Sink;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	771a      	strb	r2, [r3, #28]
    port->PortConfig.reqVconnSwapToOffAsSrc = Attempt_Vconn_Swap_to_Off_As_Src;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	775a      	strb	r2, [r3, #29]

    port->IsHardReset = FALSE;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
    port->IsPRSwap = FALSE;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    port->HardResetCounter = 0;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

    if (port->USBPDEnabled == TRUE)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	f040 80fd 	bne.w	8000db0 <USBPDEnable+0x252>
    {
        ResetProtocolLayer(port, TRUE);
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f004 f9d9 	bl	8004f70 <ResetProtocolLayer>
                    
        /* Check CC pin to monitor */
        if (port->CCPin == CC1)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d11c      	bne.n	8000c02 <USBPDEnable+0xa4>
        {
            port->Registers.Switches.TXCC1 = 1;
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
            port->Registers.Switches.MEAS_CC1 = 1;
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

            port->Registers.Switches.TXCC2 = 0;
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000bea:	f36f 0341 	bfc	r3, #1, #1
 8000bee:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
            port->Registers.Switches.MEAS_CC2 = 0;
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8000bf8:	f36f 03c3 	bfc	r3, #3, #1
 8000bfc:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
 8000c00:	e020      	b.n	8000c44 <USBPDEnable+0xe6>
        }
        else if (port->CCPin == CC2)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d11b      	bne.n	8000c44 <USBPDEnable+0xe6>
        {
            port->Registers.Switches.TXCC2 = 1;
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000c12:	f043 0302 	orr.w	r3, r3, #2
 8000c16:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
            port->Registers.Switches.MEAS_CC2 = 1;
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8000c20:	f043 0308 	orr.w	r3, r3, #8
 8000c24:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

            port->Registers.Switches.TXCC1 = 0;
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000c2e:	f36f 0300 	bfc	r3, #0, #1
 8000c32:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
            port->Registers.Switches.MEAS_CC1 = 0;
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8000c3c:	f36f 0382 	bfc	r3, #2, #1
 8000c40:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
        }

        if (port->CCPin != CCNone)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f000 80ac 	beq.w	8000da8 <USBPDEnable+0x24a>
        {
            port->USBPDActive = TRUE;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2201      	movs	r2, #1
 8000c54:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

            port->PolicyIsSource = (TypeCDFP == SOURCE) ? TRUE : FALSE;
 8000c58:	78bb      	ldrb	r3, [r7, #2]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	bf0c      	ite	eq
 8000c5e:	2301      	moveq	r3, #1
 8000c60:	2300      	movne	r3, #0
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	461a      	mov	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
            port->PolicyIsDFP = (TypeCDFP == SOURCE) ? TRUE : FALSE;
 8000c6c:	78bb      	ldrb	r3, [r7, #2]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	bf0c      	ite	eq
 8000c72:	2301      	moveq	r3, #1
 8000c74:	2300      	movne	r3, #0
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	461a      	mov	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            port->IsVCONNSource = (TypeCDFP == SOURCE) ? TRUE : FALSE;
 8000c80:	78bb      	ldrb	r3, [r7, #2]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	bf0c      	ite	eq
 8000c86:	2301      	moveq	r3, #1
 8000c88:	2300      	movne	r3, #0
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

            if (port->PolicyIsSource)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d020      	beq.n	8000ce0 <USBPDEnable+0x182>
            {
                SetPEState(port, peSourceStartup);
 8000c9e:	2106      	movs	r1, #6
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f004 fa79 	bl	8005198 <SetPEState>
                port->Registers.Switches.POWERROLE = 1;
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb0:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                port->Registers.Switches.DATAROLE = 1;
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000cba:	f043 0310 	orr.w	r3, r3, #16
 8000cbe:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                port->Registers.Control.ENSOP1 = SOP_P_Capable;
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000cc8:	f36f 0300 	bfc	r3, #0, #1
 8000ccc:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                port->Registers.Control.ENSOP2 = SOP_PP_Capable;
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000cd6:	f36f 0341 	bfc	r3, #1, #1
 8000cda:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
 8000cde:	e033      	b.n	8000d48 <USBPDEnable+0x1ea>
            }
            else
            {
                SetPEState(port, peSinkStartup);
 8000ce0:	211e      	movs	r1, #30
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f004 fa58 	bl	8005198 <SetPEState>
                TimerDisable(&port->PolicyStateTimer);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f006 f8f9 	bl	8006ee6 <TimerDisable>
                port->Registers.Switches.POWERROLE = 0;
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000cfa:	f36f 13c7 	bfc	r3, #7, #1
 8000cfe:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                port->Registers.Switches.DATAROLE = 0;
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000d08:	f36f 1304 	bfc	r3, #4, #1
 8000d0c:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b

                port->Registers.Control.ENSOP1 = 0;
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000d16:	f36f 0300 	bfc	r3, #0, #1
 8000d1a:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                port->Registers.Control.ENSOP1DP = 0;
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000d24:	f36f 1345 	bfc	r3, #5, #1
 8000d28:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                port->Registers.Control.ENSOP2 = 0;
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000d32:	f36f 0341 	bfc	r3, #1, #1
 8000d36:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                port->Registers.Control.ENSOP2DB = 0;
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000d40:	f36f 1386 	bfc	r3, #6, #1
 8000d44:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
            }

            port->Registers.Switches.AUTO_CRC = 1;
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
            port->Registers.Control.AUTO_PRE = 0;
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8000d5c:	f36f 0341 	bfc	r3, #1, #1
 8000d60:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
            port->Registers.Control.AUTO_RETRY = 1;
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33

            DeviceWrite(port->I2cAddr, regControl0, 4, 
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3330      	adds	r3, #48	; 0x30
 8000d7c:	2204      	movs	r2, #4
 8000d7e:	2106      	movs	r1, #6
 8000d80:	f006 f85c 	bl	8006e3c <DeviceWrite>
                    &port->Registers.Control.byte[0]);

            if (DeviceUpdate)
 8000d84:	78fb      	ldrb	r3, [r7, #3]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d008      	beq.n	8000d9c <USBPDEnable+0x23e>
            {
                DeviceWrite(port->I2cAddr, regSwitches1, 1,
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	332b      	adds	r3, #43	; 0x2b
 8000d94:	2201      	movs	r2, #1
 8000d96:	2103      	movs	r1, #3
 8000d98:	f006 f850 	bl	8006e3c <DeviceWrite>
                            &port->Registers.Switches.byte[1]);
            }

            TimerDisable(&port->SwapSourceStartTimer);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8000da2:	4618      	mov	r0, r3
 8000da4:	f006 f89f 	bl	8006ee6 <TimerDisable>
            /* Store the PD attach token in the log */
            StoreUSBPDToken(port, TRUE, pdtAttach);
#endif /* FSC_DEBUG */
        }

        port->PEIdle = FALSE;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        port->cblPresent = FALSE;
        port->cblRstState = CBL_RST_DISABLED;
#endif /* FSC_HAVE_VDM */
    }
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <USBPDDisable>:

void USBPDDisable(Port_t *port, FSC_BOOL DeviceUpdate)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	70fb      	strb	r3, [r7, #3]
    if (port->Registers.Control.BIST_MODE2 != 0)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000dca:	f003 0310 	and.w	r3, r3, #16
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d00f      	beq.n	8000df4 <USBPDDisable+0x3c>
    {
        port->Registers.Control.BIST_MODE2 = 0;
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000dda:	f36f 1304 	bfc	r3, #4, #1
 8000dde:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
        DeviceWrite(port->I2cAddr, regControl1, 1,
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3331      	adds	r3, #49	; 0x31
 8000dec:	2201      	movs	r2, #1
 8000dee:	2107      	movs	r1, #7
 8000df0:	f006 f824 	bl	8006e3c <DeviceWrite>
                    &port->Registers.Control.byte[1]);
    }

    port->IsHardReset = FALSE;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
    port->IsPRSwap = FALSE;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    port->PEIdle = TRUE;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2201      	movs	r2, #1
 8000e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Set the source caps updated flag to trigger an update of the GUI */
    port->SourceCapsUpdated = TRUE;
#endif /* FSC_DEBUG */

    port->PdRevSop = port->PortConfig.PdRevPreferred;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    port->PdRevCable = port->PortConfig.PdRevPreferred;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
    port->USBPDActive = FALSE;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    port->ProtocolState = PRLDisabled;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    SetPEState(port, peDisabled);
 8000e34:	2100      	movs	r1, #0
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f004 f9ae 	bl	8005198 <SetPEState>
    port->PolicyIsSource = FALSE;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    port->PolicyHasContract = FALSE;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    port->DetachThreshold = VBUS_MV_VSAFE5V_DISC;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f640 6256 	movw	r2, #3670	; 0xe56
 8000e52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    notify_observers(BIST_DISABLED, port->I2cAddr, 0);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e64:	f006 fbee 	bl	8007644 <notify_observers>
    notify_observers(PD_NO_CONTRACT, port->I2cAddr, 0);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e6e:	2200      	movs	r2, #0
 8000e70:	4619      	mov	r1, r3
 8000e72:	2010      	movs	r0, #16
 8000e74:	f006 fbe6 	bl	8007644 <notify_observers>

    if (DeviceUpdate)
 8000e78:	78fb      	ldrb	r3, [r7, #3]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d01d      	beq.n	8000eba <USBPDDisable+0x102>
    {
        /* Disable the BMC transmitter (both CC1 & CC2) */
        port->Registers.Switches.TXCC1 = 0;
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000e84:	f36f 0300 	bfc	r3, #0, #1
 8000e88:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        port->Registers.Switches.TXCC2 = 0;
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000e92:	f36f 0341 	bfc	r3, #1, #1
 8000e96:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b

        /* Turn off Auto CRC */
        port->Registers.Switches.AUTO_CRC = 0;
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000ea0:	f36f 0382 	bfc	r3, #2, #1
 8000ea4:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        DeviceWrite(port->I2cAddr, regSwitches1, 1,
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	332b      	adds	r3, #43	; 0x2b
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2103      	movs	r1, #3
 8000eb6:	f005 ffc1 	bl	8006e3c <DeviceWrite>
                    &port->Registers.Switches.byte[1]);
    }

    /* Disable the internal oscillator for USB PD */
    port->Registers.Power.POWER = 0x7;
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8000ec0:	2107      	movs	r1, #7
 8000ec2:	f361 0303 	bfi	r3, r1, #0, #4
 8000ec6:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
    DeviceWrite(port->I2cAddr, regPower, 1, &port->Registers.Power.byte);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3335      	adds	r3, #53	; 0x35
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	210b      	movs	r1, #11
 8000ed8:	f005 ffb0 	bl	8006e3c <DeviceWrite>
    ProtocolFlushRxFIFO(port);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f004 f817 	bl	8004f10 <ProtocolFlushRxFIFO>
    ProtocolFlushTxFIFO(port);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f004 f82c 	bl	8004f40 <ProtocolFlushTxFIFO>

    /* Mask PD Interrupts */
    port->Registers.Mask.M_COLLISION = 1;
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8000eee:	f043 0302 	orr.w	r3, r3, #2
 8000ef2:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    DeviceWrite(port->I2cAddr, regMask, 1, &port->Registers.Mask.byte);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3334      	adds	r3, #52	; 0x34
 8000f00:	2201      	movs	r2, #1
 8000f02:	210a      	movs	r1, #10
 8000f04:	f005 ff9a 	bl	8006e3c <DeviceWrite>
    port->Registers.MaskAdv.M_RETRYFAIL = 1;
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000f0e:	f043 0310 	orr.w	r3, r3, #16
 8000f12:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
    port->Registers.MaskAdv.M_TXSENT = 1;
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
    port->Registers.MaskAdv.M_HARDRST = 1;
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
    DeviceWrite(port->I2cAddr, regMaska, 1, &port->Registers.MaskAdv.byte[0]);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3338      	adds	r3, #56	; 0x38
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	210e      	movs	r1, #14
 8000f40:	f005 ff7c 	bl	8006e3c <DeviceWrite>
    port->Registers.MaskAdv.M_GCRCSENT = 1;
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
    DeviceWrite(port->I2cAddr, regMaskb, 1, &port->Registers.MaskAdv.byte[1]);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3339      	adds	r3, #57	; 0x39
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	210f      	movs	r1, #15
 8000f60:	f005 ff6c 	bl	8006e3c <DeviceWrite>

    /* Force VBUS check */
    port->Registers.Status.I_COMP_CHNG = 1;
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 8000f6a:	f043 0320 	orr.w	r3, r3, #32
 8000f6e:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <USBPDPolicyEngine>:

/* USB PD Policy Engine Routines */
void USBPDPolicyEngine(Port_t *port)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    switch (port->PolicyState)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8000f8a:	2b7b      	cmp	r3, #123	; 0x7b
 8000f8c:	f200 819c 	bhi.w	80012c8 <USBPDPolicyEngine+0x34c>
 8000f90:	a201      	add	r2, pc, #4	; (adr r2, 8000f98 <USBPDPolicyEngine+0x1c>)
 8000f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f96:	bf00      	nop
 8000f98:	080012d1 	.word	0x080012d1
 8000f9c:	08001189 	.word	0x08001189
 8000fa0:	080012c9 	.word	0x080012c9
 8000fa4:	08001191 	.word	0x08001191
 8000fa8:	080011a1 	.word	0x080011a1
 8000fac:	08001199 	.word	0x08001199
 8000fb0:	080011b1 	.word	0x080011b1
 8000fb4:	080011c1 	.word	0x080011c1
 8000fb8:	080011b9 	.word	0x080011b9
 8000fbc:	080011c9 	.word	0x080011c9
 8000fc0:	080011d1 	.word	0x080011d1
 8000fc4:	080011d9 	.word	0x080011d9
 8000fc8:	080011e1 	.word	0x080011e1
 8000fcc:	080011e9 	.word	0x080011e9
 8000fd0:	080011f1 	.word	0x080011f1
 8000fd4:	080011f9 	.word	0x080011f9
 8000fd8:	08001201 	.word	0x08001201
 8000fdc:	08001209 	.word	0x08001209
 8000fe0:	08001211 	.word	0x08001211
 8000fe4:	08001219 	.word	0x08001219
 8000fe8:	08001221 	.word	0x08001221
 8000fec:	08001229 	.word	0x08001229
 8000ff0:	08001231 	.word	0x08001231
 8000ff4:	08001239 	.word	0x08001239
 8000ff8:	08001261 	.word	0x08001261
 8000ffc:	080012c9 	.word	0x080012c9
 8001000:	080012c9 	.word	0x080012c9
 8001004:	080012c9 	.word	0x080012c9
 8001008:	080012c9 	.word	0x080012c9
 800100c:	080012c9 	.word	0x080012c9
 8001010:	080012c9 	.word	0x080012c9
 8001014:	080012c9 	.word	0x080012c9
 8001018:	080012c9 	.word	0x080012c9
 800101c:	080012c9 	.word	0x080012c9
 8001020:	080012c9 	.word	0x080012c9
 8001024:	080012c9 	.word	0x080012c9
 8001028:	080012c9 	.word	0x080012c9
 800102c:	080012c9 	.word	0x080012c9
 8001030:	080012c9 	.word	0x080012c9
 8001034:	080012c9 	.word	0x080012c9
 8001038:	080012c9 	.word	0x080012c9
 800103c:	080012c9 	.word	0x080012c9
 8001040:	080012c9 	.word	0x080012c9
 8001044:	080012c9 	.word	0x080012c9
 8001048:	08001241 	.word	0x08001241
 800104c:	08001249 	.word	0x08001249
 8001050:	080012c9 	.word	0x080012c9
 8001054:	080012c9 	.word	0x080012c9
 8001058:	08001251 	.word	0x08001251
 800105c:	08001259 	.word	0x08001259
 8001060:	080012c9 	.word	0x080012c9
 8001064:	080012c9 	.word	0x080012c9
 8001068:	08001279 	.word	0x08001279
 800106c:	08001271 	.word	0x08001271
 8001070:	08001269 	.word	0x08001269
 8001074:	08001291 	.word	0x08001291
 8001078:	08001289 	.word	0x08001289
 800107c:	08001281 	.word	0x08001281
 8001080:	080012c9 	.word	0x080012c9
 8001084:	080012c9 	.word	0x080012c9
 8001088:	080012c9 	.word	0x080012c9
 800108c:	080012c9 	.word	0x080012c9
 8001090:	080012c9 	.word	0x080012c9
 8001094:	080012c9 	.word	0x080012c9
 8001098:	080012c9 	.word	0x080012c9
 800109c:	080012c9 	.word	0x080012c9
 80010a0:	080012c9 	.word	0x080012c9
 80010a4:	080012c9 	.word	0x080012c9
 80010a8:	080012c9 	.word	0x080012c9
 80010ac:	080012c9 	.word	0x080012c9
 80010b0:	080012c9 	.word	0x080012c9
 80010b4:	080012c9 	.word	0x080012c9
 80010b8:	080012c9 	.word	0x080012c9
 80010bc:	080012c9 	.word	0x080012c9
 80010c0:	080012c9 	.word	0x080012c9
 80010c4:	080012c9 	.word	0x080012c9
 80010c8:	080012c9 	.word	0x080012c9
 80010cc:	080012c9 	.word	0x080012c9
 80010d0:	080012c9 	.word	0x080012c9
 80010d4:	080012c9 	.word	0x080012c9
 80010d8:	080012c9 	.word	0x080012c9
 80010dc:	080012c9 	.word	0x080012c9
 80010e0:	080012c9 	.word	0x080012c9
 80010e4:	080012c9 	.word	0x080012c9
 80010e8:	080012c9 	.word	0x080012c9
 80010ec:	080012c9 	.word	0x080012c9
 80010f0:	080012c9 	.word	0x080012c9
 80010f4:	080012c9 	.word	0x080012c9
 80010f8:	080012c9 	.word	0x080012c9
 80010fc:	080012c9 	.word	0x080012c9
 8001100:	080012c9 	.word	0x080012c9
 8001104:	080012c9 	.word	0x080012c9
 8001108:	080012c9 	.word	0x080012c9
 800110c:	080012c9 	.word	0x080012c9
 8001110:	080012c9 	.word	0x080012c9
 8001114:	080012c9 	.word	0x080012c9
 8001118:	080012c9 	.word	0x080012c9
 800111c:	080012c9 	.word	0x080012c9
 8001120:	080012c9 	.word	0x080012c9
 8001124:	080012c9 	.word	0x080012c9
 8001128:	080012c9 	.word	0x080012c9
 800112c:	080012c9 	.word	0x080012c9
 8001130:	080012c9 	.word	0x080012c9
 8001134:	080012c9 	.word	0x080012c9
 8001138:	080012c9 	.word	0x080012c9
 800113c:	080012c9 	.word	0x080012c9
 8001140:	080012c9 	.word	0x080012c9
 8001144:	080012c9 	.word	0x080012c9
 8001148:	080012c9 	.word	0x080012c9
 800114c:	080012c9 	.word	0x080012c9
 8001150:	080012c9 	.word	0x080012c9
 8001154:	080012c9 	.word	0x080012c9
 8001158:	080012c9 	.word	0x080012c9
 800115c:	080012c9 	.word	0x080012c9
 8001160:	080012c9 	.word	0x080012c9
 8001164:	08001299 	.word	0x08001299
 8001168:	080012a1 	.word	0x080012a1
 800116c:	080012a9 	.word	0x080012a9
 8001170:	080012b1 	.word	0x080012b1
 8001174:	080012c9 	.word	0x080012c9
 8001178:	080012c9 	.word	0x080012c9
 800117c:	080012c9 	.word	0x080012c9
 8001180:	080012b9 	.word	0x080012b9
 8001184:	080012c1 	.word	0x080012c1
    {
    case peDisabled:
        break;
    case peErrorRecovery:
        PolicyErrorRecovery(port);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 f8a7 	bl	80012dc <PolicyErrorRecovery>
        break;
 800118e:	e0a0      	b.n	80012d2 <USBPDPolicyEngine+0x356>
#if (defined(FSC_HAVE_SRC) || \
     (defined(FSC_HAVE_SNK) && defined(FSC_HAVE_ACCMODE)))
    /* Source States */
    case peSourceSendHardReset:
        PolicySourceSendHardReset(port);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f8ae 	bl	80012f2 <PolicySourceSendHardReset>
        break;
 8001196:	e09c      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceSendSoftReset:
        PolicySourceSendSoftReset(port);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 f8c7 	bl	800132c <PolicySourceSendSoftReset>
        break;
 800119e:	e098      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceSoftReset:
        PolicySourceSoftReset(port, port->ProtocolMsgRxSop);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 80011a6:	4619      	mov	r1, r3
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 f8ad 	bl	8001308 <PolicySourceSoftReset>
        break;
 80011ae:	e090      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceStartup:
        PolicySourceStartup(port);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 f91b 	bl	80013ec <PolicySourceStartup>
        break;
 80011b6:	e08c      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceDiscovery:
        PolicySourceDiscovery(port);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 fa7b 	bl	80016b4 <PolicySourceDiscovery>
        break;
 80011be:	e088      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceSendCaps:
        PolicySourceSendCaps(port);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 faed 	bl	80017a0 <PolicySourceSendCaps>
        break;
 80011c6:	e084      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceDisabled:
        PolicySourceDisabled(port);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 fb76 	bl	80018ba <PolicySourceDisabled>
        break;
 80011ce:	e080      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceTransitionDefault:
        PolicySourceTransitionDefault(port);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 fba1 	bl	8001918 <PolicySourceTransitionDefault>
        break;
 80011d6:	e07c      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceNegotiateCap:
        PolicySourceNegotiateCap(port);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 fd07 	bl	8001bec <PolicySourceNegotiateCap>
        break;
 80011de:	e078      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceCapabilityResponse:
        PolicySourceCapabilityResponse(port);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 fec9 	bl	8001f78 <PolicySourceCapabilityResponse>
        break;
 80011e6:	e074      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceWaitNewCapabilities:
        PolicySourceWaitNewCapabilities(port);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f001 fe0a 	bl	8002e02 <PolicySourceWaitNewCapabilities>
        break;
 80011ee:	e070      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceTransitionSupply:
        PolicySourceTransitionSupply(port);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 fda7 	bl	8001d44 <PolicySourceTransitionSupply>
        break;
 80011f6:	e06c      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceReady:
        PolicySourceReady(port);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 fee9 	bl	8001fd0 <PolicySourceReady>
        break;
 80011fe:	e068      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceGiveSourceCaps:
        PolicySourceGiveSourceCap(port);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f001 f88f 	bl	8002324 <PolicySourceGiveSourceCap>
        break;
 8001206:	e064      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceGetSinkCaps:
        PolicySourceGetSinkCap(port);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f001 f92d 	bl	8002468 <PolicySourceGetSinkCap>
        break;
 800120e:	e060      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceSendPing:
        PolicySourceSendPing(port);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f001 f991 	bl	8002538 <PolicySourceSendPing>
        break;
 8001216:	e05c      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceGotoMin:
        PolicySourceGotoMin(port);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f001 f99d 	bl	8002558 <PolicySourceGotoMin>
        break;
 800121e:	e058      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceGiveSinkCaps:
        PolicySourceGiveSinkCap(port);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f001 f97d 	bl	8002520 <PolicySourceGiveSinkCap>
        break;
 8001226:	e054      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceGetSourceCaps:
        PolicySourceGetSourceCap(port);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f001 f8a3 	bl	8002374 <PolicySourceGetSourceCap>
        break;
 800122e:	e050      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceSendDRSwap:
        PolicySourceSendDRSwap(port);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f001 fa19 	bl	8002668 <PolicySourceSendDRSwap>
        break;
 8001236:	e04c      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceEvaluateDRSwap:
        PolicySourceEvaluateDRSwap(port);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f001 fac9 	bl	80027d0 <PolicySourceEvaluateDRSwap>
        break;
 800123e:	e048      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceSendVCONNSwap:
        PolicySourceSendVCONNSwap(port);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f001 fb2d 	bl	80028a0 <PolicySourceSendVCONNSwap>
        break;
 8001246:	e044      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceEvaluateVCONNSwap:
        PolicySourceEvaluateVCONNSwap(port);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f001 fc95 	bl	8002b78 <PolicySourceEvaluateVCONNSwap>
        break;
 800124e:	e040      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceSendPRSwap:
        PolicySourceSendPRSwap(port);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f001 fdbb 	bl	8002dcc <PolicySourceSendPRSwap>
        break;
 8001256:	e03c      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceEvaluatePRSwap:
        PolicySourceEvaluatePRSwap(port);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f001 fdc0 	bl	8002dde <PolicySourceEvaluatePRSwap>
        break;
 800125e:	e038      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSourceAlertReceived:
        PolicySourceAlertReceived(port);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f001 fe1a 	bl	8002e9a <PolicySourceAlertReceived>
        break;
 8001266:	e034      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSinkAlertReceived:
        PolicySinkAlertReceived(port);
        break;
#endif /* FSC_HAVE_SNK */
    case peNotSupported:
        PolicyNotSupported(port);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f001 fe54 	bl	8002f16 <PolicyNotSupported>
        break;
 800126e:	e030      	b.n	80012d2 <USBPDPolicyEngine+0x356>
        PolicyGiveVdm(port);
        break;
#endif /* FSC_HAVE_VDM */
#ifdef FSC_HAVE_EXT_MSG
    case peGiveCountryCodes:
        PolicyGiveCountryCodes(port);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f002 fae5 	bl	8003840 <PolicyGiveCountryCodes>
        break;
 8001276:	e02c      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peGetCountryCodes:
        PolicyGetCountryCodes(port);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f002 fb0b 	bl	8003894 <PolicyGetCountryCodes>
        break;
 800127e:	e028      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peGiveCountryInfo:
        PolicyGiveCountryInfo(port);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f002 fb1e 	bl	80038c2 <PolicyGiveCountryInfo>
        break;
 8001286:	e024      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peGivePPSStatus:
        PolicyGivePPSStatus(port);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f002 fbbf 	bl	8003a0c <PolicyGivePPSStatus>
        break;
 800128e:	e020      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peGetPPSStatus:
        PolicyGetPPSStatus(port);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f002 fb4a 	bl	800392a <PolicyGetPPSStatus>
        break;
 8001296:	e01c      	b.n	80012d2 <USBPDPolicyEngine+0x356>
#endif /* FSC_HAVE_EXT_MSG */
    case PE_BIST_Receive_Mode:
        policyBISTReceiveMode(port);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f002 fbfb 	bl	8003a94 <policyBISTReceiveMode>
        break;
 800129e:	e018      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case PE_BIST_Frame_Received:
        policyBISTFrameReceived(port);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f002 fc00 	bl	8003aa6 <policyBISTFrameReceived>
        break;
 80012a6:	e014      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case PE_BIST_Carrier_Mode_2:
        policyBISTCarrierMode2(port);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f002 fc05 	bl	8003ab8 <policyBISTCarrierMode2>
        break;
 80012ae:	e010      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case PE_BIST_Test_Data:
        policyBISTTestData(port);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f002 fc8e 	bl	8003bd2 <policyBISTTestData>
        break;
 80012b6:	e00c      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSendGenericCommand:
        PolicySendGenericCommand(port);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f001 fe73 	bl	8002fa4 <PolicySendGenericCommand>
        break;
 80012be:	e008      	b.n	80012d2 <USBPDPolicyEngine+0x356>
    case peSendGenericData:
        PolicySendGenericData(port);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f001 feda 	bl	800307a <PolicySendGenericData>
        break;
 80012c6:	e004      	b.n	80012d2 <USBPDPolicyEngine+0x356>
        }
        else
#endif /* FSC_HAVE_VDM */
        {
            /* Invalid state, reset */
            PolicyInvalidState(port);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f001 fe55 	bl	8002f78 <PolicyInvalidState>
        }
        break;
 80012ce:	e000      	b.n	80012d2 <USBPDPolicyEngine+0x356>
        break;
 80012d0:	bf00      	nop
    }
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop

080012dc <PolicyErrorRecovery>:

void PolicyErrorRecovery(Port_t *port)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
    SetStateErrorRecovery(port);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f004 fd36 	bl	8005d56 <SetStateErrorRecovery>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <PolicySourceSendHardReset>:
#endif /* FSC_HAVE_VDM */

#if (defined(FSC_HAVE_SRC) || \
     (defined(FSC_HAVE_SNK) && defined(FSC_HAVE_ACCMODE)))
void PolicySourceSendHardReset(Port_t *port)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
    PolicySendHardReset(port);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f001 ff3a 	bl	8003174 <PolicySendHardReset>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <PolicySourceSoftReset>:

void PolicySourceSoftReset(Port_t *port, SopType sop)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af02      	add	r7, sp, #8
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	70fb      	strb	r3, [r7, #3]
    if (PolicySendCommand(port, CMTAccept, peSourceSendCaps, 0,
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2300      	movs	r3, #0
 800131a:	2207      	movs	r2, #7
 800131c:	2103      	movs	r1, #3
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f001 ff52 	bl	80031c8 <PolicySendCommand>
    {
#ifdef FSC_HAVE_VDM
        port->discoverIdCounter = 0;
#endif /* FSC_HAVE_VDM */
    }
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <PolicySourceSendSoftReset>:

void PolicySourceSendSoftReset(Port_t *port)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af02      	add	r7, sp, #8
 8001332:	6078      	str	r0, [r7, #4]
    switch (port->PolicySubIndex)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800133a:	2b00      	cmp	r3, #0
 800133c:	d11b      	bne.n	8001376 <PolicySourceSendSoftReset+0x4a>
    {
    case 0:
        if (PolicySendCommand(port, CMTSoftReset, peSourceSendSoftReset, 1,
 800133e:	2300      	movs	r3, #0
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2301      	movs	r3, #1
 8001344:	2205      	movs	r2, #5
 8001346:	210d      	movs	r1, #13
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f001 ff3d 	bl	80031c8 <PolicySendCommand>
 800134e:	4603      	mov	r3, r0
 8001350:	2b01      	cmp	r3, #1
 8001352:	d146      	bne.n	80013e2 <PolicySourceSendSoftReset+0xb6>
                              SOP_TYPE_SOP) == STAT_SUCCESS)
        {
            TimerStart(&port->PolicyStateTimer, tSenderResponse);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800135a:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 800135e:	4618      	mov	r0, r3
 8001360:	f005 fda6 	bl	8006eb0 <TimerStart>
            port->WaitingOnHR = TRUE;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
            port->PEIdle = TRUE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        break;
 8001374:	e035      	b.n	80013e2 <PolicySourceSendSoftReset+0xb6>
    default:
        if (port->ProtocolMsgRx)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d01d      	beq.n	80013bc <PolicySourceSendSoftReset+0x90>
        {
            port->ProtocolMsgRx = FALSE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
            if ((port->PolicyRxHeader.NumDataObjects == 0) &&
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800138e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d10c      	bne.n	80013b2 <PolicySourceSendSoftReset+0x86>
                (port->PolicyRxHeader.MessageType == CMTAccept))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800139e:	f003 031f 	and.w	r3, r3, #31
 80013a2:	b2db      	uxtb	r3, r3
            if ((port->PolicyRxHeader.NumDataObjects == 0) &&
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d104      	bne.n	80013b2 <PolicySourceSendSoftReset+0x86>
            {
#ifdef FSC_HAVE_VDM
                port->discoverIdCounter = 0;
#endif /* FSC_HAVE_VDM */
                SetPEState(port, peSourceDiscovery);
 80013a8:	2108      	movs	r1, #8
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f003 fef4 	bl	8005198 <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 80013b0:	e018      	b.n	80013e4 <PolicySourceSendSoftReset+0xb8>
                SetPEState(port, peSourceSendHardReset);
 80013b2:	2103      	movs	r1, #3
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f003 feef 	bl	8005198 <SetPEState>
        break;
 80013ba:	e013      	b.n	80013e4 <PolicySourceSendSoftReset+0xb8>
        else if (TimerExpired(&port->PolicyStateTimer))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80013c2:	4618      	mov	r0, r3
 80013c4:	f005 fdaf 	bl	8006f26 <TimerExpired>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d004      	beq.n	80013d8 <PolicySourceSendSoftReset+0xac>
            SetPEState(port, peSourceSendHardReset);
 80013ce:	2103      	movs	r1, #3
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f003 fee1 	bl	8005198 <SetPEState>
        break;
 80013d6:	e005      	b.n	80013e4 <PolicySourceSendSoftReset+0xb8>
            port->PEIdle = TRUE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 80013e0:	e000      	b.n	80013e4 <PolicySourceSendSoftReset+0xb8>
        break;
 80013e2:	bf00      	nop
    }
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <PolicySourceStartup>:

void PolicySourceStartup(Port_t *port)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
#ifdef FSC_HAVE_VDM
    FSC_S32 i;
#endif /* FSC_HAVE_VDM */

    switch (port->PolicySubIndex)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	f000 8132 	beq.w	8001664 <PolicySourceStartup+0x278>
 8001400:	2b02      	cmp	r3, #2
 8001402:	f300 814e 	bgt.w	80016a2 <PolicySourceStartup+0x2b6>
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <PolicySourceStartup+0x26>
 800140a:	2b01      	cmp	r3, #1
 800140c:	f000 80ed 	beq.w	80015ea <PolicySourceStartup+0x1fe>
 8001410:	e147      	b.n	80016a2 <PolicySourceStartup+0x2b6>
    {
    case 0:
        /* Set masks for PD */
#ifdef FSC_GSCE_FIX
        port->Registers.Mask.M_CRC_CHK = 0;     /* Added for GSCE workaround */
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8001418:	f36f 1304 	bfc	r3, #4, #1
 800141c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
#endif /* FSC_GSCE_FIX */
        port->Registers.Mask.M_COLLISION = 0;
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8001426:	f36f 0341 	bfc	r3, #1, #1
 800142a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        DeviceWrite(port->I2cAddr, regMask, 1, &port->Registers.Mask.byte);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3334      	adds	r3, #52	; 0x34
 8001438:	2201      	movs	r2, #1
 800143a:	210a      	movs	r1, #10
 800143c:	f005 fcfe 	bl	8006e3c <DeviceWrite>
        port->Registers.MaskAdv.M_RETRYFAIL = 0;
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001446:	f36f 1304 	bfc	r3, #4, #1
 800144a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
        port->Registers.MaskAdv.M_HARDSENT = 0;
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001454:	f36f 03c3 	bfc	r3, #3, #1
 8001458:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
        port->Registers.MaskAdv.M_TXSENT = 0;
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001462:	f36f 0382 	bfc	r3, #2, #1
 8001466:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
        port->Registers.MaskAdv.M_HARDRST = 0;
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001470:	f36f 0300 	bfc	r3, #0, #1
 8001474:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
        DeviceWrite(port->I2cAddr, regMaska, 1,
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3338      	adds	r3, #56	; 0x38
 8001482:	2201      	movs	r2, #1
 8001484:	210e      	movs	r1, #14
 8001486:	f005 fcd9 	bl	8006e3c <DeviceWrite>
                    &port->Registers.MaskAdv.byte[0]);
        port->Registers.MaskAdv.M_GCRCSENT = 0;
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8001490:	f36f 0300 	bfc	r3, #0, #1
 8001494:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        DeviceWrite(port->I2cAddr, regMaskb, 1,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3339      	adds	r3, #57	; 0x39
 80014a2:	2201      	movs	r2, #1
 80014a4:	210f      	movs	r1, #15
 80014a6:	f005 fcc9 	bl	8006e3c <DeviceWrite>
                    &port->Registers.MaskAdv.byte[1]);

        if (port->Registers.DeviceID.VERSION_ID == VERSION_302A)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014b0:	f023 030f 	bic.w	r3, r3, #15
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b80      	cmp	r3, #128	; 0x80
 80014b8:	d118      	bne.n	80014ec <PolicySourceStartup+0x100>
        {
            /* Disable Rx flushing if it has been enabled */
            if (port->Registers.Control.RX_FLUSH == 1)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d028      	beq.n	800151c <PolicySourceStartup+0x130>
            {
                port->Registers.Control.RX_FLUSH = 0;
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 80014d0:	f36f 0382 	bfc	r3, #2, #1
 80014d4:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                DeviceWrite(port->I2cAddr, regControl1, 1,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3331      	adds	r3, #49	; 0x31
 80014e2:	2201      	movs	r2, #1
 80014e4:	2107      	movs	r1, #7
 80014e6:	f005 fca9 	bl	8006e3c <DeviceWrite>
 80014ea:	e017      	b.n	800151c <PolicySourceStartup+0x130>
            }
        }
        else
        {
            /* Disable auto-flush RxFIFO */
            if (port->Registers.Control.BIST_TMODE == 1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80014f2:	f003 0320 	and.w	r3, r3, #32
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00f      	beq.n	800151c <PolicySourceStartup+0x130>
            {
                port->Registers.Control.BIST_TMODE = 0;
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8001502:	f36f 1345 	bfc	r3, #5, #1
 8001506:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                DeviceWrite(port->I2cAddr, regControl3, 1,
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3333      	adds	r3, #51	; 0x33
 8001514:	2201      	movs	r2, #1
 8001516:	2109      	movs	r1, #9
 8001518:	f005 fc90 	bl	8006e3c <DeviceWrite>
                            &port->Registers.Control.byte[3]);
            }
        }

        port->USBPDContract.object = 0;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
        port->PartnerCaps.object = 0;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
        port->IsPRSwap = FALSE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        port->WaitSent = FALSE;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        port->IsHardReset = FALSE;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
        port->PolicyIsSource = TRUE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
        port->PpsEnabled = FALSE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6

        port->Registers.Switches.POWERROLE = port->PolicyIsSource;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	b2d9      	uxtb	r1, r3
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8001566:	f361 13c7 	bfi	r3, r1, #7, #1
 800156a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        DeviceWrite(port->I2cAddr, regSwitches1, 1,
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	332b      	adds	r3, #43	; 0x2b
 8001578:	2201      	movs	r2, #1
 800157a:	2103      	movs	r1, #3
 800157c:	f005 fc5e 	bl	8006e3c <DeviceWrite>
                    &port->Registers.Switches.byte[1]);

        ResetProtocolLayer(port, FALSE);
 8001580:	2100      	movs	r1, #0
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f003 fcf4 	bl	8004f70 <ResetProtocolLayer>
        port->Registers.Switches.AUTO_CRC = 1;
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 800158e:	f043 0304 	orr.w	r3, r3, #4
 8001592:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        DeviceWrite(port->I2cAddr, regSwitches1, 1,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	332b      	adds	r3, #43	; 0x2b
 80015a0:	2201      	movs	r2, #1
 80015a2:	2103      	movs	r1, #3
 80015a4:	f005 fc4a 	bl	8006e3c <DeviceWrite>
                    &port->Registers.Switches.byte[1]);

        port->Registers.Power.POWER = 0xF;
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80015ae:	f043 030f 	orr.w	r3, r3, #15
 80015b2:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
        DeviceWrite(port->I2cAddr, regPower, 1, &port->Registers.Power.byte);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3335      	adds	r3, #53	; 0x35
 80015c0:	2201      	movs	r2, #1
 80015c2:	210b      	movs	r1, #11
 80015c4:	f005 fc3a 	bl	8006e3c <DeviceWrite>

        port->CapsCounter = 0;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        port->CollisionCounter = 0;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
        port->PolicySubIndex++;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80015de:	3301      	adds	r3, #1
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        break;
 80015e8:	e060      	b.n	80016ac <PolicySourceStartup+0x2c0>
    case 1:
        /* Wait until we reach vSafe5V and delay if coming from PR Swap */
        if ((isVBUSOverVoltage(port, VBUS_MV_VSAFE5V_L) ||
 80015ea:	f241 218e 	movw	r1, #4750	; 0x128e
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f004 ff86 	bl	8006500 <isVBUSOverVoltage>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d104      	bne.n	8001604 <PolicySourceStartup+0x218>
            (port->ConnState == PoweredAccessory)) &&
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        if ((isVBUSOverVoltage(port, VBUS_MV_VSAFE5V_L) ||
 8001600:	2b0e      	cmp	r3, #14
 8001602:	d122      	bne.n	800164a <PolicySourceStartup+0x25e>
            (TimerExpired(&port->SwapSourceStartTimer) ||
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800160a:	4618      	mov	r0, r3
 800160c:	f005 fc8b 	bl	8006f26 <TimerExpired>
 8001610:	4603      	mov	r3, r0
            (port->ConnState == PoweredAccessory)) &&
 8001612:	2b00      	cmp	r3, #0
 8001614:	d108      	bne.n	8001628 <PolicySourceStartup+0x23c>
             TimerDisabled(&port->SwapSourceStartTimer)))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800161c:	4618      	mov	r0, r3
 800161e:	f005 fc72 	bl	8006f06 <TimerDisabled>
 8001622:	4603      	mov	r3, r0
            (TimerExpired(&port->SwapSourceStartTimer) ||
 8001624:	2b00      	cmp	r3, #0
 8001626:	d010      	beq.n	800164a <PolicySourceStartup+0x25e>
        {
            /* Delay once VBus is present for potential switch delay. */
            TimerStart(&port->PolicyStateTimer, tVBusSwitchDelay);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800162e:	f241 3188 	movw	r1, #5000	; 0x1388
 8001632:	4618      	mov	r0, r3
 8001634:	f005 fc3c 	bl	8006eb0 <TimerStart>

            port->PolicySubIndex++;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800163e:	3301      	adds	r3, #1
 8001640:	b2da      	uxtb	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        else
        {
            TimerStart(&port->VBusPollTimer, tVBusPollShort);
            port->PEIdle = TRUE;
        }
        break;
 8001648:	e030      	b.n	80016ac <PolicySourceStartup+0x2c0>
            TimerStart(&port->VBusPollTimer, tVBusPollShort);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8001650:	f242 7110 	movw	r1, #10000	; 0x2710
 8001654:	4618      	mov	r0, r3
 8001656:	f005 fc2b 	bl	8006eb0 <TimerStart>
            port->PEIdle = TRUE;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8001662:	e023      	b.n	80016ac <PolicySourceStartup+0x2c0>
    case 2:
        if (TimerExpired(&port->PolicyStateTimer))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800166a:	4618      	mov	r0, r3
 800166c:	f005 fc5b 	bl	8006f26 <TimerExpired>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d010      	beq.n	8001698 <PolicySourceStartup+0x2ac>
        {
            TimerDisable(&port->PolicyStateTimer);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800167c:	4618      	mov	r0, r3
 800167e:	f005 fc32 	bl	8006ee6 <TimerDisable>
            TimerDisable(&port->SwapSourceStartTimer);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001688:	4618      	mov	r0, r3
 800168a:	f005 fc2c 	bl	8006ee6 <TimerDisable>
            SetPEState(port, peSourceSendCaps);
 800168e:	2107      	movs	r1, #7
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f003 fd81 	bl	8005198 <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 8001696:	e009      	b.n	80016ac <PolicySourceStartup+0x2c0>
            port->PEIdle = TRUE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 80016a0:	e004      	b.n	80016ac <PolicySourceStartup+0x2c0>
    default:
        port->PolicySubIndex = 0;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        break;
 80016aa:	bf00      	nop
    }
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <PolicySourceDiscovery>:

void PolicySourceDiscovery(Port_t *port)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
    switch (port->PolicySubIndex)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d118      	bne.n	80016f8 <PolicySourceDiscovery+0x44>
    {
    case 0:
        if (TimerDisabled(&port->PolicyStateTimer) == TRUE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80016cc:	4618      	mov	r0, r3
 80016ce:	f005 fc1a 	bl	8006f06 <TimerDisabled>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d106      	bne.n	80016e6 <PolicySourceDiscovery+0x32>
        {
            /* Start timer only when inactive. When waiting for timer send
             * sop' discovery messages */
            TimerStart(&port->PolicyStateTimer, tTypeCSendSourceCap);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80016de:	492f      	ldr	r1, [pc, #188]	; (800179c <PolicySourceDiscovery+0xe8>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f005 fbe5 	bl	8006eb0 <TimerStart>
                port->discoverIdCounter++;
                requestDiscoverIdentity(port, SOP_TYPE_SOP1);
            }
#endif
        }
        port->PolicySubIndex++;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80016ec:	3301      	adds	r3, #1
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        break;
 80016f6:	e04d      	b.n	8001794 <PolicySourceDiscovery+0xe0>
    default:
        if ((port->HardResetCounter > nHardResetCount) &&
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d90f      	bls.n	8001722 <PolicySourceDiscovery+0x6e>
            (port->PolicyHasContract == TRUE))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
        if ((port->HardResetCounter > nHardResetCount) &&
 8001708:	2b01      	cmp	r3, #1
 800170a:	d10a      	bne.n	8001722 <PolicySourceDiscovery+0x6e>
        {
            TimerDisable(&port->PolicyStateTimer);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001712:	4618      	mov	r0, r3
 8001714:	f005 fbe7 	bl	8006ee6 <TimerDisable>
            /* If we previously had a contract in place, go to ErrorRecovery */
            SetPEState(port, peErrorRecovery);
 8001718:	2101      	movs	r1, #1
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f003 fd3c 	bl	8005198 <SetPEState>
 8001720:	e037      	b.n	8001792 <PolicySourceDiscovery+0xde>
        }
        else if ((port->HardResetCounter > nHardResetCount) &&
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001728:	2b02      	cmp	r3, #2
 800172a:	d90f      	bls.n	800174c <PolicySourceDiscovery+0x98>
                 (port->PolicyHasContract == FALSE))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
        else if ((port->HardResetCounter > nHardResetCount) &&
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10a      	bne.n	800174c <PolicySourceDiscovery+0x98>
        {
            TimerDisable(&port->PolicyStateTimer);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800173c:	4618      	mov	r0, r3
 800173e:	f005 fbd2 	bl	8006ee6 <TimerDisable>
            /* Otherwise, disable and wait for detach */
            SetPEState(port, peSourceDisabled);
 8001742:	2109      	movs	r1, #9
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f003 fd27 	bl	8005198 <SetPEState>
 800174a:	e022      	b.n	8001792 <PolicySourceDiscovery+0xde>
        }
        else if (TimerExpired(&port->PolicyStateTimer))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001752:	4618      	mov	r0, r3
 8001754:	f005 fbe7 	bl	8006f26 <TimerExpired>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d014      	beq.n	8001788 <PolicySourceDiscovery+0xd4>
        {
            TimerDisable(&port->PolicyStateTimer);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001764:	4618      	mov	r0, r3
 8001766:	f005 fbbe 	bl	8006ee6 <TimerDisable>
            if (port->CapsCounter > nCapsCount)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8001770:	2b32      	cmp	r3, #50	; 0x32
 8001772:	d904      	bls.n	800177e <PolicySourceDiscovery+0xca>
                SetPEState(port, peSourceDisabled);
 8001774:	2109      	movs	r1, #9
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f003 fd0e 	bl	8005198 <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 800177c:	e009      	b.n	8001792 <PolicySourceDiscovery+0xde>
                SetPEState(port, peSourceSendCaps);
 800177e:	2107      	movs	r1, #7
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f003 fd09 	bl	8005198 <SetPEState>
        break;
 8001786:	e004      	b.n	8001792 <PolicySourceDiscovery+0xde>
            port->PEIdle = TRUE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8001790:	e7ff      	b.n	8001792 <PolicySourceDiscovery+0xde>
 8001792:	bf00      	nop
    }
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	000249f0 	.word	0x000249f0

080017a0 <PolicySourceSendCaps>:

void PolicySourceSendCaps(Port_t *port)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af04      	add	r7, sp, #16
 80017a6:	6078      	str	r0, [r7, #4]
    switch (port->PolicySubIndex)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d139      	bne.n	8001826 <PolicySourceSendCaps+0x86>
    {
    case 0:
        if (PolicySendData(port,
                           DMTSourceCapabilities,
                           DPM_GetSourceCap(port->dpm, port),
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f005 fd3a 	bl	8007232 <DPM_GetSourceCap>
 80017be:	4604      	mov	r4, r0
                           DPM_GetSourceCapHeader(port->dpm, port)->
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f005 fd27 	bl	800721a <DPM_GetSourceCapHeader>
 80017cc:	4603      	mov	r3, r0
 80017ce:	785b      	ldrb	r3, [r3, #1]
 80017d0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80017d4:	b2db      	uxtb	r3, r3
                                NumDataObjects*4,
 80017d6:	009b      	lsls	r3, r3, #2
        if (PolicySendData(port,
 80017d8:	461a      	mov	r2, r3
 80017da:	2300      	movs	r3, #0
 80017dc:	9303      	str	r3, [sp, #12]
 80017de:	2300      	movs	r3, #0
 80017e0:	9302      	str	r3, [sp, #8]
 80017e2:	2301      	movs	r3, #1
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	2307      	movs	r3, #7
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	4613      	mov	r3, r2
 80017ec:	4622      	mov	r2, r4
 80017ee:	2101      	movs	r1, #1
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f001 fe27 	bl	8003444 <PolicySendData>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d159      	bne.n	80018b0 <PolicySourceSendCaps+0x110>
                           peSourceSendCaps, 1,
                           SOP_TYPE_SOP, FALSE) == STAT_SUCCESS)
        {
            port->HardResetCounter = 0;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            port->CapsCounter = 0;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
            TimerStart(&port->PolicyStateTimer, tSenderResponse);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001812:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 8001816:	4618      	mov	r0, r3
 8001818:	f005 fb4a 	bl	8006eb0 <TimerStart>
            port->WaitingOnHR = TRUE;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        }
        break;
 8001824:	e044      	b.n	80018b0 <PolicySourceSendCaps+0x110>
    default:
        if (port->ProtocolMsgRx)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d028      	beq.n	8001882 <PolicySourceSendCaps+0xe2>
        {
            port->ProtocolMsgRx = FALSE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
            if ((port->PolicyRxHeader.NumDataObjects == 1) &&
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800183e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b10      	cmp	r3, #16
 8001846:	d117      	bne.n	8001878 <PolicySourceSendCaps+0xd8>
                (port->PolicyRxHeader.MessageType == DMTRequest))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	b2db      	uxtb	r3, r3
            if ((port->PolicyRxHeader.NumDataObjects == 1) &&
 8001854:	2b02      	cmp	r3, #2
 8001856:	d10f      	bne.n	8001878 <PolicySourceSendCaps+0xd8>
            {
                SetPEState(port, peSourceNegotiateCap);
 8001858:	210b      	movs	r1, #11
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f003 fc9c 	bl	8005198 <SetPEState>

                /* Set the revision to the lowest of the two port partner */
                DPM_SetSpecRev(port, SOP_TYPE_SOP,
                               port->PolicyRxHeader.SpecRevision);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8001866:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800186a:	b2db      	uxtb	r3, r3
                DPM_SetSpecRev(port, SOP_TYPE_SOP,
 800186c:	461a      	mov	r2, r3
 800186e:	2100      	movs	r1, #0
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f005 fe58 	bl	8007526 <DPM_SetSpecRev>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 8001876:	e01c      	b.n	80018b2 <PolicySourceSendCaps+0x112>
                  SetPEState(port, peSourceSendSoftReset);
 8001878:	2105      	movs	r1, #5
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f003 fc8c 	bl	8005198 <SetPEState>
        break;
 8001880:	e017      	b.n	80018b2 <PolicySourceSendCaps+0x112>
        else if (TimerExpired(&port->PolicyStateTimer))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001888:	4618      	mov	r0, r3
 800188a:	f005 fb4c 	bl	8006f26 <TimerExpired>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d008      	beq.n	80018a6 <PolicySourceSendCaps+0x106>
            port->ProtocolMsgRx = FALSE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
            SetPEState(port, peSourceSendHardReset);
 800189c:	2103      	movs	r1, #3
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f003 fc7a 	bl	8005198 <SetPEState>
        break;
 80018a4:	e005      	b.n	80018b2 <PolicySourceSendCaps+0x112>
            port->PEIdle = TRUE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 80018ae:	e000      	b.n	80018b2 <PolicySourceSendCaps+0x112>
        break;
 80018b0:	bf00      	nop
    }
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd90      	pop	{r4, r7, pc}

080018ba <PolicySourceDisabled>:

void PolicySourceDisabled(Port_t *port)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
    /* Clear the USB PD contract (output power to 5V default) */
    port->USBPDContract.object = 0;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

    /* Wait for a hard reset or detach... */
    if(port->loopCounter == 0)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d11c      	bne.n	800190e <PolicySourceDisabled+0x54>
    {
        port->PEIdle = TRUE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if (port->Registers.Power.POWER != 0x7)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b07      	cmp	r3, #7
 80018ea:	d010      	beq.n	800190e <PolicySourceDisabled+0x54>
        {
            port->Registers.Power.POWER = 0x7;
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80018f2:	2107      	movs	r1, #7
 80018f4:	f361 0303 	bfi	r3, r1, #0, #4
 80018f8:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
            DeviceWrite(port->I2cAddr, regPower, 1,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3335      	adds	r3, #53	; 0x35
 8001906:	2201      	movs	r2, #1
 8001908:	210b      	movs	r1, #11
 800190a:	f005 fa97 	bl	8006e3c <DeviceWrite>
                        &port->Registers.Power.byte);
        }
    }
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <PolicySourceTransitionDefault>:

void PolicySourceTransitionDefault(Port_t *port)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
    switch (port->PolicySubIndex)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001926:	2b03      	cmp	r3, #3
 8001928:	f200 8123 	bhi.w	8001b72 <PolicySourceTransitionDefault+0x25a>
 800192c:	a201      	add	r2, pc, #4	; (adr r2, 8001934 <PolicySourceTransitionDefault+0x1c>)
 800192e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001932:	bf00      	nop
 8001934:	08001945 	.word	0x08001945
 8001938:	080019bf 	.word	0x080019bf
 800193c:	08001ab5 	.word	0x08001ab5
 8001940:	08001b45 	.word	0x08001b45
    {
    case 0:
        if (TimerExpired(&port->PolicyStateTimer))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800194a:	4618      	mov	r0, r3
 800194c:	f005 faeb 	bl	8006f26 <TimerExpired>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d02e      	beq.n	80019b4 <PolicySourceTransitionDefault+0x9c>
        {
            port->PolicyHasContract = FALSE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            port->PdRevSop = port->PortConfig.PdRevPreferred;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
            port->PdRevCable = port->PortConfig.PdRevPreferred;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
            port->DetachThreshold = VBUS_MV_VSAFE5V_DISC;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f640 6256 	movw	r2, #3670	; 0xe56
 800197c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

            notify_observers(BIST_DISABLED, port->I2cAddr, 0);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001986:	2200      	movs	r2, #0
 8001988:	4619      	mov	r1, r3
 800198a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800198e:	f005 fe59 	bl	8007644 <notify_observers>
            notify_observers(PD_NO_CONTRACT, port->I2cAddr, 0);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001998:	2200      	movs	r2, #0
 800199a:	4619      	mov	r1, r3
 800199c:	2010      	movs	r0, #16
 800199e:	f005 fe51 	bl	8007644 <notify_observers>

            port->PolicySubIndex++;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80019a8:	3301      	adds	r3, #1
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 80019b2:	e112      	b.n	8001bda <PolicySourceTransitionDefault+0x2c2>
            port->PEIdle = TRUE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 80019bc:	e10d      	b.n	8001bda <PolicySourceTransitionDefault+0x2c2>
    case 1:
        platform_set_vbus_lvl_enable(port->PortID, VBUS_LVL_ALL, FALSE, FALSE);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 80019c4:	2300      	movs	r3, #0
 80019c6:	2200      	movs	r2, #0
 80019c8:	2102      	movs	r1, #2
 80019ca:	f7fe fe2f 	bl	800062c <platform_set_vbus_lvl_enable>
        platform_set_vbus_discharge(port->PortID, TRUE);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019d4:	2101      	movs	r1, #1
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fe9c 	bl	8000714 <platform_set_vbus_discharge>

        if (!port->PolicyIsDFP)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d130      	bne.n	8001a48 <PolicySourceTransitionDefault+0x130>
        {
            port->PolicyIsDFP = TRUE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            port->Registers.Switches.DATAROLE = port->PolicyIsDFP;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	b2d9      	uxtb	r1, r3
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8001a00:	f361 1304 	bfi	r3, r1, #4, #1
 8001a04:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
            DeviceWrite(port->I2cAddr, regSwitches1, 1,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	332b      	adds	r3, #43	; 0x2b
 8001a12:	2201      	movs	r2, #1
 8001a14:	2103      	movs	r1, #3
 8001a16:	f005 fa11 	bl	8006e3c <DeviceWrite>
                        &port->Registers.Switches.byte[1]);

            port->Registers.Control.ENSOP1 = SOP_P_Capable;
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8001a20:	f36f 0300 	bfc	r3, #0, #1
 8001a24:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
            port->Registers.Control.ENSOP2 = SOP_PP_Capable;
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8001a2e:	f36f 0341 	bfc	r3, #1, #1
 8001a32:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
            DeviceWrite(port->I2cAddr, regControl1, 1,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3331      	adds	r3, #49	; 0x31
 8001a40:	2201      	movs	r2, #1
 8001a42:	2107      	movs	r1, #7
 8001a44:	f005 f9fa 	bl	8006e3c <DeviceWrite>
                        &port->Registers.Control.byte[1]);
        }

        if (port->IsVCONNSource)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d016      	beq.n	8001a80 <PolicySourceTransitionDefault+0x168>
        {
            /* Turn off VConn */
            port->Registers.Switches.VCONN_CC1 = 0;
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8001a58:	f36f 1304 	bfc	r3, #4, #1
 8001a5c:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            port->Registers.Switches.VCONN_CC2 = 0;
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8001a66:	f36f 1345 	bfc	r3, #5, #1
 8001a6a:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            DeviceWrite(port->I2cAddr, regSwitches0, 1,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	332a      	adds	r3, #42	; 0x2a
 8001a78:	2201      	movs	r2, #1
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	f005 f9de 	bl	8006e3c <DeviceWrite>
                    &port->Registers.Switches.byte[0]);
        }

        ProtocolFlushTxFIFO(port);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f003 fa5d 	bl	8004f40 <ProtocolFlushTxFIFO>
        ProtocolFlushRxFIFO(port);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f003 fa42 	bl	8004f10 <ProtocolFlushRxFIFO>
        ResetProtocolLayer(port, TRUE);
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f003 fa6e 	bl	8004f70 <ResetProtocolLayer>

        TimerStart(&port->PolicyStateTimer,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001a9a:	4952      	ldr	r1, [pc, #328]	; (8001be4 <PolicySourceTransitionDefault+0x2cc>)
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f005 fa07 	bl	8006eb0 <TimerStart>
                tPSHardResetMax + tSafe0V + tSrcRecover);

        port->PolicySubIndex++;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        break;
 8001ab2:	e092      	b.n	8001bda <PolicySourceTransitionDefault+0x2c2>
    case 2:
        if (VbusVSafe0V(port))
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f004 fd18 	bl	80064ea <VbusVSafe0V>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d016      	beq.n	8001aee <PolicySourceTransitionDefault+0x1d6>
        {
            platform_set_vbus_discharge(port->PortID, FALSE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fe23 	bl	8000714 <platform_set_vbus_discharge>
            TimerStart(&port->PolicyStateTimer, tSrcRecover);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001ad4:	4944      	ldr	r1, [pc, #272]	; (8001be8 <PolicySourceTransitionDefault+0x2d0>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f005 f9ea 	bl	8006eb0 <TimerStart>
            port->PolicySubIndex++;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        else
        {
            TimerStart(&port->VBusPollTimer, tVBusPollShort);
            port->PEIdle = TRUE;
        }
        break;
 8001aec:	e075      	b.n	8001bda <PolicySourceTransitionDefault+0x2c2>
        else if (TimerExpired(&port->PolicyStateTimer))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001af4:	4618      	mov	r0, r3
 8001af6:	f005 fa16 	bl	8006f26 <TimerExpired>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d014      	beq.n	8001b2a <PolicySourceTransitionDefault+0x212>
            if (port->PolicyHasContract)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d004      	beq.n	8001b14 <PolicySourceTransitionDefault+0x1fc>
                SetPEState(port, peErrorRecovery);
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f003 fb43 	bl	8005198 <SetPEState>
        break;
 8001b12:	e062      	b.n	8001bda <PolicySourceTransitionDefault+0x2c2>
                port->PolicySubIndex = 4;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2204      	movs	r2, #4
 8001b18:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
                TimerDisable(&port->PolicyStateTimer);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001b22:	4618      	mov	r0, r3
 8001b24:	f005 f9df 	bl	8006ee6 <TimerDisable>
        break;
 8001b28:	e057      	b.n	8001bda <PolicySourceTransitionDefault+0x2c2>
            TimerStart(&port->VBusPollTimer, tVBusPollShort);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8001b30:	f242 7110 	movw	r1, #10000	; 0x2710
 8001b34:	4618      	mov	r0, r3
 8001b36:	f005 f9bb 	bl	8006eb0 <TimerStart>
            port->PEIdle = TRUE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8001b42:	e04a      	b.n	8001bda <PolicySourceTransitionDefault+0x2c2>
    case 3:
        if (TimerExpired(&port->PolicyStateTimer))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f005 f9eb 	bl	8006f26 <TimerExpired>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d008      	beq.n	8001b68 <PolicySourceTransitionDefault+0x250>
        {
            port->PolicySubIndex++;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 8001b66:	e038      	b.n	8001bda <PolicySourceTransitionDefault+0x2c2>
            port->PEIdle = TRUE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8001b70:	e033      	b.n	8001bda <PolicySourceTransitionDefault+0x2c2>
    default:
        platform_set_vbus_lvl_enable(port->PortID, VBUS_LVL_5V, TRUE, FALSE);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 8001b78:	2300      	movs	r3, #0
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	f7fe fd55 	bl	800062c <platform_set_vbus_lvl_enable>

        /* Turn on VConn */
        if (Type_C_Sources_VCONN)
        {
            if (port->CCPin == CC1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d107      	bne.n	8001b9c <PolicySourceTransitionDefault+0x284>
                port->Registers.Switches.VCONN_CC2 = 1;
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8001b92:	f043 0320 	orr.w	r3, r3, #32
 8001b96:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
 8001b9a:	e006      	b.n	8001baa <PolicySourceTransitionDefault+0x292>
            else
                port->Registers.Switches.VCONN_CC1 = 1;
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8001ba2:	f043 0310 	orr.w	r3, r3, #16
 8001ba6:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

            DeviceWrite(port->I2cAddr, regSwitches0, 1,
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	332a      	adds	r3, #42	; 0x2a
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	f005 f940 	bl	8006e3c <DeviceWrite>
                    &port->Registers.Switches.byte[0]);
        }
        port->IsVCONNSource = TRUE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        TimerDisable(&port->SwapSourceStartTimer);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f005 f98b 	bl	8006ee6 <TimerDisable>

        SetPEState(port, peSourceStartup);
 8001bd0:	2106      	movs	r1, #6
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f003 fae0 	bl	8005198 <SetPEState>
        break;
 8001bd8:	bf00      	nop
    }
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	0014bc98 	.word	0x0014bc98
 8001be8:	000a4cb8 	.word	0x000a4cb8

08001bec <PolicySourceNegotiateCap>:

void PolicySourceNegotiateCap(Port_t *port)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
    FSC_BOOL reqAccept = FALSE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	75fb      	strb	r3, [r7, #23]
    FSC_U8 objPosition;
    FSC_U32 minvoltage, maxvoltage;

    objPosition = port->PolicyRxDataObj[0].FVRDO.ObjectPosition - 1;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8001bfe:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	3b01      	subs	r3, #1
 8001c06:	75bb      	strb	r3, [r7, #22]

    if (objPosition < DPM_GetSourceCapHeader(port->dpm, port)->NumDataObjects)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f005 fb03 	bl	800721a <DPM_GetSourceCapHeader>
 8001c14:	4603      	mov	r3, r0
 8001c16:	785b      	ldrb	r3, [r3, #1]
 8001c18:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	461a      	mov	r2, r3
 8001c20:	7dbb      	ldrb	r3, [r7, #22]
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d279      	bcs.n	8001d1a <PolicySourceNegotiateCap+0x12e>
    {
        /* Enable PPS if pps request and capability request can be matched */
        if (DPM_GetSourceCap(port->dpm, port)[objPosition].
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f005 fb00 	bl	8007232 <DPM_GetSourceCap>
 8001c32:	4602      	mov	r2, r0
 8001c34:	7dbb      	ldrb	r3, [r7, #22]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
                PDO.SupplyType == pdoTypeAugmented)
 8001c3a:	78db      	ldrb	r3, [r3, #3]
 8001c3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c40:	b2db      	uxtb	r3, r3
        if (DPM_GetSourceCap(port->dpm, port)[objPosition].
 8001c42:	2bc0      	cmp	r3, #192	; 0xc0
 8001c44:	d151      	bne.n	8001cea <PolicySourceNegotiateCap+0xfe>
        {
            /* Convert from 100mv (pdo) to 20mV (req) to compare */
            minvoltage = DPM_GetSourceCap(port->dpm, port)[objPosition].
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f005 faf0 	bl	8007232 <DPM_GetSourceCap>
 8001c52:	4602      	mov	r2, r0
 8001c54:	7dbb      	ldrb	r3, [r7, #22]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
                PPSAPDO.MinVoltage * 5;
 8001c5a:	785b      	ldrb	r3, [r3, #1]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
            minvoltage = DPM_GetSourceCap(port->dpm, port)[objPosition].
 8001c64:	613b      	str	r3, [r7, #16]
            maxvoltage = DPM_GetSourceCap(port->dpm, port)[objPosition].
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f005 fae0 	bl	8007232 <DPM_GetSourceCap>
 8001c72:	4602      	mov	r2, r0
 8001c74:	7dbb      	ldrb	r3, [r7, #22]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
                PPSAPDO.MaxVoltage * 5;
 8001c7a:	885b      	ldrh	r3, [r3, #2]
 8001c7c:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	461a      	mov	r2, r3
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
            maxvoltage = DPM_GetSourceCap(port->dpm, port)[objPosition].
 8001c8a:	60fb      	str	r3, [r7, #12]

            reqAccept =
                ((port->PolicyRxDataObj[0].PPSRDO.OpCurrent <=
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8001c92:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001c96:	b2dc      	uxtb	r4, r3
                  DPM_GetSourceCap(port->dpm, port)[objPosition].
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f005 fac7 	bl	8007232 <DPM_GetSourceCap>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	7dbb      	ldrb	r3, [r7, #22]
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
                      PPSAPDO.MaxCurrent) &&
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001cb2:	b2db      	uxtb	r3, r3
                 (port->PolicyRxDataObj[0].PPSRDO.Voltage >= minvoltage) &&
 8001cb4:	429c      	cmp	r4, r3
 8001cb6:	d815      	bhi.n	8001ce4 <PolicySourceNegotiateCap+0xf8>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001cbe:	f3c3 234a 	ubfx	r3, r3, #9, #11
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	461a      	mov	r2, r3
                      PPSAPDO.MaxCurrent) &&
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d80b      	bhi.n	8001ce4 <PolicySourceNegotiateCap+0xf8>
                 (port->PolicyRxDataObj[0].PPSRDO.Voltage <= maxvoltage));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001cd2:	f3c3 234a 	ubfx	r3, r3, #9, #11
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	461a      	mov	r2, r3
                 (port->PolicyRxDataObj[0].PPSRDO.Voltage >= minvoltage) &&
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d301      	bcc.n	8001ce4 <PolicySourceNegotiateCap+0xf8>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <PolicySourceNegotiateCap+0xfa>
 8001ce4:	2300      	movs	r3, #0
            reqAccept =
 8001ce6:	75fb      	strb	r3, [r7, #23]
 8001ce8:	e017      	b.n	8001d1a <PolicySourceNegotiateCap+0x12e>
        }
        else if (port->PolicyRxDataObj[0].FVRDO.OpCurrent <=
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001cf0:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8001cf4:	b29c      	uxth	r4, r3
            DPM_GetSourceCap(port->dpm, port)[objPosition].
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f005 fa98 	bl	8007232 <DPM_GetSourceCap>
 8001d02:	4602      	mov	r2, r0
 8001d04:	7dbb      	ldrb	r3, [r7, #22]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
                FPDOSupply.MaxCurrent)
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d10:	b29b      	uxth	r3, r3
        else if (port->PolicyRxDataObj[0].FVRDO.OpCurrent <=
 8001d12:	429c      	cmp	r4, r3
 8001d14:	d801      	bhi.n	8001d1a <PolicySourceNegotiateCap+0x12e>
        {
            reqAccept = TRUE;
 8001d16:	2301      	movs	r3, #1
 8001d18:	75fb      	strb	r3, [r7, #23]
        }
    }

    if (reqAccept)
 8001d1a:	7dfb      	ldrb	r3, [r7, #23]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d004      	beq.n	8001d2a <PolicySourceNegotiateCap+0x13e>
    {
        SetPEState(port, peSourceTransitionSupply);
 8001d20:	210e      	movs	r1, #14
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f003 fa38 	bl	8005198 <SetPEState>
 8001d28:	e003      	b.n	8001d32 <PolicySourceNegotiateCap+0x146>
    }
    else
    {
        SetPEState(port, peSourceCapabilityResponse);
 8001d2a:	210c      	movs	r1, #12
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f003 fa33 	bl	8005198 <SetPEState>
    }

    port->PEIdle = FALSE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 8001d3a:	bf00      	nop
 8001d3c:	371c      	adds	r7, #28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd90      	pop	{r4, r7, pc}
	...

08001d44 <PolicySourceTransitionSupply>:

void PolicySourceTransitionSupply(Port_t *port)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af02      	add	r7, sp, #8
 8001d4a:	6078      	str	r0, [r7, #4]
    FSC_BOOL newIsPPS = FALSE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73fb      	strb	r3, [r7, #15]

    switch (port->PolicySubIndex)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	f200 80e4 	bhi.w	8001f24 <PolicySourceTransitionSupply+0x1e0>
 8001d5c:	a201      	add	r2, pc, #4	; (adr r2, 8001d64 <PolicySourceTransitionSupply+0x20>)
 8001d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d62:	bf00      	nop
 8001d64:	08001d79 	.word	0x08001d79
 8001d68:	08001d8b 	.word	0x08001d8b
 8001d6c:	08001e1b 	.word	0x08001e1b
 8001d70:	08001e49 	.word	0x08001e49
 8001d74:	08001eb3 	.word	0x08001eb3
    {
    case 0:
        PolicySendCommand(port, CMTAccept, peSourceTransitionSupply, 1,
 8001d78:	2300      	movs	r3, #0
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	220e      	movs	r2, #14
 8001d80:	2103      	movs	r1, #3
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f001 fa20 	bl	80031c8 <PolicySendCommand>
                          SOP_TYPE_SOP);
        break;
 8001d88:	e0ee      	b.n	8001f68 <PolicySourceTransitionSupply+0x224>
    case 1:
        port->USBPDContract.object = port->PolicyRxDataObj[0].object;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
        newIsPPS = (DPM_GetSourceCap(port->dpm, port)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f005 fa48 	bl	8007232 <DPM_GetSourceCap>
 8001da2:	4602      	mov	r2, r0
                [port->USBPDContract.FVRDO.ObjectPosition - 1].PDO.SupplyType
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8001daa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001db4:	3b01      	subs	r3, #1
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
                        == pdoTypeAugmented) ? TRUE : FALSE;
 8001dba:	78db      	ldrb	r3, [r3, #3]
 8001dbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2bc0      	cmp	r3, #192	; 0xc0
 8001dc4:	bf0c      	ite	eq
 8001dc6:	2301      	moveq	r3, #1
 8001dc8:	2300      	movne	r3, #0
 8001dca:	b2db      	uxtb	r3, r3
        newIsPPS = (DPM_GetSourceCap(port->dpm, port)
 8001dcc:	73fb      	strb	r3, [r7, #15]

        if (newIsPPS && port->PpsEnabled)
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00d      	beq.n	8001df0 <PolicySourceTransitionSupply+0xac>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d008      	beq.n	8001df0 <PolicySourceTransitionSupply+0xac>
            /* Note: In a system with more than one PPS PDOs, this will need
             * to include a check to see if the request is from within the same
             * APDO (no SrcTransition delay) or a different
             * APDO (with SrcTransition delay).
             */
            port->PolicySubIndex += 2;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001de4:	3302      	adds	r3, #2
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8001dee:	e00f      	b.n	8001e10 <PolicySourceTransitionSupply+0xcc>
        }
        else
        {
            TimerStart(&port->PolicyStateTimer, tSrcTransition);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001df6:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f005 f858 	bl	8006eb0 <TimerStart>
            port->PolicySubIndex++;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001e06:	3301      	adds	r3, #1
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        }

        port->PpsEnabled = newIsPPS;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6

        break;
 8001e18:	e0a6      	b.n	8001f68 <PolicySourceTransitionSupply+0x224>
    case 2:
        if (TimerExpired(&port->PolicyStateTimer))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001e20:	4618      	mov	r0, r3
 8001e22:	f005 f880 	bl	8006f26 <TimerExpired>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <PolicySourceTransitionSupply+0xfa>
        {
            port->PolicySubIndex++;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001e32:	3301      	adds	r3, #1
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 8001e3c:	e094      	b.n	8001f68 <PolicySourceTransitionSupply+0x224>
            port->PEIdle = TRUE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8001e46:	e08f      	b.n	8001f68 <PolicySourceTransitionSupply+0x224>
    case 3:
        port->PolicyHasContract = TRUE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        DPM_TransitionSource(port->dpm, port,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6818      	ldr	r0, [r3, #0]
                port->USBPDContract.FVRDO.ObjectPosition - 1);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8001e5a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001e5e:	b2db      	uxtb	r3, r3
        DPM_TransitionSource(port->dpm, port,
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	f005 f9ef 	bl	800724a <DPM_TransitionSource>

        TimerStart(&port->PolicyStateTimer, tSourceRiseTimeout);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001e72:	493f      	ldr	r1, [pc, #252]	; (8001f70 <PolicySourceTransitionSupply+0x22c>)
 8001e74:	4618      	mov	r0, r3
 8001e76:	f005 f81b 	bl	8006eb0 <TimerStart>
        port->PolicySubIndex++;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001e80:	3301      	adds	r3, #1
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

        if (port->PpsEnabled)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d007      	beq.n	8001ea4 <PolicySourceTransitionSupply+0x160>
        {
            TimerStart(&port->PpsTimer, tPPSTimeout);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8001e9a:	4936      	ldr	r1, [pc, #216]	; (8001f74 <PolicySourceTransitionSupply+0x230>)
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f005 f807 	bl	8006eb0 <TimerStart>
        }
        else
        {
            TimerDisable(&port->PpsTimer);
        }
        break;
 8001ea2:	e061      	b.n	8001f68 <PolicySourceTransitionSupply+0x224>
            TimerDisable(&port->PpsTimer);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f005 f81b 	bl	8006ee6 <TimerDisable>
        break;
 8001eb0:	e05a      	b.n	8001f68 <PolicySourceTransitionSupply+0x224>
    case 4:
        if (TimerExpired(&port->PolicyStateTimer))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f005 f834 	bl	8006f26 <TimerExpired>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <PolicySourceTransitionSupply+0x192>
        {
            port->PolicySubIndex++;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001eca:	3301      	adds	r3, #1
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        else
        {
            TimerStart(&port->VBusPollTimer, tVBusPollShort);
            port->PEIdle = TRUE;
        }
        break;
 8001ed4:	e048      	b.n	8001f68 <PolicySourceTransitionSupply+0x224>
        else if (DPM_IsSourceCapEnabled(port->dpm, port,
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6818      	ldr	r0, [r3, #0]
                        port->USBPDContract.FVRDO.ObjectPosition - 1))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8001ee0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001ee4:	b2db      	uxtb	r3, r3
        else if (DPM_IsSourceCapEnabled(port->dpm, port,
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	f005 fa47 	bl	8007380 <DPM_IsSourceCapEnabled>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d008      	beq.n	8001f0a <PolicySourceTransitionSupply+0x1c6>
            port->PolicySubIndex++;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001efe:	3301      	adds	r3, #1
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        break;
 8001f08:	e02e      	b.n	8001f68 <PolicySourceTransitionSupply+0x224>
            TimerStart(&port->VBusPollTimer, tVBusPollShort);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8001f10:	f242 7110 	movw	r1, #10000	; 0x2710
 8001f14:	4618      	mov	r0, r3
 8001f16:	f004 ffcb 	bl	8006eb0 <TimerStart>
            port->PEIdle = TRUE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8001f22:	e021      	b.n	8001f68 <PolicySourceTransitionSupply+0x224>
    default:
        if (PolicySendCommand(port, CMTPS_RDY, peSourceReady, 0,
 8001f24:	2300      	movs	r3, #0
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2300      	movs	r3, #0
 8001f2a:	220f      	movs	r2, #15
 8001f2c:	2106      	movs	r1, #6
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f001 f94a 	bl	80031c8 <PolicySendCommand>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d115      	bne.n	8001f66 <PolicySourceTransitionSupply+0x222>
                              SOP_TYPE_SOP) == STAT_SUCCESS)
        {
            /* Set to 1.5A (SinkTxNG) */
            if (port->SourceCurrent != utcc1p5A)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d006      	beq.n	8001f52 <PolicySourceTransitionSupply+0x20e>
            {
                UpdateCurrentAdvert(port, utcc1p5A);
 8001f44:	2102      	movs	r1, #2
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f004 fabb 	bl	80064c2 <UpdateCurrentAdvert>
                updateSourceMDACHigh(port);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f004 f8e4 	bl	800611a <updateSourceMDACHigh>
            }

            notify_observers(PD_NEW_CONTRACT, port->I2cAddr,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
                             &port->USBPDContract);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
            notify_observers(PD_NEW_CONTRACT, port->I2cAddr,
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2008      	movs	r0, #8
 8001f62:	f005 fb6f 	bl	8007644 <notify_observers>
        }
        break;
 8001f66:	bf00      	nop
    }
}
 8001f68:	bf00      	nop
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	00055730 	.word	0x00055730
 8001f74:	00d59f80 	.word	0x00d59f80

08001f78 <PolicySourceCapabilityResponse>:

void PolicySourceCapabilityResponse(Port_t *port)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	6078      	str	r0, [r7, #4]
    if (port->PolicyHasContract)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d016      	beq.n	8001fb8 <PolicySourceCapabilityResponse+0x40>
    {
        if (port->isContractValid)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d008      	beq.n	8001fa6 <PolicySourceCapabilityResponse+0x2e>
        {
            PolicySendCommand(port, CMTReject, peSourceReady, 0, SOP_TYPE_SOP);
 8001f94:	2300      	movs	r3, #0
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	2300      	movs	r3, #0
 8001f9a:	220f      	movs	r2, #15
 8001f9c:	2104      	movs	r1, #4
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f001 f912 	bl	80031c8 <PolicySendCommand>
    else
    {
        PolicySendCommand(port, CMTReject, peSourceWaitNewCapabilities, 0,
                          SOP_TYPE_SOP);
    }
}
 8001fa4:	e010      	b.n	8001fc8 <PolicySourceCapabilityResponse+0x50>
            PolicySendCommand(port, CMTReject, peSourceSendHardReset, 0,
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2300      	movs	r3, #0
 8001fac:	2203      	movs	r2, #3
 8001fae:	2104      	movs	r1, #4
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f001 f909 	bl	80031c8 <PolicySendCommand>
}
 8001fb6:	e007      	b.n	8001fc8 <PolicySourceCapabilityResponse+0x50>
        PolicySendCommand(port, CMTReject, peSourceWaitNewCapabilities, 0,
 8001fb8:	2300      	movs	r3, #0
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	220d      	movs	r2, #13
 8001fc0:	2104      	movs	r1, #4
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f001 f900 	bl	80031c8 <PolicySendCommand>
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <PolicySourceReady>:

void PolicySourceReady(Port_t *port)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
    if (port->ProtocolMsgRx)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 80a7 	beq.w	8002132 <PolicySourceReady+0x162>
    {
        /* Message received from partner */
        port->ProtocolMsgRx = FALSE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
        if (port->PolicyRxHeader.NumDataObjects == 0)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8001ff2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d15c      	bne.n	80020b6 <PolicySourceReady+0xe6>
        {
            switch (port->PolicyRxHeader.MessageType)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8002002:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002006:	b2db      	uxtb	r3, r3
 8002008:	3b03      	subs	r3, #3
 800200a:	2b11      	cmp	r3, #17
 800200c:	d84e      	bhi.n	80020ac <PolicySourceReady+0xdc>
 800200e:	a201      	add	r2, pc, #4	; (adr r2, 8002014 <PolicySourceReady+0x44>)
 8002010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002014:	080020a3 	.word	0x080020a3
 8002018:	08002317 	.word	0x08002317
 800201c:	080020ad 	.word	0x080020ad
 8002020:	080020ad 	.word	0x080020ad
 8002024:	0800205d 	.word	0x0800205d
 8002028:	08002067 	.word	0x08002067
 800202c:	08002071 	.word	0x08002071
 8002030:	0800207b 	.word	0x0800207b
 8002034:	08002085 	.word	0x08002085
 8002038:	080020a3 	.word	0x080020a3
 800203c:	0800208f 	.word	0x0800208f
 8002040:	080020ad 	.word	0x080020ad
 8002044:	080020ad 	.word	0x080020ad
 8002048:	08002317 	.word	0x08002317
 800204c:	080020ad 	.word	0x080020ad
 8002050:	080020ad 	.word	0x080020ad
 8002054:	080020ad 	.word	0x080020ad
 8002058:	08002099 	.word	0x08002099
            {
            case CMTGetSourceCap:
                SetPEState(port, peSourceSendCaps);
 800205c:	2107      	movs	r1, #7
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f003 f89a 	bl	8005198 <SetPEState>
                break;
 8002064:	e15a      	b.n	800231c <PolicySourceReady+0x34c>
            case CMTGetSinkCap:
                SetPEState(port, peSourceGiveSinkCaps);
 8002066:	2114      	movs	r1, #20
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f003 f895 	bl	8005198 <SetPEState>
                break;
 800206e:	e155      	b.n	800231c <PolicySourceReady+0x34c>
            case CMTDR_Swap:
                SetPEState(port, peSourceEvaluateDRSwap);
 8002070:	2117      	movs	r1, #23
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f003 f890 	bl	8005198 <SetPEState>
                break;
 8002078:	e150      	b.n	800231c <PolicySourceReady+0x34c>
            case CMTPR_Swap:
                SetPEState(port, peSourceEvaluatePRSwap);
 800207a:	2131      	movs	r1, #49	; 0x31
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f003 f88b 	bl	8005198 <SetPEState>
                break;
 8002082:	e14b      	b.n	800231c <PolicySourceReady+0x34c>
            case CMTVCONN_Swap:
                SetPEState(port, peSourceEvaluateVCONNSwap);
 8002084:	212d      	movs	r1, #45	; 0x2d
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f003 f886 	bl	8005198 <SetPEState>
                break;
 800208c:	e146      	b.n	800231c <PolicySourceReady+0x34c>
            case CMTSoftReset:
                SetPEState(port, peSourceSoftReset);
 800208e:	2104      	movs	r1, #4
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f003 f881 	bl	8005198 <SetPEState>
                break;
 8002096:	e141      	b.n	800231c <PolicySourceReady+0x34c>
            case CMTGetCountryCodes:
                SetPEState(port, peGiveCountryCodes);
                break;
#endif /* 0 */
            case CMTGetPPSStatus:
                SetPEState(port, peGivePPSStatus);
 8002098:	2138      	movs	r1, #56	; 0x38
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f003 f87c 	bl	8005198 <SetPEState>
                break;
 80020a0:	e13c      	b.n	800231c <PolicySourceReady+0x34c>
                /* Rx'd Reject/NS are ignored - notify DPM if needed */
                break;
            /* Unexpected messages */
            case CMTAccept:
            case CMTWait:
                SetPEState(port, peSourceSendSoftReset);
 80020a2:	2105      	movs	r1, #5
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f003 f877 	bl	8005198 <SetPEState>
                break;
 80020aa:	e137      	b.n	800231c <PolicySourceReady+0x34c>
            default:
                SetPEState(port, peNotSupported);
 80020ac:	2136      	movs	r1, #54	; 0x36
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f003 f872 	bl	8005198 <SetPEState>
                break;
 80020b4:	e132      	b.n	800231c <PolicySourceReady+0x34c>
            }
        }
        else if (port->PolicyRxHeader.Extended == 1)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80020bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d009      	beq.n	80020da <PolicySourceReady+0x10a>
        {
            switch(port->PolicyRxHeader.MessageType)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80020cc:	f3c3 0304 	ubfx	r3, r3, #0, #5
                     * supported
                     */
                    port->WaitForNotSupported = TRUE;
                }
#endif
                SetPEState(port, peNotSupported);
 80020d0:	2136      	movs	r1, #54	; 0x36
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f003 f860 	bl	8005198 <SetPEState>
                break;
 80020d8:	e120      	b.n	800231c <PolicySourceReady+0x34c>
            }
        }
        else
        {
            switch (port->PolicyRxHeader.MessageType)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80020e0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	3b01      	subs	r3, #1
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	d81d      	bhi.n	8002128 <PolicySourceReady+0x158>
 80020ec:	a201      	add	r2, pc, #4	; (adr r2, 80020f4 <PolicySourceReady+0x124>)
 80020ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f2:	bf00      	nop
 80020f4:	0800231b 	.word	0x0800231b
 80020f8:	0800210d 	.word	0x0800210d
 80020fc:	08002121 	.word	0x08002121
 8002100:	0800231b 	.word	0x0800231b
 8002104:	08002129 	.word	0x08002129
 8002108:	08002117 	.word	0x08002117
            {
            case DMTSourceCapabilities:
            case DMTSinkCapabilities:
                break;
            case DMTRequest:
                SetPEState(port, peSourceNegotiateCap);
 800210c:	210b      	movs	r1, #11
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f003 f842 	bl	8005198 <SetPEState>
                break;
 8002114:	e102      	b.n	800231c <PolicySourceReady+0x34c>
            case DMTAlert:
                SetPEState(port, peSourceAlertReceived);
 8002116:	2118      	movs	r1, #24
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f003 f83d 	bl	8005198 <SetPEState>
                break;
 800211e:	e0fd      	b.n	800231c <PolicySourceReady+0x34c>
            case DMTVenderDefined:
                convertAndProcessVdmMessage(port, port->ProtocolMsgRxSop);
                break;
#endif /* FSC_HAVE_VDM */
            case DMTBIST:
                processDMTBIST(port);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f001 fda3 	bl	8003c6c <processDMTBIST>
                break;
 8002126:	e0f9      	b.n	800231c <PolicySourceReady+0x34c>
            case DMTGetCountryInfo:
                SetPEState(port, peGiveCountryInfo);
                break;
#endif /* 0 */
            default:
                SetPEState(port, peNotSupported);
 8002128:	2136      	movs	r1, #54	; 0x36
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f003 f834 	bl	8005198 <SetPEState>
                break;
 8002130:	e0f4      	b.n	800231c <PolicySourceReady+0x34c>
            }
        }
    }
    else if (port->USBPDTxFlag)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002138:	2b00      	cmp	r3, #0
 800213a:	d066      	beq.n	800220a <PolicySourceReady+0x23a>
    {
        /* Has the device policy manager requested us to send a message? */
        if (port->PDTransmitHeader.NumDataObjects == 0)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002142:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d146      	bne.n	80021da <PolicySourceReady+0x20a>
        {
            switch (port->PDTransmitHeader.MessageType)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002152:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002156:	b2db      	uxtb	r3, r3
 8002158:	3b02      	subs	r3, #2
 800215a:	2b0b      	cmp	r3, #11
 800215c:	d84d      	bhi.n	80021fa <PolicySourceReady+0x22a>
 800215e:	a201      	add	r2, pc, #4	; (adr r2, 8002164 <PolicySourceReady+0x194>)
 8002160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002164:	080021b3 	.word	0x080021b3
 8002168:	080021fb 	.word	0x080021fb
 800216c:	080021fb 	.word	0x080021fb
 8002170:	080021a9 	.word	0x080021a9
 8002174:	080021fb 	.word	0x080021fb
 8002178:	0800219f 	.word	0x0800219f
 800217c:	08002195 	.word	0x08002195
 8002180:	080021bd 	.word	0x080021bd
 8002184:	080021fb 	.word	0x080021fb
 8002188:	080021c7 	.word	0x080021c7
 800218c:	080021fb 	.word	0x080021fb
 8002190:	080021d1 	.word	0x080021d1
            {
            case CMTGetSinkCap:
                SetPEState(port, peSourceGetSinkCaps);
 8002194:	2111      	movs	r1, #17
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f002 fffe 	bl	8005198 <SetPEState>
                break;
 800219c:	e030      	b.n	8002200 <PolicySourceReady+0x230>
            case CMTGetSourceCap:
                SetPEState(port, peSourceGetSourceCaps);
 800219e:	2115      	movs	r1, #21
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f002 fff9 	bl	8005198 <SetPEState>
                break;
 80021a6:	e02b      	b.n	8002200 <PolicySourceReady+0x230>
            case CMTPing:
                SetPEState(port, peSourceSendPing);
 80021a8:	2112      	movs	r1, #18
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f002 fff4 	bl	8005198 <SetPEState>
                break;
 80021b0:	e026      	b.n	8002200 <PolicySourceReady+0x230>
            case CMTGotoMin:
                SetPEState(port, peSourceGotoMin);
 80021b2:	2113      	movs	r1, #19
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f002 ffef 	bl	8005198 <SetPEState>
                break;
 80021ba:	e021      	b.n	8002200 <PolicySourceReady+0x230>
            case CMTPR_Swap:
                SetPEState(port, peSourceSendPRSwap);
                break;
#endif /* FSC_HAVE_DRP */
            case CMTDR_Swap:
                SetPEState(port, peSourceSendDRSwap);
 80021bc:	2116      	movs	r1, #22
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f002 ffea 	bl	8005198 <SetPEState>
                break;
 80021c4:	e01c      	b.n	8002200 <PolicySourceReady+0x230>
            case CMTVCONN_Swap:
                SetPEState(port, peSourceSendVCONNSwap);
 80021c6:	212c      	movs	r1, #44	; 0x2c
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f002 ffe5 	bl	8005198 <SetPEState>
                break;
 80021ce:	e017      	b.n	8002200 <PolicySourceReady+0x230>
            case CMTSoftReset:
                SetPEState(port, peSourceSendSoftReset);
 80021d0:	2105      	movs	r1, #5
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f002 ffe0 	bl	8005198 <SetPEState>
                break;
 80021d8:	e012      	b.n	8002200 <PolicySourceReady+0x230>
                break;
            }
        }
        else
        {
            switch (port->PDTransmitHeader.MessageType)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80021e0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d002      	beq.n	80021f0 <PolicySourceReady+0x220>
 80021ea:	2b0f      	cmp	r3, #15
 80021ec:	d007      	beq.n	80021fe <PolicySourceReady+0x22e>
            default:
#ifdef FSC_DEBUG
                /* Transmit other messages directly from the GUI/DPM */
                SetPEState(port, peSendGenericData);
#endif /* FSC_DEBUG */
                break;
 80021ee:	e007      	b.n	8002200 <PolicySourceReady+0x230>
                SetPEState(port, peSourceSendCaps);
 80021f0:	2107      	movs	r1, #7
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f002 ffd0 	bl	8005198 <SetPEState>
                break;
 80021f8:	e002      	b.n	8002200 <PolicySourceReady+0x230>
                break;
 80021fa:	bf00      	nop
 80021fc:	e000      	b.n	8002200 <PolicySourceReady+0x230>
                break;
 80021fe:	bf00      	nop
            }
        }
        port->USBPDTxFlag = FALSE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
            UpdateCurrentAdvert(port, utcc3p0A);
            updateSourceMDACHigh(port);
        }
    }

}
 8002208:	e088      	b.n	800231c <PolicySourceReady+0x34c>
    else if (port->PpsEnabled && TimerExpired(&port->PpsTimer))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00d      	beq.n	8002230 <PolicySourceReady+0x260>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800221a:	4618      	mov	r0, r3
 800221c:	f004 fe83 	bl	8006f26 <TimerExpired>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d004      	beq.n	8002230 <PolicySourceReady+0x260>
        SetPEState(port, peSourceSendHardReset);
 8002226:	2103      	movs	r1, #3
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f002 ffb5 	bl	8005198 <SetPEState>
 800222e:	e075      	b.n	800231c <PolicySourceReady+0x34c>
    else if (port->PartnerCaps.object == 0)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8002236:	2b00      	cmp	r3, #0
 8002238:	d125      	bne.n	8002286 <PolicySourceReady+0x2b6>
        if (port->WaitInSReady == TRUE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8002240:	2b01      	cmp	r3, #1
 8002242:	d113      	bne.n	800226c <PolicySourceReady+0x29c>
            if (TimerExpired(&port->PolicyStateTimer))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800224a:	4618      	mov	r0, r3
 800224c:	f004 fe6b 	bl	8006f26 <TimerExpired>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d062      	beq.n	800231c <PolicySourceReady+0x34c>
                TimerDisable(&port->PolicyStateTimer);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800225c:	4618      	mov	r0, r3
 800225e:	f004 fe42 	bl	8006ee6 <TimerDisable>
                SetPEState(port, peSourceGetSinkCaps);
 8002262:	2111      	movs	r1, #17
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f002 ff97 	bl	8005198 <SetPEState>
}
 800226a:	e057      	b.n	800231c <PolicySourceReady+0x34c>
            TimerStart(&port->PolicyStateTimer, 20 * TICK_SCALE_TO_MS);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002272:	f644 6120 	movw	r1, #20000	; 0x4e20
 8002276:	4618      	mov	r0, r3
 8002278:	f004 fe1a 	bl	8006eb0 <TimerStart>
            port->WaitInSReady = TRUE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
}
 8002284:	e04a      	b.n	800231c <PolicySourceReady+0x34c>
    else if ((port->PortConfig.PortType == USBTypeC_DRP) &&
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	791b      	ldrb	r3, [r3, #4]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d110      	bne.n	80022b0 <PolicySourceReady+0x2e0>
             (port->PortConfig.reqPRSwapAsSrc) &&
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	7f9b      	ldrb	r3, [r3, #30]
    else if ((port->PortConfig.PortType == USBTypeC_DRP) &&
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00c      	beq.n	80022b0 <PolicySourceReady+0x2e0>
             (port->PartnerCaps.FPDOSink.DualRolePower == 1))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 800229c:	f003 0320 	and.w	r3, r3, #32
 80022a0:	b2db      	uxtb	r3, r3
             (port->PortConfig.reqPRSwapAsSrc) &&
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d004      	beq.n	80022b0 <PolicySourceReady+0x2e0>
        SetPEState(port, peSourceSendPRSwap);
 80022a6:	2130      	movs	r1, #48	; 0x30
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f002 ff75 	bl	8005198 <SetPEState>
 80022ae:	e035      	b.n	800231c <PolicySourceReady+0x34c>
    else if (port->PortConfig.reqDRSwapToUfpAsSrc == TRUE &&
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	7edb      	ldrb	r3, [r3, #27]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d10c      	bne.n	80022d2 <PolicySourceReady+0x302>
             port->PolicyIsDFP == TRUE &&
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d107      	bne.n	80022d2 <PolicySourceReady+0x302>
        port->PortConfig.reqDRSwapToUfpAsSrc = FALSE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	76da      	strb	r2, [r3, #27]
        SetPEState(port, peSourceSendDRSwap);
 80022c8:	2116      	movs	r1, #22
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f002 ff64 	bl	8005198 <SetPEState>
 80022d0:	e024      	b.n	800231c <PolicySourceReady+0x34c>
    else if (port->PortConfig.reqVconnSwapToOffAsSrc == TRUE &&
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	7f5b      	ldrb	r3, [r3, #29]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d10c      	bne.n	80022f4 <PolicySourceReady+0x324>
             port->IsVCONNSource == TRUE &&
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d107      	bne.n	80022f4 <PolicySourceReady+0x324>
        port->PortConfig.reqVconnSwapToOffAsSrc = FALSE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	775a      	strb	r2, [r3, #29]
        SetPEState(port, peSourceSendVCONNSwap);
 80022ea:	212c      	movs	r1, #44	; 0x2c
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f002 ff53 	bl	8005198 <SetPEState>
 80022f2:	e013      	b.n	800231c <PolicySourceReady+0x34c>
        port->PEIdle = TRUE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        if (port->SourceCurrent != utcc3p0A)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002302:	2b03      	cmp	r3, #3
 8002304:	d00a      	beq.n	800231c <PolicySourceReady+0x34c>
            UpdateCurrentAdvert(port, utcc3p0A);
 8002306:	2103      	movs	r1, #3
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f004 f8da 	bl	80064c2 <UpdateCurrentAdvert>
            updateSourceMDACHigh(port);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f003 ff03 	bl	800611a <updateSourceMDACHigh>
}
 8002314:	e002      	b.n	800231c <PolicySourceReady+0x34c>
                break;
 8002316:	bf00      	nop
 8002318:	e000      	b.n	800231c <PolicySourceReady+0x34c>
                break;
 800231a:	bf00      	nop
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <PolicySourceGiveSourceCap>:

void PolicySourceGiveSourceCap(Port_t *port)
{
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b087      	sub	sp, #28
 8002328:	af04      	add	r7, sp, #16
 800232a:	6078      	str	r0, [r7, #4]
    PolicySendData(port, DMTSourceCapabilities,
                   DPM_GetSourceCap(port->dpm, port),
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4618      	mov	r0, r3
 8002334:	f004 ff7d 	bl	8007232 <DPM_GetSourceCap>
 8002338:	4604      	mov	r4, r0
                   DPM_GetSourceCapHeader(port->dpm, port)->
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4618      	mov	r0, r3
 8002342:	f004 ff6a 	bl	800721a <DPM_GetSourceCapHeader>
 8002346:	4603      	mov	r3, r0
 8002348:	785b      	ldrb	r3, [r3, #1]
 800234a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800234e:	b2db      	uxtb	r3, r3
                        NumDataObjects * sizeof(doDataObject_t),
 8002350:	009b      	lsls	r3, r3, #2
    PolicySendData(port, DMTSourceCapabilities,
 8002352:	2200      	movs	r2, #0
 8002354:	9203      	str	r2, [sp, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	9202      	str	r2, [sp, #8]
 800235a:	2200      	movs	r2, #0
 800235c:	9201      	str	r2, [sp, #4]
 800235e:	220f      	movs	r2, #15
 8002360:	9200      	str	r2, [sp, #0]
 8002362:	4622      	mov	r2, r4
 8002364:	2101      	movs	r1, #1
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f001 f86c 	bl	8003444 <PolicySendData>
                   peSourceReady, 0, SOP_TYPE_SOP, FALSE);
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	bd90      	pop	{r4, r7, pc}

08002374 <PolicySourceGetSourceCap>:

void PolicySourceGetSourceCap(Port_t *port)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af02      	add	r7, sp, #8
 800237a:	6078      	str	r0, [r7, #4]
    switch (port->PolicySubIndex)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002382:	2b00      	cmp	r3, #0
 8002384:	d113      	bne.n	80023ae <PolicySourceGetSourceCap+0x3a>
    {
    case 0:
        if (PolicySendCommand(port, CMTGetSourceCap, peSourceGetSourceCaps, 1,
 8002386:	2300      	movs	r3, #0
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	2301      	movs	r3, #1
 800238c:	2215      	movs	r2, #21
 800238e:	2107      	movs	r1, #7
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 ff19 	bl	80031c8 <PolicySendCommand>
 8002396:	4603      	mov	r3, r0
 8002398:	2b01      	cmp	r3, #1
 800239a:	d160      	bne.n	800245e <PolicySourceGetSourceCap+0xea>
                              SOP_TYPE_SOP) == STAT_SUCCESS)
        {
            TimerStart(&port->PolicyStateTimer, tSenderResponse);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80023a2:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f004 fd82 	bl	8006eb0 <TimerStart>
        }
        break;
 80023ac:	e057      	b.n	800245e <PolicySourceGetSourceCap+0xea>
    default:
        if (port->ProtocolMsgRx)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d03e      	beq.n	8002436 <PolicySourceGetSourceCap+0xc2>
        {
            port->ProtocolMsgRx = FALSE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
            if ((port->PolicyRxHeader.NumDataObjects > 0) &&
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80023c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d010      	beq.n	80023f2 <PolicySourceGetSourceCap+0x7e>
                (port->PolicyRxHeader.MessageType == DMTSourceCapabilities))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	b2db      	uxtb	r3, r3
            if ((port->PolicyRxHeader.NumDataObjects > 0) &&
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d108      	bne.n	80023f2 <PolicySourceGetSourceCap+0x7e>
            {
                UpdateCapabilitiesRx(port, TRUE);
 80023e0:	2101      	movs	r1, #1
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f001 f9d8 	bl	8003798 <UpdateCapabilitiesRx>
                SetPEState(port, peSourceReady);
 80023e8:	210f      	movs	r1, #15
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f002 fed4 	bl	8005198 <SetPEState>
 80023f0:	e034      	b.n	800245c <PolicySourceGetSourceCap+0xe8>
            }
            else if ((port->PolicyRxHeader.NumDataObjects == 0) &&
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80023f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d114      	bne.n	800242c <PolicySourceGetSourceCap+0xb8>
                     ((port->PolicyRxHeader.MessageType == CMTReject) ||
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	b2db      	uxtb	r3, r3
            else if ((port->PolicyRxHeader.NumDataObjects == 0) &&
 800240e:	2b04      	cmp	r3, #4
 8002410:	d007      	beq.n	8002422 <PolicySourceGetSourceCap+0xae>
                      (port->PolicyRxHeader.MessageType == CMTNotSupported)))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	b2db      	uxtb	r3, r3
                     ((port->PolicyRxHeader.MessageType == CMTReject) ||
 800241e:	2b10      	cmp	r3, #16
 8002420:	d104      	bne.n	800242c <PolicySourceGetSourceCap+0xb8>
            {
                SetPEState(port, peSinkReady);
 8002422:	2124      	movs	r1, #36	; 0x24
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f002 feb7 	bl	8005198 <SetPEState>
 800242a:	e017      	b.n	800245c <PolicySourceGetSourceCap+0xe8>
            }
            else
            {
                SetPEState(port, peSourceSendSoftReset);
 800242c:	2105      	movs	r1, #5
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f002 feb2 	bl	8005198 <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 8002434:	e014      	b.n	8002460 <PolicySourceGetSourceCap+0xec>
        else if (TimerExpired(&port->PolicyStateTimer))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800243c:	4618      	mov	r0, r3
 800243e:	f004 fd72 	bl	8006f26 <TimerExpired>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d004      	beq.n	8002452 <PolicySourceGetSourceCap+0xde>
            SetPEState(port, peSourceReady);
 8002448:	210f      	movs	r1, #15
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f002 fea4 	bl	8005198 <SetPEState>
        break;
 8002450:	e006      	b.n	8002460 <PolicySourceGetSourceCap+0xec>
            port->PEIdle = TRUE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 800245a:	e001      	b.n	8002460 <PolicySourceGetSourceCap+0xec>
 800245c:	e000      	b.n	8002460 <PolicySourceGetSourceCap+0xec>
        break;
 800245e:	bf00      	nop
    }
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <PolicySourceGetSinkCap>:

void PolicySourceGetSinkCap(Port_t *port)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af02      	add	r7, sp, #8
 800246e:	6078      	str	r0, [r7, #4]
    switch (port->PolicySubIndex)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002476:	2b00      	cmp	r3, #0
 8002478:	d113      	bne.n	80024a2 <PolicySourceGetSinkCap+0x3a>
    {
    case 0:
        if (PolicySendCommand(port, CMTGetSinkCap, peSourceGetSinkCaps, 1,
 800247a:	2300      	movs	r3, #0
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	2301      	movs	r3, #1
 8002480:	2211      	movs	r2, #17
 8002482:	2108      	movs	r1, #8
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 fe9f 	bl	80031c8 <PolicySendCommand>
 800248a:	4603      	mov	r3, r0
 800248c:	2b01      	cmp	r3, #1
 800248e:	d142      	bne.n	8002516 <PolicySourceGetSinkCap+0xae>
                              SOP_TYPE_SOP) == STAT_SUCCESS)
        {
            TimerStart(&port->PolicyStateTimer, tSenderResponse);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002496:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 800249a:	4618      	mov	r0, r3
 800249c:	f004 fd08 	bl	8006eb0 <TimerStart>
        }
        break;
 80024a0:	e039      	b.n	8002516 <PolicySourceGetSinkCap+0xae>
    default:
        if (port->ProtocolMsgRx)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d021      	beq.n	80024f0 <PolicySourceGetSinkCap+0x88>
        {
            port->ProtocolMsgRx = FALSE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
            if ((port->PolicyRxHeader.NumDataObjects > 0) &&
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80024ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d010      	beq.n	80024e6 <PolicySourceGetSinkCap+0x7e>
               (port->PolicyRxHeader.MessageType == DMTSinkCapabilities))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	b2db      	uxtb	r3, r3
            if ((port->PolicyRxHeader.NumDataObjects > 0) &&
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d108      	bne.n	80024e6 <PolicySourceGetSinkCap+0x7e>
            {
                UpdateCapabilitiesRx(port, FALSE);
 80024d4:	2100      	movs	r1, #0
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f001 f95e 	bl	8003798 <UpdateCapabilitiesRx>
                SetPEState(port, peSourceReady);
 80024dc:	210f      	movs	r1, #15
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f002 fe5a 	bl	8005198 <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 80024e4:	e018      	b.n	8002518 <PolicySourceGetSinkCap+0xb0>
                SetPEState(port, peSourceSendSoftReset);
 80024e6:	2105      	movs	r1, #5
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f002 fe55 	bl	8005198 <SetPEState>
        break;
 80024ee:	e013      	b.n	8002518 <PolicySourceGetSinkCap+0xb0>
        else if (TimerExpired(&port->PolicyStateTimer))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80024f6:	4618      	mov	r0, r3
 80024f8:	f004 fd15 	bl	8006f26 <TimerExpired>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d004      	beq.n	800250c <PolicySourceGetSinkCap+0xa4>
            SetPEState(port, peSourceReady);
 8002502:	210f      	movs	r1, #15
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f002 fe47 	bl	8005198 <SetPEState>
        break;
 800250a:	e005      	b.n	8002518 <PolicySourceGetSinkCap+0xb0>
            port->PEIdle = TRUE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8002514:	e000      	b.n	8002518 <PolicySourceGetSinkCap+0xb0>
        break;
 8002516:	bf00      	nop
    }
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <PolicySourceGiveSinkCap>:

void PolicySourceGiveSinkCap(Port_t *port)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
                       SOP_TYPE_SOP, FALSE);
    }
    else
#endif /* FSC_HAVE_DRP */
    {
        SetPEState(port, peNotSupported);
 8002528:	2136      	movs	r1, #54	; 0x36
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f002 fe34 	bl	8005198 <SetPEState>
    }
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <PolicySourceSendPing>:

void PolicySourceSendPing(Port_t *port)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af02      	add	r7, sp, #8
 800253e:	6078      	str	r0, [r7, #4]
    PolicySendCommand(port, CMTPing, peSourceReady, 0, SOP_TYPE_SOP);
 8002540:	2300      	movs	r3, #0
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2300      	movs	r3, #0
 8002546:	220f      	movs	r2, #15
 8002548:	2105      	movs	r1, #5
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fe3c 	bl	80031c8 <PolicySendCommand>
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <PolicySourceGotoMin>:

void PolicySourceGotoMin(Port_t *port)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af02      	add	r7, sp, #8
 800255e:	6078      	str	r0, [r7, #4]
    if (port->ProtocolMsgRx)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d018      	beq.n	800259c <PolicySourceGotoMin+0x44>
    {
        port->ProtocolMsgRx = FALSE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
        if (port->PolicyRxHeader.NumDataObjects == 0)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8002578:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d16a      	bne.n	8002658 <PolicySourceGotoMin+0x100>
        {
            switch (port->PolicyRxHeader.MessageType)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8002588:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b0d      	cmp	r3, #13
 8002590:	d164      	bne.n	800265c <PolicySourceGotoMin+0x104>
            {
            case CMTSoftReset:
                SetPEState(port, peSourceSoftReset);
 8002592:	2104      	movs	r1, #4
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f002 fdff 	bl	8005198 <SetPEState>
                break;
 800259a:	e060      	b.n	800265e <PolicySourceGotoMin+0x106>
            }
        }
    }
    else
    {
        switch (port->PolicySubIndex)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d84f      	bhi.n	8002646 <PolicySourceGotoMin+0xee>
 80025a6:	a201      	add	r2, pc, #4	; (adr r2, 80025ac <PolicySourceGotoMin+0x54>)
 80025a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ac:	080025c1 	.word	0x080025c1
 80025b0:	080025d3 	.word	0x080025d3
 80025b4:	080025f5 	.word	0x080025f5
 80025b8:	08002623 	.word	0x08002623
 80025bc:	08002635 	.word	0x08002635
        {
        case 0:
            PolicySendCommand(port, CMTGotoMin, peSourceGotoMin, 1,
 80025c0:	2300      	movs	r3, #0
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	2301      	movs	r3, #1
 80025c6:	2213      	movs	r2, #19
 80025c8:	2102      	movs	r1, #2
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 fdfc 	bl	80031c8 <PolicySendCommand>
                              SOP_TYPE_SOP);
            break;
 80025d0:	e045      	b.n	800265e <PolicySourceGotoMin+0x106>
        case 1:
            TimerStart(&port->PolicyStateTimer, tSrcTransition);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80025d8:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80025dc:	4618      	mov	r0, r3
 80025de:	f004 fc67 	bl	8006eb0 <TimerStart>
            port->PolicySubIndex++;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80025e8:	3301      	adds	r3, #1
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
            break;
 80025f2:	e034      	b.n	800265e <PolicySourceGotoMin+0x106>
        case 2:
            if (TimerExpired(&port->PolicyStateTimer))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80025fa:	4618      	mov	r0, r3
 80025fc:	f004 fc93 	bl	8006f26 <TimerExpired>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d008      	beq.n	8002618 <PolicySourceGotoMin+0xc0>
            {
                port->PolicySubIndex++;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800260c:	3301      	adds	r3, #1
 800260e:	b2da      	uxtb	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
            }
            else
            {
                port->PEIdle = TRUE;
            }
            break;
 8002616:	e022      	b.n	800265e <PolicySourceGotoMin+0x106>
                port->PEIdle = TRUE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            break;
 8002620:	e01d      	b.n	800265e <PolicySourceGotoMin+0x106>
        case 3:
            /* Adjust the power supply if necessary... */
            port->PolicySubIndex++;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002628:	3301      	adds	r3, #1
 800262a:	b2da      	uxtb	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
            break;
 8002632:	e014      	b.n	800265e <PolicySourceGotoMin+0x106>
        case 4:
            /* Validate the output is ready prior to sending PS_RDY */
            port->PolicySubIndex++;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800263a:	3301      	adds	r3, #1
 800263c:	b2da      	uxtb	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
            break;
 8002644:	e00b      	b.n	800265e <PolicySourceGotoMin+0x106>
        default:
            PolicySendCommand(port, CMTPS_RDY, peSourceReady, 0, SOP_TYPE_SOP);
 8002646:	2300      	movs	r3, #0
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	2300      	movs	r3, #0
 800264c:	220f      	movs	r2, #15
 800264e:	2106      	movs	r1, #6
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 fdb9 	bl	80031c8 <PolicySendCommand>
            break;
 8002656:	e002      	b.n	800265e <PolicySourceGotoMin+0x106>
        }
 8002658:	bf00      	nop
 800265a:	e000      	b.n	800265e <PolicySourceGotoMin+0x106>
                break;
 800265c:	bf00      	nop
        }
    }
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop

08002668 <PolicySourceSendDRSwap>:

void PolicySourceSendDRSwap(Port_t *port)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af02      	add	r7, sp, #8
 800266e:	6078      	str	r0, [r7, #4]
    switch (port->PolicySubIndex)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002676:	2b00      	cmp	r3, #0
 8002678:	d114      	bne.n	80026a4 <PolicySourceSendDRSwap+0x3c>
    {
    case 0:
        if (PolicySendCommand(port, CMTDR_Swap, peSourceSendDRSwap,
 800267a:	2300      	movs	r3, #0
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	2301      	movs	r3, #1
 8002680:	2216      	movs	r2, #22
 8002682:	2109      	movs	r1, #9
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 fd9f 	bl	80031c8 <PolicySendCommand>
 800268a:	4603      	mov	r3, r0
 800268c:	2b01      	cmp	r3, #1
 800268e:	f040 809a 	bne.w	80027c6 <PolicySourceSendDRSwap+0x15e>
                                   1, SOP_TYPE_SOP) == STAT_SUCCESS)
        {
            TimerStart(&port->PolicyStateTimer, tSenderResponse);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002698:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 800269c:	4618      	mov	r0, r3
 800269e:	f004 fc07 	bl	8006eb0 <TimerStart>
        }
        break;
 80026a2:	e090      	b.n	80027c6 <PolicySourceSendDRSwap+0x15e>
    default:
        if (port->ProtocolMsgRx)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d077      	beq.n	800279e <PolicySourceSendDRSwap+0x136>
        {
            port->ProtocolMsgRx = FALSE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
            if (port->PolicyRxHeader.NumDataObjects == 0)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80026bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d166      	bne.n	8002794 <PolicySourceSendDRSwap+0x12c>
            {
                switch (port->PolicyRxHeader.MessageType)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80026cc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d002      	beq.n	80026dc <PolicySourceSendDRSwap+0x74>
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d052      	beq.n	8002780 <PolicySourceSendDRSwap+0x118>
 80026da:	e056      	b.n	800278a <PolicySourceSendDRSwap+0x122>
                {
                case CMTAccept:
                    port->PolicyIsDFP =
                            (port->PolicyIsDFP == TRUE) ? FALSE : TRUE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	bf14      	ite	ne
 80026e6:	2301      	movne	r3, #1
 80026e8:	2300      	moveq	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	461a      	mov	r2, r3
                    port->PolicyIsDFP =
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
                    port->Registers.Switches.DATAROLE = port->PolicyIsDFP;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	b2d9      	uxtb	r1, r3
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8002706:	f361 1304 	bfi	r3, r1, #4, #1
 800270a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                    DeviceWrite(port->I2cAddr, regSwitches1, 1,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	332b      	adds	r3, #43	; 0x2b
 8002718:	2201      	movs	r2, #1
 800271a:	2103      	movs	r1, #3
 800271c:	f004 fb8e 	bl	8006e3c <DeviceWrite>
                                &port->Registers.Switches.byte[1]);

                    if (port->PdRevSop == USBPDSPECREV2p0)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8002726:	2b01      	cmp	r3, #1
 8002728:	d12a      	bne.n	8002780 <PolicySourceSendDRSwap+0x118>
                    {
                        /* In PD2.0, DFP controls SOP* coms */
                        if (port->PolicyIsDFP == TRUE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002730:	2b01      	cmp	r3, #1
 8002732:	d10e      	bne.n	8002752 <PolicySourceSendDRSwap+0xea>
                        {
                            port->Registers.Control.ENSOP1 = SOP_P_Capable;
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 800273a:	f36f 0300 	bfc	r3, #0, #1
 800273e:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                            port->Registers.Control.ENSOP2 = SOP_PP_Capable;
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8002748:	f36f 0341 	bfc	r3, #1, #1
 800274c:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
 8002750:	e00d      	b.n	800276e <PolicySourceSendDRSwap+0x106>
                            port->discoverIdCounter = 0;
#endif /* FSC_HAVE_VDM */
                        }
                        else
                        {
                            port->Registers.Control.ENSOP1 = 0;
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8002758:	f36f 0300 	bfc	r3, #0, #1
 800275c:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                            port->Registers.Control.ENSOP2 = 0;
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8002766:	f36f 0341 	bfc	r3, #1, #1
 800276a:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                        }
                        DeviceWrite(port->I2cAddr, regControl1, 1,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3331      	adds	r3, #49	; 0x31
 8002778:	2201      	movs	r2, #1
 800277a:	2107      	movs	r1, #7
 800277c:	f004 fb5e 	bl	8006e3c <DeviceWrite>
                                    &port->Registers.Control.byte[1]);
                    }
                    /* Fall through */
                case CMTReject:
                    SetPEState(port, peSourceReady);
 8002780:	210f      	movs	r1, #15
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f002 fd08 	bl	8005198 <SetPEState>
                    break;
 8002788:	e01c      	b.n	80027c4 <PolicySourceSendDRSwap+0x15c>
                default:
                    SetPEState(port, peSourceSendSoftReset);
 800278a:	2105      	movs	r1, #5
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f002 fd03 	bl	8005198 <SetPEState>
                    break;
 8002792:	e017      	b.n	80027c4 <PolicySourceSendDRSwap+0x15c>
                }
            }
            else
            {
                SetPEState(port, peSourceSendSoftReset);
 8002794:	2105      	movs	r1, #5
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f002 fcfe 	bl	8005198 <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 800279c:	e014      	b.n	80027c8 <PolicySourceSendDRSwap+0x160>
        else if (TimerExpired(&port->PolicyStateTimer))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80027a4:	4618      	mov	r0, r3
 80027a6:	f004 fbbe 	bl	8006f26 <TimerExpired>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d004      	beq.n	80027ba <PolicySourceSendDRSwap+0x152>
            SetPEState(port, peSourceReady);
 80027b0:	210f      	movs	r1, #15
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f002 fcf0 	bl	8005198 <SetPEState>
        break;
 80027b8:	e006      	b.n	80027c8 <PolicySourceSendDRSwap+0x160>
            port->PEIdle = TRUE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 80027c2:	e001      	b.n	80027c8 <PolicySourceSendDRSwap+0x160>
 80027c4:	e000      	b.n	80027c8 <PolicySourceSendDRSwap+0x160>
        break;
 80027c6:	bf00      	nop
    }
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <PolicySourceEvaluateDRSwap>:

void PolicySourceEvaluateDRSwap(Port_t *port)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	6078      	str	r0, [r7, #4]
        PolicySendCommand(port, CMTReject, peSourceReady, 0,
                          port->ProtocolMsgRxSop);
    }
    else
    {
        if (PolicySendCommand(port, CMTAccept, peSourceReady, 0,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	2300      	movs	r3, #0
 80027e2:	220f      	movs	r2, #15
 80027e4:	2103      	movs	r1, #3
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 fcee 	bl	80031c8 <PolicySendCommand>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d151      	bne.n	8002896 <PolicySourceEvaluateDRSwap+0xc6>
                                   port->ProtocolMsgRxSop) == STAT_SUCCESS)
        {
            port->PolicyIsDFP = (port->PolicyIsDFP == TRUE) ? FALSE : TRUE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	bf14      	ite	ne
 80027fc:	2301      	movne	r3, #1
 80027fe:	2300      	moveq	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	461a      	mov	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            port->Registers.Switches.DATAROLE = port->PolicyIsDFP;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	b2d9      	uxtb	r1, r3
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 800281c:	f361 1304 	bfi	r3, r1, #4, #1
 8002820:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
            DeviceWrite(port->I2cAddr, regSwitches1, 1,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	332b      	adds	r3, #43	; 0x2b
 800282e:	2201      	movs	r2, #1
 8002830:	2103      	movs	r1, #3
 8002832:	f004 fb03 	bl	8006e3c <DeviceWrite>
                    &port->Registers.Switches.byte[1]);

            if (port->PdRevSop == USBPDSPECREV2p0)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800283c:	2b01      	cmp	r3, #1
 800283e:	d12a      	bne.n	8002896 <PolicySourceEvaluateDRSwap+0xc6>
            {
                /* In PD2.0, DFP controls SOP* coms */
                if (port->PolicyIsDFP == TRUE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002846:	2b01      	cmp	r3, #1
 8002848:	d10e      	bne.n	8002868 <PolicySourceEvaluateDRSwap+0x98>
                {
                    port->Registers.Control.ENSOP1 = SOP_P_Capable;
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8002850:	f36f 0300 	bfc	r3, #0, #1
 8002854:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                    port->Registers.Control.ENSOP2 = SOP_PP_Capable;
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 800285e:	f36f 0341 	bfc	r3, #1, #1
 8002862:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
 8002866:	e00d      	b.n	8002884 <PolicySourceEvaluateDRSwap+0xb4>
                    port->discoverIdCounter = 0;
#endif /* FSC_HAVE_VDM */
                }
                else
                {
                    port->Registers.Control.ENSOP1 = 0;
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 800286e:	f36f 0300 	bfc	r3, #0, #1
 8002872:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                    port->Registers.Control.ENSOP2 = 0;
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 800287c:	f36f 0341 	bfc	r3, #1, #1
 8002880:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                }
                DeviceWrite(port->I2cAddr, regControl1, 1,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3331      	adds	r3, #49	; 0x31
 800288e:	2201      	movs	r2, #1
 8002890:	2107      	movs	r1, #7
 8002892:	f004 fad3 	bl	8006e3c <DeviceWrite>
                            &port->Registers.Control.byte[1]);
            }
        }
    }
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <PolicySourceSendVCONNSwap>:

void PolicySourceSendVCONNSwap(Port_t *port)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	6078      	str	r0, [r7, #4]
    switch (port->PolicySubIndex)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	f200 8151 	bhi.w	8002b56 <PolicySourceSendVCONNSwap+0x2b6>
 80028b4:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <PolicySourceSendVCONNSwap+0x1c>)
 80028b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ba:	bf00      	nop
 80028bc:	080028d1 	.word	0x080028d1
 80028c0:	080028fb 	.word	0x080028fb
 80028c4:	08002993 	.word	0x08002993
 80028c8:	08002a51 	.word	0x08002a51
 80028cc:	08002b29 	.word	0x08002b29
    {
    case 0:
        if (PolicySendCommand(port, CMTVCONN_Swap, peSourceSendVCONNSwap, 1,
 80028d0:	2300      	movs	r3, #0
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	2301      	movs	r3, #1
 80028d6:	222c      	movs	r2, #44	; 0x2c
 80028d8:	210b      	movs	r1, #11
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fc74 	bl	80031c8 <PolicySendCommand>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	f040 8140 	bne.w	8002b68 <PolicySourceSendVCONNSwap+0x2c8>
                              SOP_TYPE_SOP) == STAT_SUCCESS)
        {
            TimerStart(&port->PolicyStateTimer, tSenderResponse);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80028ee:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f004 fadc 	bl	8006eb0 <TimerStart>
        }
        break;
 80028f8:	e136      	b.n	8002b68 <PolicySourceSendVCONNSwap+0x2c8>
    case 1:
        if (port->ProtocolMsgRx)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d032      	beq.n	800296a <PolicySourceSendVCONNSwap+0xca>
        {
            port->ProtocolMsgRx = FALSE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
            if (port->PolicyRxHeader.NumDataObjects == 0)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8002912:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d121      	bne.n	8002960 <PolicySourceSendVCONNSwap+0xc0>
            {
                switch (port->PolicyRxHeader.MessageType)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8002922:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b0c      	cmp	r3, #12
 800292a:	d00f      	beq.n	800294c <PolicySourceSendVCONNSwap+0xac>
 800292c:	2b0c      	cmp	r3, #12
 800292e:	dc12      	bgt.n	8002956 <PolicySourceSendVCONNSwap+0xb6>
 8002930:	2b03      	cmp	r3, #3
 8002932:	d002      	beq.n	800293a <PolicySourceSendVCONNSwap+0x9a>
 8002934:	2b04      	cmp	r3, #4
 8002936:	d009      	beq.n	800294c <PolicySourceSendVCONNSwap+0xac>
 8002938:	e00d      	b.n	8002956 <PolicySourceSendVCONNSwap+0xb6>
                {
                case CMTAccept:
                    port->PolicySubIndex++;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002940:	3301      	adds	r3, #1
 8002942:	b2da      	uxtb	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
                    break;
 800294a:	e021      	b.n	8002990 <PolicySourceSendVCONNSwap+0xf0>
                case CMTWait:
                case CMTReject:
                    SetPEState(port, peSourceReady);
 800294c:	210f      	movs	r1, #15
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f002 fc22 	bl	8005198 <SetPEState>
                    break;
 8002954:	e01c      	b.n	8002990 <PolicySourceSendVCONNSwap+0xf0>
                default:
                    SetPEState(port, peSourceSendSoftReset);
 8002956:	2105      	movs	r1, #5
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f002 fc1d 	bl	8005198 <SetPEState>
                    break;
 800295e:	e017      	b.n	8002990 <PolicySourceSendVCONNSwap+0xf0>
                }
            }
            else
            {
                SetPEState(port, peSourceSendSoftReset);
 8002960:	2105      	movs	r1, #5
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f002 fc18 	bl	8005198 <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 8002968:	e0ff      	b.n	8002b6a <PolicySourceSendVCONNSwap+0x2ca>
        else if (TimerExpired(&port->PolicyStateTimer))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002970:	4618      	mov	r0, r3
 8002972:	f004 fad8 	bl	8006f26 <TimerExpired>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d004      	beq.n	8002986 <PolicySourceSendVCONNSwap+0xe6>
            SetPEState(port, peSourceReady);
 800297c:	210f      	movs	r1, #15
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f002 fc0a 	bl	8005198 <SetPEState>
        break;
 8002984:	e0f1      	b.n	8002b6a <PolicySourceSendVCONNSwap+0x2ca>
            port->PEIdle = TRUE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 800298e:	e0ec      	b.n	8002b6a <PolicySourceSendVCONNSwap+0x2ca>
 8002990:	e0eb      	b.n	8002b6a <PolicySourceSendVCONNSwap+0x2ca>
    case 2:
        if (port->IsVCONNSource)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00f      	beq.n	80029bc <PolicySourceSendVCONNSwap+0x11c>
        {
            TimerStart(&port->PolicyStateTimer, tVCONNSourceOn);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80029a2:	4974      	ldr	r1, [pc, #464]	; (8002b74 <PolicySourceSendVCONNSwap+0x2d4>)
 80029a4:	4618      	mov	r0, r3
 80029a6:	f004 fa83 	bl	8006eb0 <TimerStart>
            port->PolicySubIndex++;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80029b0:	3301      	adds	r3, #1
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
            }

            TimerStart(&port->PolicyStateTimer, tVCONNTransition);
            port->PolicySubIndex = 4;
        }
        break;
 80029ba:	e0d6      	b.n	8002b6a <PolicySourceSendVCONNSwap+0x2ca>
                if (port->CCPin == CC1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d107      	bne.n	80029d6 <PolicySourceSendVCONNSwap+0x136>
                    port->Registers.Switches.VCONN_CC2 = 1;
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 80029cc:	f043 0320 	orr.w	r3, r3, #32
 80029d0:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
 80029d4:	e006      	b.n	80029e4 <PolicySourceSendVCONNSwap+0x144>
                    port->Registers.Switches.VCONN_CC1 = 1;
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 80029dc:	f043 0310 	orr.w	r3, r3, #16
 80029e0:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                DeviceWrite(port->I2cAddr, regSwitches0, 1,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	332a      	adds	r3, #42	; 0x2a
 80029ee:	2201      	movs	r2, #1
 80029f0:	2102      	movs	r1, #2
 80029f2:	f004 fa23 	bl	8006e3c <DeviceWrite>
            port->IsVCONNSource = TRUE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            if (port->PdRevSop == USBPDSPECREV3p0)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d116      	bne.n	8002a36 <PolicySourceSendVCONNSwap+0x196>
                port->Registers.Control.ENSOP1 = SOP_P_Capable;
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8002a0e:	f36f 0300 	bfc	r3, #0, #1
 8002a12:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                port->Registers.Control.ENSOP2 = SOP_PP_Capable;
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8002a1c:	f36f 0341 	bfc	r3, #1, #1
 8002a20:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                DeviceWrite(port->I2cAddr, regControl1, 1,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3331      	adds	r3, #49	; 0x31
 8002a2e:	2201      	movs	r2, #1
 8002a30:	2107      	movs	r1, #7
 8002a32:	f004 fa03 	bl	8006e3c <DeviceWrite>
            TimerStart(&port->PolicyStateTimer, tVCONNTransition);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002a3c:	f644 6120 	movw	r1, #20000	; 0x4e20
 8002a40:	4618      	mov	r0, r3
 8002a42:	f004 fa35 	bl	8006eb0 <TimerStart>
            port->PolicySubIndex = 4;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2204      	movs	r2, #4
 8002a4a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        break;
 8002a4e:	e08c      	b.n	8002b6a <PolicySourceSendVCONNSwap+0x2ca>
    case 3:
        if (port->ProtocolMsgRx)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d04f      	beq.n	8002afa <PolicySourceSendVCONNSwap+0x25a>
        {
            port->ProtocolMsgRx = FALSE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
            if (port->PolicyRxHeader.NumDataObjects == 0)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8002a68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d156      	bne.n	8002b20 <PolicySourceSendVCONNSwap+0x280>
            {
                switch (port->PolicyRxHeader.MessageType)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8002a78:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b06      	cmp	r3, #6
 8002a80:	d150      	bne.n	8002b24 <PolicySourceSendVCONNSwap+0x284>
                {
                case CMTPS_RDY:
                    /* Turn off our VConn */
                    port->Registers.Switches.VCONN_CC1 = 0;
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002a88:	f36f 1304 	bfc	r3, #4, #1
 8002a8c:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    port->Registers.Switches.VCONN_CC2 = 0;
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002a96:	f36f 1345 	bfc	r3, #5, #1
 8002a9a:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    DeviceWrite(port->I2cAddr, regSwitches0, 1,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	332a      	adds	r3, #42	; 0x2a
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	2102      	movs	r1, #2
 8002aac:	f004 f9c6 	bl	8006e3c <DeviceWrite>
                                &port->Registers.Switches.byte[0]);

                    port->IsVCONNSource = FALSE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

                    if (port->PdRevSop == USBPDSPECREV3p0)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d116      	bne.n	8002af0 <PolicySourceSendVCONNSwap+0x250>
                    {
                        /* In PD3.0, VConn Source controls SOP* coms */
                        port->Registers.Control.ENSOP1 = 0;
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8002ac8:	f36f 0300 	bfc	r3, #0, #1
 8002acc:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                        port->Registers.Control.ENSOP2 = 0;
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8002ad6:	f36f 0341 	bfc	r3, #1, #1
 8002ada:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                        DeviceWrite(port->I2cAddr, regControl1, 1,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3331      	adds	r3, #49	; 0x31
 8002ae8:	2201      	movs	r2, #1
 8002aea:	2107      	movs	r1, #7
 8002aec:	f004 f9a6 	bl	8006e3c <DeviceWrite>
                                    &port->Registers.Control.byte[1]);
#ifdef FSC_HAVE_VDM
                        port->discoverIdCounter = 0;
#endif /* FSC_HAVE_VDM */
                    }
                    SetPEState(port, peSourceReady);
 8002af0:	210f      	movs	r1, #15
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f002 fb50 	bl	8005198 <SetPEState>
                    break;
 8002af8:	e015      	b.n	8002b26 <PolicySourceSendVCONNSwap+0x286>
                    /* For all other commands received, simply ignore them */
                    break;
                }
            }
        }
        else if (TimerExpired(&port->PolicyStateTimer))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002b00:	4618      	mov	r0, r3
 8002b02:	f004 fa10 	bl	8006f26 <TimerExpired>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d004      	beq.n	8002b16 <PolicySourceSendVCONNSwap+0x276>
        {
            SetPEState(port, peSourceSendHardReset);
 8002b0c:	2103      	movs	r1, #3
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f002 fb42 	bl	8005198 <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 8002b14:	e029      	b.n	8002b6a <PolicySourceSendVCONNSwap+0x2ca>
            port->PEIdle = TRUE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8002b1e:	e024      	b.n	8002b6a <PolicySourceSendVCONNSwap+0x2ca>
            }
 8002b20:	bf00      	nop
 8002b22:	e022      	b.n	8002b6a <PolicySourceSendVCONNSwap+0x2ca>
                    break;
 8002b24:	bf00      	nop
        break;
 8002b26:	e020      	b.n	8002b6a <PolicySourceSendVCONNSwap+0x2ca>
    case 4:
        if (TimerExpired(&port->PolicyStateTimer) == TRUE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f004 f9f9 	bl	8006f26 <TimerExpired>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d108      	bne.n	8002b4c <PolicySourceSendVCONNSwap+0x2ac>
        {
            port->PolicySubIndex++;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002b40:	3301      	adds	r3, #1
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8002b4a:	e004      	b.n	8002b56 <PolicySourceSendVCONNSwap+0x2b6>
            /* Fall through to default. Immediately send PS_RDY */
        }
        else
        {
            port->PEIdle = TRUE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            break;
 8002b54:	e009      	b.n	8002b6a <PolicySourceSendVCONNSwap+0x2ca>
        }
    default:
       PolicySendCommand(port, CMTPS_RDY, peSourceReady, 0, SOP_TYPE_SOP);
 8002b56:	2300      	movs	r3, #0
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	220f      	movs	r2, #15
 8002b5e:	2106      	movs	r1, #6
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fb31 	bl	80031c8 <PolicySendCommand>
       break;
 8002b66:	e000      	b.n	8002b6a <PolicySourceSendVCONNSwap+0x2ca>
        break;
 8002b68:	bf00      	nop
    }
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	00015f90 	.word	0x00015f90

08002b78 <PolicySourceEvaluateVCONNSwap>:

void PolicySourceEvaluateVCONNSwap(Port_t *port)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	6078      	str	r0, [r7, #4]
    switch (port->PolicySubIndex)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	f200 810e 	bhi.w	8002da8 <PolicySourceEvaluateVCONNSwap+0x230>
 8002b8c:	a201      	add	r2, pc, #4	; (adr r2, 8002b94 <PolicySourceEvaluateVCONNSwap+0x1c>)
 8002b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b92:	bf00      	nop
 8002b94:	08002ba5 	.word	0x08002ba5
 8002b98:	08002be5 	.word	0x08002be5
 8002b9c:	08002ca3 	.word	0x08002ca3
 8002ba0:	08002d7b 	.word	0x08002d7b
    {
    case 0:
        /* Accept/Reject */
        if ((port->IsVCONNSource && VCONN_Swap_To_Off_Supported) ||
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d104      	bne.n	8002bb8 <PolicySourceEvaluateVCONNSwap+0x40>
            (!port->IsVCONNSource && VCONN_Swap_To_On_Supported))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
        if ((port->IsVCONNSource && VCONN_Swap_To_Off_Supported) ||
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <PolicySourceEvaluateVCONNSwap+0x56>
        {
            PolicySendCommand(port, CMTAccept, peSourceEvaluateVCONNSwap, 1,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	222d      	movs	r2, #45	; 0x2d
 8002bc4:	2103      	movs	r1, #3
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fafe 	bl	80031c8 <PolicySendCommand>
        else
        {
            PolicySendCommand(port, CMTReject, peSourceReady, 0,
                              port->ProtocolMsgRxSop);
        }
        break;
 8002bcc:	e0f7      	b.n	8002dbe <PolicySourceEvaluateVCONNSwap+0x246>
            PolicySendCommand(port, CMTReject, peSourceReady, 0,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	220f      	movs	r2, #15
 8002bda:	2104      	movs	r1, #4
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 faf3 	bl	80031c8 <PolicySendCommand>
        break;
 8002be2:	e0ec      	b.n	8002dbe <PolicySourceEvaluateVCONNSwap+0x246>
    case 1:
        /* Swap to On */
        if (port->IsVCONNSource)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00f      	beq.n	8002c0e <PolicySourceEvaluateVCONNSwap+0x96>
        {
            TimerStart(&port->PolicyStateTimer, tVCONNSourceOn);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002bf4:	4974      	ldr	r1, [pc, #464]	; (8002dc8 <PolicySourceEvaluateVCONNSwap+0x250>)
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f004 f95a 	bl	8006eb0 <TimerStart>
            port->PolicySubIndex++;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002c02:	3301      	adds	r3, #1
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
            }

            TimerStart(&port->PolicyStateTimer, tVCONNTransition);
            port->PolicySubIndex = 3;
        }
        break;
 8002c0c:	e0d7      	b.n	8002dbe <PolicySourceEvaluateVCONNSwap+0x246>
                if (port->CCPin == CC1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d107      	bne.n	8002c28 <PolicySourceEvaluateVCONNSwap+0xb0>
                    port->Registers.Switches.VCONN_CC2 = 1;
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002c1e:	f043 0320 	orr.w	r3, r3, #32
 8002c22:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
 8002c26:	e006      	b.n	8002c36 <PolicySourceEvaluateVCONNSwap+0xbe>
                    port->Registers.Switches.VCONN_CC1 = 1;
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002c2e:	f043 0310 	orr.w	r3, r3, #16
 8002c32:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                DeviceWrite(port->I2cAddr, regSwitches0, 1,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	332a      	adds	r3, #42	; 0x2a
 8002c40:	2201      	movs	r2, #1
 8002c42:	2102      	movs	r1, #2
 8002c44:	f004 f8fa 	bl	8006e3c <DeviceWrite>
            port->IsVCONNSource = TRUE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            if (port->PdRevSop == USBPDSPECREV3p0)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d116      	bne.n	8002c88 <PolicySourceEvaluateVCONNSwap+0x110>
                port->Registers.Control.ENSOP1 = SOP_P_Capable;
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8002c60:	f36f 0300 	bfc	r3, #0, #1
 8002c64:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                port->Registers.Control.ENSOP2 = SOP_PP_Capable;
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8002c6e:	f36f 0341 	bfc	r3, #1, #1
 8002c72:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                DeviceWrite(port->I2cAddr, regControl1, 1,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3331      	adds	r3, #49	; 0x31
 8002c80:	2201      	movs	r2, #1
 8002c82:	2107      	movs	r1, #7
 8002c84:	f004 f8da 	bl	8006e3c <DeviceWrite>
            TimerStart(&port->PolicyStateTimer, tVCONNTransition);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002c8e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8002c92:	4618      	mov	r0, r3
 8002c94:	f004 f90c 	bl	8006eb0 <TimerStart>
            port->PolicySubIndex = 3;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        break;
 8002ca0:	e08d      	b.n	8002dbe <PolicySourceEvaluateVCONNSwap+0x246>
    case 2:
        /* Swap to Off */
        if (port->ProtocolMsgRx)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d04f      	beq.n	8002d4c <PolicySourceEvaluateVCONNSwap+0x1d4>
        {
            port->ProtocolMsgRx = FALSE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
            if (port->PolicyRxHeader.NumDataObjects == 0)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8002cba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d156      	bne.n	8002d72 <PolicySourceEvaluateVCONNSwap+0x1fa>
            {
                switch (port->PolicyRxHeader.MessageType)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8002cca:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b06      	cmp	r3, #6
 8002cd2:	d150      	bne.n	8002d76 <PolicySourceEvaluateVCONNSwap+0x1fe>
                {
                case CMTPS_RDY:
                    /* Disable the VCONN source */
                    port->Registers.Switches.VCONN_CC1 = 0;
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002cda:	f36f 1304 	bfc	r3, #4, #1
 8002cde:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    port->Registers.Switches.VCONN_CC2 = 0;
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002ce8:	f36f 1345 	bfc	r3, #5, #1
 8002cec:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    DeviceWrite(port->I2cAddr, regSwitches0, 1,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	332a      	adds	r3, #42	; 0x2a
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	2102      	movs	r1, #2
 8002cfe:	f004 f89d 	bl	8006e3c <DeviceWrite>
                                &port->Registers.Switches.byte[0]);

                    port->IsVCONNSource = FALSE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

                    if (port->PdRevSop == USBPDSPECREV3p0)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d116      	bne.n	8002d42 <PolicySourceEvaluateVCONNSwap+0x1ca>
                    {
                        /* In PD3.0, VConn Source controls SOP* coms */
                        port->Registers.Control.ENSOP1 = 0;
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8002d1a:	f36f 0300 	bfc	r3, #0, #1
 8002d1e:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                        port->Registers.Control.ENSOP2 = 0;
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8002d28:	f36f 0341 	bfc	r3, #1, #1
 8002d2c:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                        DeviceWrite(port->I2cAddr, regControl1, 1,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3331      	adds	r3, #49	; 0x31
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	2107      	movs	r1, #7
 8002d3e:	f004 f87d 	bl	8006e3c <DeviceWrite>
#ifdef FSC_HAVE_VDM
                        port->discoverIdCounter = 0;
#endif /* FSC_HAVE_VDM */
                    }

                    SetPEState(port, peSourceReady);
 8002d42:	210f      	movs	r1, #15
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f002 fa27 	bl	8005198 <SetPEState>
                    break;
 8002d4a:	e015      	b.n	8002d78 <PolicySourceEvaluateVCONNSwap+0x200>
                    /* For all other commands received, simply ignore them */
                    break;
                }
            }
        }
        else if (TimerExpired(&port->PolicyStateTimer))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002d52:	4618      	mov	r0, r3
 8002d54:	f004 f8e7 	bl	8006f26 <TimerExpired>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d004      	beq.n	8002d68 <PolicySourceEvaluateVCONNSwap+0x1f0>
        {
            SetPEState(port, peSourceSendHardReset);
 8002d5e:	2103      	movs	r1, #3
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f002 fa19 	bl	8005198 <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 8002d66:	e02a      	b.n	8002dbe <PolicySourceEvaluateVCONNSwap+0x246>
            port->PEIdle = TRUE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8002d70:	e025      	b.n	8002dbe <PolicySourceEvaluateVCONNSwap+0x246>
            }
 8002d72:	bf00      	nop
 8002d74:	e023      	b.n	8002dbe <PolicySourceEvaluateVCONNSwap+0x246>
                    break;
 8002d76:	bf00      	nop
        break;
 8002d78:	e021      	b.n	8002dbe <PolicySourceEvaluateVCONNSwap+0x246>
    case 3:
        /* Done - PS_RDY */
        if (TimerExpired(&port->PolicyStateTimer) == TRUE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002d80:	4618      	mov	r0, r3
 8002d82:	f004 f8d0 	bl	8006f26 <TimerExpired>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d108      	bne.n	8002d9e <PolicySourceEvaluateVCONNSwap+0x226>
        {
            port->PolicySubIndex++;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002d92:	3301      	adds	r3, #1
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8002d9c:	e004      	b.n	8002da8 <PolicySourceEvaluateVCONNSwap+0x230>
            /* Fall through. Immediately send PS_RDY after timer expires. */
        }
        else
        {
            port->PEIdle = TRUE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            break;
 8002da6:	e00a      	b.n	8002dbe <PolicySourceEvaluateVCONNSwap+0x246>
        }
    default:
        PolicySendCommand(port, CMTPS_RDY, peSourceReady, 0,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	2300      	movs	r3, #0
 8002db2:	220f      	movs	r2, #15
 8002db4:	2106      	movs	r1, #6
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fa06 	bl	80031c8 <PolicySendCommand>
                          port->ProtocolMsgRxSop);
        break;
 8002dbc:	bf00      	nop
    }
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	00015f90 	.word	0x00015f90

08002dcc <PolicySourceSendPRSwap>:

void PolicySourceSendPRSwap(Port_t *port)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
            port->PEIdle = TRUE;
        }
        break;
    }
#endif /* FSC_HAVE_DRP */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <PolicySourceEvaluatePRSwap>:

void PolicySourceEvaluatePRSwap(Port_t *port)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af02      	add	r7, sp, #8
 8002de4:	6078      	str	r0, [r7, #4]
            port->PEIdle = TRUE;
        }
        break;
    }
#else
    PolicySendCommand(port, CMTReject, peSourceReady, 0,port->ProtocolMsgRxSop);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	2300      	movs	r3, #0
 8002df0:	220f      	movs	r2, #15
 8002df2:	2104      	movs	r1, #4
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f9e7 	bl	80031c8 <PolicySendCommand>
#endif /* FSC_HAVE_DRP */
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <PolicySourceWaitNewCapabilities>:

void PolicySourceWaitNewCapabilities(Port_t *port)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
    if(port->loopCounter == 0)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d133      	bne.n	8002e7c <PolicySourceWaitNewCapabilities+0x7a>
    {
        port->PEIdle = TRUE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        port->Registers.Mask.M_COMP_CHNG = 0;
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8002e22:	f36f 1345 	bfc	r3, #5, #1
 8002e26:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        DeviceWrite(port->I2cAddr, regMask, 1, &port->Registers.Mask.byte);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3334      	adds	r3, #52	; 0x34
 8002e34:	2201      	movs	r2, #1
 8002e36:	210a      	movs	r1, #10
 8002e38:	f004 f800 	bl	8006e3c <DeviceWrite>
        port->Registers.MaskAdv.M_HARDRST = 0;
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8002e42:	f36f 0300 	bfc	r3, #0, #1
 8002e46:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
        DeviceWrite(port->I2cAddr, regMaska,1,&port->Registers.MaskAdv.byte[0]);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3338      	adds	r3, #56	; 0x38
 8002e54:	2201      	movs	r2, #1
 8002e56:	210e      	movs	r1, #14
 8002e58:	f003 fff0 	bl	8006e3c <DeviceWrite>
        port->Registers.MaskAdv.M_GCRCSENT = 0;
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8002e62:	f36f 0300 	bfc	r3, #0, #1
 8002e66:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        DeviceWrite(port->I2cAddr, regMaskb,1,&port->Registers.MaskAdv.byte[1]);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3339      	adds	r3, #57	; 0x39
 8002e74:	2201      	movs	r2, #1
 8002e76:	210f      	movs	r1, #15
 8002e78:	f003 ffe0 	bl	8006e3c <DeviceWrite>
    }

    switch (port->PolicySubIndex)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d004      	beq.n	8002e90 <PolicySourceWaitNewCapabilities+0x8e>
    case 0:
        /* Wait for Policy Manager to change source capabilities */
        break;
    default:
        /* Transition to peSourceSendCapabilities */
        SetPEState(port, peSourceSendCaps);
 8002e86:	2107      	movs	r1, #7
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f002 f985 	bl	8005198 <SetPEState>
        break;
 8002e8e:	e000      	b.n	8002e92 <PolicySourceWaitNewCapabilities+0x90>
        break;
 8002e90:	bf00      	nop
    }
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <PolicySourceAlertReceived>:
#endif /* FSC_HAVE_SRC */


void PolicySourceAlertReceived(Port_t *port)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
    if (port->PolicyRxDataObj[0].ADO.Battery ||
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d11f      	bne.n	8002ef2 <PolicySourceAlertReceived+0x58>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d117      	bne.n	8002ef2 <PolicySourceAlertReceived+0x58>
        port->PolicyRxDataObj[0].ADO.OTP ||
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8002ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10f      	bne.n	8002ef2 <PolicySourceAlertReceived+0x58>
        port->PolicyRxDataObj[0].ADO.OVP ||
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d107      	bne.n	8002ef2 <PolicySourceAlertReceived+0x58>
        port->PolicyRxDataObj[0].ADO.OpCondition ||
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d009      	beq.n	8002f06 <PolicySourceAlertReceived+0x6c>
        port->PolicyRxDataObj[0].ADO.Input)
    {
        /* Send Get_Status */
        notify_observers(ALERT_EVENT, port->I2cAddr,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
                &port->PolicyRxDataObj[0].object);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	33b8      	adds	r3, #184	; 0xb8
        notify_observers(ALERT_EVENT, port->I2cAddr,
 8002efc:	461a      	mov	r2, r3
 8002efe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f02:	f004 fb9f 	bl	8007644 <notify_observers>
    }

    SetPEState(port, peSourceReady);
 8002f06:	210f      	movs	r1, #15
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f002 f945 	bl	8005198 <SetPEState>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <PolicyNotSupported>:

void PolicyNotSupported(Port_t *port)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af02      	add	r7, sp, #8
 8002f1c:	6078      	str	r0, [r7, #4]
    if (port->PdRevSop == USBPDSPECREV2p0)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d111      	bne.n	8002f4c <PolicyNotSupported+0x36>
    {
        PolicySendCommand(port, CMTReject,
            port->PolicyIsSource ? peSourceReady : peSinkReady, 0,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
        PolicySendCommand(port, CMTReject,
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <PolicyNotSupported+0x20>
 8002f32:	220f      	movs	r2, #15
 8002f34:	e000      	b.n	8002f38 <PolicyNotSupported+0x22>
 8002f36:	2224      	movs	r2, #36	; 0x24
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	2300      	movs	r3, #0
 8002f42:	2104      	movs	r1, #4
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f93f 	bl	80031c8 <PolicySendCommand>
                        port->PolicyIsSource ? peSourceReady : peSinkReady, 0,
                        port->ProtocolMsgRxSop);
            break;
        }
    }
}
 8002f4a:	e011      	b.n	8002f70 <PolicyNotSupported+0x5a>
                        port->PolicyIsSource ? peSourceReady : peSinkReady, 0,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
            PolicySendCommand(port, CMTNotSupported,
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <PolicyNotSupported+0x44>
 8002f56:	220f      	movs	r2, #15
 8002f58:	e000      	b.n	8002f5c <PolicyNotSupported+0x46>
 8002f5a:	2224      	movs	r2, #36	; 0x24
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	2300      	movs	r3, #0
 8002f66:	2110      	movs	r1, #16
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f92d 	bl	80031c8 <PolicySendCommand>
            break;
 8002f6e:	bf00      	nop
}
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <PolicyInvalidState>:
}

#endif /* FSC_HAVE_VDM */

void PolicyInvalidState(Port_t *port)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
    /* reset if we get to an invalid state */
    if (port->PolicyIsSource)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d004      	beq.n	8002f94 <PolicyInvalidState+0x1c>
    {
        SetPEState(port, peSourceSendHardReset);
 8002f8a:	2103      	movs	r1, #3
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f002 f903 	bl	8005198 <SetPEState>
    }
    else
    {
        SetPEState(port, peSinkSendHardReset);
    }
}
 8002f92:	e003      	b.n	8002f9c <PolicyInvalidState+0x24>
        SetPEState(port, peSinkSendHardReset);
 8002f94:	211a      	movs	r1, #26
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f002 f8fe 	bl	8005198 <SetPEState>
}
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <PolicySendGenericCommand>:

void PolicySendGenericCommand(Port_t *port)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	6078      	str	r0, [r7, #4]
    FSC_U8 status;
    switch (port->PolicySubIndex)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d12b      	bne.n	800300e <PolicySendGenericCommand+0x6a>
    {
    case 0:
        status = PolicySendCommand(port, port->PDTransmitHeader.MessageType,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002fbc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	2301      	movs	r3, #1
 8002fca:	227a      	movs	r2, #122	; 0x7a
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f8fb 	bl	80031c8 <PolicySendCommand>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	73fb      	strb	r3, [r7, #15]
                peSendGenericCommand, 1, SOP_TYPE_SOP);
        if (status == STAT_SUCCESS)
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d108      	bne.n	8002fee <PolicySendGenericCommand+0x4a>
        {
            TimerStart(&port->PolicyStateTimer, tSenderResponse);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002fe2:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f003 ff62 	bl	8006eb0 <TimerStart>
        else if (status == STAT_ERROR)
        {
            SetPEState(port, port->PolicyIsSource ?
                    peSourceReady : peSinkReady);
        }
        break;
 8002fec:	e040      	b.n	8003070 <PolicySendGenericCommand+0xcc>
        else if (status == STAT_ERROR)
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d13d      	bne.n	8003070 <PolicySendGenericCommand+0xcc>
            SetPEState(port, port->PolicyIsSource ?
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <PolicySendGenericCommand+0x5e>
 8002ffe:	230f      	movs	r3, #15
 8003000:	e000      	b.n	8003004 <PolicySendGenericCommand+0x60>
 8003002:	2324      	movs	r3, #36	; 0x24
 8003004:	4619      	mov	r1, r3
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f002 f8c6 	bl	8005198 <SetPEState>
        break;
 800300c:	e030      	b.n	8003070 <PolicySendGenericCommand+0xcc>
    default:
        if (port->ProtocolMsgRx)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d010      	beq.n	800303a <PolicySendGenericCommand+0x96>
        {
            port->ProtocolMsgRx = FALSE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3

            /* Check and handle message response */

            SetPEState(port, port->PolicyIsSource ?
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <PolicySendGenericCommand+0x8a>
 800302a:	230f      	movs	r3, #15
 800302c:	e000      	b.n	8003030 <PolicySendGenericCommand+0x8c>
 800302e:	2324      	movs	r3, #36	; 0x24
 8003030:	4619      	mov	r1, r3
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f002 f8b0 	bl	8005198 <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 8003038:	e01b      	b.n	8003072 <PolicySendGenericCommand+0xce>
        else if (TimerExpired(&port->PolicyStateTimer))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003040:	4618      	mov	r0, r3
 8003042:	f003 ff70 	bl	8006f26 <TimerExpired>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00c      	beq.n	8003066 <PolicySendGenericCommand+0xc2>
            SetPEState(port, port->PolicyIsSource ?
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <PolicySendGenericCommand+0xb6>
 8003056:	230f      	movs	r3, #15
 8003058:	e000      	b.n	800305c <PolicySendGenericCommand+0xb8>
 800305a:	2324      	movs	r3, #36	; 0x24
 800305c:	4619      	mov	r1, r3
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f002 f89a 	bl	8005198 <SetPEState>
        break;
 8003064:	e005      	b.n	8003072 <PolicySendGenericCommand+0xce>
            port->PEIdle = TRUE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 800306e:	e000      	b.n	8003072 <PolicySendGenericCommand+0xce>
        break;
 8003070:	bf00      	nop
    }
}
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <PolicySendGenericData>:

void PolicySendGenericData(Port_t *port)
{
 800307a:	b590      	push	{r4, r7, lr}
 800307c:	b089      	sub	sp, #36	; 0x24
 800307e:	af04      	add	r7, sp, #16
 8003080:	6078      	str	r0, [r7, #4]
    FSC_U8 status;
    switch (port->PolicySubIndex)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8003088:	2b00      	cmp	r3, #0
 800308a:	d13d      	bne.n	8003108 <PolicySendGenericData+0x8e>
    {
    case 0:
        status = PolicySendData(port, port->PDTransmitHeader.MessageType,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003092:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003096:	b2db      	uxtb	r3, r3
 8003098:	461c      	mov	r4, r3
                port->PDTransmitObjects,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
                port->PDTransmitHeader.NumDataObjects * sizeof(doDataObject_t),
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80030a6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	0099      	lsls	r1, r3, #2
        status = PolicySendData(port, port->PDTransmitHeader.MessageType,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80030b4:	2000      	movs	r0, #0
 80030b6:	9003      	str	r0, [sp, #12]
 80030b8:	9302      	str	r3, [sp, #8]
 80030ba:	2301      	movs	r3, #1
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	237b      	movs	r3, #123	; 0x7b
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	460b      	mov	r3, r1
 80030c4:	4621      	mov	r1, r4
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f9bc 	bl	8003444 <PolicySendData>
 80030cc:	4603      	mov	r3, r0
 80030ce:	73fb      	strb	r3, [r7, #15]
                peSendGenericData, 1,
                port->PolicyMsgTxSop, FALSE);
        if (status == STAT_SUCCESS)
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d108      	bne.n	80030e8 <PolicySendGenericData+0x6e>
        {
            TimerStart(&port->PolicyStateTimer, tSenderResponse);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80030dc:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 80030e0:	4618      	mov	r0, r3
 80030e2:	f003 fee5 	bl	8006eb0 <TimerStart>
        else if (status == STAT_ERROR)
        {
            SetPEState(port, port->PolicyIsSource ?
                    peSourceReady : peSinkReady);
        }
        break;
 80030e6:	e040      	b.n	800316a <PolicySendGenericData+0xf0>
        else if (status == STAT_ERROR)
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d13d      	bne.n	800316a <PolicySendGenericData+0xf0>
            SetPEState(port, port->PolicyIsSource ?
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <PolicySendGenericData+0x82>
 80030f8:	230f      	movs	r3, #15
 80030fa:	e000      	b.n	80030fe <PolicySendGenericData+0x84>
 80030fc:	2324      	movs	r3, #36	; 0x24
 80030fe:	4619      	mov	r1, r3
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f002 f849 	bl	8005198 <SetPEState>
        break;
 8003106:	e030      	b.n	800316a <PolicySendGenericData+0xf0>
    default:
        if (port->ProtocolMsgRx)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d010      	beq.n	8003134 <PolicySendGenericData+0xba>
        {
            port->ProtocolMsgRx = FALSE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3

            /* Check and handle message response */

            SetPEState(port, port->PolicyIsSource ?
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <PolicySendGenericData+0xae>
 8003124:	230f      	movs	r3, #15
 8003126:	e000      	b.n	800312a <PolicySendGenericData+0xb0>
 8003128:	2324      	movs	r3, #36	; 0x24
 800312a:	4619      	mov	r1, r3
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f002 f833 	bl	8005198 <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 8003132:	e01b      	b.n	800316c <PolicySendGenericData+0xf2>
        else if (TimerExpired(&port->PolicyStateTimer))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800313a:	4618      	mov	r0, r3
 800313c:	f003 fef3 	bl	8006f26 <TimerExpired>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00c      	beq.n	8003160 <PolicySendGenericData+0xe6>
            SetPEState(port, port->PolicyIsSource ?
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <PolicySendGenericData+0xda>
 8003150:	230f      	movs	r3, #15
 8003152:	e000      	b.n	8003156 <PolicySendGenericData+0xdc>
 8003154:	2324      	movs	r3, #36	; 0x24
 8003156:	4619      	mov	r1, r3
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f002 f81d 	bl	8005198 <SetPEState>
        break;
 800315e:	e005      	b.n	800316c <PolicySendGenericData+0xf2>
            port->PEIdle = TRUE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8003168:	e000      	b.n	800316c <PolicySendGenericData+0xf2>
        break;
 800316a:	bf00      	nop
    }
}
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	bd90      	pop	{r4, r7, pc}

08003174 <PolicySendHardReset>:

/* General PD Messaging */
void PolicySendHardReset(Port_t *port)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
    FSC_U8 data;
    if (!port->IsHardReset)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8003182:	2b00      	cmp	r3, #0
 8003184:	d11b      	bne.n	80031be <PolicySendHardReset+0x4a>
    {
        port->HardResetCounter++;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800318c:	3301      	adds	r3, #1
 800318e:	b2da      	uxtb	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        port->IsHardReset = TRUE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
        data = port->Registers.Control.byte[3] | 0x40;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80031a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	73fb      	strb	r3, [r7, #15]
        DeviceWrite(port->I2cAddr, regControl3, 1, &data);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80031b2:	f107 030f 	add.w	r3, r7, #15
 80031b6:	2201      	movs	r2, #1
 80031b8:	2109      	movs	r1, #9
 80031ba:	f003 fe3f 	bl	8006e3c <DeviceWrite>
    }
}
 80031be:	bf00      	nop
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <PolicySendCommand>:

FSC_U8 PolicySendCommand(Port_t *port, FSC_U8 Command, PolicyState_t nextState,
                         FSC_U8 subIndex, SopType sop)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	4608      	mov	r0, r1
 80031d2:	4611      	mov	r1, r2
 80031d4:	461a      	mov	r2, r3
 80031d6:	4603      	mov	r3, r0
 80031d8:	70fb      	strb	r3, [r7, #3]
 80031da:	460b      	mov	r3, r1
 80031dc:	70bb      	strb	r3, [r7, #2]
 80031de:	4613      	mov	r3, r2
 80031e0:	707b      	strb	r3, [r7, #1]
    FSC_U8 Status = STAT_BUSY;
 80031e2:	2300      	movs	r3, #0
 80031e4:	73fb      	strb	r3, [r7, #15]
    switch (port->PDTxStatus)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	f200 810e 	bhi.w	800340e <PolicySendCommand+0x246>
 80031f2:	a201      	add	r2, pc, #4	; (adr r2, 80031f8 <PolicySendCommand+0x30>)
 80031f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f8:	0800321d 	.word	0x0800321d
 80031fc:	0800340f 	.word	0x0800340f
 8003200:	080032e5 	.word	0x080032e5
 8003204:	080032e5 	.word	0x080032e5
 8003208:	080032e5 	.word	0x080032e5
 800320c:	08003335 	.word	0x08003335
 8003210:	0800334d 	.word	0x0800334d
 8003214:	08003397 	.word	0x08003397
 8003218:	080033e5 	.word	0x080033e5
    {
    case txIdle:
        port->PolicyTxHeader.word = 0;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
        port->PolicyTxHeader.NumDataObjects = 0;
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 800322a:	f36f 1306 	bfc	r3, #4, #3
 800322e:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
        port->PolicyTxHeader.MessageType = Command;
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	b2d9      	uxtb	r1, r3
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 8003240:	f361 0304 	bfi	r3, r1, #0, #5
 8003244:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
        if (sop == SOP_TYPE_SOP)
 8003248:	7e3b      	ldrb	r3, [r7, #24]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d11a      	bne.n	8003284 <PolicySendCommand+0xbc>
        {
            port->PolicyTxHeader.PortDataRole = port->PolicyIsDFP;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	b2d9      	uxtb	r1, r3
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 8003260:	f361 1345 	bfi	r3, r1, #5, #1
 8003264:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
            port->PolicyTxHeader.PortPowerRole = port->PolicyIsSource;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	b2d9      	uxtb	r1, r3
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 800327a:	f361 0300 	bfi	r3, r1, #0, #1
 800327e:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
 8003282:	e00d      	b.n	80032a0 <PolicySendCommand+0xd8>
        }
        else
        {
            port->PolicyTxHeader.PortDataRole = 0;
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 800328a:	f36f 1345 	bfc	r3, #5, #1
 800328e:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
            /* Cable plug field when SOP' & SOP'', currently not used */
            port->PolicyTxHeader.PortPowerRole = 0;
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 8003298:	f36f 0300 	bfc	r3, #0, #1
 800329c:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
        }
        port->PolicyTxHeader.SpecRevision = DPM_SpecRev(port, sop);
 80032a0:	7e3b      	ldrb	r3, [r7, #24]
 80032a2:	4619      	mov	r1, r3
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f004 f921 	bl	80074ec <DPM_SpecRev>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	b2d9      	uxtb	r1, r3
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 80032b8:	f361 1387 	bfi	r3, r1, #6, #2
 80032bc:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
        port->ProtocolMsgTxSop = sop;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	7e3a      	ldrb	r2, [r7, #24]
 80032c4:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
        port->PDTxStatus = txSend;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2

        /* Shortcut to transmit */
        if (port->ProtocolState == PRLIdle) ProtocolIdle(port);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	f040 80ae 	bne.w	8003438 <PolicySendCommand+0x270>
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 fdf1 	bl	8003ec4 <ProtocolIdle>
        break;
 80032e2:	e0a9      	b.n	8003438 <PolicySendCommand+0x270>
    case txSend:
    case txBusy:
    case txWait:
        /* Waiting for GoodCRC or timeout of the protocol */
        if (TimerExpired(&port->ProtocolTimer))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80032ea:	4618      	mov	r0, r3
 80032ec:	f003 fe1b 	bl	8006f26 <TimerExpired>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d019      	beq.n	800332a <PolicySendCommand+0x162>
        {
            TimerDisable(&port->ProtocolTimer);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80032fc:	4618      	mov	r0, r3
 80032fe:	f003 fdf2 	bl	8006ee6 <TimerDisable>
            port->ProtocolState = PRLIdle;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
            port->PDTxStatus = txIdle;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2

            /* Jumping to the next state might not be appropriate error
             * handling for a timeout, but will prevent a hang in case
             * the caller isn't expecting it.
             */
            SetPEState(port, nextState);
 8003312:	78bb      	ldrb	r3, [r7, #2]
 8003314:	4619      	mov	r1, r3
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f001 ff3e 	bl	8005198 <SetPEState>
            port->PolicySubIndex = subIndex;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	787a      	ldrb	r2, [r7, #1]
 8003320:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

            Status = STAT_ERROR;
 8003324:	2302      	movs	r3, #2
 8003326:	73fb      	strb	r3, [r7, #15]
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 8003328:	e087      	b.n	800343a <PolicySendCommand+0x272>
            port->PEIdle = TRUE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8003332:	e082      	b.n	800343a <PolicySendCommand+0x272>
    case txSuccess:
        SetPEState(port, nextState);
 8003334:	78bb      	ldrb	r3, [r7, #2]
 8003336:	4619      	mov	r1, r3
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f001 ff2d 	bl	8005198 <SetPEState>
        port->PolicySubIndex = subIndex;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	787a      	ldrb	r2, [r7, #1]
 8003342:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        Status = STAT_SUCCESS;
 8003346:	2301      	movs	r3, #1
 8003348:	73fb      	strb	r3, [r7, #15]
        break;
 800334a:	e076      	b.n	800343a <PolicySendCommand+0x272>
    case txError:
        /* Didn't receive a GoodCRC message... */
        if (port->PolicyState == peSourceSendSoftReset)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003352:	2b05      	cmp	r3, #5
 8003354:	d104      	bne.n	8003360 <PolicySendCommand+0x198>
        {
            SetPEState(port, peSourceSendHardReset);
 8003356:	2103      	movs	r1, #3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f001 ff1d 	bl	8005198 <SetPEState>
 800335e:	e017      	b.n	8003390 <PolicySendCommand+0x1c8>
        }
        else if (port->PolicyState == peSinkSendSoftReset)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003366:	2b1c      	cmp	r3, #28
 8003368:	d104      	bne.n	8003374 <PolicySendCommand+0x1ac>
        {
            SetPEState(port, peSinkSendHardReset);
 800336a:	211a      	movs	r1, #26
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f001 ff13 	bl	8005198 <SetPEState>
 8003372:	e00d      	b.n	8003390 <PolicySendCommand+0x1c8>
        }
        else if (port->PolicyIsSource)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <PolicySendCommand+0x1c0>
        {
            SetPEState(port, peSourceSendSoftReset);
 800337e:	2105      	movs	r1, #5
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f001 ff09 	bl	8005198 <SetPEState>
 8003386:	e003      	b.n	8003390 <PolicySendCommand+0x1c8>
        }
        else
        {
            SetPEState(port, peSinkSendSoftReset);
 8003388:	211c      	movs	r1, #28
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f001 ff04 	bl	8005198 <SetPEState>
        }
        Status = STAT_ERROR;
 8003390:	2302      	movs	r3, #2
 8003392:	73fb      	strb	r3, [r7, #15]
        break;
 8003394:	e051      	b.n	800343a <PolicySendCommand+0x272>
    case txCollision:
        port->CollisionCounter++;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800339c:	3301      	adds	r3, #1
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
        if (port->CollisionCounter > nRetryCount)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d914      	bls.n	80033da <PolicySendCommand+0x212>
        {
            if (port->PolicyIsSource)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d004      	beq.n	80033c4 <PolicySendCommand+0x1fc>
                SetPEState(port, peSourceSendHardReset);
 80033ba:	2103      	movs	r1, #3
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f001 feeb 	bl	8005198 <SetPEState>
 80033c2:	e003      	b.n	80033cc <PolicySendCommand+0x204>
            else
                SetPEState(port, peSinkSendHardReset);
 80033c4:	211a      	movs	r1, #26
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f001 fee6 	bl	8005198 <SetPEState>

            port->PDTxStatus = txReset;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
            Status = STAT_ERROR;
 80033d4:	2302      	movs	r3, #2
 80033d6:	73fb      	strb	r3, [r7, #15]
        else
        {
            /* Clear the transmitter status for the next operation */
            port->PDTxStatus = txIdle;
        }
        break;
 80033d8:	e02f      	b.n	800343a <PolicySendCommand+0x272>
            port->PDTxStatus = txIdle;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
        break;
 80033e2:	e02a      	b.n	800343a <PolicySendCommand+0x272>
    case txAbort:
        if (port->PolicyIsSource)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d004      	beq.n	80033f8 <PolicySendCommand+0x230>
            SetPEState(port, peSourceReady);
 80033ee:	210f      	movs	r1, #15
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f001 fed1 	bl	8005198 <SetPEState>
 80033f6:	e003      	b.n	8003400 <PolicySendCommand+0x238>
        else
            SetPEState(port, peSinkReady);
 80033f8:	2124      	movs	r1, #36	; 0x24
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f001 fecc 	bl	8005198 <SetPEState>

        Status = STAT_ABORT;
 8003400:	2303      	movs	r3, #3
 8003402:	73fb      	strb	r3, [r7, #15]
        port->PDTxStatus = txIdle;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2

        break;
 800340c:	e015      	b.n	800343a <PolicySendCommand+0x272>
    default:
        if (port->PolicyIsSource)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8003414:	2b00      	cmp	r3, #0
 8003416:	d004      	beq.n	8003422 <PolicySendCommand+0x25a>
            SetPEState(port, peSourceSendHardReset);
 8003418:	2103      	movs	r1, #3
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f001 febc 	bl	8005198 <SetPEState>
 8003420:	e003      	b.n	800342a <PolicySendCommand+0x262>
        else
            SetPEState(port, peSinkSendHardReset);
 8003422:	211a      	movs	r1, #26
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f001 feb7 	bl	8005198 <SetPEState>

        port->PDTxStatus = txReset;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
        Status = STAT_ERROR;
 8003432:	2302      	movs	r3, #2
 8003434:	73fb      	strb	r3, [r7, #15]
        break;
 8003436:	e000      	b.n	800343a <PolicySendCommand+0x272>
        break;
 8003438:	bf00      	nop
    }
    return Status;
 800343a:	7bfb      	ldrb	r3, [r7, #15]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <PolicySendData>:

FSC_U8 PolicySendData(Port_t *port, FSC_U8 MessageType, void* data,
                      FSC_U32 len, PolicyState_t nextState,
                      FSC_U8 subIndex, SopType sop, FSC_BOOL extMsg)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	460b      	mov	r3, r1
 8003452:	72fb      	strb	r3, [r7, #11]
    FSC_U8 Status = STAT_BUSY;
 8003454:	2300      	movs	r3, #0
 8003456:	77fb      	strb	r3, [r7, #31]
    FSC_U32 i;
    FSC_U8* pData = (FSC_U8*)data;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	613b      	str	r3, [r7, #16]
    FSC_U8* pOutBuf = (FSC_U8*)port->PolicyTxDataObj;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	33d4      	adds	r3, #212	; 0xd4
 8003460:	617b      	str	r3, [r7, #20]

    switch (port->PDTxStatus)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
 8003468:	2b08      	cmp	r3, #8
 800346a:	f200 817a 	bhi.w	8003762 <PolicySendData+0x31e>
 800346e:	a201      	add	r2, pc, #4	; (adr r2, 8003474 <PolicySendData+0x30>)
 8003470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003474:	08003499 	.word	0x08003499
 8003478:	08003763 	.word	0x08003763
 800347c:	08003627 	.word	0x08003627
 8003480:	08003627 	.word	0x08003627
 8003484:	08003627 	.word	0x08003627
 8003488:	080036a1 	.word	0x080036a1
 800348c:	080036f1 	.word	0x080036f1
 8003490:	0800369b 	.word	0x0800369b
 8003494:	08003739 	.word	0x08003739
    {
    case txIdle:
    {
        port->PolicyTxHeader.word = 0;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
        port->PolicyTxHeader.NumDataObjects = len / 4;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	089b      	lsrs	r3, r3, #2
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	b2d9      	uxtb	r1, r3
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 80034b0:	f361 1306 	bfi	r3, r1, #4, #3
 80034b4:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
        port->PolicyTxHeader.MessageType = MessageType;
 80034b8:	7afb      	ldrb	r3, [r7, #11]
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	b2d9      	uxtb	r1, r3
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 80034c6:	f361 0304 	bfi	r3, r1, #0, #5
 80034ca:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
        if (sop == SOP_TYPE_SOP)
 80034ce:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d11a      	bne.n	800350c <PolicySendData+0xc8>
        {
            port->PolicyTxHeader.PortDataRole = port->PolicyIsDFP;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	b2d9      	uxtb	r1, r3
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 80034e8:	f361 1345 	bfi	r3, r1, #5, #1
 80034ec:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
            port->PolicyTxHeader.PortPowerRole = port->PolicyIsSource;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	b2d9      	uxtb	r1, r3
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 8003502:	f361 0300 	bfi	r3, r1, #0, #1
 8003506:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
 800350a:	e00d      	b.n	8003528 <PolicySendData+0xe4>
        }
        else
        {
            /* Cable plug field when SOP' & SOP'', currently not used */
            port->PolicyTxHeader.PortPowerRole = 0;
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 8003512:	f36f 0300 	bfc	r3, #0, #1
 8003516:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
            port->PolicyTxHeader.PortDataRole = 0;
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 8003520:	f36f 1345 	bfc	r3, #5, #1
 8003524:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
        }
        port->PolicyTxHeader.SpecRevision = DPM_SpecRev(port, sop);
 8003528:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800352c:	4619      	mov	r1, r3
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f003 ffdc 	bl	80074ec <DPM_SpecRev>
 8003534:	4603      	mov	r3, r0
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	b2d9      	uxtb	r1, r3
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 8003542:	f361 1387 	bfi	r3, r1, #6, #2
 8003546:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae

        if (extMsg == TRUE)
 800354a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800354e:	2b01      	cmp	r3, #1
 8003550:	d137      	bne.n	80035c2 <PolicySendData+0x17e>
        {
#ifdef FSC_HAVE_EXT_MSG
            /* Set extended bit */
            port->PolicyTxHeader.Extended = 1;
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 8003558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800355c:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
            /* Initialize extended messaging state */
            port->ExtChunkOffset = 0;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
            port->ExtChunkNum = 0;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
            port->ExtTxOrRx = TXing;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
            port->ExtWaitTxRx = FALSE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
            /* Set extended header */
            port->ExtTxHeader.word = 0;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f8a3 22f6 	strh.w	r2, [r3, #758]	; 0x2f6
            len = (len > EXT_MAX_MSG_LEN) ? EXT_MAX_MSG_LEN : len;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800358e:	bf28      	it	cs
 8003590:	f44f 7382 	movcs.w	r3, #260	; 0x104
 8003594:	603b      	str	r3, [r7, #0]
            port->ExtTxHeader.Chunked = 1;
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	f892 32f7 	ldrb.w	r3, [r2, #759]	; 0x2f7
 800359c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035a0:	f882 32f7 	strb.w	r3, [r2, #759]	; 0x2f7
            port->ExtTxHeader.DataSize = len;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035aa:	b299      	uxth	r1, r3
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	f8b2 32f6 	ldrh.w	r3, [r2, #758]	; 0x2f6
 80035b2:	f361 0308 	bfi	r3, r1, #0, #9
 80035b6:	f8a2 32f6 	strh.w	r3, [r2, #758]	; 0x2f6
            /* Set the tx buffer */
            pOutBuf = port->ExtMsgBuffer;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 80035c0:	617b      	str	r3, [r7, #20]
#endif /* FSC_HAVE_EXT_MSG */
        }

        /* Copy message */
        for (i = 0; i < len; i++)
 80035c2:	2300      	movs	r3, #0
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	e00a      	b.n	80035de <PolicySendData+0x19a>
        {
            pOutBuf[i] = pData[i];
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	441a      	add	r2, r3
 80035ce:	6979      	ldr	r1, [r7, #20]
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	440b      	add	r3, r1
 80035d4:	7812      	ldrb	r2, [r2, #0]
 80035d6:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < len; i++)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	3301      	adds	r3, #1
 80035dc:	61bb      	str	r3, [r7, #24]
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d3f0      	bcc.n	80035c8 <PolicySendData+0x184>
        }

        if (port->PolicyState == peSourceSendCaps)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80035ec:	2b07      	cmp	r3, #7
 80035ee:	d107      	bne.n	8003600 <PolicySendData+0x1bc>
        {
                port->CapsCounter++;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80035f6:	3301      	adds	r3, #1
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        }
        port->ProtocolMsgTxSop = sop;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003606:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
        port->PDTxStatus = txSend;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2202      	movs	r2, #2
 800360e:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2

        /* Shortcut to transmit */
        if (port->ProtocolState == PRLIdle) ProtocolIdle(port);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8003618:	2b01      	cmp	r3, #1
 800361a:	f040 80b7 	bne.w	800378c <PolicySendData+0x348>
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 fc50 	bl	8003ec4 <ProtocolIdle>
        break;
 8003624:	e0b2      	b.n	800378c <PolicySendData+0x348>
    }
    case txSend:
    case txBusy:
    case txWait:
        /* Waiting for GoodCRC or timeout of the protocol */
        if (TimerExpired(&port->ProtocolTimer))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800362c:	4618      	mov	r0, r3
 800362e:	f003 fc7a 	bl	8006f26 <TimerExpired>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d02b      	beq.n	8003690 <PolicySendData+0x24c>
        {
            TimerDisable(&port->ProtocolTimer);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800363e:	4618      	mov	r0, r3
 8003640:	f003 fc51 	bl	8006ee6 <TimerDisable>
            port->ProtocolState = PRLIdle;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
            port->PDTxStatus = txIdle;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2

            /* Jumping to the next state might not be appropriate error
             * handling for a timeout, but will prevent a hang in case
             * the caller isn't expecting it.
             */
            SetPEState(port, nextState);
 8003654:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003658:	4619      	mov	r1, r3
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f001 fd9c 	bl	8005198 <SetPEState>
            port->PolicySubIndex = subIndex;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003666:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

            Status = STAT_ERROR;
 800366a:	2302      	movs	r3, #2
 800366c:	77fb      	strb	r3, [r7, #31]
#ifdef FSC_HAVE_EXT_MSG
            /* Possible timeout when trying to send a chunked message to
             * a device that doesn't support chunking.
             * TODO - Notify DPM of failure if necessary.
             */
            port->ExtWaitTxRx = FALSE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
            port->ExtChunkNum = 0;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
            port->ExtTxOrRx = NoXfer;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
            port->ExtChunkOffset = 0;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 800368e:	e07e      	b.n	800378e <PolicySendData+0x34a>
            port->PEIdle = TRUE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8003698:	e079      	b.n	800378e <PolicySendData+0x34a>
    case txCollision:
        Status = STAT_ERROR;
 800369a:	2302      	movs	r3, #2
 800369c:	77fb      	strb	r3, [r7, #31]
        break;
 800369e:	e076      	b.n	800378e <PolicySendData+0x34a>
    case txSuccess:
#ifdef FSC_HAVE_EXT_MSG
        if (extMsg == TRUE &&
 80036a0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d10f      	bne.n	80036c8 <PolicySendData+0x284>
            port->ExtChunkOffset < port->ExtTxHeader.DataSize)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	f8b2 22f6 	ldrh.w	r2, [r2, #758]	; 0x2f6
 80036b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036b8:	b292      	uxth	r2, r2
        if (extMsg == TRUE &&
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d204      	bcs.n	80036c8 <PolicySendData+0x284>
        {
            port->PDTxStatus = txBusy;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2203      	movs	r2, #3
 80036c2:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
            break;
 80036c6:	e062      	b.n	800378e <PolicySendData+0x34a>
        }
#endif /* FSC_HAVE_EXT_MSG */
        SetPEState(port, nextState);
 80036c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80036cc:	4619      	mov	r1, r3
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f001 fd62 	bl	8005198 <SetPEState>
        port->PolicySubIndex = subIndex;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80036da:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        TimerDisable(&port->ProtocolTimer);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80036e4:	4618      	mov	r0, r3
 80036e6:	f003 fbfe 	bl	8006ee6 <TimerDisable>
        Status = STAT_SUCCESS;
 80036ea:	2301      	movs	r3, #1
 80036ec:	77fb      	strb	r3, [r7, #31]
        break;
 80036ee:	e04e      	b.n	800378e <PolicySendData+0x34a>
    case txError:
        /* Didn't receive a GoodCRC message... */
        if (sop == SOP_TYPE_SOP)
 80036f0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d11c      	bne.n	8003732 <PolicySendData+0x2ee>
        {
            if (port->PolicyState == peSourceSendCaps &&
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80036fe:	2b07      	cmp	r3, #7
 8003700:	d109      	bne.n	8003716 <PolicySendData+0x2d2>
                port->PolicyHasContract == FALSE)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
            if (port->PolicyState == peSourceSendCaps &&
 8003708:	2b00      	cmp	r3, #0
 800370a:	d104      	bne.n	8003716 <PolicySendData+0x2d2>
            {
                SetPEState(port, peSourceDiscovery);
 800370c:	2108      	movs	r1, #8
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f001 fd42 	bl	8005198 <SetPEState>
 8003714:	e00d      	b.n	8003732 <PolicySendData+0x2ee>
            }
            else if (port->PolicyIsSource)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800371c:	2b00      	cmp	r3, #0
 800371e:	d004      	beq.n	800372a <PolicySendData+0x2e6>
            {
                SetPEState(port, peSourceSendSoftReset);
 8003720:	2105      	movs	r1, #5
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f001 fd38 	bl	8005198 <SetPEState>
 8003728:	e003      	b.n	8003732 <PolicySendData+0x2ee>
            }
            else
            {
                SetPEState(port, peSinkSendSoftReset);
 800372a:	211c      	movs	r1, #28
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f001 fd33 	bl	8005198 <SetPEState>
            {
                port->cblRstState = CBL_RST_START;
            }
#endif /* FSC_HAVE_VDM */
        }
        Status = STAT_ERROR;
 8003732:	2302      	movs	r3, #2
 8003734:	77fb      	strb	r3, [r7, #31]
        break;
 8003736:	e02a      	b.n	800378e <PolicySendData+0x34a>
    case txAbort:
        if (port->PolicyIsSource)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800373e:	2b00      	cmp	r3, #0
 8003740:	d004      	beq.n	800374c <PolicySendData+0x308>
            SetPEState(port, peSourceReady);
 8003742:	210f      	movs	r1, #15
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f001 fd27 	bl	8005198 <SetPEState>
 800374a:	e003      	b.n	8003754 <PolicySendData+0x310>
        else
            SetPEState(port, peSinkReady);
 800374c:	2124      	movs	r1, #36	; 0x24
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f001 fd22 	bl	8005198 <SetPEState>

        Status = STAT_ABORT;
 8003754:	2303      	movs	r3, #3
 8003756:	77fb      	strb	r3, [r7, #31]
        port->PDTxStatus = txIdle;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2

        break;
 8003760:	e015      	b.n	800378e <PolicySendData+0x34a>
    default:
        if (port->PolicyIsSource)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8003768:	2b00      	cmp	r3, #0
 800376a:	d004      	beq.n	8003776 <PolicySendData+0x332>
            SetPEState(port, peSourceSendHardReset);
 800376c:	2103      	movs	r1, #3
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f001 fd12 	bl	8005198 <SetPEState>
 8003774:	e003      	b.n	800377e <PolicySendData+0x33a>
        else
            SetPEState(port, peSinkSendHardReset);
 8003776:	211a      	movs	r1, #26
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f001 fd0d 	bl	8005198 <SetPEState>

        port->PDTxStatus = txReset;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
        Status = STAT_ERROR;
 8003786:	2302      	movs	r3, #2
 8003788:	77fb      	strb	r3, [r7, #31]
        break;
 800378a:	e000      	b.n	800378e <PolicySendData+0x34a>
        break;
 800378c:	bf00      	nop
    }

    return Status;
 800378e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3720      	adds	r7, #32
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <UpdateCapabilitiesRx>:

void UpdateCapabilitiesRx(Port_t *port, FSC_BOOL IsSourceCaps)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	70fb      	strb	r3, [r7, #3]
    FSC_U32 i;
    sopMainHeader_t *capsHeaderRecieved;
    doDataObject_t *capsReceived;

    if (IsSourceCaps == TRUE)
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d107      	bne.n	80037ba <UpdateCapabilitiesRx+0x22>
    {
        capsHeaderRecieved = &port->SrcCapsHeaderReceived;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	33b2      	adds	r3, #178	; 0xb2
 80037ae:	613b      	str	r3, [r7, #16]
        capsReceived = port->SrcCapsReceived;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	e006      	b.n	80037c8 <UpdateCapabilitiesRx+0x30>
    }
    else
    {
        capsHeaderRecieved = &port->SnkCapsHeaderReceived;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	33b4      	adds	r3, #180	; 0xb4
 80037be:	613b      	str	r3, [r7, #16]
        capsReceived = port->SnkCapsReceived;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80037c6:	60fb      	str	r3, [r7, #12]
    }

    capsHeaderRecieved->word = port->PolicyRxHeader.word;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	801a      	strh	r2, [r3, #0]

    for (i = 0; i < capsHeaderRecieved->NumDataObjects; i++)
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	e00c      	b.n	80037f2 <UpdateCapabilitiesRx+0x5a>
        capsReceived[i].object = port->PolicyRxDataObj[i].object;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4413      	add	r3, r2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6979      	ldr	r1, [r7, #20]
 80037e4:	312e      	adds	r1, #46	; 0x2e
 80037e6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80037ea:	601a      	str	r2, [r3, #0]
    for (i = 0; i < capsHeaderRecieved->NumDataObjects; i++)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	3301      	adds	r3, #1
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	785b      	ldrb	r3, [r3, #1]
 80037f6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	461a      	mov	r2, r3
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	4293      	cmp	r3, r2
 8003802:	d3e9      	bcc.n	80037d8 <UpdateCapabilitiesRx+0x40>

    for (i = capsHeaderRecieved->NumDataObjects; i < 7; i++)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	785b      	ldrb	r3, [r3, #1]
 8003808:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800380c:	b2db      	uxtb	r3, r3
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	e008      	b.n	8003824 <UpdateCapabilitiesRx+0x8c>
        capsReceived[i].object = 0;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4413      	add	r3, r2
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
    for (i = capsHeaderRecieved->NumDataObjects; i < 7; i++)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	3301      	adds	r3, #1
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2b06      	cmp	r3, #6
 8003828:	d9f3      	bls.n	8003812 <UpdateCapabilitiesRx+0x7a>

    port->PartnerCaps.object = capsReceived[0].object;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

#ifdef FSC_DEBUG
    /* Set the flag to indicate that the received capabilities are valid */
    port->SourceCapsUpdated = IsSourceCaps;
#endif /* FSC_DEBUG */
}
 8003834:	bf00      	nop
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr
	...

08003840 <PolicyGiveCountryCodes>:

#ifdef FSC_HAVE_EXT_MSG
void PolicyGiveCountryCodes(Port_t *port)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af04      	add	r7, sp, #16
 8003846:	6078      	str	r0, [r7, #4]
    FSC_U32 noCodes = gCountry_codes[0] | gCountry_codes[1] << 8;
 8003848:	4b11      	ldr	r3, [pc, #68]	; (8003890 <PolicyGiveCountryCodes+0x50>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	4b10      	ldr	r3, [pc, #64]	; (8003890 <PolicyGiveCountryCodes+0x50>)
 8003850:	785b      	ldrb	r3, [r3, #1]
 8003852:	021b      	lsls	r3, r3, #8
 8003854:	4313      	orrs	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]

    PolicySendData(port, EXTCountryCodes, gCountry_codes, noCodes*2+2,
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	3301      	adds	r3, #1
 800385c:	005a      	lsls	r2, r3, #1
                   port->PolicyIsSource ? peSourceReady : peSinkReady, 0,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
    PolicySendData(port, EXTCountryCodes, gCountry_codes, noCodes*2+2,
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <PolicyGiveCountryCodes+0x2c>
 8003868:	230f      	movs	r3, #15
 800386a:	e000      	b.n	800386e <PolicyGiveCountryCodes+0x2e>
 800386c:	2324      	movs	r3, #36	; 0x24
 800386e:	2101      	movs	r1, #1
 8003870:	9103      	str	r1, [sp, #12]
 8003872:	2100      	movs	r1, #0
 8003874:	9102      	str	r1, [sp, #8]
 8003876:	2100      	movs	r1, #0
 8003878:	9101      	str	r1, [sp, #4]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	4613      	mov	r3, r2
 800387e:	4a04      	ldr	r2, [pc, #16]	; (8003890 <PolicyGiveCountryCodes+0x50>)
 8003880:	210e      	movs	r1, #14
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff fdde 	bl	8003444 <PolicySendData>
                   SOP_TYPE_SOP, TRUE);
}
 8003888:	bf00      	nop
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	20000004 	.word	0x20000004

08003894 <PolicyGetCountryCodes>:

void PolicyGetCountryCodes(Port_t *port)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af02      	add	r7, sp, #8
 800389a:	6078      	str	r0, [r7, #4]
     PolicySendCommand(port, CMTGetCountryCodes,
                      port->PolicyIsSource ? peSourceReady : peSinkReady, 0,
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
     PolicySendCommand(port, CMTGetCountryCodes,
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <PolicyGetCountryCodes+0x16>
 80038a6:	220f      	movs	r2, #15
 80038a8:	e000      	b.n	80038ac <PolicyGetCountryCodes+0x18>
 80038aa:	2224      	movs	r2, #36	; 0x24
 80038ac:	2300      	movs	r3, #0
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	2300      	movs	r3, #0
 80038b2:	2115      	movs	r1, #21
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff fc87 	bl	80031c8 <PolicySendCommand>
                      SOP_TYPE_SOP);
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <PolicyGiveCountryInfo>:

void PolicyGiveCountryInfo(Port_t *port)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b08a      	sub	sp, #40	; 0x28
 80038c6:	af04      	add	r7, sp, #16
 80038c8:	6078      	str	r0, [r7, #4]
    /* Allocate 4-byte buffer so we don't need a full 260 byte data */
    FSC_U8 buf[4] = {0};
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
    CountryInfoReq *req = (CountryInfoReq*)(port->PolicyRxDataObj);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	33b8      	adds	r3, #184	; 0xb8
 80038d2:	617b      	str	r3, [r7, #20]
    /* Echo the first to bytes of country code */
    CountryInfoResp *resp = (CountryInfoResp*)buf;
 80038d4:	f107 030c 	add.w	r3, r7, #12
 80038d8:	613b      	str	r3, [r7, #16]
    resp->CountryCode[1] = req->CountryCode[0];
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	789a      	ldrb	r2, [r3, #2]
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	705a      	strb	r2, [r3, #1]
    resp->CountryCode[0] = req->CountryCode[1];
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	78da      	ldrb	r2, [r3, #3]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	701a      	strb	r2, [r3, #0]
    resp->Reserved[0] = resp->Reserved[1] = 0;
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	2200      	movs	r2, #0
 80038ee:	70da      	strb	r2, [r3, #3]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	78da      	ldrb	r2, [r3, #3]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	709a      	strb	r2, [r3, #2]
    PolicySendData(port, EXTCountryInfo, resp, 4,
                   (port->PolicyIsSource == TRUE) ? peSourceReady : peSinkReady,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
    PolicySendData(port, EXTCountryInfo, resp, 4,
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <PolicyGiveCountryInfo+0x44>
 8003902:	230f      	movs	r3, #15
 8003904:	e000      	b.n	8003908 <PolicyGiveCountryInfo+0x46>
 8003906:	2324      	movs	r3, #36	; 0x24
 8003908:	2201      	movs	r2, #1
 800390a:	9203      	str	r2, [sp, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	9202      	str	r2, [sp, #8]
 8003910:	2200      	movs	r2, #0
 8003912:	9201      	str	r2, [sp, #4]
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	2304      	movs	r3, #4
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	210d      	movs	r1, #13
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff fd91 	bl	8003444 <PolicySendData>
                   0, SOP_TYPE_SOP, TRUE);
}
 8003922:	bf00      	nop
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <PolicyGetPPSStatus>:
#endif /* FSC_HAVE_EXT_MSG */

#ifdef FSC_HAVE_EXT_MSG
void PolicyGetPPSStatus(Port_t *port)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b084      	sub	sp, #16
 800392e:	af02      	add	r7, sp, #8
 8003930:	6078      	str	r0, [r7, #4]
    switch (port->PolicySubIndex)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8003938:	2b00      	cmp	r3, #0
 800393a:	d113      	bne.n	8003964 <PolicyGetPPSStatus+0x3a>
    {
    case 0:
        if (PolicySendCommand(port, CMTGetPPSStatus, peGetPPSStatus, 1,
 800393c:	2300      	movs	r3, #0
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	2301      	movs	r3, #1
 8003942:	2237      	movs	r2, #55	; 0x37
 8003944:	2114      	movs	r1, #20
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff fc3e 	bl	80031c8 <PolicySendCommand>
 800394c:	4603      	mov	r3, r0
 800394e:	2b01      	cmp	r3, #1
 8003950:	d156      	bne.n	8003a00 <PolicyGetPPSStatus+0xd6>
                              SOP_TYPE_SOP) == STAT_SUCCESS)
        {
            TimerStart(&port->PolicyStateTimer, tSenderResponse);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003958:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 800395c:	4618      	mov	r0, r3
 800395e:	f003 faa7 	bl	8006eb0 <TimerStart>
        }
        break;
 8003962:	e04d      	b.n	8003a00 <PolicyGetPPSStatus+0xd6>
    default:
        if (port->ProtocolMsgRx)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d02d      	beq.n	80039ca <PolicyGetPPSStatus+0xa0>
        {
            port->ProtocolMsgRx = FALSE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
            if ((port->PolicyRxHeader.NumDataObjects > 0) &&
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800397c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d014      	beq.n	80039b0 <PolicyGetPPSStatus+0x86>
                (port->PolicyRxHeader.MessageType == EXTPPSStatus))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800398c:	f003 031f 	and.w	r3, r3, #31
 8003990:	b2db      	uxtb	r3, r3
            if ((port->PolicyRxHeader.NumDataObjects > 0) &&
 8003992:	2b0c      	cmp	r3, #12
 8003994:	d10c      	bne.n	80039b0 <PolicyGetPPSStatus+0x86>
            {
                SetPEState(port,
                           port->PolicyIsSource ? peSourceReady : peSinkReady);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
                SetPEState(port,
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <PolicyGetPPSStatus+0x7a>
 80039a0:	230f      	movs	r3, #15
 80039a2:	e000      	b.n	80039a6 <PolicyGetPPSStatus+0x7c>
 80039a4:	2324      	movs	r3, #36	; 0x24
 80039a6:	4619      	mov	r1, r3
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f001 fbf5 	bl	8005198 <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 80039ae:	e028      	b.n	8003a02 <PolicyGetPPSStatus+0xd8>
                SetPEState(port, port->PolicyIsSource ?
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <PolicyGetPPSStatus+0x94>
 80039ba:	2303      	movs	r3, #3
 80039bc:	e000      	b.n	80039c0 <PolicyGetPPSStatus+0x96>
 80039be:	231a      	movs	r3, #26
 80039c0:	4619      	mov	r1, r3
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f001 fbe8 	bl	8005198 <SetPEState>
        break;
 80039c8:	e01b      	b.n	8003a02 <PolicyGetPPSStatus+0xd8>
        else if (TimerExpired(&port->PolicyStateTimer))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80039d0:	4618      	mov	r0, r3
 80039d2:	f003 faa8 	bl	8006f26 <TimerExpired>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00c      	beq.n	80039f6 <PolicyGetPPSStatus+0xcc>
                       port->PolicyIsSource ? peSourceReady : peSinkReady);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
            SetPEState(port,
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <PolicyGetPPSStatus+0xc0>
 80039e6:	230f      	movs	r3, #15
 80039e8:	e000      	b.n	80039ec <PolicyGetPPSStatus+0xc2>
 80039ea:	2324      	movs	r3, #36	; 0x24
 80039ec:	4619      	mov	r1, r3
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f001 fbd2 	bl	8005198 <SetPEState>
        break;
 80039f4:	e005      	b.n	8003a02 <PolicyGetPPSStatus+0xd8>
            port->PEIdle = TRUE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 80039fe:	e000      	b.n	8003a02 <PolicyGetPPSStatus+0xd8>
        break;
 8003a00:	bf00      	nop
    }
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <PolicyGivePPSStatus>:

void PolicyGivePPSStatus(Port_t *port)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af04      	add	r7, sp, #16
 8003a12:	6078      	str	r0, [r7, #4]
    PPSStatus_t ppsstatus;

    switch (port->PolicySubIndex)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <PolicyGivePPSStatus+0x18>
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d01a      	beq.n	8003a58 <PolicyGivePPSStatus+0x4c>
        PolicySendData(port, EXTPPSStatus, ppsstatus.byte, 4,
                       port->PolicyIsSource ? peSourceReady : peSinkReady, 0,
                       SOP_TYPE_SOP, TRUE);
        break;
    default:
        break;
 8003a22:	e030      	b.n	8003a86 <PolicyGivePPSStatus+0x7a>
        ppsstatus.OutputVoltage = platform_get_pps_voltage(port->PortID) / 20;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fc fe5b 	bl	80006e6 <platform_get_pps_voltage>
 8003a30:	4603      	mov	r3, r0
 8003a32:	461a      	mov	r2, r3
 8003a34:	4b16      	ldr	r3, [pc, #88]	; (8003a90 <PolicyGivePPSStatus+0x84>)
 8003a36:	fba3 2302 	umull	r2, r3, r3, r2
 8003a3a:	091b      	lsrs	r3, r3, #4
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	81bb      	strh	r3, [r7, #12]
        ppsstatus.OutputCurrent = 0xFF; /* Not supported field for now */
 8003a40:	23ff      	movs	r3, #255	; 0xff
 8003a42:	73bb      	strb	r3, [r7, #14]
        ppsstatus.byte[3] = 0x00;
 8003a44:	2300      	movs	r3, #0
 8003a46:	73fb      	strb	r3, [r7, #15]
        port->PolicySubIndex++;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8003a4e:	3301      	adds	r3, #1
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
                       port->PolicyIsSource ? peSourceReady : peSinkReady, 0,
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
        PolicySendData(port, EXTPPSStatus, ppsstatus.byte, 4,
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <PolicyGivePPSStatus+0x5a>
 8003a62:	230f      	movs	r3, #15
 8003a64:	e000      	b.n	8003a68 <PolicyGivePPSStatus+0x5c>
 8003a66:	2324      	movs	r3, #36	; 0x24
 8003a68:	f107 020c 	add.w	r2, r7, #12
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	9103      	str	r1, [sp, #12]
 8003a70:	2100      	movs	r1, #0
 8003a72:	9102      	str	r1, [sp, #8]
 8003a74:	2100      	movs	r1, #0
 8003a76:	9101      	str	r1, [sp, #4]
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	2304      	movs	r3, #4
 8003a7c:	210c      	movs	r1, #12
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff fce0 	bl	8003444 <PolicySendData>
        break;
 8003a84:	bf00      	nop
    }
}
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	cccccccd 	.word	0xcccccccd

08003a94 <policyBISTReceiveMode>:
#endif /* FSC_HAVE_EXT */

/* BIST Receive Mode */
void policyBISTReceiveMode(Port_t *port)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
    /* Tell protocol layer to go to BIST Receive Mode
     * Go to BIST_Frame_Received if a test frame is received
     * Transition to SRC_Transition_to_Default, SNK_Transition_to_Default,
     * or CBL_Ready when Hard_Reset received
     */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bc80      	pop	{r7}
 8003aa4:	4770      	bx	lr

08003aa6 <policyBISTFrameReceived>:

void policyBISTFrameReceived(Port_t *port)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
    /* Consume BIST Transmit Test Frame if received
     * Transition back to BIST_Frame_Received when a BIST Test Frame
     * has been received. Transition to SRC_Transition_to_Default,
     * SNK_Transition_to_Default, or CBL_Ready when Hard_Reset received
     */
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <policyBISTCarrierMode2>:

/* BIST Carrier Mode and Eye Pattern */
void policyBISTCarrierMode2(Port_t *port)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
    switch (port->PolicySubIndex)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d035      	beq.n	8003b36 <policyBISTCarrierMode2+0x7e>
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d062      	beq.n	8003b94 <policyBISTCarrierMode2+0xdc>
    {
    default:
    case 0:
        /* Tell protocol layer to go to BIST_Carrier_Mode_2 */
        port->Registers.Control.BIST_MODE2 = 1;
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8003ad4:	f043 0310 	orr.w	r3, r3, #16
 8003ad8:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
        DeviceWrite(port->I2cAddr, regControl1, 1,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3331      	adds	r3, #49	; 0x31
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	2107      	movs	r1, #7
 8003aea:	f003 f9a7 	bl	8006e3c <DeviceWrite>
                    &port->Registers.Control.byte[1]);

        /* Set the bit to enable the transmitter */
        port->Registers.Control.TX_START = 1;
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        DeviceWrite(port->I2cAddr, regControl0, 1,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3330      	adds	r3, #48	; 0x30
 8003b06:	2201      	movs	r2, #1
 8003b08:	2106      	movs	r1, #6
 8003b0a:	f003 f997 	bl	8006e3c <DeviceWrite>
                    &port->Registers.Control.byte[0]);
        port->Registers.Control.TX_START = 0;
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8003b14:	f36f 0300 	bfc	r3, #0, #1
 8003b18:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30

        TimerStart(&port->PolicyStateTimer, tBISTContMode);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003b22:	f24c 3150 	movw	r1, #50000	; 0xc350
 8003b26:	4618      	mov	r0, r3
 8003b28:	f003 f9c2 	bl	8006eb0 <TimerStart>

        port->PolicySubIndex = 1;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        break;
 8003b34:	e049      	b.n	8003bca <policyBISTCarrierMode2+0x112>
    case 1:
        /* Disable and wait on GoodCRC */
        if (TimerExpired(&port->PolicyStateTimer))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f003 f9f2 	bl	8006f26 <TimerExpired>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d020      	beq.n	8003b8a <policyBISTCarrierMode2+0xd2>
        {
            /* Disable BIST_Carrier_Mode_2 (PD_RESET does not do this) */
            port->Registers.Control.BIST_MODE2 = 0;
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8003b4e:	f36f 1304 	bfc	r3, #4, #1
 8003b52:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
            DeviceWrite(port->I2cAddr, regControl1, 1,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3331      	adds	r3, #49	; 0x31
 8003b60:	2201      	movs	r2, #1
 8003b62:	2107      	movs	r1, #7
 8003b64:	f003 f96a 	bl	8006e3c <DeviceWrite>
                        &port->Registers.Control.byte[1]);

            /* Delay to allow preamble to finish */
            TimerStart(&port->PolicyStateTimer, tGoodCRCDelay);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003b6e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003b72:	4618      	mov	r0, r3
 8003b74:	f003 f99c 	bl	8006eb0 <TimerStart>

            port->PolicySubIndex++;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8003b7e:	3301      	adds	r3, #1
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 8003b88:	e01f      	b.n	8003bca <policyBISTCarrierMode2+0x112>
            port->PEIdle = TRUE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8003b92:	e01a      	b.n	8003bca <policyBISTCarrierMode2+0x112>
    case 2:
        /* Transition to SRC_Transition_to_Default, SNK_Transition_to_Default,
         * or CBL_Ready when BISTContModeTimer times out
         */
        if (TimerExpired(&port->PolicyStateTimer))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f003 f9c3 	bl	8006f26 <TimerExpired>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00c      	beq.n	8003bc0 <policyBISTCarrierMode2+0x108>
        {
            ProtocolFlushTxFIFO(port);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f001 f9ca 	bl	8004f40 <ProtocolFlushTxFIFO>

            if (port->PolicyIsSource)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <policyBISTCarrierMode2+0x110>
            {
#if (defined(FSC_HAVE_SRC) || \
     (defined(FSC_HAVE_SNK) && defined(FSC_HAVE_ACCMODE)))
                SetPEState(port, peSourceSendHardReset);
 8003bb6:	2103      	movs	r1, #3
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f001 faed 	bl	8005198 <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 8003bbe:	e003      	b.n	8003bc8 <policyBISTCarrierMode2+0x110>
            port->PEIdle = TRUE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8003bc8:	bf00      	nop
    }

}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <policyBISTTestData>:

void policyBISTTestData(Port_t *port)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
    if (port->Registers.DeviceID.VERSION_ID == VERSION_302A)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003be0:	f023 030f 	bic.w	r3, r3, #15
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b80      	cmp	r3, #128	; 0x80
 8003be8:	d108      	bne.n	8003bfc <policyBISTTestData+0x2a>
    {
        /* Set the bit for RX_FLUSH when the state machine is woken up here */
        DeviceWrite(port->I2cAddr, regControl1, 1,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3331      	adds	r3, #49	; 0x31
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	2107      	movs	r1, #7
 8003bf8:	f003 f920 	bl	8006e3c <DeviceWrite>
                    &port->Registers.Control.byte[1]);
    }

    /* Waiting for HR */
    port->PEIdle = TRUE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 8003c04:	bf00      	nop
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <TokenToSopType>:

#endif /* FSC_HAVE_VDM */

/* This function is FUSB302 specific */
SopType TokenToSopType(FSC_U8 data)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	71fb      	strb	r3, [r7, #7]
    SopType ret;
    FSC_U8 maskedSop = data & 0xE0;
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	f023 031f 	bic.w	r3, r3, #31
 8003c1c:	73bb      	strb	r3, [r7, #14]

    if (maskedSop == SOP_CODE_SOP)              ret = SOP_TYPE_SOP;
 8003c1e:	7bbb      	ldrb	r3, [r7, #14]
 8003c20:	2be0      	cmp	r3, #224	; 0xe0
 8003c22:	d102      	bne.n	8003c2a <TokenToSopType+0x1e>
 8003c24:	2300      	movs	r3, #0
 8003c26:	73fb      	strb	r3, [r7, #15]
 8003c28:	e019      	b.n	8003c5e <TokenToSopType+0x52>
    else if (maskedSop == SOP_CODE_SOP1)        ret = SOP_TYPE_SOP1;
 8003c2a:	7bbb      	ldrb	r3, [r7, #14]
 8003c2c:	2bc0      	cmp	r3, #192	; 0xc0
 8003c2e:	d102      	bne.n	8003c36 <TokenToSopType+0x2a>
 8003c30:	2301      	movs	r3, #1
 8003c32:	73fb      	strb	r3, [r7, #15]
 8003c34:	e013      	b.n	8003c5e <TokenToSopType+0x52>
    else if (maskedSop == SOP_CODE_SOP2)        ret = SOP_TYPE_SOP2;
 8003c36:	7bbb      	ldrb	r3, [r7, #14]
 8003c38:	2ba0      	cmp	r3, #160	; 0xa0
 8003c3a:	d102      	bne.n	8003c42 <TokenToSopType+0x36>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	73fb      	strb	r3, [r7, #15]
 8003c40:	e00d      	b.n	8003c5e <TokenToSopType+0x52>
    else if (maskedSop == SOP_CODE_SOP1_DEBUG)  ret = SOP_TYPE_SOP2_DEBUG;
 8003c42:	7bbb      	ldrb	r3, [r7, #14]
 8003c44:	2b80      	cmp	r3, #128	; 0x80
 8003c46:	d102      	bne.n	8003c4e <TokenToSopType+0x42>
 8003c48:	2304      	movs	r3, #4
 8003c4a:	73fb      	strb	r3, [r7, #15]
 8003c4c:	e007      	b.n	8003c5e <TokenToSopType+0x52>
    else if (maskedSop == SOP_CODE_SOP2_DEBUG)  ret = SOP_TYPE_SOP2_DEBUG;
 8003c4e:	7bbb      	ldrb	r3, [r7, #14]
 8003c50:	2b60      	cmp	r3, #96	; 0x60
 8003c52:	d102      	bne.n	8003c5a <TokenToSopType+0x4e>
 8003c54:	2304      	movs	r3, #4
 8003c56:	73fb      	strb	r3, [r7, #15]
 8003c58:	e001      	b.n	8003c5e <TokenToSopType+0x52>
    else                                        ret = SOP_TYPE_ERROR;
 8003c5a:	23ff      	movs	r3, #255	; 0xff
 8003c5c:	73fb      	strb	r3, [r7, #15]

    return ret;
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bc80      	pop	{r7}
 8003c68:	4770      	bx	lr
	...

08003c6c <processDMTBIST>:

void processDMTBIST(Port_t *port)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
    FSC_U8 bdo = port->PolicyRxDataObj[0].byte[3] >> 4;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	73fb      	strb	r3, [r7, #15]

    notify_observers(BIST_ENABLED, port->I2cAddr, 0);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c84:	2200      	movs	r2, #0
 8003c86:	4619      	mov	r1, r3
 8003c88:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003c8c:	f003 fcda 	bl	8007644 <notify_observers>

    switch (bdo)
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
 8003c92:	2b05      	cmp	r3, #5
 8003c94:	d121      	bne.n	8003cda <processDMTBIST+0x6e>
    {
    case BDO_BIST_Carrier_Mode_2:
        /* Only enter BIST for 5V contract */
        if (DPM_GetSourceCap(port->dpm, port)[
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f003 fac8 	bl	8007232 <DPM_GetSourceCap>
 8003ca2:	4602      	mov	r2, r0
                port->USBPDContract.FVRDO.ObjectPosition - 1].FPDOSupply.Voltage
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003caa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003cae:	b2db      	uxtb	r3, r3
        if (DPM_GetSourceCap(port->dpm, port)[
 8003cb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
                == 100)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4b4b      	ldr	r3, [pc, #300]	; (8003dec <processDMTBIST+0x180>)
 8003cbe:	4013      	ands	r3, r2
        if (DPM_GetSourceCap(port->dpm, port)[
 8003cc0:	f5b3 3fc8 	cmp.w	r3, #102400	; 0x19000
 8003cc4:	f040 808d 	bne.w	8003de2 <processDMTBIST+0x176>
        {
            SetPEState(port, PE_BIST_Carrier_Mode_2);
 8003cc8:	2175      	movs	r1, #117	; 0x75
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f001 fa64 	bl	8005198 <SetPEState>
            port->ProtocolState = PRLIdle;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        }

        /* Don't idle here - mode setup in next state */
        break;
 8003cd8:	e083      	b.n	8003de2 <processDMTBIST+0x176>
    case BDO_BIST_Test_Data:
    default:
        /* Only enter BIST for 5V contract */
        if (DPM_GetSourceCap(port->dpm, port)[
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f003 faa6 	bl	8007232 <DPM_GetSourceCap>
 8003ce6:	4602      	mov	r2, r0
                port->USBPDContract.FVRDO.ObjectPosition - 1].FPDOSupply.Voltage
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003cee:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003cf2:	b2db      	uxtb	r3, r3
        if (DPM_GetSourceCap(port->dpm, port)[
 8003cf4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
                == 100)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	4b3a      	ldr	r3, [pc, #232]	; (8003dec <processDMTBIST+0x180>)
 8003d02:	4013      	ands	r3, r2
        if (DPM_GetSourceCap(port->dpm, port)[
 8003d04:	f5b3 3fc8 	cmp.w	r3, #102400	; 0x19000
 8003d08:	d166      	bne.n	8003dd8 <processDMTBIST+0x16c>
        {
            if (port->Registers.DeviceID.VERSION_ID == VERSION_302A)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d10:	f023 030f 	bic.w	r3, r3, #15
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b80      	cmp	r3, #128	; 0x80
 8003d18:	d146      	bne.n	8003da8 <processDMTBIST+0x13c>
            {
                /* Mask for VBUS and Hard Reset */
                port->Registers.Mask.byte = 0xFF;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	22ff      	movs	r2, #255	; 0xff
 8003d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                port->Registers.Mask.M_VBUSOK = 0;
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8003d28:	f36f 13c7 	bfc	r3, #7, #1
 8003d2c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                port->Registers.Mask.M_COMP_CHNG = 0;
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8003d36:	f36f 1345 	bfc	r3, #5, #1
 8003d3a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                DeviceWrite(port->I2cAddr, regMask, 1,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3334      	adds	r3, #52	; 0x34
 8003d48:	2201      	movs	r2, #1
 8003d4a:	210a      	movs	r1, #10
 8003d4c:	f003 f876 	bl	8006e3c <DeviceWrite>
                            &port->Registers.Mask.byte);
                port->Registers.MaskAdv.byte[0] = 0xFF;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	22ff      	movs	r2, #255	; 0xff
 8003d54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                port->Registers.MaskAdv.M_HARDRST = 0;
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8003d5e:	f36f 0300 	bfc	r3, #0, #1
 8003d62:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
                DeviceWrite(port->I2cAddr, regMaska, 1,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3338      	adds	r3, #56	; 0x38
 8003d70:	2201      	movs	r2, #1
 8003d72:	210e      	movs	r1, #14
 8003d74:	f003 f862 	bl	8006e3c <DeviceWrite>
                            &port->Registers.MaskAdv.byte[0]);
                port->Registers.MaskAdv.M_GCRCSENT = 1;
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
                DeviceWrite(port->I2cAddr, regMaskb, 1,
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3339      	adds	r3, #57	; 0x39
 8003d90:	2201      	movs	r2, #1
 8003d92:	210f      	movs	r1, #15
 8003d94:	f003 f852 	bl	8006e3c <DeviceWrite>
                            &port->Registers.MaskAdv.byte[1]);

                /* Enable RxFIFO flushing */
                port->Registers.Control.RX_FLUSH = 1;
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8003d9e:	f043 0304 	orr.w	r3, r3, #4
 8003da2:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
 8003da6:	e00f      	b.n	8003dc8 <processDMTBIST+0x15c>
                /* TODO - Does this need a write? */
            }
            else
            {
                /* Auto-flush RxFIFO */
                port->Registers.Control.BIST_TMODE = 1;
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8003dae:	f043 0320 	orr.w	r3, r3, #32
 8003db2:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                DeviceWrite(port->I2cAddr, regControl3, 1,
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3333      	adds	r3, #51	; 0x33
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	2109      	movs	r1, #9
 8003dc4:	f003 f83a 	bl	8006e3c <DeviceWrite>
                            &port->Registers.Control.byte[3]);
            }

            SetPEState(port, PE_BIST_Test_Data);
 8003dc8:	2176      	movs	r1, #118	; 0x76
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f001 f9e4 	bl	8005198 <SetPEState>

            /* Disable Protocol layer so we don't read FIFO */
            port->ProtocolState = PRLDisabled;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        }

        port->PEIdle = TRUE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8003de0:	e000      	b.n	8003de4 <processDMTBIST+0x178>
        break;
 8003de2:	bf00      	nop
    }
}
 8003de4:	bf00      	nop
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	000ffc00 	.word	0x000ffc00

08003df0 <USBPDProtocol>:
#include "bitfield_translators.h"
#endif /* FSC_HAVE_VDM */

/* USB PD Protocol Layer Routines */
void USBPDProtocol(Port_t *port)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
    if ((port->Registers.Status.I_HARDRST ||
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d107      	bne.n	8003e18 <USBPDProtocol+0x28>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d01a      	beq.n	8003e4e <USBPDProtocol+0x5e>
        port->Registers.Status.I_HARDSENT))
    {
        ResetProtocolLayer(port, TRUE);
 8003e18:	2101      	movs	r1, #1
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f001 f8a8 	bl	8004f70 <ResetProtocolLayer>
        if (port->PolicyIsSource)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00c      	beq.n	8003e44 <USBPDProtocol+0x54>
        {
            TimerStart(&port->PolicyStateTimer, tPSHardReset);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003e30:	f247 5130 	movw	r1, #30000	; 0x7530
 8003e34:	4618      	mov	r0, r3
 8003e36:	f003 f83b 	bl	8006eb0 <TimerStart>
            SetPEState(port, peSourceTransitionDefault);
 8003e3a:	210a      	movs	r1, #10
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f001 f9ab 	bl	8005198 <SetPEState>
        if (port->PolicyIsSource)
 8003e42:	e03a      	b.n	8003eba <USBPDProtocol+0xca>
        }
        else
        {
          SetPEState(port, peSinkTransitionDefault);
 8003e44:	211d      	movs	r1, #29
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f001 f9a6 	bl	8005198 <SetPEState>
        if (port->PolicyIsSource)
 8003e4c:	e035      	b.n	8003eba <USBPDProtocol+0xca>
            StoreUSBPDToken(port, FALSE, pdtHardResetRxd);
#endif /* FSC_DEBUG */
    }
    else
    {
        switch (port->ProtocolState)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8003e54:	2b07      	cmp	r3, #7
 8003e56:	d82f      	bhi.n	8003eb8 <USBPDProtocol+0xc8>
 8003e58:	a201      	add	r2, pc, #4	; (adr r2, 8003e60 <USBPDProtocol+0x70>)
 8003e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5e:	bf00      	nop
 8003e60:	08003eb9 	.word	0x08003eb9
 8003e64:	08003ea1 	.word	0x08003ea1
 8003e68:	08003e81 	.word	0x08003e81
 8003e6c:	08003e99 	.word	0x08003e99
 8003e70:	08003eb9 	.word	0x08003eb9
 8003e74:	08003ea9 	.word	0x08003ea9
 8003e78:	08003eb9 	.word	0x08003eb9
 8003e7c:	08003eb1 	.word	0x08003eb1
        {
        case PRLReset:
            /* Sending a hard reset. */
            ProtocolSendHardReset(port);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f001 f823 	bl	8004ecc <ProtocolSendHardReset>
            port->PDTxStatus = txWait;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2204      	movs	r2, #4
 8003e8a:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
            port->ProtocolState = PRLResetWait;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2203      	movs	r2, #3
 8003e92:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
            break;
 8003e96:	e010      	b.n	8003eba <USBPDProtocol+0xca>
        case PRLResetWait:
            /* Wait on hard reset signaling */
            ProtocolResetWait(port);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f87b 	bl	8003f94 <ProtocolResetWait>
            break;
 8003e9e:	e00c      	b.n	8003eba <USBPDProtocol+0xca>
        case PRLIdle:
            /* Wait on Tx/Rx */
            ProtocolIdle(port);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f80f 	bl	8003ec4 <ProtocolIdle>
            break;
 8003ea6:	e008      	b.n	8003eba <USBPDProtocol+0xca>
        case PRLTxSendingMessage:
            /* Wait on Tx to finish */
            ProtocolSendingMessage(port);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 fda6 	bl	80049fa <ProtocolSendingMessage>
            break;
 8003eae:	e004      	b.n	8003eba <USBPDProtocol+0xca>
        case PRLTxVerifyGoodCRC:
            /* Verify returned GoodCRC */
            ProtocolVerifyGoodCRC(port);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 fe1f 	bl	8004af4 <ProtocolVerifyGoodCRC>
            break;
 8003eb6:	e000      	b.n	8003eba <USBPDProtocol+0xca>
        case PRLDisabled:
            break;
        default:
            break;
 8003eb8:	bf00      	nop
        }
    }
}
 8003eba:	bf00      	nop
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop

08003ec4 <ProtocolIdle>:
    StoreUSBPDToken(port, TRUE, pdtCableReset);
#endif /* FSC_DEBUG */
}

void ProtocolIdle(Port_t *port)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
    if (port->PDTxStatus == txReset)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d104      	bne.n	8003ee0 <ProtocolIdle+0x1c>
    {
        /* Need to send a reset? */
        port->ProtocolState = PRLReset;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2202      	movs	r2, #2
 8003eda:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    else if (port->ExtTxOrRx != NoXfer && port->ExtWaitTxRx == FALSE)
    {
        port->PDTxStatus = txSend;
    }
#endif /* FSC_HAVE_EXT_MSG */
}
 8003ede:	e055      	b.n	8003f8c <ProtocolIdle+0xc8>
    else if (port->Registers.Status.I_CRC_CHK || port->ProtocolMsgRxPending)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d104      	bne.n	8003efa <ProtocolIdle+0x36>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 31c4 	ldrb.w	r3, [r3, #452]	; 0x1c4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d021      	beq.n	8003f3e <ProtocolIdle+0x7a>
        if (port->DoTxFlush)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3250 	ldrb.w	r3, [r3, #592]	; 0x250
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d006      	beq.n	8003f12 <ProtocolIdle+0x4e>
            ProtocolFlushTxFIFO(port);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f001 f81b 	bl	8004f40 <ProtocolFlushTxFIFO>
            port->DoTxFlush = FALSE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
        if (!port->ProtocolMsgRx)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d104      	bne.n	8003f26 <ProtocolIdle+0x62>
            ProtocolGetRxPacket(port, FALSE);
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f851 	bl	8003fc6 <ProtocolGetRxPacket>
 8003f24:	e003      	b.n	8003f2e <ProtocolIdle+0x6a>
            port->ProtocolMsgRxPending = TRUE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
        port->Registers.Status.I_CRC_CHK = 0;
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 8003f34:	f36f 1304 	bfc	r3, #4, #1
 8003f38:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
 8003f3c:	e026      	b.n	8003f8c <ProtocolIdle+0xc8>
    else if (port->PDTxStatus == txSend)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d112      	bne.n	8003f6e <ProtocolIdle+0xaa>
        if (port->ProtocolMsgRx || port->ProtocolMsgRxPending)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d104      	bne.n	8003f5c <ProtocolIdle+0x98>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 31c4 	ldrb.w	r3, [r3, #452]	; 0x1c4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d004      	beq.n	8003f66 <ProtocolIdle+0xa2>
            port->PDTxStatus = txAbort;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2208      	movs	r2, #8
 8003f60:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
 8003f64:	e012      	b.n	8003f8c <ProtocolIdle+0xc8>
            ProtocolTransmitMessage(port);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fb21 	bl	80045ae <ProtocolTransmitMessage>
}
 8003f6c:	e00e      	b.n	8003f8c <ProtocolIdle+0xc8>
    else if (port->ExtTxOrRx != NoXfer && port->ExtWaitTxRx == FALSE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d009      	beq.n	8003f8c <ProtocolIdle+0xc8>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 32fa 	ldrb.w	r3, [r3, #762]	; 0x2fa
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d104      	bne.n	8003f8c <ProtocolIdle+0xc8>
        port->PDTxStatus = txSend;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2202      	movs	r2, #2
 8003f86:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
}
 8003f8a:	e7ff      	b.n	8003f8c <ProtocolIdle+0xc8>
 8003f8c:	bf00      	nop
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <ProtocolResetWait>:

void ProtocolResetWait(Port_t *port)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
    if (port->Registers.Status.I_HARDSENT)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d007      	beq.n	8003fbc <ProtocolResetWait+0x28>
    {
        port->ProtocolState = PRLIdle;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        port->PDTxStatus = txSuccess;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2205      	movs	r2, #5
 8003fb8:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
    }
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <ProtocolGetRxPacket>:

void ProtocolGetRxPacket(Port_t *port, FSC_BOOL HeaderReceived)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b086      	sub	sp, #24
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	70fb      	strb	r3, [r7, #3]
#ifdef FSC_DEBUG
    sopMainHeader_t logHeader;
#endif /* FSC_DEBUG */
    FSC_U32 i = 0, j = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	613b      	str	r3, [r7, #16]
    FSC_U8 data[4];

    port->ProtocolMsgRxPending = FALSE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4

    TimerDisable(&port->ProtocolTimer);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f002 ff7c 	bl	8006ee6 <TimerDisable>

    /* Update to make sure GetRxPacket can see a valid RxEmpty value */
    DeviceRead(port->I2cAddr, regStatus1, 1,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3341      	adds	r3, #65	; 0x41
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	2141      	movs	r1, #65	; 0x41
 8003ffc:	f002 ff3b 	bl	8006e76 <DeviceRead>
               &port->Registers.Status.byte[5]);

    if (port->Registers.Status.RX_EMPTY == 1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	f040 82c8 	bne.w	80045a2 <ProtocolGetRxPacket+0x5dc>
    {
        /* Nothing to see here... */
        return;
    }

    if (HeaderReceived == FALSE)
 8004012:	78fb      	ldrb	r3, [r7, #3]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d119      	bne.n	800404c <ProtocolGetRxPacket+0x86>
    {
        /* Read the Rx token and two header bytes */
        DeviceRead(port->I2cAddr, regFIFO, 3, &data[0]);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800401e:	f107 030c 	add.w	r3, r7, #12
 8004022:	2203      	movs	r2, #3
 8004024:	2143      	movs	r1, #67	; 0x43
 8004026:	f002 ff26 	bl	8006e76 <DeviceRead>
        port->PolicyRxHeader.byte[0] = data[1];
 800402a:	7b7a      	ldrb	r2, [r7, #13]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
        port->PolicyRxHeader.byte[1] = data[2];
 8004032:	7bba      	ldrb	r2, [r7, #14]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad

        /* Figure out what SOP* the data came in on */
        port->ProtocolMsgRxSop = TokenToSopType(data[0]);
 800403a:	7b3b      	ldrb	r3, [r7, #12]
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff fde5 	bl	8003c0c <TokenToSopType>
 8004042:	4603      	mov	r3, r0
 8004044:	461a      	mov	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
    /* The FUSB302B doesn't send an automatic GoodCRC for this message,
     * so this fix tries to send a fast manual GoodCRC.  Depending on how fast
     * this code is run, it might be a bit late or it might occur after
     * a retry of the GSCE message.
     */
    if (port->PolicyRxHeader.NumDataObjects == 0 &&
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8004052:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d164      	bne.n	8004126 <ProtocolGetRxPacket+0x160>
        port->PolicyRxHeader.MessageType == CMTGetSourceCapExt)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8004062:	f003 031f 	and.w	r3, r3, #31
 8004066:	b2db      	uxtb	r3, r3
    if (port->PolicyRxHeader.NumDataObjects == 0 &&
 8004068:	2b11      	cmp	r3, #17
 800406a:	d15c      	bne.n	8004126 <ProtocolGetRxPacket+0x160>
    {
        /* Pre-load manual GoodCRC */
        port->PolicyTxHeader.word = 0;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
        port->PolicyTxHeader.MessageType = CMTGoodCRC;
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 800407a:	2101      	movs	r1, #1
 800407c:	f361 0304 	bfi	r3, r1, #0, #5
 8004080:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
        port->PolicyTxHeader.PortDataRole = port->PolicyIsDFP;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	b2d9      	uxtb	r1, r3
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 8004096:	f361 1345 	bfi	r3, r1, #5, #1
 800409a:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
        port->PolicyTxHeader.PortPowerRole = port->PolicyIsSource;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	b2d9      	uxtb	r1, r3
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 80040b0:	f361 0300 	bfi	r3, r1, #0, #1
 80040b4:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
        port->PolicyTxHeader.SpecRevision = USBPDSPECREV2p0;
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 80040be:	2101      	movs	r1, #1
 80040c0:	f361 1387 	bfi	r3, r1, #6, #2
 80040c4:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
        port->PolicyTxHeader.MessageID = port->PolicyRxHeader.MessageID;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80040ce:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80040d2:	b2d9      	uxtb	r1, r3
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 80040da:	f361 0343 	bfi	r3, r1, #1, #3
 80040de:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
        ProtocolSendGoodCRC(port, SOP_TYPE_SOP);
 80040e2:	2100      	movs	r1, #0
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fdb2 	bl	8004c4e <ProtocolSendGoodCRC>

        /* Transmit pre-loaded GoodCRC msg */
        port->Registers.Control.TX_START = 1;
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        DeviceWrite(port->I2cAddr, regControl0, 1,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3330      	adds	r3, #48	; 0x30
 8004102:	2201      	movs	r2, #1
 8004104:	2106      	movs	r1, #6
 8004106:	f002 fe99 	bl	8006e3c <DeviceWrite>
                    &port->Registers.Control.byte[0]);
        port->Registers.Control.TX_START = 0;
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8004110:	f36f 0300 	bfc	r3, #0, #1
 8004114:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30

        /* Brief delay to allow the GoodCRC to transmit */
        platform_delay_10us(50);
 8004118:	2032      	movs	r0, #50	; 0x32
 800411a:	f7fc fb81 	bl	8000820 <platform_delay_10us>

        /* Flush any retries that may have made it into the buffer */
        ProtocolFlushRxFIFO(port);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fef6 	bl	8004f10 <ProtocolFlushRxFIFO>
 8004124:	e002      	b.n	800412c <ProtocolGetRxPacket+0x166>
         * be no longer than 700us later
         */
        /* I_GCRCSENT can be missed (rare), so this is a simple delay
         * instead of a re-read of the interrupt register.
         */
        platform_delay_10us(70); /* 700us */
 8004126:	2046      	movs	r0, #70	; 0x46
 8004128:	f7fc fb7a 	bl	8000820 <platform_delay_10us>
    logHeader.PortPowerRole = port->PolicyIsSource;
    logHeader.SpecRevision = DPM_SpecRev(port, port->ProtocolMsgRxSop);
    logHeader.MessageID = port->PolicyRxHeader.MessageID;
#endif /* FSC_DEBUG */

    if (port->ProtocolMsgRxSop == SOP_TYPE_ERROR)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 8004132:	2bff      	cmp	r3, #255	; 0xff
 8004134:	f000 8237 	beq.w	80045a6 <ProtocolGetRxPacket+0x5e0>
         * TODO - Flush?
         */
        return;
    }

    if ((port->PolicyRxHeader.NumDataObjects == 0) &&
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800413e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d11e      	bne.n	8004186 <ProtocolGetRxPacket+0x1c0>
        (port->PolicyRxHeader.MessageType == CMTSoftReset))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800414e:	f003 031f 	and.w	r3, r3, #31
 8004152:	b2db      	uxtb	r3, r3
    if ((port->PolicyRxHeader.NumDataObjects == 0) &&
 8004154:	2b0d      	cmp	r3, #13
 8004156:	d116      	bne.n	8004186 <ProtocolGetRxPacket+0x1c0>
    {
        /* For a soft reset, reset ID's, etc. */
        port->MessageIDCounter[port->ProtocolMsgRxSop] = 0;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 800415e:	461a      	mov	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4413      	add	r3, r2
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
        port->MessageID[port->ProtocolMsgRxSop] = 0xFF;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 8004170:	461a      	mov	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4413      	add	r3, r2
 8004176:	22ff      	movs	r2, #255	; 0xff
 8004178:	f883 224b 	strb.w	r2, [r3, #587]	; 0x24b
        port->ProtocolMsgRx = TRUE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
 8004184:	e023      	b.n	80041ce <ProtocolGetRxPacket+0x208>
#ifdef FSC_DEBUG
        port->SourceCapsUpdated = TRUE;
#endif /* FSC_DEBUG */
    }
    else if (port->PolicyRxHeader.MessageID !=
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800418c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004190:	b2db      	uxtb	r3, r3
 8004192:	461a      	mov	r2, r3
             port->MessageID[port->ProtocolMsgRxSop])
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 800419a:	4619      	mov	r1, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	440b      	add	r3, r1
 80041a0:	f893 324b 	ldrb.w	r3, [r3, #587]	; 0x24b
    else if (port->PolicyRxHeader.MessageID !=
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d012      	beq.n	80041ce <ProtocolGetRxPacket+0x208>
    {
        port->MessageID[port->ProtocolMsgRxSop] =
            port->PolicyRxHeader.MessageID;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80041ae:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80041b2:	b2d9      	uxtb	r1, r3
        port->MessageID[port->ProtocolMsgRxSop] =
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 80041ba:	461a      	mov	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4413      	add	r3, r2
 80041c0:	460a      	mov	r2, r1
 80041c2:	f883 224b 	strb.w	r2, [r3, #587]	; 0x24b
        port->ProtocolMsgRx = TRUE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
    }

    if ((port->PolicyRxHeader.NumDataObjects == 0) &&
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80041d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d121      	bne.n	8004222 <ProtocolGetRxPacket+0x25c>
        (port->PolicyRxHeader.MessageType == CMTGoodCRC))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80041e4:	f003 031f 	and.w	r3, r3, #31
 80041e8:	b2db      	uxtb	r3, r3
    if ((port->PolicyRxHeader.NumDataObjects == 0) &&
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d119      	bne.n	8004222 <ProtocolGetRxPacket+0x25c>
        /* Rare cases may result in the next GoodCRC being processed before
         * the expected current message.  Handle and continue on to next msg.
         */

        /* Read out the 4 CRC bytes to move the address to the next packet */
        DeviceRead(port->I2cAddr, regFIFO, 4, data);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80041f4:	f107 030c 	add.w	r3, r7, #12
 80041f8:	2204      	movs	r2, #4
 80041fa:	2143      	movs	r1, #67	; 0x43
 80041fc:	f002 fe3b 	bl	8006e76 <DeviceRead>

        port->ProtocolState = PRLIdle;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        port->PDTxStatus = txSuccess;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2205      	movs	r2, #5
 800420c:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
        port->ProtocolMsgRx = FALSE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3

        ProtocolGetRxPacket(port, FALSE);
 8004218:	2100      	movs	r1, #0
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff fed3 	bl	8003fc6 <ProtocolGetRxPacket>

        return;
 8004220:	e1c2      	b.n	80045a8 <ProtocolGetRxPacket+0x5e2>
    }
    else if (port->PolicyRxHeader.NumDataObjects > 0)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8004228:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 812b 	beq.w	800448a <ProtocolGetRxPacket+0x4c4>
    {
        /* Data message - Grab the data from the FIFO, including 4 byte CRC */
        DeviceRead(port->I2cAddr, regFIFO,
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
                   ((port->PolicyRxHeader.NumDataObjects << 2) + 4),
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8004240:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004244:	b2db      	uxtb	r3, r3
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	b2db      	uxtb	r3, r3
        DeviceRead(port->I2cAddr, regFIFO,
 800424a:	3304      	adds	r3, #4
 800424c:	b2da      	uxtb	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f203 2306 	addw	r3, r3, #518	; 0x206
 8004254:	2143      	movs	r1, #67	; 0x43
 8004256:	f002 fe0e 	bl	8006e76 <DeviceRead>
                   &port->ProtocolRxBuffer[0]);

#ifdef FSC_HAVE_EXT_MSG
        if (port->PolicyRxHeader.Extended == 1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8004260:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d066      	beq.n	8004338 <ProtocolGetRxPacket+0x372>
        {
            /* Copy ext header first */
            port->ExtRxHeader.byte[0] = port->ProtocolRxBuffer[0];
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 2206 	ldrb.w	r2, [r3, #518]	; 0x206
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
            port->ExtRxHeader.byte[1] = port->ProtocolRxBuffer[1];
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 2207 	ldrb.w	r2, [r3, #519]	; 0x207
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

            if (port->ExtRxHeader.ReqChunk == 1)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d028      	beq.n	80042e4 <ProtocolGetRxPacket+0x31e>
            {
                /* Received request for another chunk. Continue sending....*/
                port->ExtWaitTxRx = FALSE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
                if (port->ExtRxHeader.ChunkNum < port->ExtChunkNum)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80042a0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	461a      	mov	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80042ae:	429a      	cmp	r2, r3
 80042b0:	da42      	bge.n	8004338 <ProtocolGetRxPacket+0x372>
                {
                    /* Resend the previous chunk */
                    port->ExtChunkNum = port->ExtRxHeader.ChunkNum;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80042b8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
                    port->ExtChunkOffset =
                        port->ExtChunkNum * EXT_MAX_MSG_LEGACY_LEN;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
                    port->ExtChunkOffset =
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	461a      	mov	r2, r3
 80042d0:	0052      	lsls	r2, r2, #1
 80042d2:	441a      	add	r2, r3
 80042d4:	0092      	lsls	r2, r2, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
 80042e2:	e029      	b.n	8004338 <ProtocolGetRxPacket+0x372>
                }
            }
            else
            {
                if (port->ExtRxHeader.DataSize > EXT_MAX_MSG_LEGACY_LEN)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 80042ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b1a      	cmp	r3, #26
 80042f2:	d921      	bls.n	8004338 <ProtocolGetRxPacket+0x372>
                {
                    if (port->ExtRxHeader.DataSize > 260)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 80042fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042fe:	b29b      	uxth	r3, r3
 8004300:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004304:	d908      	bls.n	8004318 <ProtocolGetRxPacket+0x352>
                    {
                        port->ExtRxHeader.DataSize = 260;
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	f8b2 32f8 	ldrh.w	r3, [r2, #760]	; 0x2f8
 800430c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004310:	f361 0308 	bfi	r3, r1, #0, #9
 8004314:	f8a2 32f8 	strh.w	r3, [r2, #760]	; 0x2f8
                    }
                    if (port->ExtRxHeader.ChunkNum == 0)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800431e:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d107      	bne.n	8004338 <ProtocolGetRxPacket+0x372>
                    {
                        port->ExtChunkOffset = 0;   /* First message */
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
                        port->ExtChunkNum = 1;      /* Next chunk number */
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
                    }
                }
            }
        }
#endif /* FSC_HAVE_EXT_MSG */
        for (i = 0; i < port->PolicyRxHeader.NumDataObjects; i++)
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	e04d      	b.n	80043da <ProtocolGetRxPacket+0x414>
        {
            for (j = 0; j < 4; j++)
 800433e:	2300      	movs	r3, #0
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	e044      	b.n	80043ce <ProtocolGetRxPacket+0x408>
            {
#ifdef FSC_HAVE_EXT_MSG
                if (port->PolicyRxHeader.Extended == 1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800434a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d026      	beq.n	80043a2 <ProtocolGetRxPacket+0x3dc>
                {
                    /* Skip ext header */
                    if (i == 0 && (j == 0 || j == 1)){continue;}
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d105      	bne.n	8004366 <ProtocolGetRxPacket+0x3a0>
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d032      	beq.n	80043c6 <ProtocolGetRxPacket+0x400>
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d02f      	beq.n	80043c6 <ProtocolGetRxPacket+0x400>

                    if (port->ExtRxHeader.ReqChunk == 0)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d128      	bne.n	80043c8 <ProtocolGetRxPacket+0x402>
                    {
                        port->ExtMsgBuffer[port->ExtChunkOffset++] =
                                port->ProtocolRxBuffer[j + (i << 2)];
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	009a      	lsls	r2, r3, #2
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	441a      	add	r2, r3
                        port->ExtMsgBuffer[port->ExtChunkOffset++] =
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 8004384:	1c59      	adds	r1, r3, #1
 8004386:	b288      	uxth	r0, r1
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	f8a1 02fc 	strh.w	r0, [r1, #764]	; 0x2fc
 800438e:	4619      	mov	r1, r3
                                port->ProtocolRxBuffer[j + (i << 2)];
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4413      	add	r3, r2
 8004394:	f893 2206 	ldrb.w	r2, [r3, #518]	; 0x206
                        port->ExtMsgBuffer[port->ExtChunkOffset++] =
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	440b      	add	r3, r1
 800439c:	f883 22fe 	strb.w	r2, [r3, #766]	; 0x2fe
 80043a0:	e012      	b.n	80043c8 <ProtocolGetRxPacket+0x402>
                }
                else
#endif /* FSC_HAVE_EXT_MSG */
                {
                    port->PolicyRxDataObj[i].byte[j] =
                            port->ProtocolRxBuffer[j + (i << 2)];
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	009a      	lsls	r2, r3, #2
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	4413      	add	r3, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	4413      	add	r3, r2
 80043ae:	f893 1206 	ldrb.w	r1, [r3, #518]	; 0x206
                    port->PolicyRxDataObj[i].byte[j] =
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	441a      	add	r2, r3
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	4413      	add	r3, r2
 80043be:	33b8      	adds	r3, #184	; 0xb8
 80043c0:	460a      	mov	r2, r1
 80043c2:	701a      	strb	r2, [r3, #0]
 80043c4:	e000      	b.n	80043c8 <ProtocolGetRxPacket+0x402>
                    if (i == 0 && (j == 0 || j == 1)){continue;}
 80043c6:	bf00      	nop
            for (j = 0; j < 4; j++)
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	3301      	adds	r3, #1
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	d9b7      	bls.n	8004344 <ProtocolGetRxPacket+0x37e>
        for (i = 0; i < port->PolicyRxHeader.NumDataObjects; i++)
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	3301      	adds	r3, #1
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80043e0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d3a7      	bcc.n	800433e <ProtocolGetRxPacket+0x378>
                }
            }
       }

#ifdef FSC_HAVE_EXT_MSG
        if (port->PolicyRxHeader.Extended == 1)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80043f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d04e      	beq.n	800449c <ProtocolGetRxPacket+0x4d6>
        {
            if (port->ExtRxHeader.ReqChunk == 0)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d120      	bne.n	8004450 <ProtocolGetRxPacket+0x48a>
            {
                if (port->ExtChunkOffset < port->ExtRxHeader.DataSize)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	f8b2 22f8 	ldrh.w	r2, [r2, #760]	; 0x2f8
 800441a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800441e:	b292      	uxth	r2, r2
 8004420:	4293      	cmp	r3, r2
 8004422:	d20c      	bcs.n	800443e <ProtocolGetRxPacket+0x478>
                {
                    /* more message left. continue receiving */
                    port->ExtTxOrRx = RXing;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
                    port->ProtocolMsgRx = FALSE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
                    port->ExtWaitTxRx = FALSE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
 800443c:	e02e      	b.n	800449c <ProtocolGetRxPacket+0x4d6>
                }
                else
                {
                    port->ExtTxOrRx = NoXfer;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
                    port->ProtocolMsgRx = TRUE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
 800444e:	e025      	b.n	800449c <ProtocolGetRxPacket+0x4d6>
                }
            }
            else if (port->ExtRxHeader.ReqChunk == 1 &&
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00f      	beq.n	8004480 <ProtocolGetRxPacket+0x4ba>
                     port->ExtChunkOffset < port->ExtTxHeader.DataSize)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	f8b2 22f6 	ldrh.w	r2, [r2, #758]	; 0x2f6
 800446c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004470:	b292      	uxth	r2, r2
            else if (port->ExtRxHeader.ReqChunk == 1 &&
 8004472:	4293      	cmp	r3, r2
 8004474:	d204      	bcs.n	8004480 <ProtocolGetRxPacket+0x4ba>
            {
                port->ExtWaitTxRx = FALSE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
 800447e:	e00d      	b.n	800449c <ProtocolGetRxPacket+0x4d6>
            }
            else
            {
                /* Last message received */
                port->ExtTxOrRx = NoXfer;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
 8004488:	e008      	b.n	800449c <ProtocolGetRxPacket+0x4d6>
    }
    else
    {
        /* Command message */
        /* Read out the 4 CRC bytes to move the address to the next packet */
        DeviceRead(port->I2cAddr, regFIFO, 4, data);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004490:	f107 030c 	add.w	r3, r7, #12
 8004494:	2204      	movs	r2, #4
 8004496:	2143      	movs	r1, #67	; 0x43
 8004498:	f002 fced 	bl	8006e76 <DeviceRead>
     */
    WriteStateLog(&port->PDStateLog, dbgGetRxPacket, platform_get_log_time());
#endif /* FSC_DEBUG */

    /* Special VDM use case where a second message appears too quickly */
    if ((port->PolicyRxHeader.NumDataObjects != 0) &&
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80044a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d030      	beq.n	800450e <ProtocolGetRxPacket+0x548>
        (port->PolicyRxHeader.MessageType == DMTVenderDefined) &&
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80044b2:	f003 031f 	and.w	r3, r3, #31
 80044b6:	b2db      	uxtb	r3, r3
    if ((port->PolicyRxHeader.NumDataObjects != 0) &&
 80044b8:	2b0f      	cmp	r3, #15
 80044ba:	d128      	bne.n	800450e <ProtocolGetRxPacket+0x548>
        (port->PolicyRxDataObj[0].SVDM.CommandType == 0)) /* Initiator */
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80044c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80044c6:	b2db      	uxtb	r3, r3
        (port->PolicyRxHeader.MessageType == DMTVenderDefined) &&
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d120      	bne.n	800450e <ProtocolGetRxPacket+0x548>
    {
        /* Delay and check if a new mesage has been received */
        /* Note: May need to increase this delay (2-3ms) or find alternate
         * method for some slow systems - e.g. Android.
         */
        platform_delay_10us(100); /* 1ms */
 80044cc:	2064      	movs	r0, #100	; 0x64
 80044ce:	f7fc f9a7 	bl	8000820 <platform_delay_10us>

        DeviceRead(port->I2cAddr, regInterruptb, 3,
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	333f      	adds	r3, #63	; 0x3f
 80044dc:	2203      	movs	r2, #3
 80044de:	213f      	movs	r1, #63	; 0x3f
 80044e0:	f002 fcc9 	bl	8006e76 <DeviceRead>
                   &port->Registers.Status.byte[3]);

        if (port->Registers.Status.I_GCRCSENT &&
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d046      	beq.n	8004582 <ProtocolGetRxPacket+0x5bc>
            !port->Registers.Status.RX_EMPTY)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	b2db      	uxtb	r3, r3
        if (port->Registers.Status.I_GCRCSENT &&
 8004500:	2b00      	cmp	r3, #0
 8004502:	d13e      	bne.n	8004582 <ProtocolGetRxPacket+0x5bc>
        {
            /* Get the next message - overwriting the current message */
            ProtocolGetRxPacket(port, FALSE);
 8004504:	2100      	movs	r1, #0
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7ff fd5d 	bl	8003fc6 <ProtocolGetRxPacket>
        if (port->Registers.Status.I_GCRCSENT &&
 800450c:	e039      	b.n	8004582 <ProtocolGetRxPacket+0x5bc>
    else
    {
        /* A quickly sent second message can be received
         * into the buffer without triggering an (additional) interrupt.
         */
        DeviceRead(port->I2cAddr, regStatus0, 2,
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3340      	adds	r3, #64	; 0x40
 8004518:	2202      	movs	r2, #2
 800451a:	2140      	movs	r1, #64	; 0x40
 800451c:	f002 fcab 	bl	8006e76 <DeviceRead>
            &port->Registers.Status.byte[4]);

        if (!port->Registers.Status.ACTIVITY &&
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d129      	bne.n	8004584 <ProtocolGetRxPacket+0x5be>
            !port->Registers.Status.RX_EMPTY)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	b2db      	uxtb	r3, r3
        if (!port->Registers.Status.ACTIVITY &&
 800453c:	2b00      	cmp	r3, #0
 800453e:	d121      	bne.n	8004584 <ProtocolGetRxPacket+0x5be>
        {
            platform_delay_10us(50);
 8004540:	2032      	movs	r0, #50	; 0x32
 8004542:	f7fc f96d 	bl	8000820 <platform_delay_10us>
            DeviceRead(port->I2cAddr, regStatus0, 2,
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3340      	adds	r3, #64	; 0x40
 8004550:	2202      	movs	r2, #2
 8004552:	2140      	movs	r1, #64	; 0x40
 8004554:	f002 fc8f 	bl	8006e76 <DeviceRead>
                        &port->Registers.Status.byte[4]);

            if (!port->Registers.Status.ACTIVITY &&
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800455e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10d      	bne.n	8004584 <ProtocolGetRxPacket+0x5be>
                !port->Registers.Status.RX_EMPTY)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	b2db      	uxtb	r3, r3
            if (!port->Registers.Status.ACTIVITY &&
 8004574:	2b00      	cmp	r3, #0
 8004576:	d105      	bne.n	8004584 <ProtocolGetRxPacket+0x5be>
            {
                port->ProtocolMsgRxPending = TRUE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
 8004580:	e000      	b.n	8004584 <ProtocolGetRxPacket+0x5be>
        if (port->Registers.Status.I_GCRCSENT &&
 8004582:	bf00      	nop
    }

    /* If a message has been received during an attempt to transmit,
     * abort and handle the received message before trying again.
     */
    if (port->ProtocolMsgRx && (port->PDTxStatus == txSend))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00c      	beq.n	80045a8 <ProtocolGetRxPacket+0x5e2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
 8004594:	2b02      	cmp	r3, #2
 8004596:	d107      	bne.n	80045a8 <ProtocolGetRxPacket+0x5e2>
    {
        port->PDTxStatus = txAbort;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2208      	movs	r2, #8
 800459c:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
 80045a0:	e002      	b.n	80045a8 <ProtocolGetRxPacket+0x5e2>
        return;
 80045a2:	bf00      	nop
 80045a4:	e000      	b.n	80045a8 <ProtocolGetRxPacket+0x5e2>
        return;
 80045a6:	bf00      	nop
    }
}
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <ProtocolTransmitMessage>:

void ProtocolTransmitMessage(Port_t *port)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b086      	sub	sp, #24
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
    FSC_U32 i, j;
    sopMainHeader_t temp_PolicyTxHeader = { 0 };
 80045b6:	2300      	movs	r3, #0
 80045b8:	81bb      	strh	r3, [r7, #12]

    port->DoTxFlush = FALSE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250

    /* Note: Power needs to be set a bit before we write TX_START to update */
    ProtocolLoadSOP(port, port->ProtocolMsgTxSop);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 31c1 	ldrb.w	r3, [r3, #449]	; 0x1c1
 80045c8:	4619      	mov	r1, r3
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fb8b 	bl	8004ce6 <ProtocolLoadSOP>

#ifdef FSC_HAVE_EXT_MSG
    if (port->ExtTxOrRx == RXing)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d118      	bne.n	800460c <ProtocolTransmitMessage+0x5e>
    {
        /* Set up chunk request */
        temp_PolicyTxHeader.word = port->PolicyRxHeader.word;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80045e0:	81bb      	strh	r3, [r7, #12]
        temp_PolicyTxHeader.PortPowerRole = port->PolicyIsSource;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	7b7b      	ldrb	r3, [r7, #13]
 80045f0:	f362 0300 	bfi	r3, r2, #0, #1
 80045f4:	737b      	strb	r3, [r7, #13]
        temp_PolicyTxHeader.PortDataRole = port->PolicyIsDFP;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	b2da      	uxtb	r2, r3
 8004602:	7b3b      	ldrb	r3, [r7, #12]
 8004604:	f362 1345 	bfi	r3, r2, #5, #1
 8004608:	733b      	strb	r3, [r7, #12]
 800460a:	e003      	b.n	8004614 <ProtocolTransmitMessage+0x66>
    }
    else
#endif /* FSC_HAVE_EXT_MSG */
    {
        temp_PolicyTxHeader.word = port->PolicyTxHeader.word;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8004612:	81bb      	strh	r3, [r7, #12]
    }

    if ((temp_PolicyTxHeader.NumDataObjects == 0) &&
 8004614:	7b7b      	ldrb	r3, [r7, #13]
 8004616:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d117      	bne.n	8004650 <ProtocolTransmitMessage+0xa2>
        (temp_PolicyTxHeader.MessageType == CMTSoftReset))
 8004620:	7b3b      	ldrb	r3, [r7, #12]
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	b2db      	uxtb	r3, r3
    if ((temp_PolicyTxHeader.NumDataObjects == 0) &&
 8004628:	2b0d      	cmp	r3, #13
 800462a:	d111      	bne.n	8004650 <ProtocolTransmitMessage+0xa2>
    {
        port->MessageIDCounter[port->ProtocolMsgTxSop] = 0;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 31c1 	ldrb.w	r3, [r3, #449]	; 0x1c1
 8004632:	461a      	mov	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4413      	add	r3, r2
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
        port->MessageID[port->ProtocolMsgTxSop] = 0xFF;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 31c1 	ldrb.w	r3, [r3, #449]	; 0x1c1
 8004644:	461a      	mov	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4413      	add	r3, r2
 800464a:	22ff      	movs	r2, #255	; 0xff
 800464c:	f883 224b 	strb.w	r2, [r3, #587]	; 0x24b
        port->SourceCapsUpdated = TRUE;
#endif /* FSC_DEBUG */
    }

#ifdef FSC_HAVE_EXT_MSG
    if (temp_PolicyTxHeader.Extended == 1)
 8004650:	7b7b      	ldrb	r3, [r7, #13]
 8004652:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d049      	beq.n	80046f0 <ProtocolTransmitMessage+0x142>
    {
        if (port->ExtTxOrRx == TXing)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
 8004662:	2b01      	cmp	r3, #1
 8004664:	d136      	bne.n	80046d4 <ProtocolTransmitMessage+0x126>
        {
            /* Remaining bytes */
            i = port->ExtTxHeader.DataSize - port->ExtChunkOffset;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8b3 32f6 	ldrh.w	r3, [r3, #758]	; 0x2f6
 800466c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004670:	b29b      	uxth	r3, r3
 8004672:	461a      	mov	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	617b      	str	r3, [r7, #20]

            if (i > EXT_MAX_MSG_LEGACY_LEN)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b1a      	cmp	r3, #26
 8004682:	d904      	bls.n	800468e <ProtocolTransmitMessage+0xe0>
            {
                temp_PolicyTxHeader.NumDataObjects = 7;
 8004684:	7b7b      	ldrb	r3, [r7, #13]
 8004686:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800468a:	737b      	strb	r3, [r7, #13]
 800468c:	e009      	b.n	80046a2 <ProtocolTransmitMessage+0xf4>
            else
            {
                /* Round up to 4 byte boundary.
                 * Two extra byte is for the extended header.
                 */
                temp_PolicyTxHeader.NumDataObjects = (i + 4) / 4;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	3304      	adds	r3, #4
 8004692:	089b      	lsrs	r3, r3, #2
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	b2da      	uxtb	r2, r3
 800469a:	7b7b      	ldrb	r3, [r7, #13]
 800469c:	f362 1306 	bfi	r3, r2, #4, #3
 80046a0:	737b      	strb	r3, [r7, #13]
            }
            port->PolicyTxHeader.NumDataObjects =
                    temp_PolicyTxHeader.NumDataObjects;
 80046a2:	7b7b      	ldrb	r3, [r7, #13]
 80046a4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80046a8:	b2d9      	uxtb	r1, r3
            port->PolicyTxHeader.NumDataObjects =
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 80046b0:	f361 1306 	bfi	r3, r1, #4, #3
 80046b4:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
            port->ExtTxHeader.ChunkNum = port->ExtChunkNum;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	b2d9      	uxtb	r1, r3
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	f892 32f7 	ldrb.w	r3, [r2, #759]	; 0x2f7
 80046ca:	f361 03c6 	bfi	r3, r1, #3, #4
 80046ce:	f882 32f7 	strb.w	r3, [r2, #759]	; 0x2f7
 80046d2:	e009      	b.n	80046e8 <ProtocolTransmitMessage+0x13a>
        }
        else if (port->ExtTxOrRx == RXing)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d104      	bne.n	80046e8 <ProtocolTransmitMessage+0x13a>
        {
            temp_PolicyTxHeader.NumDataObjects = 1;
 80046de:	7b7b      	ldrb	r3, [r7, #13]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f362 1306 	bfi	r3, r2, #4, #3
 80046e6:	737b      	strb	r3, [r7, #13]
        }
        port->ExtWaitTxRx = TRUE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
    }
#endif /* FSC_HAVE_EXT_MSG */

    temp_PolicyTxHeader.MessageID =
            port->MessageIDCounter[port->ProtocolMsgTxSop];
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 31c1 	ldrb.w	r3, [r3, #449]	; 0x1c1
 80046f6:	461a      	mov	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4413      	add	r3, r2
 80046fc:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	b2da      	uxtb	r2, r3
    temp_PolicyTxHeader.MessageID =
 8004706:	7b7b      	ldrb	r3, [r7, #13]
 8004708:	f362 0343 	bfi	r3, r2, #1, #3
 800470c:	737b      	strb	r3, [r7, #13]
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
            PACKSYM | (2 + (temp_PolicyTxHeader.NumDataObjects << 2));
 800470e:	7b7b      	ldrb	r3, [r7, #13]
 8004710:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004714:	b2db      	uxtb	r3, r3
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	b2db      	uxtb	r3, r3
 800471a:	3302      	adds	r3, #2
 800471c:	b2db      	uxtb	r3, r3
 800471e:	b25b      	sxtb	r3, r3
 8004720:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004724:	b258      	sxtb	r0, r3
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	b2d1      	uxtb	r1, r2
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004736:	4619      	mov	r1, r3
            PACKSYM | (2 + (temp_PolicyTxHeader.NumDataObjects << 2));
 8004738:	b2c2      	uxtb	r2, r0
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	440b      	add	r3, r1
 800473e:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	b2d1      	uxtb	r1, r2
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004752:	4619      	mov	r1, r3
            temp_PolicyTxHeader.byte[0];
 8004754:	7b3a      	ldrb	r2, [r7, #12]
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	440b      	add	r3, r1
 800475a:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	b2d1      	uxtb	r1, r2
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 800476e:	4619      	mov	r1, r3
            temp_PolicyTxHeader.byte[1];
 8004770:	7b7a      	ldrb	r2, [r7, #13]
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	440b      	add	r3, r1
 8004776:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6

    /* If this is a data object... */
    if (temp_PolicyTxHeader.NumDataObjects > 0)
 800477a:	7b7b      	ldrb	r3, [r7, #13]
 800477c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 80d2 	beq.w	800492c <ProtocolTransmitMessage+0x37e>
    {
#ifdef FSC_HAVE_EXT_MSG
        if (temp_PolicyTxHeader.Extended == 1)
 8004788:	7b7b      	ldrb	r3, [r7, #13]
 800478a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d059      	beq.n	8004848 <ProtocolTransmitMessage+0x29a>
        {
            if (port->ExtTxOrRx == RXing)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
 800479a:	2b02      	cmp	r3, #2
 800479c:	d122      	bne.n	80047e4 <ProtocolTransmitMessage+0x236>
            {
                port->ExtTxHeader.ChunkNum = port->ExtChunkNum;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	b2d9      	uxtb	r1, r3
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	f892 32f7 	ldrb.w	r3, [r2, #759]	; 0x2f7
 80047b0:	f361 03c6 	bfi	r3, r1, #3, #4
 80047b4:	f882 32f7 	strb.w	r3, [r2, #759]	; 0x2f7
                port->ExtTxHeader.DataSize = 0;
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	f8b2 32f6 	ldrh.w	r3, [r2, #758]	; 0x2f6
 80047be:	f36f 0308 	bfc	r3, #0, #9
 80047c2:	f8a2 32f6 	strh.w	r3, [r2, #758]	; 0x2f6
                port->ExtTxHeader.Chunked = 1;
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	f892 32f7 	ldrb.w	r3, [r2, #759]	; 0x2f7
 80047cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d0:	f882 32f7 	strb.w	r3, [r2, #759]	; 0x2f7
                port->ExtTxHeader.ReqChunk = 1;
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	f892 32f7 	ldrb.w	r3, [r2, #759]	; 0x2f7
 80047da:	f043 0304 	orr.w	r3, r3, #4
 80047de:	f882 32f7 	strb.w	r3, [r2, #759]	; 0x2f7
 80047e2:	e011      	b.n	8004808 <ProtocolTransmitMessage+0x25a>
            }
            else if (port->ExtTxOrRx == TXing)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d10c      	bne.n	8004808 <ProtocolTransmitMessage+0x25a>
            {
                port->ExtTxHeader.ChunkNum = port->ExtChunkNum;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80047f4:	f003 030f 	and.w	r3, r3, #15
 80047f8:	b2d9      	uxtb	r1, r3
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	f892 32f7 	ldrb.w	r3, [r2, #759]	; 0x2f7
 8004800:	f361 03c6 	bfi	r3, r1, #3, #4
 8004804:	f882 32f7 	strb.w	r3, [r2, #759]	; 0x2f7
            }

            /* Copy the two byte extended header. */
            port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	b2d1      	uxtb	r1, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004818:	4619      	mov	r1, r3
                    port->ExtTxHeader.byte[0];
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 22f6 	ldrb.w	r2, [r3, #758]	; 0x2f6
            port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	440b      	add	r3, r1
 8004824:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
            port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	b2d1      	uxtb	r1, r2
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004838:	4619      	mov	r1, r3
                    port->ExtTxHeader.byte[1];
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 22f7 	ldrb.w	r2, [r3, #759]	; 0x2f7
            port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	440b      	add	r3, r1
 8004844:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        }
#endif /* FSC_HAVE_EXT_MSG */
        for (i = 0; i < temp_PolicyTxHeader.NumDataObjects; i++)
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	e066      	b.n	800491c <ProtocolTransmitMessage+0x36e>
        {
            for (j = 0; j < 4; j++)
 800484e:	2300      	movs	r3, #0
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	e05d      	b.n	8004910 <ProtocolTransmitMessage+0x362>
            {
#ifdef FSC_HAVE_EXT_MSG
                if (temp_PolicyTxHeader.Extended == 1)
 8004854:	7b7b      	ldrb	r3, [r7, #13]
 8004856:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d03d      	beq.n	80048dc <ProtocolTransmitMessage+0x32e>
                {
                    /* Skip extended header */
                    if (i == 0 && (j == 0 || j == 1)) { continue; }
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d105      	bne.n	8004872 <ProtocolTransmitMessage+0x2c4>
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d04d      	beq.n	8004908 <ProtocolTransmitMessage+0x35a>
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d04a      	beq.n	8004908 <ProtocolTransmitMessage+0x35a>

                    if (port->ExtChunkOffset < port->ExtTxHeader.DataSize)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	f8b2 22f6 	ldrh.w	r2, [r2, #758]	; 0x2f6
 800487e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004882:	b292      	uxth	r2, r2
 8004884:	4293      	cmp	r3, r2
 8004886:	d21a      	bcs.n	80048be <ProtocolTransmitMessage+0x310>
                    {
                        port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
                                port->ExtMsgBuffer[port->ExtChunkOffset++];
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	b291      	uxth	r1, r2
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	f8a2 12fc 	strh.w	r1, [r2, #764]	; 0x2fc
 8004898:	4618      	mov	r0, r3
                        port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	b2d1      	uxtb	r1, r2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 80048aa:	4619      	mov	r1, r3
                                port->ExtMsgBuffer[port->ExtChunkOffset++];
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4403      	add	r3, r0
 80048b0:	f893 22fe 	ldrb.w	r2, [r3, #766]	; 0x2fe
                        port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	440b      	add	r3, r1
 80048b8:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
 80048bc:	e025      	b.n	800490a <ProtocolTransmitMessage+0x35c>
                    }
                    else
                    {
                        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = 0;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	b2d1      	uxtb	r1, r2
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 80048ce:	461a      	mov	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4413      	add	r3, r2
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
 80048da:	e016      	b.n	800490a <ProtocolTransmitMessage+0x35c>
                }
                else
#endif /* FSC_HAVE_EXT_MSG */
                {
                    /* Load the actual bytes */
                    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	b2d1      	uxtb	r1, r2
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 80048ec:	4619      	mov	r1, r3
                            port->PolicyTxDataObj[i].byte[j];
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	441a      	add	r2, r3
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	4413      	add	r3, r2
 80048fa:	33d4      	adds	r3, #212	; 0xd4
 80048fc:	781a      	ldrb	r2, [r3, #0]
                    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	440b      	add	r3, r1
 8004902:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
 8004906:	e000      	b.n	800490a <ProtocolTransmitMessage+0x35c>
                    if (i == 0 && (j == 0 || j == 1)) { continue; }
 8004908:	bf00      	nop
            for (j = 0; j < 4; j++)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	3301      	adds	r3, #1
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	2b03      	cmp	r3, #3
 8004914:	d99e      	bls.n	8004854 <ProtocolTransmitMessage+0x2a6>
        for (i = 0; i < temp_PolicyTxHeader.NumDataObjects; i++)
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	3301      	adds	r3, #1
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	7b7b      	ldrb	r3, [r7, #13]
 800491e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004922:	b2db      	uxtb	r3, r3
 8004924:	461a      	mov	r2, r3
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	4293      	cmp	r3, r2
 800492a:	d390      	bcc.n	800484e <ProtocolTransmitMessage+0x2a0>
            }
        }
    }

    /* Load the CRC, EOP and stop sequence */
    ProtocolLoadEOP(port);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fa9a 	bl	8004e66 <ProtocolLoadEOP>

    /* Commit the FIFO to the device */
    if (DeviceWrite(port->I2cAddr, regFIFO, port->ProtocolTxBytes,
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8004944:	2143      	movs	r1, #67	; 0x43
 8004946:	f002 fa79 	bl	8006e3c <DeviceWrite>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d108      	bne.n	8004962 <ProtocolTransmitMessage+0x3b4>
                    &port->ProtocolTxBuffer[0]) == FALSE)
    {
        /* If a FIFO write happens while a GoodCRC is being transmitted,
         * the transaction will NAK and will need to be discarded.
         */
        port->DoTxFlush = TRUE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
        port->PDTxStatus = txAbort;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2208      	movs	r2, #8
 800495c:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
 8004960:	e048      	b.n	80049f4 <ProtocolTransmitMessage+0x446>
        return;
    }

    port->Registers.Control.N_RETRIES =
            DPM_Retries(port, port->ProtocolMsgTxSop);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 31c1 	ldrb.w	r3, [r3, #449]	; 0x1c1
 8004968:	4619      	mov	r1, r3
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f002 fe13 	bl	8007596 <DPM_Retries>
 8004970:	4603      	mov	r3, r0
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	b2d9      	uxtb	r1, r3
    port->Registers.Control.N_RETRIES =
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 800497e:	f361 0342 	bfi	r3, r1, #1, #2
 8004982:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
    port->Registers.Control.AUTO_RETRY = 1;
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 800498c:	f043 0301 	orr.w	r3, r3, #1
 8004990:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33

    DeviceWrite(port->I2cAddr, regControl3, 1,&port->Registers.Control.byte[3]);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3333      	adds	r3, #51	; 0x33
 800499e:	2201      	movs	r2, #1
 80049a0:	2109      	movs	r1, #9
 80049a2:	f002 fa4b 	bl	8006e3c <DeviceWrite>
    port->Registers.Control.TX_START = 1;
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    DeviceWrite(port->I2cAddr, regControl0, 1,&port->Registers.Control.byte[0]);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	3330      	adds	r3, #48	; 0x30
 80049be:	2201      	movs	r2, #1
 80049c0:	2106      	movs	r1, #6
 80049c2:	f002 fa3b 	bl	8006e3c <DeviceWrite>
    port->Registers.Control.TX_START = 0;
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80049cc:	f36f 0300 	bfc	r3, #0, #1
 80049d0:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30

    /* Set the transmitter status to busy */
    port->PDTxStatus = txBusy;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2203      	movs	r2, #3
 80049d8:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
    port->ProtocolState = PRLTxSendingMessage;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2205      	movs	r2, #5
 80049e0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

    /* Timeout specifically for chunked messages, but used with each transmit
     * to prevent a theoretical protocol hang.
     */
    TimerStart(&port->ProtocolTimer, tChunkSenderRequest);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80049ea:	f247 5130 	movw	r1, #30000	; 0x7530
 80049ee:	4618      	mov	r0, r3
 80049f0:	f002 fa5e 	bl	8006eb0 <TimerStart>
    StoreUSBPDMessage(port, temp_PolicyTxHeader,
                      (doDataObject_t*)&port->ProtocolTxBuffer[7],
                      TRUE, port->ProtocolMsgTxSop);
    WriteStateLog(&port->PDStateLog, dbgSendTxPacket, platform_get_log_time());
#endif /* FSC_DEBUG */
}
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <ProtocolSendingMessage>:

void ProtocolSendingMessage(Port_t *port)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]

    /* Waiting on result/status of transmission */
    if (port->Registers.Status.I_TXSENT || port->Registers.Status.I_CRC_CHK)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d107      	bne.n	8004a22 <ProtocolSendingMessage+0x28>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d011      	beq.n	8004a46 <ProtocolSendingMessage+0x4c>
    {
        port->Registers.Status.I_TXSENT = 0;
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8004a28:	f36f 0382 	bfc	r3, #2, #1
 8004a2c:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
        port->Registers.Status.I_CRC_CHK = 0;
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 8004a36:	f36f 1304 	bfc	r3, #4, #1
 8004a3a:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
        ProtocolVerifyGoodCRC(port);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f858 	bl	8004af4 <ProtocolVerifyGoodCRC>
 8004a44:	e04a      	b.n	8004adc <ProtocolSendingMessage+0xe2>
    }
    else if (port->Registers.Status.I_COLLISION)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00f      	beq.n	8004a76 <ProtocolSendingMessage+0x7c>
    {
        port->Registers.Status.I_COLLISION = 0;
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 8004a5c:	f36f 0341 	bfc	r3, #1, #1
 8004a60:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
        port->PDTxStatus = txCollision;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2207      	movs	r2, #7
 8004a68:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
        port->ProtocolState = PRLIdle;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 8004a74:	e032      	b.n	8004adc <ProtocolSendingMessage+0xe2>
    }
    else if (port->Registers.Status.I_RETRYFAIL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00f      	beq.n	8004aa6 <ProtocolSendingMessage+0xac>
    {
        port->Registers.Status.I_RETRYFAIL = 0;
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8004a8c:	f36f 1304 	bfc	r3, #4, #1
 8004a90:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
        port->PDTxStatus = txError;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2206      	movs	r2, #6
 8004a98:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
        port->ProtocolState = PRLIdle;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 8004aa4:	e01a      	b.n	8004adc <ProtocolSendingMessage+0xe2>
    }
    else if (port->Registers.Status.I_GCRCSENT)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d012      	beq.n	8004adc <ProtocolSendingMessage+0xe2>
    {
        /* Interruption */
        port->PDTxStatus = txError;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2206      	movs	r2, #6
 8004aba:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
        port->ProtocolState = PRLIdle;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        port->ProtocolMsgRxPending = TRUE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
        port->Registers.Status.I_GCRCSENT = 0;
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8004ad4:	f36f 0300 	bfc	r3, #0, #1
 8004ad8:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
    }

    /* Make an additional check for missed/pending message data */
    if (port->ProtocolState == PRLIdle)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d102      	bne.n	8004aec <ProtocolSendingMessage+0xf2>
    {
        ProtocolIdle(port);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff f9ec 	bl	8003ec4 <ProtocolIdle>
    }
}
 8004aec:	bf00      	nop
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <ProtocolVerifyGoodCRC>:

void ProtocolVerifyGoodCRC(Port_t *port)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
    FSC_U8 data[4];
    sopMainHeader_t header;
    SopType sop;

    /* Read the Rx token and two header bytes */
    DeviceRead(port->I2cAddr, regFIFO, 3, &data[0]);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004b02:	f107 0310 	add.w	r3, r7, #16
 8004b06:	2203      	movs	r2, #3
 8004b08:	2143      	movs	r1, #67	; 0x43
 8004b0a:	f002 f9b4 	bl	8006e76 <DeviceRead>
    header.byte[0] = data[1];
 8004b0e:	7c7b      	ldrb	r3, [r7, #17]
 8004b10:	733b      	strb	r3, [r7, #12]
    header.byte[1] = data[2];
 8004b12:	7cbb      	ldrb	r3, [r7, #18]
 8004b14:	737b      	strb	r3, [r7, #13]

    /* Figure out what SOP* the data came in on */
    sop = TokenToSopType(data[0]);
 8004b16:	7c3b      	ldrb	r3, [r7, #16]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff f877 	bl	8003c0c <TokenToSopType>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	75bb      	strb	r3, [r7, #22]

    if ((header.NumDataObjects == 0) &&
 8004b22:	7b7b      	ldrb	r3, [r7, #13]
 8004b24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d176      	bne.n	8004c1c <ProtocolVerifyGoodCRC+0x128>
        (header.MessageType == CMTGoodCRC))
 8004b2e:	7b3b      	ldrb	r3, [r7, #12]
 8004b30:	f003 031f 	and.w	r3, r3, #31
 8004b34:	b2db      	uxtb	r3, r3
    if ((header.NumDataObjects == 0) &&
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d170      	bne.n	8004c1c <ProtocolVerifyGoodCRC+0x128>
    {
        FSC_U8 MIDcompare;
        if (sop == SOP_TYPE_ERROR)
 8004b3a:	7dbb      	ldrb	r3, [r7, #22]
 8004b3c:	2bff      	cmp	r3, #255	; 0xff
 8004b3e:	d102      	bne.n	8004b46 <ProtocolVerifyGoodCRC+0x52>
            MIDcompare = 0xFF;
 8004b40:	23ff      	movs	r3, #255	; 0xff
 8004b42:	75fb      	strb	r3, [r7, #23]
 8004b44:	e005      	b.n	8004b52 <ProtocolVerifyGoodCRC+0x5e>
        else
            MIDcompare = port->MessageIDCounter[sop];
 8004b46:	7dbb      	ldrb	r3, [r7, #22]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 8004b50:	75fb      	strb	r3, [r7, #23]
        /* Store the received PD message for the DPM (GUI) */
        StoreUSBPDMessage(port, header, &port->PolicyRxDataObj[0],
                          FALSE, sop);
#endif /* FSC_DEBUG */

        if (header.MessageID != MIDcompare)
 8004b52:	7b7b      	ldrb	r3, [r7, #13]
 8004b54:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	7dfb      	ldrb	r3, [r7, #23]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d011      	beq.n	8004b86 <ProtocolVerifyGoodCRC+0x92>
        {
            /* Read out the 4 CRC bytes to move the addr to the next packet */
            DeviceRead(port->I2cAddr, regFIFO, 4, data);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004b68:	f107 0310 	add.w	r3, r7, #16
 8004b6c:	2204      	movs	r2, #4
 8004b6e:	2143      	movs	r1, #67	; 0x43
 8004b70:	f002 f981 	bl	8006e76 <DeviceRead>
#ifdef FSC_DEBUG
            /* Store that there was a bad message ID received in the buffer */
            StoreUSBPDToken(port, FALSE, pdtBadMessageID);
#endif /* FSC_DEBUG */
            port->PDTxStatus = txError;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2206      	movs	r2, #6
 8004b78:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
            port->ProtocolState = PRLIdle;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    {
 8004b84:	e05f      	b.n	8004c46 <ProtocolVerifyGoodCRC+0x152>
        }
        else
        {
            if (sop != SOP_TYPE_ERROR)
 8004b86:	7dbb      	ldrb	r3, [r7, #22]
 8004b88:	2bff      	cmp	r3, #255	; 0xff
 8004b8a:	d035      	beq.n	8004bf8 <ProtocolVerifyGoodCRC+0x104>
            {
                /* Increment and roll over */
                port->MessageIDCounter[sop]++;
 8004b8c:	7dbb      	ldrb	r3, [r7, #22]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	441a      	add	r2, r3
 8004b92:	f892 2246 	ldrb.w	r2, [r2, #582]	; 0x246
 8004b96:	3201      	adds	r2, #1
 8004b98:	b2d1      	uxtb	r1, r2
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	460a      	mov	r2, r1
 8004ba0:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
                port->MessageIDCounter[sop] &= 0x07;
 8004ba4:	7dbb      	ldrb	r3, [r7, #22]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f893 2246 	ldrb.w	r2, [r3, #582]	; 0x246
 8004bae:	7dbb      	ldrb	r3, [r7, #22]
 8004bb0:	f002 0207 	and.w	r2, r2, #7
 8004bb4:	b2d1      	uxtb	r1, r2
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	4413      	add	r3, r2
 8004bba:	460a      	mov	r2, r1
 8004bbc:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
#ifdef FSC_HAVE_EXT_MSG
                if (port->ExtTxOrRx != NoXfer)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d016      	beq.n	8004bf8 <ProtocolVerifyGoodCRC+0x104>
                {
                    if (port->ExtChunkOffset >= port->ExtTxHeader.DataSize)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	f8b2 22f6 	ldrh.w	r2, [r2, #758]	; 0x2f6
 8004bd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bda:	b292      	uxth	r2, r2
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d303      	bcc.n	8004be8 <ProtocolVerifyGoodCRC+0xf4>
                    {
                        /* All data has been sent */
                        port->ExtTxOrRx = NoXfer;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
                    }
                    port->ExtChunkNum++;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8004bee:	3301      	adds	r3, #1
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
                }
#endif /* FSC_HAVE_EXT_MSG */
            }
            port->ProtocolState = PRLIdle;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
            port->PDTxStatus = txSuccess;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2205      	movs	r2, #5
 8004c04:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2

            /* Read out the 4 CRC bytes to move the addr to the next packet */
            DeviceRead(port->I2cAddr, regFIFO, 4, data);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004c0e:	f107 0310 	add.w	r3, r7, #16
 8004c12:	2204      	movs	r2, #4
 8004c14:	2143      	movs	r1, #67	; 0x43
 8004c16:	f002 f92e 	bl	8006e76 <DeviceRead>
    {
 8004c1a:	e014      	b.n	8004c46 <ProtocolVerifyGoodCRC+0x152>
        }
    }
    else
    {
        port->ProtocolState = PRLIdle;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        port->PDTxStatus = txError;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2206      	movs	r2, #6
 8004c28:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2

        /* Pass header and SOP* on to GetRxPacket */
        port->PolicyRxHeader.word = header.word;
 8004c2c:	89ba      	ldrh	r2, [r7, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        port->ProtocolMsgRxSop = sop;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	7dba      	ldrb	r2, [r7, #22]
 8004c38:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0

        /* Rare case, next received message preempts GoodCRC */
        ProtocolGetRxPacket(port, TRUE);
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7ff f9c1 	bl	8003fc6 <ProtocolGetRxPacket>
    }
}
 8004c44:	bf00      	nop
 8004c46:	bf00      	nop
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <ProtocolSendGoodCRC>:
    else
        return SOP_TYPE_SOP;
}

void ProtocolSendGoodCRC(Port_t *port, SopType sop)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	460b      	mov	r3, r1
 8004c58:	70fb      	strb	r3, [r7, #3]
    ProtocolLoadSOP(port, sop);
 8004c5a:	78fb      	ldrb	r3, [r7, #3]
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f841 	bl	8004ce6 <ProtocolLoadSOP>

    port->ProtocolTxBuffer[port->ProtocolTxBytes++] = PACKSYM | 0x02;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	b2d1      	uxtb	r1, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004c74:	461a      	mov	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4413      	add	r3, r2
 8004c7a:	2282      	movs	r2, #130	; 0x82
 8004c7c:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	b2d1      	uxtb	r1, r2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004c90:	4619      	mov	r1, r3
            port->PolicyTxHeader.byte[0];
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	440b      	add	r3, r1
 8004c9c:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	b2d1      	uxtb	r1, r2
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004cb0:	4619      	mov	r1, r3
            port->PolicyTxHeader.byte[1];
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	440b      	add	r3, r1
 8004cbc:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
    ProtocolLoadEOP(port);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f8d0 	bl	8004e66 <ProtocolLoadEOP>
    DeviceWrite(port->I2cAddr, regFIFO, port->ProtocolTxBytes,
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8004cd8:	2143      	movs	r1, #67	; 0x43
 8004cda:	f002 f8af 	bl	8006e3c <DeviceWrite>
                &port->ProtocolTxBuffer[0]);
}
 8004cde:	bf00      	nop
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <ProtocolLoadSOP>:

void ProtocolLoadSOP(Port_t *port, SopType sop)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	70fb      	strb	r3, [r7, #3]
    /* Clear the Tx byte counter */
    port->ProtocolTxBytes = 0;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 21c5 	strb.w	r2, [r3, #453]	; 0x1c5

    switch (sop)
 8004cfa:	78fb      	ldrb	r3, [r7, #3]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d002      	beq.n	8004d06 <ProtocolLoadSOP+0x20>
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d039      	beq.n	8004d78 <ProtocolLoadSOP+0x92>
 8004d04:	e071      	b.n	8004dea <ProtocolLoadSOP+0x104>
    {
    case SOP_TYPE_SOP1:
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC1_TOKEN;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	b2d1      	uxtb	r1, r2
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004d16:	461a      	mov	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	2212      	movs	r2, #18
 8004d1e:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC1_TOKEN;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	b2d1      	uxtb	r1, r2
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004d32:	461a      	mov	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4413      	add	r3, r2
 8004d38:	2212      	movs	r2, #18
 8004d3a:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC3_TOKEN;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	b2d1      	uxtb	r1, r2
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004d4e:	461a      	mov	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4413      	add	r3, r2
 8004d54:	221b      	movs	r2, #27
 8004d56:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC3_TOKEN;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004d60:	1c5a      	adds	r2, r3, #1
 8004d62:	b2d1      	uxtb	r1, r2
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4413      	add	r3, r2
 8004d70:	221b      	movs	r2, #27
 8004d72:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        break;
 8004d76:	e071      	b.n	8004e5c <ProtocolLoadSOP+0x176>
    case SOP_TYPE_SOP2:
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC1_TOKEN;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	b2d1      	uxtb	r1, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004d88:	461a      	mov	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	2212      	movs	r2, #18
 8004d90:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC3_TOKEN;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	b2d1      	uxtb	r1, r2
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004da4:	461a      	mov	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4413      	add	r3, r2
 8004daa:	221b      	movs	r2, #27
 8004dac:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC1_TOKEN;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	b2d1      	uxtb	r1, r2
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	2212      	movs	r2, #18
 8004dc8:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC3_TOKEN;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	b2d1      	uxtb	r1, r2
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004ddc:	461a      	mov	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4413      	add	r3, r2
 8004de2:	221b      	movs	r2, #27
 8004de4:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        break;
 8004de8:	e038      	b.n	8004e5c <ProtocolLoadSOP+0x176>
    case SOP_TYPE_SOP:
    default:
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC1_TOKEN;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	b2d1      	uxtb	r1, r2
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4413      	add	r3, r2
 8004e00:	2212      	movs	r2, #18
 8004e02:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC1_TOKEN;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	b2d1      	uxtb	r1, r2
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004e16:	461a      	mov	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	2212      	movs	r2, #18
 8004e1e:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC1_TOKEN;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	b2d1      	uxtb	r1, r2
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004e32:	461a      	mov	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4413      	add	r3, r2
 8004e38:	2212      	movs	r2, #18
 8004e3a:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC2_TOKEN;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	b2d1      	uxtb	r1, r2
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004e4e:	461a      	mov	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4413      	add	r3, r2
 8004e54:	2213      	movs	r2, #19
 8004e56:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        break;
 8004e5a:	bf00      	nop
    }
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bc80      	pop	{r7}
 8004e64:	4770      	bx	lr

08004e66 <ProtocolLoadEOP>:

void ProtocolLoadEOP(Port_t *port)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] = JAM_CRC;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	b2d1      	uxtb	r1, r2
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004e7e:	461a      	mov	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4413      	add	r3, r2
 8004e84:	22ff      	movs	r2, #255	; 0xff
 8004e86:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] = EOP;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	b2d1      	uxtb	r1, r2
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	2214      	movs	r2, #20
 8004ea2:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] = TXOFF;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	b2d1      	uxtb	r1, r2
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4413      	add	r3, r2
 8004ebc:	22fe      	movs	r2, #254	; 0xfe
 8004ebe:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr

08004ecc <ProtocolSendHardReset>:

void ProtocolSendHardReset(Port_t *port)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
    FSC_U8 data = port->Registers.Control.byte[3] | 0x40;  /* Hard Reset bit */
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	73fb      	strb	r3, [r7, #15]

    /* If the shortcut flag is set, we've already sent the HR command */
    if (port->WaitingOnHR)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d004      	beq.n	8004ef6 <ProtocolSendHardReset+0x2a>
    {
        port->WaitingOnHR = FALSE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    }
    else
    {
        DeviceWrite(port->I2cAddr, regControl3, 1, &data);
    }
}
 8004ef4:	e008      	b.n	8004f08 <ProtocolSendHardReset+0x3c>
        DeviceWrite(port->I2cAddr, regControl3, 1, &data);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004efc:	f107 030f 	add.w	r3, r7, #15
 8004f00:	2201      	movs	r2, #1
 8004f02:	2109      	movs	r1, #9
 8004f04:	f001 ff9a 	bl	8006e3c <DeviceWrite>
}
 8004f08:	bf00      	nop
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <ProtocolFlushRxFIFO>:

void ProtocolFlushRxFIFO(Port_t *port)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
    FSC_U8 data = port->Registers.Control.byte[1] | 0x04;  /* RX_FLUSH bit */
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004f1e:	f043 0304 	orr.w	r3, r3, #4
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	73fb      	strb	r3, [r7, #15]
    DeviceWrite(port->I2cAddr, regControl1, 1, &data);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004f2c:	f107 030f 	add.w	r3, r7, #15
 8004f30:	2201      	movs	r2, #1
 8004f32:	2107      	movs	r1, #7
 8004f34:	f001 ff82 	bl	8006e3c <DeviceWrite>
}
 8004f38:	bf00      	nop
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <ProtocolFlushTxFIFO>:

void ProtocolFlushTxFIFO(Port_t *port)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
    FSC_U8 data = port->Registers.Control.byte[0] | 0x40;  /* TX_FLUSH bit */
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	73fb      	strb	r3, [r7, #15]
    DeviceWrite(port->I2cAddr, regControl0, 1, &data);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004f5c:	f107 030f 	add.w	r3, r7, #15
 8004f60:	2201      	movs	r2, #1
 8004f62:	2106      	movs	r1, #6
 8004f64:	f001 ff6a 	bl	8006e3c <DeviceWrite>
}
 8004f68:	bf00      	nop
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <ResetProtocolLayer>:

void ResetProtocolLayer(Port_t *port, FSC_BOOL ResetPDLogic)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	70fb      	strb	r3, [r7, #3]
    FSC_U32 i;
    FSC_U8 data = 0x02; /* PD_RESET bit */
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	72fb      	strb	r3, [r7, #11]

    if (ResetPDLogic)
 8004f80:	78fb      	ldrb	r3, [r7, #3]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d008      	beq.n	8004f98 <ResetProtocolLayer+0x28>
    {
        DeviceWrite(port->I2cAddr, regReset, 1, &data);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004f8c:	f107 030b 	add.w	r3, r7, #11
 8004f90:	2201      	movs	r2, #1
 8004f92:	210c      	movs	r1, #12
 8004f94:	f001 ff52 	bl	8006e3c <DeviceWrite>
    }

    port->ProtocolState = PRLIdle;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    port->PDTxStatus = txIdle;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2

    port->WaitingOnHR = FALSE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
#ifdef FSC_HAVE_VDM
    TimerDisable(&port->VdmTimer);
    port->VdmTimerStarted = FALSE;
#endif /* FSC_HAVE_VDM */

    port->ProtocolTxBytes = 0;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 21c5 	strb.w	r2, [r3, #453]	; 0x1c5

    for (i = 0; i < SOP_TYPE_NUM; i++)
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	e010      	b.n	8004fe0 <ResetProtocolLayer+0x70>
    {
        port->MessageIDCounter[i] = 0;
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f203 2346 	addw	r3, r3, #582	; 0x246
 8004fc8:	2200      	movs	r2, #0
 8004fca:	701a      	strb	r2, [r3, #0]
        port->MessageID[i] = 0xFF;
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f203 234b 	addw	r3, r3, #587	; 0x24b
 8004fd6:	22ff      	movs	r2, #255	; 0xff
 8004fd8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < SOP_TYPE_NUM; i++)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d9eb      	bls.n	8004fbe <ResetProtocolLayer+0x4e>
    }

    port->ProtocolMsgRx = FALSE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
    port->ProtocolMsgRxSop = SOP_TYPE_SOP;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
    port->ProtocolMsgRxPending = FALSE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
    port->USBPDTxFlag = FALSE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    port->PolicyHasContract = FALSE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    port->USBPDContract.object = 0;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

#ifdef FSC_DEBUG
    port->SourceCapsUpdated = TRUE;
#endif // FSC_DEBUG

    port->SrcCapsHeaderReceived.word = 0;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
    port->SnkCapsHeaderReceived.word = 0;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
    for (i = 0; i < 7; i++)
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	e00f      	b.n	800504c <ResetProtocolLayer+0xdc>
    {
        port->SrcCapsReceived[i].object = 0;
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3342      	adds	r3, #66	; 0x42
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	2200      	movs	r2, #0
 8005038:	605a      	str	r2, [r3, #4]
        port->SnkCapsReceived[i].object = 0;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	324a      	adds	r2, #74	; 0x4a
 8005040:	2100      	movs	r1, #0
 8005042:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 7; i++)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3301      	adds	r3, #1
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b06      	cmp	r3, #6
 8005050:	d9ec      	bls.n	800502c <ResetProtocolLayer+0xbc>
    }

#ifdef FSC_HAVE_EXT_MSG
    port->ExtWaitTxRx = FALSE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
    port->ExtChunkNum = 0;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
    port->ExtTxOrRx = NoXfer;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
    port->ExtChunkOffset = 0;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
#endif /* FSC_HAVE_EXT_MSG */
}
 8005072:	bf00      	nop
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <PortInit>:
void InitializeTypeCVariables(Port_t *port);
void InitializePDProtocolVariables(Port_t *port);
void InitializePDPolicyVariables(Port_t *port);

void PortInit(Port_t *port, FSC_U8 i2cAddr)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b084      	sub	sp, #16
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	460b      	mov	r3, r1
 8005084:	70fb      	strb	r3, [r7, #3]
    FSC_U8 i;

    port->I2cAddr = i2cAddr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	78fa      	ldrb	r2, [r7, #3]
 800508a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    port->PortConfig.PdRevPreferred = PD_Specification_Revision;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    port->PdRevSop = port->PortConfig.PdRevPreferred;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    port->PdRevCable = port->PortConfig.PdRevPreferred;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
    SetPortDefaultConfiguration(port);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f898 	bl	80051e4 <SetPortDefaultConfiguration>
    InitializeRegisters(port);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f8b1 	bl	800521c <InitializeRegisters>
    InitializeTypeCVariables(port);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f987 	bl	80053ce <InitializeTypeCVariables>
    InitializePDProtocolVariables(port);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fa02 	bl	80054ca <InitializePDProtocolVariables>
    InitializePDPolicyVariables(port);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fa0c 	bl	80054e4 <InitializePDPolicyVariables>

    /* Add timer objects to list to make timeout checking easier */
    port->Timers[0] = &port->PDDebounceTimer;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f503 7215 	add.w	r2, r3, #596	; 0x254
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
    port->Timers[1] = &port->CCDebounceTimer;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
    port->Timers[2] = &port->StateTimer;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f503 721b 	add.w	r2, r3, #620	; 0x26c
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
    port->Timers[3] = &port->LoopCountTimer;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
    port->Timers[4] = &port->PolicyStateTimer;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
    port->Timers[5] = &port->ProtocolTimer;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f503 7224 	add.w	r2, r3, #656	; 0x290
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
    port->Timers[6] = &port->SwapSourceStartTimer;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
    port->Timers[7] = &port->PpsTimer;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f503 722a 	add.w	r2, r3, #680	; 0x2a8
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
    port->Timers[8] = &port->VBusPollTimer;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f503 722d 	add.w	r2, r3, #692	; 0x2b4
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
    port->Timers[9] = &port->VdmTimer;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f503 7230 	add.w	r2, r3, #704	; 0x2c0
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0

    for (i = 0; i < FSC_NUM_TIMERS; ++i)
 8005144:	2300      	movs	r3, #0
 8005146:	73fb      	strb	r3, [r7, #15]
 8005148:	e00b      	b.n	8005162 <PortInit+0xe8>
    {
      TimerDisable(port->Timers[i]);
 800514a:	7bfb      	ldrb	r3, [r7, #15]
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	33b2      	adds	r3, #178	; 0xb2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	4618      	mov	r0, r3
 8005158:	f001 fec5 	bl	8006ee6 <TimerDisable>
    for (i = 0; i < FSC_NUM_TIMERS; ++i)
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	3301      	adds	r3, #1
 8005160:	73fb      	strb	r3, [r7, #15]
 8005162:	7bfb      	ldrb	r3, [r7, #15]
 8005164:	2b09      	cmp	r3, #9
 8005166:	d9f0      	bls.n	800514a <PortInit+0xd0>
    }
}
 8005168:	bf00      	nop
 800516a:	bf00      	nop
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <SetTypeCState>:

void SetTypeCState(Port_t *port, ConnectionState state)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	460b      	mov	r3, r1
 800517c:	70fb      	strb	r3, [r7, #3]
    port->ConnState = state;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	78fa      	ldrb	r2, [r7, #3]
 8005182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    port->TypeCSubState = 0;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

#ifdef FSC_DEBUG
    WriteStateLog(&port->TypeCStateLog, port->ConnState,
                  platform_get_log_time());
#endif /* FSC_DEBUG */
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr

08005198 <SetPEState>:

void SetPEState(Port_t *port, PolicyState_t state)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	70fb      	strb	r3, [r7, #3]
    port->PolicyState = state;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	78fa      	ldrb	r2, [r7, #3]
 80051a8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    port->PolicySubIndex = 0;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

    port->PDTxStatus = txIdle;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
    port->WaitingOnHR = FALSE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    port->WaitInSReady = FALSE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
    notify_observers(PD_STATE_CHANGED, port->I2cAddr, 0);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051d2:	2200      	movs	r2, #0
 80051d4:	4619      	mov	r1, r3
 80051d6:	2020      	movs	r0, #32
 80051d8:	f002 fa34 	bl	8007644 <notify_observers>
#ifdef FSC_DEBUG
    WriteStateLog(&port->PDStateLog, port->PolicyState,
                  platform_get_log_time());
#endif /* FSC_DEBUG */
}
 80051dc:	bf00      	nop
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <SetPortDefaultConfiguration>:
/**
 * Initalize port policy variables to default. These are changed later by
 * policy manager.
 */
static void SetPortDefaultConfiguration(Port_t *port)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
#ifdef FSC_HAVE_ACCMODE
    port->PortConfig.audioAccSupport   =Type_C_Supports_Audio_Accessory;
    port->PortConfig.poweredAccSupport =Type_C_Supports_Vconn_Powered_Accessory;
#endif /* FSC_HAVE_ACCMODE */

    port->PortConfig.RpVal = utccDefault;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2020 	strb.w	r2, [r3, #32]

    if ((Rp_Value + 1) > utccNone && (Rp_Value + 1) < utccInvalid)
        port->PortConfig.RpVal = Rp_Value + 1;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2203      	movs	r2, #3
 80051f8:	f883 2020 	strb.w	r2, [r3, #32]
            port->PortConfig.PortType = USBTypeC_UNDEFINED;
        }
        break;
    case 3:
        /* Provider Only */
        port->PortConfig.PortType = USBTypeC_Source;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	711a      	strb	r2, [r3, #4]
        break;
 8005202:	bf00      	nop
        port->PortConfig.PortType = USBTypeC_UNDEFINED;
        break;
    }

    /* Avoid undefined port type */
    if (port->PortConfig.PortType == USBTypeC_UNDEFINED)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	791b      	ldrb	r3, [r3, #4]
 8005208:	2b63      	cmp	r3, #99	; 0x63
 800520a:	d102      	bne.n	8005212 <SetPortDefaultConfiguration+0x2e>
    {
        port->PortConfig.PortType = USBTypeC_DRP;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	711a      	strb	r2, [r3, #4]
    {
        port->PortConfig.SrcPreferred = FALSE;
        port->PortConfig.SnkPreferred = FALSE;
    }
#endif /* FSC_HAVE_DRP */
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	bc80      	pop	{r7}
 800521a:	4770      	bx	lr

0800521c <InitializeRegisters>:

void InitializeRegisters(Port_t *port)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
    FSC_U8 reset = 0x01;
 8005224:	2301      	movs	r3, #1
 8005226:	73fb      	strb	r3, [r7, #15]
    DeviceWrite(port->I2cAddr, regReset, 1, &reset);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800522e:	f107 030f 	add.w	r3, r7, #15
 8005232:	2201      	movs	r2, #1
 8005234:	210c      	movs	r1, #12
 8005236:	f001 fe01 	bl	8006e3c <DeviceWrite>

    DeviceRead(port->I2cAddr, regDeviceID, 1, &port->Registers.DeviceID.byte);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3328      	adds	r3, #40	; 0x28
 8005244:	2201      	movs	r2, #1
 8005246:	2101      	movs	r1, #1
 8005248:	f001 fe15 	bl	8006e76 <DeviceRead>
    DeviceRead(port->I2cAddr, regSwitches0,1,&port->Registers.Switches.byte[0]);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	332a      	adds	r3, #42	; 0x2a
 8005256:	2201      	movs	r2, #1
 8005258:	2102      	movs	r1, #2
 800525a:	f001 fe0c 	bl	8006e76 <DeviceRead>
    DeviceRead(port->I2cAddr, regSwitches1,1,&port->Registers.Switches.byte[1]);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	332b      	adds	r3, #43	; 0x2b
 8005268:	2201      	movs	r2, #1
 800526a:	2103      	movs	r1, #3
 800526c:	f001 fe03 	bl	8006e76 <DeviceRead>
    DeviceRead(port->I2cAddr, regMeasure, 1, &port->Registers.Measure.byte);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	332c      	adds	r3, #44	; 0x2c
 800527a:	2201      	movs	r2, #1
 800527c:	2104      	movs	r1, #4
 800527e:	f001 fdfa 	bl	8006e76 <DeviceRead>
    DeviceRead(port->I2cAddr, regSlice, 1, &port->Registers.Slice.byte);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	332d      	adds	r3, #45	; 0x2d
 800528c:	2201      	movs	r2, #1
 800528e:	2105      	movs	r1, #5
 8005290:	f001 fdf1 	bl	8006e76 <DeviceRead>
    DeviceRead(port->I2cAddr, regControl0, 1, &port->Registers.Control.byte[0]);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3330      	adds	r3, #48	; 0x30
 800529e:	2201      	movs	r2, #1
 80052a0:	2106      	movs	r1, #6
 80052a2:	f001 fde8 	bl	8006e76 <DeviceRead>
    DeviceRead(port->I2cAddr, regControl1, 1, &port->Registers.Control.byte[1]);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3331      	adds	r3, #49	; 0x31
 80052b0:	2201      	movs	r2, #1
 80052b2:	2107      	movs	r1, #7
 80052b4:	f001 fddf 	bl	8006e76 <DeviceRead>
    DeviceRead(port->I2cAddr, regControl2, 1, &port->Registers.Control.byte[2]);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3332      	adds	r3, #50	; 0x32
 80052c2:	2201      	movs	r2, #1
 80052c4:	2108      	movs	r1, #8
 80052c6:	f001 fdd6 	bl	8006e76 <DeviceRead>
    DeviceRead(port->I2cAddr, regControl3, 1, &port->Registers.Control.byte[3]);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3333      	adds	r3, #51	; 0x33
 80052d4:	2201      	movs	r2, #1
 80052d6:	2109      	movs	r1, #9
 80052d8:	f001 fdcd 	bl	8006e76 <DeviceRead>
    DeviceRead(port->I2cAddr, regMask, 1, &port->Registers.Mask.byte);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3334      	adds	r3, #52	; 0x34
 80052e6:	2201      	movs	r2, #1
 80052e8:	210a      	movs	r1, #10
 80052ea:	f001 fdc4 	bl	8006e76 <DeviceRead>
    DeviceRead(port->I2cAddr, regPower, 1, &port->Registers.Power.byte);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3335      	adds	r3, #53	; 0x35
 80052f8:	2201      	movs	r2, #1
 80052fa:	210b      	movs	r1, #11
 80052fc:	f001 fdbb 	bl	8006e76 <DeviceRead>
    DeviceRead(port->I2cAddr, regReset, 1, &port->Registers.Reset.byte);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	3336      	adds	r3, #54	; 0x36
 800530a:	2201      	movs	r2, #1
 800530c:	210c      	movs	r1, #12
 800530e:	f001 fdb2 	bl	8006e76 <DeviceRead>
    DeviceRead(port->I2cAddr, regOCPreg, 1, &port->Registers.OCPreg.byte);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	3337      	adds	r3, #55	; 0x37
 800531c:	2201      	movs	r2, #1
 800531e:	210d      	movs	r1, #13
 8005320:	f001 fda9 	bl	8006e76 <DeviceRead>
    DeviceRead(port->I2cAddr, regMaska, 1, &port->Registers.MaskAdv.byte[0]);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3338      	adds	r3, #56	; 0x38
 800532e:	2201      	movs	r2, #1
 8005330:	210e      	movs	r1, #14
 8005332:	f001 fda0 	bl	8006e76 <DeviceRead>
    DeviceRead(port->I2cAddr, regMaskb, 1, &port->Registers.MaskAdv.byte[1]);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3339      	adds	r3, #57	; 0x39
 8005340:	2201      	movs	r2, #1
 8005342:	210f      	movs	r1, #15
 8005344:	f001 fd97 	bl	8006e76 <DeviceRead>
    DeviceRead(port->I2cAddr, regStatus0a, 1, &port->Registers.Status.byte[0]);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	333c      	adds	r3, #60	; 0x3c
 8005352:	2201      	movs	r2, #1
 8005354:	213c      	movs	r1, #60	; 0x3c
 8005356:	f001 fd8e 	bl	8006e76 <DeviceRead>
    DeviceRead(port->I2cAddr, regStatus1a, 1, &port->Registers.Status.byte[1]);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	333d      	adds	r3, #61	; 0x3d
 8005364:	2201      	movs	r2, #1
 8005366:	213d      	movs	r1, #61	; 0x3d
 8005368:	f001 fd85 	bl	8006e76 <DeviceRead>
    DeviceRead(port->I2cAddr, regInterrupta, 1,&port->Registers.Status.byte[2]);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	333e      	adds	r3, #62	; 0x3e
 8005376:	2201      	movs	r2, #1
 8005378:	213e      	movs	r1, #62	; 0x3e
 800537a:	f001 fd7c 	bl	8006e76 <DeviceRead>
    DeviceRead(port->I2cAddr, regInterruptb, 1,&port->Registers.Status.byte[3]);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	333f      	adds	r3, #63	; 0x3f
 8005388:	2201      	movs	r2, #1
 800538a:	213f      	movs	r1, #63	; 0x3f
 800538c:	f001 fd73 	bl	8006e76 <DeviceRead>
    DeviceRead(port->I2cAddr, regStatus0, 1, &port->Registers.Status.byte[4]);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	3340      	adds	r3, #64	; 0x40
 800539a:	2201      	movs	r2, #1
 800539c:	2140      	movs	r1, #64	; 0x40
 800539e:	f001 fd6a 	bl	8006e76 <DeviceRead>
    DeviceRead(port->I2cAddr, regStatus1, 1, &port->Registers.Status.byte[5]);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3341      	adds	r3, #65	; 0x41
 80053ac:	2201      	movs	r2, #1
 80053ae:	2141      	movs	r1, #65	; 0x41
 80053b0:	f001 fd61 	bl	8006e76 <DeviceRead>
    DeviceRead(port->I2cAddr, regInterrupt, 1, &port->Registers.Status.byte[6]);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3342      	adds	r3, #66	; 0x42
 80053be:	2201      	movs	r2, #1
 80053c0:	2142      	movs	r1, #66	; 0x42
 80053c2:	f001 fd58 	bl	8006e76 <DeviceRead>
}
 80053c6:	bf00      	nop
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <InitializeTypeCVariables>:

void InitializeTypeCVariables(Port_t *port)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
    port->Registers.Mask.byte = 0xFF;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	22ff      	movs	r2, #255	; 0xff
 80053da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    DeviceWrite(port->I2cAddr, regMask, 1, &port->Registers.Mask.byte);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3334      	adds	r3, #52	; 0x34
 80053e8:	2201      	movs	r2, #1
 80053ea:	210a      	movs	r1, #10
 80053ec:	f001 fd26 	bl	8006e3c <DeviceWrite>
    port->Registers.MaskAdv.byte[0] = 0xFF;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	22ff      	movs	r2, #255	; 0xff
 80053f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    DeviceWrite(port->I2cAddr, regMaska, 1, &port->Registers.MaskAdv.byte[0]);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3338      	adds	r3, #56	; 0x38
 8005402:	2201      	movs	r2, #1
 8005404:	210e      	movs	r1, #14
 8005406:	f001 fd19 	bl	8006e3c <DeviceWrite>
    port->Registers.MaskAdv.M_GCRCSENT = 1;
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8005410:	f043 0301 	orr.w	r3, r3, #1
 8005414:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
    DeviceWrite(port->I2cAddr, regMaskb, 1, &port->Registers.MaskAdv.byte[1]);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3339      	adds	r3, #57	; 0x39
 8005422:	2201      	movs	r2, #1
 8005424:	210f      	movs	r1, #15
 8005426:	f001 fd09 	bl	8006e3c <DeviceWrite>

    /* Enable interrupt Pin */
    port->Registers.Control.INT_MASK = 0;
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005430:	f36f 1345 	bfc	r3, #5, #1
 8005434:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    DeviceWrite(port->I2cAddr, regControl0, 1,&port->Registers.Control.byte[0]);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	3330      	adds	r3, #48	; 0x30
 8005442:	2201      	movs	r2, #1
 8005444:	2106      	movs	r1, #6
 8005446:	f001 fcf9 	bl	8006e3c <DeviceWrite>

    /* These two control values allow detection of Ra-Ra or Ra-Open.
     * Enabling them will allow some corner case devices to connect where
     * they might not otherwise.
     */
    port->Registers.Control.TOG_RD_ONLY = 0;
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8005450:	f36f 1345 	bfc	r3, #5, #1
 8005454:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
    DeviceWrite(port->I2cAddr, regControl2, 1,&port->Registers.Control.byte[2]);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3332      	adds	r3, #50	; 0x32
 8005462:	2201      	movs	r2, #1
 8005464:	2108      	movs	r1, #8
 8005466:	f001 fce9 	bl	8006e3c <DeviceWrite>
    port->Registers.Control4.TOG_USRC_EXIT = 0;
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 8005470:	f36f 0300 	bfc	r3, #0, #1
 8005474:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
    DeviceWrite(port->I2cAddr, regControl4, 1, &port->Registers.Control4.byte);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	333a      	adds	r3, #58	; 0x3a
 8005482:	2201      	movs	r2, #1
 8005484:	2110      	movs	r1, #16
 8005486:	f001 fcd9 	bl	8006e3c <DeviceWrite>

    port->TCIdle = TRUE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    port->SMEnabled = FALSE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f

    SetTypeCState(port, Disabled);
 800549a:	2100      	movs	r1, #0
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff fe68 	bl	8005172 <SetTypeCState>

    port->DetachThreshold = VBUS_MV_VSAFE5V_DISC;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f640 6256 	movw	r2, #3670	; 0xe56
 80054a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    port->CCPin = CCNone;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    port->C2ACable = FALSE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

    resetDebounceVariables(port);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f001 f8fb 	bl	80066b8 <resetDebounceVariables>
#endif /* FSC_HAVE_SNK */

#ifdef FSC_DEBUG
    InitializeStateLog(&port->TypeCStateLog);
#endif /* FSC_DEBUG */
}
 80054c2:	bf00      	nop
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <InitializePDProtocolVariables>:

void InitializePDProtocolVariables(Port_t *port)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
    port->DoTxFlush = FALSE;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc80      	pop	{r7}
 80054e2:	4770      	bx	lr

080054e4 <InitializePDPolicyVariables>:

void InitializePDPolicyVariables(Port_t *port)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
    port->isContractValid = FALSE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

    port->IsHardReset = FALSE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
    port->IsPRSwap = FALSE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    port->WaitingOnHR = FALSE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

    port->PEIdle = TRUE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    port->USBPDActive = FALSE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    port->USBPDEnabled = TRUE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
#ifdef FSC_DEBUG
    port->SourceCapsUpdated = FALSE;
#endif /* FSC_DEBUG */

    /* Source Caps & Header */
    port->src_cap_header.word = 0;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    port->src_cap_header.NumDataObjects = NUMBER_OF_SRC_PDOS_ENABLED;
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	f892 3067 	ldrb.w	r3, [r2, #103]	; 0x67
 8005532:	2101      	movs	r1, #1
 8005534:	f361 1306 	bfi	r3, r1, #4, #3
 8005538:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
    port->src_cap_header.MessageType    = DMTSourceCapabilities;
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8005542:	2101      	movs	r1, #1
 8005544:	f361 0304 	bfi	r3, r1, #0, #5
 8005548:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
    port->src_cap_header.SpecRevision   = port->PortConfig.PdRevPreferred;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	b2d9      	uxtb	r1, r3
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 800555e:	f361 1387 	bfi	r3, r1, #6, #2
 8005562:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66

    VIF_InitializeSrcCaps(port->src_caps);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	336c      	adds	r3, #108	; 0x6c
 800556a:	4618      	mov	r0, r3
 800556c:	f001 fd2d 	bl	8006fca <VIF_InitializeSrcCaps>

    /* Sink Caps & Header */
    port->snk_cap_header.word = 0;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    port->snk_cap_header.NumDataObjects = NUMBER_OF_SNK_PDOS_ENABLED;
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	f892 3069 	ldrb.w	r3, [r2, #105]	; 0x69
 800557e:	2101      	movs	r1, #1
 8005580:	f361 1306 	bfi	r3, r1, #4, #3
 8005584:	f882 3069 	strb.w	r3, [r2, #105]	; 0x69
    port->snk_cap_header.MessageType    = DMTSinkCapabilities;
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 800558e:	2104      	movs	r1, #4
 8005590:	f361 0304 	bfi	r3, r1, #0, #5
 8005594:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
    port->snk_cap_header.SpecRevision   = port->PortConfig.PdRevPreferred;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	b2d9      	uxtb	r1, r3
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 80055aa:	f361 1387 	bfi	r3, r1, #6, #2
 80055ae:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68

    VIF_InitializeSnkCaps(port->snk_caps);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3388      	adds	r3, #136	; 0x88
 80055b6:	4618      	mov	r0, r3
 80055b8:	f001 fd68 	bl	800708c <VIF_InitializeSnkCaps>
#endif /* FSC_HAVE_VDM */

#ifdef FSC_DEBUG
    InitializeStateLog(&port->PDStateLog);
#endif /* FSC_DEBUG */
}
 80055bc:	bf00      	nop
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <SetConfiguredCurrent>:

void SetConfiguredCurrent(Port_t *port)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
    switch (port->PortConfig.RpVal)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d010      	beq.n	80055f8 <SetConfiguredCurrent+0x34>
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	dc13      	bgt.n	8005602 <SetConfiguredCurrent+0x3e>
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d002      	beq.n	80055e4 <SetConfiguredCurrent+0x20>
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d005      	beq.n	80055ee <SetConfiguredCurrent+0x2a>
 80055e2:	e00e      	b.n	8005602 <SetConfiguredCurrent+0x3e>
    {
    case 1:
        port->SourceCurrent = utccDefault;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        break;
 80055ec:	e00e      	b.n	800560c <SetConfiguredCurrent+0x48>
    case 2:
        port->SourceCurrent = utcc1p5A;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2202      	movs	r2, #2
 80055f2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        break;
 80055f6:	e009      	b.n	800560c <SetConfiguredCurrent+0x48>
    case 3:
        port->SourceCurrent = utcc3p0A;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2203      	movs	r2, #3
 80055fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        break;
 8005600:	e004      	b.n	800560c <SetConfiguredCurrent+0x48>
    default:
        port->SourceCurrent = utccNone;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        break;
 800560a:	bf00      	nop
    }
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	bc80      	pop	{r7}
 8005614:	4770      	bx	lr
	...

08005618 <StateMachineTypeC>:
#ifdef FSC_DEBUG
#include "Log.h"
#endif /* FSC_DEBUG */

void StateMachineTypeC(Port_t *port)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
    do
    {

    if (!port->SMEnabled)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 80a6 	beq.w	8005778 <StateMachineTypeC+0x160>
    {
        return;
    }

    port->TCIdle = FALSE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    if (platform_get_device_irq_state(port->PortID))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800563a:	4618      	mov	r0, r3
 800563c:	f7fb f884 	bl	8000748 <platform_get_device_irq_state>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00e      	beq.n	8005664 <StateMachineTypeC+0x4c>
    {
        /* Read the interrupta, interruptb, status0, status1 and
         * interrupt registers.
         */
    	FSC_BOOL result = DeviceRead(port->I2cAddr, regInterrupta, 5,
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	333e      	adds	r3, #62	; 0x3e
 8005650:	2205      	movs	r2, #5
 8005652:	213e      	movs	r1, #62	; 0x3e
 8005654:	f001 fc0f 	bl	8006e76 <DeviceRead>
 8005658:	4603      	mov	r3, r0
 800565a:	73fb      	strb	r3, [r7, #15]
                   &port->Registers.Status.byte[2]);
    	if(result !=  TRUE)  {
 800565c:	7bfb      	ldrb	r3, [r7, #15]
 800565e:	2b01      	cmp	r3, #1
 8005660:	f040 808c 	bne.w	800577c <StateMachineTypeC+0x164>
    		break;
    	}
    }

    if (port->USBPDActive)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800566a:	2b00      	cmp	r3, #0
 800566c:	d012      	beq.n	8005694 <StateMachineTypeC+0x7c>
    {
        port->PEIdle = FALSE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        
        /* Protocol operations */
        USBPDProtocol(port);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7fe fbba 	bl	8003df0 <USBPDProtocol>

        /* Policy Engine operations */
        USBPDPolicyEngine(port);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7fb fc7d 	bl	8000f7c <USBPDPolicyEngine>

#ifdef FSC_HAVE_EXT_MSG
        /* Extended messaging may require additional chunk handling
         * before idling.
         */
        if (port->ExtTxOrRx != NoXfer)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <StateMachineTypeC+0x7c>
        {
            /* Don't allow system to idle */
            port->PEIdle = FALSE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
#endif /* FSC_HAVE_EXT_MSG */
    }

    switch (port->ConnState)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800569a:	2b1a      	cmp	r3, #26
 800569c:	d854      	bhi.n	8005748 <StateMachineTypeC+0x130>
 800569e:	a201      	add	r2, pc, #4	; (adr r2, 80056a4 <StateMachineTypeC+0x8c>)
 80056a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a4:	08005711 	.word	0x08005711
 80056a8:	08005719 	.word	0x08005719
 80056ac:	08005721 	.word	0x08005721
 80056b0:	08005749 	.word	0x08005749
 80056b4:	08005749 	.word	0x08005749
 80056b8:	08005729 	.word	0x08005729
 80056bc:	08005731 	.word	0x08005731
 80056c0:	08005749 	.word	0x08005749
 80056c4:	08005749 	.word	0x08005749
 80056c8:	08005749 	.word	0x08005749
 80056cc:	08005749 	.word	0x08005749
 80056d0:	08005749 	.word	0x08005749
 80056d4:	08005739 	.word	0x08005739
 80056d8:	08005749 	.word	0x08005749
 80056dc:	08005749 	.word	0x08005749
 80056e0:	08005749 	.word	0x08005749
 80056e4:	08005749 	.word	0x08005749
 80056e8:	08005749 	.word	0x08005749
 80056ec:	08005749 	.word	0x08005749
 80056f0:	08005749 	.word	0x08005749
 80056f4:	08005749 	.word	0x08005749
 80056f8:	08005749 	.word	0x08005749
 80056fc:	08005749 	.word	0x08005749
 8005700:	08005749 	.word	0x08005749
 8005704:	08005749 	.word	0x08005749
 8005708:	08005749 	.word	0x08005749
 800570c:	08005741 	.word	0x08005741
    {
    case Disabled:
        StateMachineDisabled(port);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f837 	bl	8005784 <StateMachineDisabled>
        break;
 8005716:	e01b      	b.n	8005750 <StateMachineTypeC+0x138>
    case ErrorRecovery:
        StateMachineErrorRecovery(port);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f83c 	bl	8005796 <StateMachineErrorRecovery>
        break;
 800571e:	e017      	b.n	8005750 <StateMachineTypeC+0x138>
    case Unattached:
        StateMachineUnattached(port);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f84c 	bl	80057be <StateMachineUnattached>
        break;
 8005726:	e013      	b.n	8005750 <StateMachineTypeC+0x138>
        StateMachineTrySink(port);
        break;
#endif /* FSC_HAVE_DRP || (FSC_HAVE_SNK && FSC_HAVE_ACCMODE)) */
#ifdef FSC_HAVE_SRC
    case AttachWaitSource:
        StateMachineAttachWaitSource(port);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f8d0 	bl	80058ce <StateMachineAttachWaitSource>
        break;
 800572e:	e00f      	b.n	8005750 <StateMachineTypeC+0x138>
    case AttachedSource:
        StateMachineAttachedSource(port);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f9c5 	bl	8005ac0 <StateMachineAttachedSource>
        break;
 8005736:	e00b      	b.n	8005750 <StateMachineTypeC+0x138>
    case UnattachedSource:
        StateMachineUnattachedSource(port);
        break;
#endif /* FSC_HAVE_DRP */
    case DebugAccessorySource:
        StateMachineDebugAccessorySource(port);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 fa85 	bl	8005c48 <StateMachineDebugAccessorySource>
        break;
 800573e:	e007      	b.n	8005750 <StateMachineTypeC+0x138>
    case PoweredAccessory:
        StateMachinePoweredAccessory(port);
        break;
#endif /* FSC_HAVE_SNK && FSC_HAVE_ACCMODE */
    case IllegalCable:
        StateMachineIllegalCable(port);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f001 fab4 	bl	8006cae <StateMachineIllegalCable>
        break;
 8005746:	e003      	b.n	8005750 <StateMachineTypeC+0x138>
    default:
        SetStateUnattached(port);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fb1f 	bl	8005d8c <SetStateUnattached>
        break;
 800574e:	bf00      	nop
    }

    /* Clear the interrupt registers after processing the state machines */
    port->Registers.Status.Interrupt1 = 0;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    port->Registers.Status.InterruptAdv = 0;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	87da      	strh	r2, [r3, #62]	; 0x3e

    } while (port->TCIdle == FALSE || port->PEIdle == FALSE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005764:	2b00      	cmp	r3, #0
 8005766:	f43f af5b 	beq.w	8005620 <StateMachineTypeC+0x8>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005770:	2b00      	cmp	r3, #0
 8005772:	f43f af55 	beq.w	8005620 <StateMachineTypeC+0x8>
 8005776:	e002      	b.n	800577e <StateMachineTypeC+0x166>
        return;
 8005778:	bf00      	nop
 800577a:	e000      	b.n	800577e <StateMachineTypeC+0x166>
    		break;
 800577c:	bf00      	nop
}
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <StateMachineDisabled>:

void StateMachineDisabled(Port_t *port)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
    /* Do nothing until directed to go to some other state... */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	bc80      	pop	{r7}
 8005794:	4770      	bx	lr

08005796 <StateMachineErrorRecovery>:

void StateMachineErrorRecovery(Port_t *port)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b082      	sub	sp, #8
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
    if (TimerExpired(&port->StateTimer))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 80057a4:	4618      	mov	r0, r3
 80057a6:	f001 fbbe 	bl	8006f26 <TimerExpired>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <StateMachineErrorRecovery+0x20>
    {
        SetStateUnattached(port);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 faeb 	bl	8005d8c <SetStateUnattached>
    }
}
 80057b6:	bf00      	nop
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <StateMachineUnattached>:

void StateMachineUnattached(Port_t *port)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b082      	sub	sp, #8
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
    port->TCIdle = TRUE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    if (TimerExpired(&port->LoopCountTimer))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057d4:	4618      	mov	r0, r3
 80057d6:	f001 fba6 	bl	8006f26 <TimerExpired>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d009      	beq.n	80057f4 <StateMachineUnattached+0x36>
    {
        /* Detached for ~100ms - safe to clear the loop counter */
        TimerDisable(&port->LoopCountTimer);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057e6:	4618      	mov	r0, r3
 80057e8:	f001 fb7d 	bl	8006ee6 <TimerDisable>
        port->loopCounter = 0;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    if (port->Registers.Status.I_TOGDONE)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d05d      	beq.n	80058c0 <StateMachineUnattached+0x102>
    {
        TimerDisable(&port->LoopCountTimer);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800580a:	4618      	mov	r0, r3
 800580c:	f001 fb6b 	bl	8006ee6 <TimerDisable>
        
        DeviceRead(port->I2cAddr, regStatus1a, 1,
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	333d      	adds	r3, #61	; 0x3d
 800581a:	2201      	movs	r2, #1
 800581c:	213d      	movs	r1, #61	; 0x3d
 800581e:	f001 fb2a 	bl	8006e76 <DeviceRead>
                   &port->Registers.Status.byte[1]);

        switch (port->Registers.Status.TOGSS)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005828:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b07      	cmp	r3, #7
 8005830:	d016      	beq.n	8005860 <StateMachineUnattached+0xa2>
 8005832:	2b07      	cmp	r3, #7
 8005834:	dc20      	bgt.n	8005878 <StateMachineUnattached+0xba>
 8005836:	2b01      	cmp	r3, #1
 8005838:	d002      	beq.n	8005840 <StateMachineUnattached+0x82>
 800583a:	2b02      	cmp	r3, #2
 800583c:	d008      	beq.n	8005850 <StateMachineUnattached+0x92>
 800583e:	e01b      	b.n	8005878 <StateMachineUnattached+0xba>
            break;
#endif /* FSC_HAVE_SNK */
#if (defined(FSC_HAVE_SRC) || \
     (defined(FSC_HAVE_SNK) && defined(FSC_HAVE_ACCMODE)))
        case 0x1: /* Rd detected on CC1 */
            port->CCPin = CCNone; /* Wait to re-check orientation */
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
#if defined(FSC_HAVE_SRC) && defined(FSC_HAVE_SNK) && defined(FSC_HAVE_ACCMODE)
            else
#endif /* FSC_HAVE_SRC && FSC_HAVE_SNK && FSC_HAVE_ACCMODE */
#ifdef FSC_HAVE_SRC
            {
                SetStateAttachWaitSource(port);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fb3f 	bl	8005ecc <SetStateAttachWaitSource>
            }
#endif /* FSC_HAVE_SRC */
            break;
 800584e:	e03a      	b.n	80058c6 <StateMachineUnattached+0x108>
        case 0x2: /* Rd detected on CC2 */
            port->CCPin = CCNone; /* Wait to re-check orientation */
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
#if defined(FSC_HAVE_SRC) && defined(FSC_HAVE_SNK) && defined(FSC_HAVE_ACCMODE)
            else
#endif /* FSC_HAVE_SRC && FSC_HAVE_SNK && FSC_HAVE_ACCMODE */
#ifdef FSC_HAVE_SRC
            {
                SetStateAttachWaitSource(port);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 fb37 	bl	8005ecc <SetStateAttachWaitSource>
            }
#endif /* FSC_HAVE_SRC */
            break;
 800585e:	e032      	b.n	80058c6 <StateMachineUnattached+0x108>
        case 0x7: /* Ra detected on both CC1 and CC2 */
            port->CCPin = CCNone;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
#endif /* defined(FSC_HAVE_SNK) && defined(FSC_HAVE_ACCMODE) */
#if defined(FSC_HAVE_SRC) && defined(FSC_HAVE_SNK) && defined(FSC_HAVE_ACCMODE)
            else
#endif /* FSC_HAVE_SRC && FSC_HAVE_SNK && FSC_HAVE_ACCMODE */
#if defined(FSC_HAVE_SRC)
            if (port->PortConfig.PortType != USBTypeC_Sink)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	791b      	ldrb	r3, [r3, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d029      	beq.n	80058c4 <StateMachineUnattached+0x106>
            {
                    SetStateAttachWaitSource(port);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fb2b 	bl	8005ecc <SetStateAttachWaitSource>
            }
#endif /* FSC_HAVE_SRC */
            break;
 8005876:	e025      	b.n	80058c4 <StateMachineUnattached+0x106>
#endif /* FSC_HAVE_SRC || (FSC_HAVE_SNK && FSC_HAVE_ACCMODE) */
        default:
            /* Shouldn't get here, but just in case reset everything... */
            port->Registers.Control.TOGGLE = 0;
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 800587e:	f36f 0300 	bfc	r3, #0, #1
 8005882:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
            DeviceWrite(port->I2cAddr, regControl2, 1,
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3332      	adds	r3, #50	; 0x32
 8005890:	2201      	movs	r2, #1
 8005892:	2108      	movs	r1, #8
 8005894:	f001 fad2 	bl	8006e3c <DeviceWrite>
                        &port->Registers.Control.byte[2]);

            platform_delay_10us(1);
 8005898:	2001      	movs	r0, #1
 800589a:	f7fa ffc1 	bl	8000820 <platform_delay_10us>

            /* Re-enable the toggle state machine... (allows us to get
             * another I_TOGDONE interrupt)
             */
            port->Registers.Control.TOGGLE = 1;
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 80058a4:	f043 0301 	orr.w	r3, r3, #1
 80058a8:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
            DeviceWrite(port->I2cAddr, regControl2, 1,
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3332      	adds	r3, #50	; 0x32
 80058b6:	2201      	movs	r2, #1
 80058b8:	2108      	movs	r1, #8
 80058ba:	f001 fabf 	bl	8006e3c <DeviceWrite>
                        &port->Registers.Control.byte[2]);
            break;
 80058be:	e002      	b.n	80058c6 <StateMachineUnattached+0x108>
        }
    }
 80058c0:	bf00      	nop
 80058c2:	e000      	b.n	80058c6 <StateMachineUnattached+0x108>
            break;
 80058c4:	bf00      	nop
}
 80058c6:	bf00      	nop
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <StateMachineAttachWaitSource>:
}
#endif /* FSC_HAVE_SNK */

#ifdef FSC_HAVE_SRC
void StateMachineAttachWaitSource(Port_t *port)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
    FSC_BOOL ccPinIsRa = FALSE;
 80058d6:	2300      	movs	r3, #0
 80058d8:	73fb      	strb	r3, [r7, #15]
    port->TCIdle = TRUE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update source current - can only toggle with Default and may be using
     * 3A advertisement to prevent non-compliant cable looping.
     */
    if (port->Registers.Control.HOST_CUR != port->SourceCurrent &&
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058e8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	461a      	mov	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d011      	beq.n	800591e <StateMachineAttachWaitSource+0x50>
        TimerExpired(&port->StateTimer))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8005900:	4618      	mov	r0, r3
 8005902:	f001 fb10 	bl	8006f26 <TimerExpired>
 8005906:	4603      	mov	r3, r0
    if (port->Registers.Control.HOST_CUR != port->SourceCurrent &&
 8005908:	2b00      	cmp	r3, #0
 800590a:	d008      	beq.n	800591e <StateMachineAttachWaitSource+0x50>
    {
        TimerDisable(&port->StateTimer);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8005912:	4618      	mov	r0, r3
 8005914:	f001 fae7 	bl	8006ee6 <TimerDisable>
        updateSourceCurrent(port);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 fbbf 	bl	800609c <updateSourceCurrent>
    }

    updateVCONNSource(port);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 ff5e 	bl	80067e0 <updateVCONNSource>
    ccPinIsRa = IsCCPinRa(port);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 fd85 	bl	8006434 <IsCCPinRa>
 800592a:	4603      	mov	r3, r0
 800592c:	73fb      	strb	r3, [r7, #15]

    /* Checking pins can cause extra COMP interrupts. */
    platform_delay_10us(12);
 800592e:	200c      	movs	r0, #12
 8005930:	f7fa ff76 	bl	8000820 <platform_delay_10us>
    DeviceRead(port->I2cAddr, regInterrupt, 1,
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3342      	adds	r3, #66	; 0x42
 800593e:	2201      	movs	r2, #1
 8005940:	2142      	movs	r1, #66	; 0x42
 8005942:	f001 fa98 	bl	8006e76 <DeviceRead>
               &port->Registers.Status.Interrupt1);

    debounceCC(port);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fed4 	bl	80066f4 <debounceCC>

    if (port->CCTerm == CCTypeOpen)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005952:	2b00      	cmp	r3, #0
 8005954:	d11d      	bne.n	8005992 <StateMachineAttachWaitSource+0xc4>
    {
        if (port->VCONNTerm == CCTypeOpen || port->VCONNTerm == CCTypeRa)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800595c:	2b00      	cmp	r3, #0
 800595e:	d004      	beq.n	800596a <StateMachineAttachWaitSource+0x9c>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8005966:	2b01      	cmp	r3, #1
 8005968:	d103      	bne.n	8005972 <StateMachineAttachWaitSource+0xa4>
        {
            SetStateUnattached(port);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 fa0e 	bl	8005d8c <SetStateUnattached>
            return;
 8005970:	e0a2      	b.n	8005ab8 <StateMachineAttachWaitSource+0x1ea>
        }
        else
        {
            /* CC pin may have switched (compliance test) - swap here */
            port->CCPin = (port->CCPin == CC1) ? CC2 : CC1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005978:	2b01      	cmp	r3, #1
 800597a:	d101      	bne.n	8005980 <StateMachineAttachWaitSource+0xb2>
 800597c:	2202      	movs	r2, #2
 800597e:	e000      	b.n	8005982 <StateMachineAttachWaitSource+0xb4>
 8005980:	2201      	movs	r2, #1
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            setStateSource(port, FALSE);
 8005988:	2100      	movs	r1, #0
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 ff80 	bl	8006890 <setStateSource>
            return;
 8005990:	e092      	b.n	8005ab8 <StateMachineAttachWaitSource+0x1ea>
        }
    }

    if (ccPinIsRa)
 8005992:	7bfb      	ldrb	r3, [r7, #15]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d019      	beq.n	80059cc <StateMachineAttachWaitSource+0xfe>
    {
        if (port->VCONNTerm >= CCTypeRdUSB && port->VCONNTerm < CCTypeUndefined)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d914      	bls.n	80059cc <StateMachineAttachWaitSource+0xfe>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d80f      	bhi.n	80059cc <StateMachineAttachWaitSource+0xfe>
        {
            /* The toggle state machine may have stopped on an Ra - swap here */
            port->CCPin = (port->CCPin == CC1) ? CC2 : CC1;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d101      	bne.n	80059ba <StateMachineAttachWaitSource+0xec>
 80059b6:	2202      	movs	r2, #2
 80059b8:	e000      	b.n	80059bc <StateMachineAttachWaitSource+0xee>
 80059ba:	2201      	movs	r2, #1
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            setStateSource(port, FALSE);
 80059c2:	2100      	movs	r1, #0
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 ff63 	bl	8006890 <setStateSource>
            return;
 80059ca:	e075      	b.n	8005ab8 <StateMachineAttachWaitSource+0x1ea>
        }
#endif /* FSC_HAVE_DRP */
    }

    /* Wait on CC Debounce for connection */
    if (port->CCTermCCDebounce != CCTypeUndefined)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80059d2:	2b05      	cmp	r3, #5
 80059d4:	d070      	beq.n	8005ab8 <StateMachineAttachWaitSource+0x1ea>
    {
        if (ccPinIsRa)
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d16d      	bne.n	8005ab8 <StateMachineAttachWaitSource+0x1ea>
            {
                SetStateAudioAccessory(port);
            }
#endif /* FSC_HAVE_ACCMODE */
        }
        else if ((port->CCTermCCDebounce >= CCTypeRdUSB) &&
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d927      	bls.n	8005a36 <StateMachineAttachWaitSource+0x168>
                 (port->CCTermCCDebounce < CCTypeUndefined) &&
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
        else if ((port->CCTermCCDebounce >= CCTypeRdUSB) &&
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d822      	bhi.n	8005a36 <StateMachineAttachWaitSource+0x168>
                 (port->VCONNTerm >= CCTypeRdUSB) &&
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
                 (port->CCTermCCDebounce < CCTypeUndefined) &&
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d91d      	bls.n	8005a36 <StateMachineAttachWaitSource+0x168>
                 (port->VCONNTerm < CCTypeUndefined))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
                 (port->VCONNTerm >= CCTypeRdUSB) &&
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d818      	bhi.n	8005a36 <StateMachineAttachWaitSource+0x168>
        {
            /* Both pins Rd and Debug (DTS) mode supported */
            if (VbusVSafe0V(port))
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fd70 	bl	80064ea <VbusVSafe0V>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <StateMachineAttachWaitSource+0x14a>
            {
                if(Type_C_Is_Debug_Target_SRC)
                {
                    SetStateDebugAccessorySource(port);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fb09 	bl	8006028 <SetStateDebugAccessorySource>
            if (VbusVSafe0V(port))
 8005a16:	e04f      	b.n	8005ab8 <StateMachineAttachWaitSource+0x1ea>
                }
            }
            else
            {
                TimerStart(&port->VBusPollTimer, tVBusPollShort);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8005a1e:	f242 7110 	movw	r1, #10000	; 0x2710
 8005a22:	4618      	mov	r0, r3
 8005a24:	f001 fa44 	bl	8006eb0 <TimerStart>
                TimerDisable(&port->StateTimer);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f001 fa59 	bl	8006ee6 <TimerDisable>
            if (VbusVSafe0V(port))
 8005a34:	e040      	b.n	8005ab8 <StateMachineAttachWaitSource+0x1ea>
            }
        }
        else if ((port->CCTermCCDebounce >= CCTypeRdUSB) &&
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d921      	bls.n	8005a84 <StateMachineAttachWaitSource+0x1b6>
                 (port->CCTermCCDebounce < CCTypeUndefined) &&
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
        else if ((port->CCTermCCDebounce >= CCTypeRdUSB) &&
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d81c      	bhi.n	8005a84 <StateMachineAttachWaitSource+0x1b6>
                 ((port->VCONNTerm == CCTypeOpen) ||
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
                 (port->CCTermCCDebounce < CCTypeUndefined) &&
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d004      	beq.n	8005a5e <StateMachineAttachWaitSource+0x190>
                  (port->VCONNTerm == CCTypeRa)))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
                 ((port->VCONNTerm == CCTypeOpen) ||
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d112      	bne.n	8005a84 <StateMachineAttachWaitSource+0x1b6>
        {
            /* One pin Rd */
            if (VbusVSafe0V(port))
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fd43 	bl	80064ea <VbusVSafe0V>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <StateMachineAttachWaitSource+0x1a4>
                    SetStateTrySink(port);
                }
                else
#endif /* FSC_HAVE_DRP */
                {
                    SetStateAttachedSource(port);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 faa2 	bl	8005fb4 <SetStateAttachedSource>
            if (VbusVSafe0V(port))
 8005a70:	e022      	b.n	8005ab8 <StateMachineAttachWaitSource+0x1ea>
                }
            }
            else
            {
                TimerStart(&port->VBusPollTimer, tVBusPollShort);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8005a78:	f242 7110 	movw	r1, #10000	; 0x2710
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f001 fa17 	bl	8006eb0 <TimerStart>
            if (VbusVSafe0V(port))
 8005a82:	e019      	b.n	8005ab8 <StateMachineAttachWaitSource+0x1ea>
        {
            /* In the current configuration, we may be here with Ra-Open
             * (cable with nothing attached) so periodically poll for attach
             * or open or VBus present.
             */
            if (TimerDisabled(&port->StateTimer) ||
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f001 fa3b 	bl	8006f06 <TimerDisabled>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d108      	bne.n	8005aa8 <StateMachineAttachWaitSource+0x1da>
                TimerExpired(&port->StateTimer))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f001 fa42 	bl	8006f26 <TimerExpired>
 8005aa2:	4603      	mov	r3, r0
            if (TimerDisabled(&port->StateTimer) ||
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d007      	beq.n	8005ab8 <StateMachineAttachWaitSource+0x1ea>
            {
                TimerStart(&port->StateTimer, tAttachWaitPoll);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8005aae:	f644 6120 	movw	r1, #20000	; 0x4e20
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f001 f9fc 	bl	8006eb0 <TimerStart>
            }
        }
    }
}
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <StateMachineAttachedSource>:
}
#endif /* FSC_HAVE_SNK */

#ifdef FSC_HAVE_SRC
void StateMachineAttachedSource(Port_t *port)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
    port->TCIdle = TRUE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    switch (port->TypeCSubState)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <StateMachineAttachedSource+0x22>
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	f000 8086 	beq.w	8005bec <StateMachineAttachedSource+0x12c>
 8005ae0:	e0a7      	b.n	8005c32 <StateMachineAttachedSource+0x172>
    {
    case 0:
        if ((port->loopCounter != 0) ||
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d107      	bne.n	8005afc <StateMachineAttachedSource+0x3c>
            (port->Registers.Status.I_COMP_CHNG == 1))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005af2:	f003 0320 	and.w	r3, r3, #32
 8005af6:	b2db      	uxtb	r3, r3
        if ((port->loopCounter != 0) ||
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d007      	beq.n	8005b0c <StateMachineAttachedSource+0x4c>
        {
            port->CCTerm = DecodeCCTerminationSource(port);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fbe5 	bl	80062cc <DecodeCCTerminationSource>
 8005b02:	4603      	mov	r3, r0
 8005b04:	461a      	mov	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        }

        if ((port->CCTerm == CCTypeOpen) && (!port->IsPRSwap))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d13c      	bne.n	8005b90 <StateMachineAttachedSource+0xd0>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d137      	bne.n	8005b90 <StateMachineAttachedSource+0xd0>
        {
            platform_set_vbus_lvl_enable(port->PortID, VBUS_LVL_ALL, FALSE,
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 8005b26:	2300      	movs	r3, #0
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2102      	movs	r1, #2
 8005b2c:	f7fa fd7e 	bl	800062c <platform_set_vbus_lvl_enable>
                                         FALSE);
            platform_set_vbus_discharge(port->PortID, TRUE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b36:	2101      	movs	r1, #1
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fa fdeb 	bl	8000714 <platform_set_vbus_discharge>

            notify_observers(CC_NO_ORIENT, port->I2cAddr, 0);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b44:	2200      	movs	r2, #0
 8005b46:	4619      	mov	r1, r3
 8005b48:	2004      	movs	r0, #4
 8005b4a:	f001 fd7b 	bl	8007644 <notify_observers>

            USBPDDisable(port, TRUE);
 8005b4e:	2101      	movs	r1, #1
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7fb f931 	bl	8000db8 <USBPDDisable>

            /* VConn off and Pulldowns while detatching */
            port->Registers.Switches.byte[0] = 0x03;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2203      	movs	r2, #3
 8005b5a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
            DeviceWrite(port->I2cAddr, regSwitches0, 1,
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	332a      	adds	r3, #42	; 0x2a
 8005b68:	2201      	movs	r2, #1
 8005b6a:	2102      	movs	r1, #2
 8005b6c:	f001 f966 	bl	8006e3c <DeviceWrite>
                        &port->Registers.Switches.byte[0]);

            port->TypeCSubState++;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b76:	3301      	adds	r3, #1
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

            TimerStart(&port->StateTimer, tSafe0V);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8005b86:	492f      	ldr	r1, [pc, #188]	; (8005c44 <StateMachineAttachedSource+0x184>)
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f001 f991 	bl	8006eb0 <TimerStart>
            TimerDisable(&port->StateTimer);
            port->loopCounter = 0;
            port->Registers.Mask.M_COMP_CHNG = 0;
            DeviceWrite(port->I2cAddr, regMask, 1, &port->Registers.Mask.byte);
        }
        break;
 8005b8e:	e054      	b.n	8005c3a <StateMachineAttachedSource+0x17a>
        else if ((port->loopCounter != 0) &&
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d04f      	beq.n	8005c3a <StateMachineAttachedSource+0x17a>
                 (TimerExpired(&port->StateTimer) || port->PolicyHasContract))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f001 f9c0 	bl	8006f26 <TimerExpired>
 8005ba6:	4603      	mov	r3, r0
        else if ((port->loopCounter != 0) &&
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d104      	bne.n	8005bb6 <StateMachineAttachedSource+0xf6>
                 (TimerExpired(&port->StateTimer) || port->PolicyHasContract))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d041      	beq.n	8005c3a <StateMachineAttachedSource+0x17a>
            TimerDisable(&port->StateTimer);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f001 f992 	bl	8006ee6 <TimerDisable>
            port->loopCounter = 0;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            port->Registers.Mask.M_COMP_CHNG = 0;
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8005bd0:	f36f 1345 	bfc	r3, #5, #1
 8005bd4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
            DeviceWrite(port->I2cAddr, regMask, 1, &port->Registers.Mask.byte);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	3334      	adds	r3, #52	; 0x34
 8005be2:	2201      	movs	r2, #1
 8005be4:	210a      	movs	r1, #10
 8005be6:	f001 f929 	bl	8006e3c <DeviceWrite>
        break;
 8005bea:	e026      	b.n	8005c3a <StateMachineAttachedSource+0x17a>

            return;
        }
#endif /* FSC_HAVE_DRP */

        if (VbusVSafe0V(port) || TimerExpired(&port->StateTimer))
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 fc7c 	bl	80064ea <VbusVSafe0V>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d108      	bne.n	8005c0a <StateMachineAttachedSource+0x14a>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 f991 	bl	8006f26 <TimerExpired>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <StateMachineAttachedSource+0x160>
        {
            platform_set_vbus_discharge(port->PortID, FALSE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c10:	2100      	movs	r1, #0
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fa fd7e 	bl	8000714 <platform_set_vbus_discharge>
            SetStateUnattached(port);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f8b7 	bl	8005d8c <SetStateUnattached>
        }
        else
        {
            TimerStart(&port->VBusPollTimer, tVBusPollShort);
        }
        break;
 8005c1e:	e00d      	b.n	8005c3c <StateMachineAttachedSource+0x17c>
            TimerStart(&port->VBusPollTimer, tVBusPollShort);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8005c26:	f242 7110 	movw	r1, #10000	; 0x2710
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f001 f940 	bl	8006eb0 <TimerStart>
        break;
 8005c30:	e004      	b.n	8005c3c <StateMachineAttachedSource+0x17c>
    default:
        SetStateErrorRecovery(port);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f88f 	bl	8005d56 <SetStateErrorRecovery>
        break;
 8005c38:	e000      	b.n	8005c3c <StateMachineAttachedSource+0x17c>
        break;
 8005c3a:	bf00      	nop
    }
}
 8005c3c:	bf00      	nop
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	0009eb10 	.word	0x0009eb10

08005c48 <StateMachineDebugAccessorySource>:
}
#endif /* FSC_HAVE_DRP */

#ifdef FSC_HAVE_SRC
void StateMachineDebugAccessorySource(Port_t *port)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
    port->TCIdle = TRUE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    updateVCONNSource(port);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fdc1 	bl	80067e0 <updateVCONNSource>

    /* Checking pins can cause extra COMP interrupts. */
    platform_delay_10us(12);
 8005c5e:	200c      	movs	r0, #12
 8005c60:	f7fa fdde 	bl	8000820 <platform_delay_10us>
    DeviceRead(port->I2cAddr, regInterrupt, 1,
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3342      	adds	r3, #66	; 0x42
 8005c6e:	2201      	movs	r2, #1
 8005c70:	2142      	movs	r1, #66	; 0x42
 8005c72:	f001 f900 	bl	8006e76 <DeviceRead>
               &port->Registers.Status.Interrupt1);

    debounceCC(port);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fd3c 	bl	80066f4 <debounceCC>

    if (port->CCTerm == CCTypeOpen)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d103      	bne.n	8005c8e <StateMachineDebugAccessorySource+0x46>
    {
        SetStateUnattached(port);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f880 	bl	8005d8c <SetStateUnattached>
        return;
 8005c8c:	e060      	b.n	8005d50 <StateMachineDebugAccessorySource+0x108>
    }
    else if ((port->CCTermPDDebounce >= CCTypeRdUSB)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d95b      	bls.n	8005d50 <StateMachineDebugAccessorySource+0x108>
            && (port->CCTermPDDebounce < CCTypeUndefined)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d856      	bhi.n	8005d50 <StateMachineDebugAccessorySource+0x108>
            && (port->VCONNTerm >= CCTypeRdUSB)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d951      	bls.n	8005d50 <StateMachineDebugAccessorySource+0x108>
            && (port->VCONNTerm < CCTypeUndefined)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d84c      	bhi.n	8005d50 <StateMachineDebugAccessorySource+0x108>
            && port->USBPDActive == FALSE)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d147      	bne.n	8005d50 <StateMachineDebugAccessorySource+0x108>
    {
        if (port->CCTermPDDebounce > port->VCONNTerm)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d91a      	bls.n	8005d06 <StateMachineDebugAccessorySource+0xbe>
        {
            port->CCPin = port->Registers.Switches.MEAS_CC1 ? CC1 :
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005cd6:	f003 0304 	and.w	r3, r3, #4
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d108      	bne.n	8005cf2 <StateMachineDebugAccessorySource+0xaa>
                         (port->Registers.Switches.MEAS_CC2 ? CC2 : CCNone);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005ce6:	089b      	lsrs	r3, r3, #2
 8005ce8:	b2db      	uxtb	r3, r3
            port->CCPin = port->Registers.Switches.MEAS_CC1 ? CC1 :
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	e000      	b.n	8005cf4 <StateMachineDebugAccessorySource+0xac>
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

            USBPDEnable(port, TRUE, SOURCE);
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fa ff2d 	bl	8000b5e <USBPDEnable>
 8005d04:	e024      	b.n	8005d50 <StateMachineDebugAccessorySource+0x108>
        }
        else if (port->VCONNTerm > port->CCTermPDDebounce)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d91c      	bls.n	8005d50 <StateMachineDebugAccessorySource+0x108>
        {
            ToggleMeasure(port);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fa87 	bl	800622a <ToggleMeasure>
            port->CCPin = port->Registers.Switches.MEAS_CC1 ? CC1 :
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d108      	bne.n	8005d3e <StateMachineDebugAccessorySource+0xf6>
                         (port->Registers.Switches.MEAS_CC2 ? CC2 : CCNone);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005d32:	089b      	lsrs	r3, r3, #2
 8005d34:	b2db      	uxtb	r3, r3
            port->CCPin = port->Registers.Switches.MEAS_CC1 ? CC1 :
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	e000      	b.n	8005d40 <StateMachineDebugAccessorySource+0xf8>
 8005d3e:	2201      	movs	r2, #1
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

            USBPDEnable(port, TRUE, SOURCE);
 8005d46:	2201      	movs	r2, #1
 8005d48:	2101      	movs	r1, #1
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7fa ff07 	bl	8000b5e <USBPDEnable>
        }
    }
}
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <SetStateErrorRecovery>:

    clearState(port);
}

void SetStateErrorRecovery(Port_t *port)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b082      	sub	sp, #8
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
    port->TCIdle = TRUE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    SetTypeCState(port, ErrorRecovery);
 8005d66:	2101      	movs	r1, #1
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7ff fa02 	bl	8005172 <SetTypeCState>
    TimerStart(&port->StateTimer, tErrorRecovery);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8005d74:	f247 5130 	movw	r1, #30000	; 0x7530
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f001 f899 	bl	8006eb0 <TimerStart>

    clearState(port);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fe1e 	bl	80069c0 <clearState>
}
 8005d84:	bf00      	nop
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <SetStateUnattached>:

void SetStateUnattached(Port_t *port)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
    port->TCIdle = TRUE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    SetTypeCState(port, Unattached);
 8005d9c:	2102      	movs	r1, #2
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff f9e7 	bl	8005172 <SetTypeCState>

    clearState(port);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fe0b 	bl	80069c0 <clearState>

    port->Registers.Control.TOGGLE = 0;
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8005db0:	f36f 0300 	bfc	r3, #0, #1
 8005db4:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
    DeviceWrite(port->I2cAddr, regControl2, 1,&port->Registers.Control.byte[2]);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	3332      	adds	r3, #50	; 0x32
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	2108      	movs	r1, #8
 8005dc6:	f001 f839 	bl	8006e3c <DeviceWrite>

    port->Registers.Measure.MEAS_VBUS = 0;
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005dd0:	f36f 1386 	bfc	r3, #6, #1
 8005dd4:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
    DeviceWrite(port->I2cAddr, regMeasure, 1, &port->Registers.Measure.byte);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	332c      	adds	r3, #44	; 0x2c
 8005de2:	2201      	movs	r2, #1
 8005de4:	2104      	movs	r1, #4
 8005de6:	f001 f829 	bl	8006e3c <DeviceWrite>

    port->Registers.MaskAdv.M_TOGDONE = 0;
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8005df0:	f36f 1386 	bfc	r3, #6, #1
 8005df4:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
    DeviceWrite(port->I2cAddr, regMaska, 1, &port->Registers.MaskAdv.byte[0]);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3338      	adds	r3, #56	; 0x38
 8005e02:	2201      	movs	r2, #1
 8005e04:	210e      	movs	r1, #14
 8005e06:	f001 f819 	bl	8006e3c <DeviceWrite>

    /* Host current must be set to default for Toggle Functionality */
    if (port->Registers.Control.HOST_CUR != 0x1)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e10:	f003 030c 	and.w	r3, r3, #12
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d010      	beq.n	8005e3c <SetStateUnattached+0xb0>
    {
        port->Registers.Control.HOST_CUR = 0x1;
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005e20:	2101      	movs	r1, #1
 8005e22:	f361 0383 	bfi	r3, r1, #2, #2
 8005e26:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        DeviceWrite(port->I2cAddr, regControl0, 1,
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3330      	adds	r3, #48	; 0x30
 8005e34:	2201      	movs	r2, #1
 8005e36:	2106      	movs	r1, #6
 8005e38:	f001 f800 	bl	8006e3c <DeviceWrite>
                    &port->Registers.Control.byte[0]);
    }

    if (port->PortConfig.PortType == USBTypeC_DRP)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	791b      	ldrb	r3, [r3, #4]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d108      	bne.n	8005e56 <SetStateUnattached+0xca>
    {
        /* DRP - Configure Rp/Rd toggling */
        port->Registers.Control.MODE = 0x1;
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	f361 0342 	bfi	r3, r1, #1, #2
 8005e50:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
 8005e54:	e013      	b.n	8005e7e <SetStateUnattached+0xf2>
    {
        /* Sink + Acc - Configure Rp/Rd toggling */
        port->Registers.Control.MODE = 0x1;
    }
#endif /* FSC_HAVE_ACCMODE */
    else if (port->PortConfig.PortType == USBTypeC_Source)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	791b      	ldrb	r3, [r3, #4]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d107      	bne.n	8005e6e <SetStateUnattached+0xe2>
    {
        /* Source - Look for Rd */
        port->Registers.Control.MODE = 0x3;
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8005e64:	f043 0306 	orr.w	r3, r3, #6
 8005e68:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
 8005e6c:	e007      	b.n	8005e7e <SetStateUnattached+0xf2>
    }
    else
    {
        /* Sink - Look for Rp */
        port->Registers.Control.MODE = 0x2;
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8005e74:	2102      	movs	r1, #2
 8005e76:	f361 0342 	bfi	r3, r1, #1, #2
 8005e7a:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
    }

    /* Delay before re-enabling toggle */
    platform_delay_10us(25);
 8005e7e:	2019      	movs	r0, #25
 8005e80:	f7fa fcce 	bl	8000820 <platform_delay_10us>
    port->Registers.Control.TOGGLE = 1;
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8005e8a:	f043 0301 	orr.w	r3, r3, #1
 8005e8e:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
    DeviceWrite(port->I2cAddr, regControl0, 3,&port->Registers.Control.byte[0]);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3330      	adds	r3, #48	; 0x30
 8005e9c:	2203      	movs	r2, #3
 8005e9e:	2106      	movs	r1, #6
 8005ea0:	f000 ffcc 	bl	8006e3c <DeviceWrite>

    TimerDisable(&port->StateTimer);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f001 f81b 	bl	8006ee6 <TimerDisable>

    /* Wait to clear the connect loop counter till detached for > ~100ms. */
    TimerStart(&port->LoopCountTimer, tLoopReset);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005eb6:	4904      	ldr	r1, [pc, #16]	; (8005ec8 <SetStateUnattached+0x13c>)
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 fff9 	bl	8006eb0 <TimerStart>
}
 8005ebe:	bf00      	nop
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	000186a0 	.word	0x000186a0

08005ecc <SetStateAttachWaitSource>:
}
#endif /* FSC_HAVE_SNK */

#ifdef FSC_HAVE_SRC
void SetStateAttachWaitSource(Port_t *port)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
    port->TCIdle = TRUE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    SetTypeCState(port, AttachWaitSource);
 8005edc:	2105      	movs	r1, #5
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7ff f947 	bl	8005172 <SetTypeCState>

    /* Swap toggle state machine current if looping */
    if (port->loopCounter++ > MAX_CABLE_LOOP)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	b2d1      	uxtb	r1, r2
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
 8005ef4:	2b14      	cmp	r3, #20
 8005ef6:	d903      	bls.n	8005f00 <SetStateAttachWaitSource+0x34>
    {
        SetStateIllegalCable(port);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fdf2 	bl	8006ae2 <SetStateIllegalCable>
        return;
 8005efe:	e055      	b.n	8005fac <SetStateAttachWaitSource+0xe0>
    }

    platform_set_vbus_lvl_enable(port->PortID, VBUS_LVL_ALL, FALSE, FALSE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 8005f06:	2300      	movs	r3, #0
 8005f08:	2200      	movs	r2, #0
 8005f0a:	2102      	movs	r1, #2
 8005f0c:	f7fa fb8e 	bl	800062c <platform_set_vbus_lvl_enable>
    /* Disabling the toggle bit here may cause brief pulldowns (they are the
     * default), so call setStateSource first to set pullups,
     * then disable the toggle bit, then re-run DetectCCPinSource to make sure
     * we have the correct pin selected.
     */
    setStateSource(port, FALSE);
 8005f10:	2100      	movs	r1, #0
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fcbc 	bl	8006890 <setStateSource>

    /* To help prevent detection of a non-compliant cable, briefly set the
     * advertised current to 3A here.  It will be reset after tAttachWaitAdv
     */
    if (port->Registers.Control.HOST_CUR != 0x3)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f1e:	f003 030c 	and.w	r3, r3, #12
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b0c      	cmp	r3, #12
 8005f26:	d00f      	beq.n	8005f48 <SetStateAttachWaitSource+0x7c>
    {
        port->Registers.Control.HOST_CUR = 0x3;
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005f2e:	f043 030c 	orr.w	r3, r3, #12
 8005f32:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        DeviceWrite(port->I2cAddr, regControl0, 1,
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3330      	adds	r3, #48	; 0x30
 8005f40:	2201      	movs	r2, #1
 8005f42:	2106      	movs	r1, #6
 8005f44:	f000 ff7a 	bl	8006e3c <DeviceWrite>
                    &port->Registers.Control.byte[0]);
    }
    updateSourceMDACHigh(port);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f8e6 	bl	800611a <updateSourceMDACHigh>

    /* Disable toggle */
    port->Registers.Control.TOGGLE = 0;
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8005f54:	f36f 0300 	bfc	r3, #0, #1
 8005f58:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
    DeviceWrite(port->I2cAddr, regControl2, 1,&port->Registers.Control.byte[2]);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3332      	adds	r3, #50	; 0x32
 8005f66:	2201      	movs	r2, #1
 8005f68:	2108      	movs	r1, #8
 8005f6a:	f000 ff67 	bl	8006e3c <DeviceWrite>

    /* Recheck for termination / orientation */
    DetectCCPinSource(port);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fb32 	bl	80065d8 <DetectCCPinSource>
    setStateSource(port, FALSE);
 8005f74:	2100      	movs	r1, #0
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fc8a 	bl	8006890 <setStateSource>

    /* Enable interrupts */
    port->Registers.Mask.M_COMP_CHNG = 0;
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8005f82:	f36f 1345 	bfc	r3, #5, #1
 8005f86:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    DeviceWrite(port->I2cAddr, regMask, 1, &port->Registers.Mask.byte);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3334      	adds	r3, #52	; 0x34
 8005f94:	2201      	movs	r2, #1
 8005f96:	210a      	movs	r1, #10
 8005f98:	f000 ff50 	bl	8006e3c <DeviceWrite>

    /* After a delay, switch to the appropriate advertisement pullup */
    TimerStart(&port->StateTimer, tAttachWaitAdv);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8005fa2:	f644 6120 	movw	r1, #20000	; 0x4e20
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 ff82 	bl	8006eb0 <TimerStart>
}
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <SetStateAttachedSource>:
}
#endif /* FSC_HAVE_ACCMODE */

#ifdef FSC_HAVE_SRC
void SetStateAttachedSource(Port_t *port)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
    port->TCIdle = TRUE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    SetTypeCState(port, AttachedSource);
 8005fc4:	2106      	movs	r1, #6
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff f8d3 	bl	8005172 <SetTypeCState>

    setStateSource(port, TRUE);
 8005fcc:	2101      	movs	r1, #1
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fc5e 	bl	8006890 <setStateSource>

    /* Enable 5V VBus */
    platform_set_vbus_lvl_enable(port->PortID, VBUS_LVL_5V, TRUE, TRUE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 8005fda:	2301      	movs	r3, #1
 8005fdc:	2201      	movs	r2, #1
 8005fde:	2100      	movs	r1, #0
 8005fe0:	f7fa fb24 	bl	800062c <platform_set_vbus_lvl_enable>

    notify_observers((port->CCPin == CC1) ? CC1_ORIENT : CC2_ORIENT,
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d101      	bne.n	8005ff2 <SetStateAttachedSource+0x3e>
 8005fee:	2001      	movs	r0, #1
 8005ff0:	e000      	b.n	8005ff4 <SetStateAttachedSource+0x40>
 8005ff2:	2002      	movs	r0, #2
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	f001 fb21 	bl	8007644 <notify_observers>
                     port->I2cAddr, 0);

    USBPDEnable(port, TRUE, SOURCE);
 8006002:	2201      	movs	r2, #1
 8006004:	2101      	movs	r1, #1
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7fa fda9 	bl	8000b5e <USBPDEnable>

    /* Start delay to check for illegal cable looping */
    TimerStart(&port->StateTimer, tIllegalCable);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8006012:	4904      	ldr	r1, [pc, #16]	; (8006024 <SetStateAttachedSource+0x70>)
 8006014:	4618      	mov	r0, r3
 8006016:	f000 ff4b 	bl	8006eb0 <TimerStart>
}
 800601a:	bf00      	nop
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	0007a120 	.word	0x0007a120

08006028 <SetStateDebugAccessorySource>:
}
#endif /* FSC_HAVE_DRP */

#ifdef FSC_HAVE_SRC
void SetStateDebugAccessorySource(Port_t *port)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
    port->Registers.Mask.M_COMP_CHNG = 0;
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8006036:	f36f 1345 	bfc	r3, #5, #1
 800603a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    DeviceWrite(port->I2cAddr, regMask, 1, &port->Registers.Mask.byte);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3334      	adds	r3, #52	; 0x34
 8006048:	2201      	movs	r2, #1
 800604a:	210a      	movs	r1, #10
 800604c:	f000 fef6 	bl	8006e3c <DeviceWrite>
    port->TCIdle = FALSE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    port->loopCounter = 0;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    platform_set_vbus_lvl_enable(port->PortID, VBUS_LVL_5V, TRUE, TRUE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 8006066:	2301      	movs	r3, #1
 8006068:	2201      	movs	r2, #1
 800606a:	2100      	movs	r1, #0
 800606c:	f7fa fade 	bl	800062c <platform_set_vbus_lvl_enable>
    SetTypeCState(port, DebugAccessorySource);
 8006070:	210c      	movs	r1, #12
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff f87d 	bl	8005172 <SetTypeCState>

    setStateSource(port, FALSE);
 8006078:	2100      	movs	r1, #0
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fc08 	bl	8006890 <setStateSource>

    TimerStart(&port->StateTimer, tOrientedDebug);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8006086:	4904      	ldr	r1, [pc, #16]	; (8006098 <SetStateDebugAccessorySource+0x70>)
 8006088:	4618      	mov	r0, r3
 800608a:	f000 ff11 	bl	8006eb0 <TimerStart>
}
 800608e:	bf00      	nop
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	000186a0 	.word	0x000186a0

0800609c <updateSourceCurrent>:
}
#endif /* FSC_HAVE_DRP */

/* Type C Support Routines */
void updateSourceCurrent(Port_t *port)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
    switch (port->SourceCurrent)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d018      	beq.n	80060e0 <updateSourceCurrent+0x44>
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	dc1e      	bgt.n	80060f0 <updateSourceCurrent+0x54>
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d002      	beq.n	80060bc <updateSourceCurrent+0x20>
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d009      	beq.n	80060ce <updateSourceCurrent+0x32>
 80060ba:	e019      	b.n	80060f0 <updateSourceCurrent+0x54>
    {
    case utccDefault:
        /* Set the host current to reflect the default USB power */
        port->Registers.Control.HOST_CUR = 0x1;
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80060c2:	2101      	movs	r1, #1
 80060c4:	f361 0383 	bfi	r3, r1, #2, #2
 80060c8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        break;
 80060cc:	e018      	b.n	8006100 <updateSourceCurrent+0x64>
    case utcc1p5A:
        /* Set the host current to reflect 1.5A */
        port->Registers.Control.HOST_CUR = 0x2;
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80060d4:	2102      	movs	r1, #2
 80060d6:	f361 0383 	bfi	r3, r1, #2, #2
 80060da:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        break;
 80060de:	e00f      	b.n	8006100 <updateSourceCurrent+0x64>
    case utcc3p0A:
        /* Set the host current to reflect 3.0A */
        port->Registers.Control.HOST_CUR = 0x3;
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80060e6:	f043 030c 	orr.w	r3, r3, #12
 80060ea:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        break;
 80060ee:	e007      	b.n	8006100 <updateSourceCurrent+0x64>
    default:
        /* This assumes that there is no current being advertised */
        /* Set the host current to disabled */
        port->Registers.Control.HOST_CUR = 0x0;
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80060f6:	f36f 0383 	bfc	r3, #2, #2
 80060fa:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        break;
 80060fe:	bf00      	nop
    }
    DeviceWrite(port->I2cAddr, regControl0, 1,
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	3330      	adds	r3, #48	; 0x30
 800610a:	2201      	movs	r2, #1
 800610c:	2106      	movs	r1, #6
 800610e:	f000 fe95 	bl	8006e3c <DeviceWrite>
                &port->Registers.Control.byte[0]);
}
 8006112:	bf00      	nop
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <updateSourceMDACHigh>:

void updateSourceMDACHigh(Port_t *port)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
    switch (port->Registers.Control.HOST_CUR)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006128:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b03      	cmp	r3, #3
 8006130:	d018      	beq.n	8006164 <updateSourceMDACHigh+0x4a>
 8006132:	2b03      	cmp	r3, #3
 8006134:	dc1f      	bgt.n	8006176 <updateSourceMDACHigh+0x5c>
 8006136:	2b01      	cmp	r3, #1
 8006138:	d002      	beq.n	8006140 <updateSourceMDACHigh+0x26>
 800613a:	2b02      	cmp	r3, #2
 800613c:	d009      	beq.n	8006152 <updateSourceMDACHigh+0x38>
 800613e:	e01a      	b.n	8006176 <updateSourceMDACHigh+0x5c>
    {
    case 0x1:
        /* Set up DAC threshold to 1.6V (default USB current advertisement) */
        port->Registers.Measure.MDAC = MDAC_1P596V;
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006146:	2125      	movs	r1, #37	; 0x25
 8006148:	f361 0305 	bfi	r3, r1, #0, #6
 800614c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
        break;
 8006150:	e01a      	b.n	8006188 <updateSourceMDACHigh+0x6e>
    case 0x2:
        /* Set up DAC threshold to 1.6V */
        port->Registers.Measure.MDAC = MDAC_1P596V;
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006158:	2125      	movs	r1, #37	; 0x25
 800615a:	f361 0305 	bfi	r3, r1, #0, #6
 800615e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
        break;
 8006162:	e011      	b.n	8006188 <updateSourceMDACHigh+0x6e>
    case 0x3:
        /* Set up DAC threshold to 2.6V */
        port->Registers.Measure.MDAC = MDAC_2P604V;
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800616a:	213d      	movs	r1, #61	; 0x3d
 800616c:	f361 0305 	bfi	r3, r1, #0, #6
 8006170:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
        break;
 8006174:	e008      	b.n	8006188 <updateSourceMDACHigh+0x6e>
    default:
        /* This assumes that there is no current being advertised */
        /* Set up DAC threshold to 1.6V (default USB current advertisement) */
        port->Registers.Measure.MDAC = MDAC_1P596V;
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800617c:	2125      	movs	r1, #37	; 0x25
 800617e:	f361 0305 	bfi	r3, r1, #0, #6
 8006182:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
        break;
 8006186:	bf00      	nop
    }
    DeviceWrite(port->I2cAddr, regMeasure, 1, &port->Registers.Measure.byte);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	332c      	adds	r3, #44	; 0x2c
 8006192:	2201      	movs	r2, #1
 8006194:	2104      	movs	r1, #4
 8006196:	f000 fe51 	bl	8006e3c <DeviceWrite>
}
 800619a:	bf00      	nop
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <updateSourceMDACLow>:

void updateSourceMDACLow(Port_t *port)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b082      	sub	sp, #8
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
    switch (port->Registers.Control.HOST_CUR)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80061b0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b03      	cmp	r3, #3
 80061b8:	d018      	beq.n	80061ec <updateSourceMDACLow+0x4a>
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	dc1f      	bgt.n	80061fe <updateSourceMDACLow+0x5c>
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d002      	beq.n	80061c8 <updateSourceMDACLow+0x26>
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d009      	beq.n	80061da <updateSourceMDACLow+0x38>
 80061c6:	e01a      	b.n	80061fe <updateSourceMDACLow+0x5c>
    {
    case 0x1:
        /* Set up DAC threshold to 1.6V (default USB current advertisement) */
        port->Registers.Measure.MDAC = MDAC_0P210V;
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80061ce:	2104      	movs	r1, #4
 80061d0:	f361 0305 	bfi	r3, r1, #0, #6
 80061d4:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
        break;
 80061d8:	e01a      	b.n	8006210 <updateSourceMDACLow+0x6e>
    case 0x2:
        /* Set up DAC threshold to 1.6V */
        port->Registers.Measure.MDAC = MDAC_0P420V;
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80061e0:	2109      	movs	r1, #9
 80061e2:	f361 0305 	bfi	r3, r1, #0, #6
 80061e6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
        break;
 80061ea:	e011      	b.n	8006210 <updateSourceMDACLow+0x6e>
    case 0x3:
        /* Set up DAC threshold to 2.6V */
        port->Registers.Measure.MDAC = MDAC_0P798V;
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80061f2:	2112      	movs	r1, #18
 80061f4:	f361 0305 	bfi	r3, r1, #0, #6
 80061f8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
        break;
 80061fc:	e008      	b.n	8006210 <updateSourceMDACLow+0x6e>
    default:
        /* This assumes that there is no current being advertised */
        /* Set up DAC threshold to 1.6V (default USB current advertisement) */
        port->Registers.Measure.MDAC = MDAC_1P596V;
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006204:	2125      	movs	r1, #37	; 0x25
 8006206:	f361 0305 	bfi	r3, r1, #0, #6
 800620a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
        break;
 800620e:	bf00      	nop
    }
    DeviceWrite(port->I2cAddr, regMeasure, 1, &port->Registers.Measure.byte);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	332c      	adds	r3, #44	; 0x2c
 800621a:	2201      	movs	r2, #1
 800621c:	2104      	movs	r1, #4
 800621e:	f000 fe0d 	bl	8006e3c <DeviceWrite>
}
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <ToggleMeasure>:

void ToggleMeasure(Port_t *port)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b082      	sub	sp, #8
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
    /* Toggle measure block between CC pins */
    if (port->Registers.Switches.MEAS_CC2 == 1)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006238:	f003 0308 	and.w	r3, r3, #8
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00e      	beq.n	8006260 <ToggleMeasure+0x36>
    {
        port->Registers.Switches.MEAS_CC1 = 1;
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8006248:	f043 0304 	orr.w	r3, r3, #4
 800624c:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
        port->Registers.Switches.MEAS_CC2 = 0;
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8006256:	f36f 03c3 	bfc	r3, #3, #1
 800625a:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
 800625e:	e015      	b.n	800628c <ToggleMeasure+0x62>
    }
    else if (port->Registers.Switches.MEAS_CC1 == 1)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006266:	f003 0304 	and.w	r3, r3, #4
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00d      	beq.n	800628c <ToggleMeasure+0x62>
    {
        port->Registers.Switches.MEAS_CC1 = 0;
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8006276:	f36f 0382 	bfc	r3, #2, #1
 800627a:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
        port->Registers.Switches.MEAS_CC2 = 1;
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8006284:	f043 0308 	orr.w	r3, r3, #8
 8006288:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
    }

    DeviceWrite(port->I2cAddr, regSwitches0, 1,
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	332a      	adds	r3, #42	; 0x2a
 8006296:	2201      	movs	r2, #1
 8006298:	2102      	movs	r1, #2
 800629a:	f000 fdcf 	bl	8006e3c <DeviceWrite>
                &port->Registers.Switches.byte[0]);
}
 800629e:	bf00      	nop
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <DecodeCCTermination>:

CCTermType DecodeCCTermination(Port_t *port)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b082      	sub	sp, #8
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
    switch (port->sourceOrSink)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d104      	bne.n	80062c2 <DecodeCCTermination+0x1c>
    {
#if (defined(FSC_HAVE_SRC) || \
     (defined(FSC_HAVE_SNK) && defined(FSC_HAVE_ACCMODE)))
    case SOURCE:
        return DecodeCCTerminationSource(port);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f807 	bl	80062cc <DecodeCCTerminationSource>
 80062be:	4603      	mov	r3, r0
 80062c0:	e000      	b.n	80062c4 <DecodeCCTermination+0x1e>
#ifdef FSC_HAVE_SNK
    case SINK:
        return DecodeCCTerminationSink(port);
#endif /* FSC_HAVE_SNK */
    default:
        return CCTypeUndefined;
 80062c2:	2305      	movs	r3, #5
    }
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <DecodeCCTerminationSource>:

#if (defined(FSC_HAVE_SRC) || \
     (defined(FSC_HAVE_SNK) && defined(FSC_HAVE_ACCMODE)))
CCTermType DecodeCCTerminationSource(Port_t *port)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
    CCTermType Termination = CCTypeUndefined;
 80062d4:	2305      	movs	r3, #5
 80062d6:	73fb      	strb	r3, [r7, #15]
    regMeasure_t saved_measure = port->Registers.Measure;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80062de:	733b      	strb	r3, [r7, #12]

    /* Make sure MEAS_VBUS is cleared */
    if (port->Registers.Measure.MEAS_VBUS != 0)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80062e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00f      	beq.n	8006310 <DecodeCCTerminationSource+0x44>
    {
        port->Registers.Measure.MEAS_VBUS = 0;
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80062f6:	f36f 1386 	bfc	r3, #6, #1
 80062fa:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
        DeviceWrite(port->I2cAddr, regMeasure, 1,&port->Registers.Measure.byte);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	332c      	adds	r3, #44	; 0x2c
 8006308:	2201      	movs	r2, #1
 800630a:	2104      	movs	r1, #4
 800630c:	f000 fd96 	bl	8006e3c <DeviceWrite>
    }

    /* Assume we are called with MDAC high. */
    /* Delay to allow measurement to settle */
    platform_delay_10us(25);
 8006310:	2019      	movs	r0, #25
 8006312:	f7fa fa85 	bl	8000820 <platform_delay_10us>
    DeviceRead(port->I2cAddr, regStatus0, 1, &port->Registers.Status.byte[4]);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3340      	adds	r3, #64	; 0x40
 8006320:	2201      	movs	r2, #1
 8006322:	2140      	movs	r1, #64	; 0x40
 8006324:	f000 fda7 	bl	8006e76 <DeviceRead>

    if (port->Registers.Status.COMPARATOR == 1)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800632e:	f003 0320 	and.w	r3, r3, #32
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	d003      	beq.n	8006340 <DecodeCCTerminationSource+0x74>
    {
        /* Open voltage */
        Termination = CCTypeOpen;
 8006338:	2300      	movs	r3, #0
 800633a:	73fb      	strb	r3, [r7, #15]
        return Termination;
 800633c:	7bfb      	ldrb	r3, [r7, #15]
 800633e:	e075      	b.n	800642c <DecodeCCTerminationSource+0x160>
    }
    else if ((port->Registers.Switches.MEAS_CC1 && (port->CCPin == CC1)) ||
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006346:	f003 0304 	and.w	r3, r3, #4
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d004      	beq.n	800635a <DecodeCCTerminationSource+0x8e>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006356:	2b01      	cmp	r3, #1
 8006358:	d00c      	beq.n	8006374 <DecodeCCTerminationSource+0xa8>
             (port->Registers.Switches.MEAS_CC2 && (port->CCPin == CC2)))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006360:	f003 0308 	and.w	r3, r3, #8
 8006364:	b2db      	uxtb	r3, r3
    else if ((port->Registers.Switches.MEAS_CC1 && (port->CCPin == CC1)) ||
 8006366:	2b00      	cmp	r3, #0
 8006368:	d01f      	beq.n	80063aa <DecodeCCTerminationSource+0xde>
             (port->Registers.Switches.MEAS_CC2 && (port->CCPin == CC2)))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006370:	2b02      	cmp	r3, #2
 8006372:	d11a      	bne.n	80063aa <DecodeCCTerminationSource+0xde>
    {
        /* Optimization determines whether the pin is Open or Rd.  Ra level
         * is checked elsewhere.  This prevents additional changes to the MDAC
         * level which causes a continuous cycle of additional interrupts.
         */
        switch (port->Registers.Control.HOST_CUR)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800637a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b03      	cmp	r3, #3
 8006382:	d00c      	beq.n	800639e <DecodeCCTerminationSource+0xd2>
 8006384:	2b03      	cmp	r3, #3
 8006386:	dc0d      	bgt.n	80063a4 <DecodeCCTerminationSource+0xd8>
 8006388:	2b01      	cmp	r3, #1
 800638a:	d002      	beq.n	8006392 <DecodeCCTerminationSource+0xc6>
 800638c:	2b02      	cmp	r3, #2
 800638e:	d003      	beq.n	8006398 <DecodeCCTerminationSource+0xcc>
            break;
        case 0x3:
            Termination = CCTypeRd3p0;
            break;
        case 0x0:
            break;
 8006390:	e008      	b.n	80063a4 <DecodeCCTerminationSource+0xd8>
            Termination = CCTypeRdUSB;
 8006392:	2302      	movs	r3, #2
 8006394:	73fb      	strb	r3, [r7, #15]
            break;
 8006396:	e006      	b.n	80063a6 <DecodeCCTerminationSource+0xda>
            Termination = CCTypeRd1p5;
 8006398:	2303      	movs	r3, #3
 800639a:	73fb      	strb	r3, [r7, #15]
            break;
 800639c:	e003      	b.n	80063a6 <DecodeCCTerminationSource+0xda>
            Termination = CCTypeRd3p0;
 800639e:	2304      	movs	r3, #4
 80063a0:	73fb      	strb	r3, [r7, #15]
            break;
 80063a2:	e000      	b.n	80063a6 <DecodeCCTerminationSource+0xda>
            break;
 80063a4:	bf00      	nop
        }

        return Termination;
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
 80063a8:	e040      	b.n	800642c <DecodeCCTerminationSource+0x160>
    }

    /* Lower than open voltage - Rd or Ra */
    updateSourceMDACLow(port);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7ff fef9 	bl	80061a2 <updateSourceMDACLow>

    /* Delay to allow measurement to settle */
    platform_delay_10us(25);
 80063b0:	2019      	movs	r0, #25
 80063b2:	f7fa fa35 	bl	8000820 <platform_delay_10us>
    DeviceRead(port->I2cAddr, regStatus0, 1,
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	3340      	adds	r3, #64	; 0x40
 80063c0:	2201      	movs	r2, #1
 80063c2:	2140      	movs	r1, #64	; 0x40
 80063c4:	f000 fd57 	bl	8006e76 <DeviceRead>
               &port->Registers.Status.byte[4]);

    if (port->Registers.Status.COMPARATOR == 0)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d102      	bne.n	80063de <DecodeCCTerminationSource+0x112>
    {
        /* Lower than Ra threshold is Ra */
        Termination = CCTypeRa;
 80063d8:	2301      	movs	r3, #1
 80063da:	73fb      	strb	r3, [r7, #15]
 80063dc:	e018      	b.n	8006410 <DecodeCCTerminationSource+0x144>
    }
    else
    {
        /* Higher than Ra threshold is Rd */
        switch (port->Registers.Control.HOST_CUR)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063e4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d00c      	beq.n	8006408 <DecodeCCTerminationSource+0x13c>
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	dc0d      	bgt.n	800640e <DecodeCCTerminationSource+0x142>
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d002      	beq.n	80063fc <DecodeCCTerminationSource+0x130>
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d003      	beq.n	8006402 <DecodeCCTerminationSource+0x136>
            break;
        case 0x3:
            Termination = CCTypeRd3p0;
            break;
        case 0x0:
            break;
 80063fa:	e008      	b.n	800640e <DecodeCCTerminationSource+0x142>
            Termination = CCTypeRdUSB;
 80063fc:	2302      	movs	r3, #2
 80063fe:	73fb      	strb	r3, [r7, #15]
            break;
 8006400:	e006      	b.n	8006410 <DecodeCCTerminationSource+0x144>
            Termination = CCTypeRd1p5;
 8006402:	2303      	movs	r3, #3
 8006404:	73fb      	strb	r3, [r7, #15]
            break;
 8006406:	e003      	b.n	8006410 <DecodeCCTerminationSource+0x144>
            Termination = CCTypeRd3p0;
 8006408:	2304      	movs	r3, #4
 800640a:	73fb      	strb	r3, [r7, #15]
            break;
 800640c:	e000      	b.n	8006410 <DecodeCCTerminationSource+0x144>
            break;
 800640e:	bf00      	nop
        }
    }

    /* Restore Measure register */
    port->Registers.Measure = saved_measure;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	7b3a      	ldrb	r2, [r7, #12]
 8006414:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    DeviceWrite(port->I2cAddr, regMeasure, 1, &port->Registers.Measure.byte);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	332c      	adds	r3, #44	; 0x2c
 8006422:	2201      	movs	r2, #1
 8006424:	2104      	movs	r1, #4
 8006426:	f000 fd09 	bl	8006e3c <DeviceWrite>

    return Termination;
 800642a:	7bfb      	ldrb	r3, [r7, #15]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <IsCCPinRa>:

FSC_BOOL IsCCPinRa(Port_t *port)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
    FSC_BOOL isRa = FALSE;
 800643c:	2300      	movs	r3, #0
 800643e:	73fb      	strb	r3, [r7, #15]
    regMeasure_t saved_measure = port->Registers.Measure;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006446:	733b      	strb	r3, [r7, #12]

    /* Make sure MEAS_VBUS is cleared */
    port->Registers.Measure.MEAS_VBUS = 0;
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800644e:	f36f 1386 	bfc	r3, #6, #1
 8006452:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
    DeviceWrite(port->I2cAddr, regMeasure, 1, &port->Registers.Measure.byte);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	332c      	adds	r3, #44	; 0x2c
 8006460:	2201      	movs	r2, #1
 8006462:	2104      	movs	r1, #4
 8006464:	f000 fcea 	bl	8006e3c <DeviceWrite>

    /* Lower than open voltage - Rd or Ra */
    updateSourceMDACLow(port);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7ff fe9a 	bl	80061a2 <updateSourceMDACLow>

    /* Delay to allow measurement to settle */
    platform_delay_10us(25);
 800646e:	2019      	movs	r0, #25
 8006470:	f7fa f9d6 	bl	8000820 <platform_delay_10us>
    DeviceRead(port->I2cAddr, regStatus0, 1, &port->Registers.Status.byte[4]);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	3340      	adds	r3, #64	; 0x40
 800647e:	2201      	movs	r2, #1
 8006480:	2140      	movs	r1, #64	; 0x40
 8006482:	f000 fcf8 	bl	8006e76 <DeviceRead>

    isRa = (port->Registers.Status.COMPARATOR == 0) ? TRUE : FALSE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800648c:	f003 0320 	and.w	r3, r3, #32
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	bf0c      	ite	eq
 8006496:	2301      	moveq	r3, #1
 8006498:	2300      	movne	r3, #0
 800649a:	b2db      	uxtb	r3, r3
 800649c:	73fb      	strb	r3, [r7, #15]

    /* Restore Measure register */
    port->Registers.Measure = saved_measure;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	7b3a      	ldrb	r2, [r7, #12]
 80064a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    DeviceWrite(port->I2cAddr, regMeasure, 1, &port->Registers.Measure.byte);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	332c      	adds	r3, #44	; 0x2c
 80064b0:	2201      	movs	r2, #1
 80064b2:	2104      	movs	r1, #4
 80064b4:	f000 fcc2 	bl	8006e3c <DeviceWrite>

    return isRa;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <UpdateCurrentAdvert>:
    }
}
#endif /* FSC_HAVE_SNK */

void UpdateCurrentAdvert(Port_t *port, USBTypeCCurrent Current)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b082      	sub	sp, #8
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	460b      	mov	r3, r1
 80064cc:	70fb      	strb	r3, [r7, #3]
    /* SourceCurrent value is of type USBTypeCCurrent */
    if (Current < utccInvalid)
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	d806      	bhi.n	80064e2 <UpdateCurrentAdvert+0x20>
    {
        port->SourceCurrent = Current;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	78fa      	ldrb	r2, [r7, #3]
 80064d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        updateSourceCurrent(port);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7ff fddd 	bl	800609c <updateSourceCurrent>
    }
}
 80064e2:	bf00      	nop
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <VbusVSafe0V>:

FSC_BOOL VbusVSafe0V(Port_t *port)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
    return TRUE;// Pankaj(!isVBUSOverVoltage(port, VBUS_MV_VSAFE0V)) ? TRUE : FALSE;
 80064f2:	2301      	movs	r3, #1
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bc80      	pop	{r7}
 80064fc:	4770      	bx	lr
	...

08006500 <isVBUSOverVoltage>:
{
    return isVBUSOverVoltage(port, VBUS_MV_VSAFE5V_L);
}

FSC_BOOL isVBUSOverVoltage(Port_t *port, FSC_U16 vbus_mv)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	807b      	strh	r3, [r7, #2]
#else
    regMeasure_t measure;

    FSC_U8 val;
    FSC_BOOL ret;
    FSC_BOOL mdacUpdated = FALSE;
 800650c:	2300      	movs	r3, #0
 800650e:	73fb      	strb	r3, [r7, #15]

    /* Setup for VBUS measurement */
    measure.byte = 0;
 8006510:	2300      	movs	r3, #0
 8006512:	733b      	strb	r3, [r7, #12]
    measure.MEAS_VBUS = 1;
 8006514:	7b3b      	ldrb	r3, [r7, #12]
 8006516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800651a:	733b      	strb	r3, [r7, #12]
    measure.MDAC = vbus_mv / MDAC_MV_LSB;
 800651c:	887b      	ldrh	r3, [r7, #2]
 800651e:	089b      	lsrs	r3, r3, #2
 8006520:	4a2c      	ldr	r2, [pc, #176]	; (80065d4 <isVBUSOverVoltage+0xd4>)
 8006522:	fba2 2303 	umull	r2, r3, r2, r3
 8006526:	095b      	lsrs	r3, r3, #5
 8006528:	b29b      	uxth	r3, r3
 800652a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800652e:	b2da      	uxtb	r2, r3
 8006530:	7b3b      	ldrb	r3, [r7, #12]
 8006532:	f362 0305 	bfi	r3, r2, #0, #6
 8006536:	733b      	strb	r3, [r7, #12]

    /* The actual value of MDAC is less by 1 */
    if (measure.MDAC > 0)
 8006538:	7b3b      	ldrb	r3, [r7, #12]
 800653a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00c      	beq.n	800655e <isVBUSOverVoltage+0x5e>
    {
        measure.MDAC -= 1;
 8006544:	7b3b      	ldrb	r3, [r7, #12]
 8006546:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800654a:	b2db      	uxtb	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	b2db      	uxtb	r3, r3
 8006550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006554:	b2da      	uxtb	r2, r3
 8006556:	7b3b      	ldrb	r3, [r7, #12]
 8006558:	f362 0305 	bfi	r3, r2, #0, #6
 800655c:	733b      	strb	r3, [r7, #12]
    }

    if (port->Registers.Measure.byte != measure.byte)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006564:	7b3b      	ldrb	r3, [r7, #12]
 8006566:	429a      	cmp	r2, r3
 8006568:	d00d      	beq.n	8006586 <isVBUSOverVoltage+0x86>
    {
        /* Update only if required */
        DeviceWrite(port->I2cAddr, regMeasure, 1, &measure.byte);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006570:	f107 030c 	add.w	r3, r7, #12
 8006574:	2201      	movs	r2, #1
 8006576:	2104      	movs	r1, #4
 8006578:	f000 fc60 	bl	8006e3c <DeviceWrite>
        mdacUpdated = TRUE;
 800657c:	2301      	movs	r3, #1
 800657e:	73fb      	strb	r3, [r7, #15]
        /* Delay to allow measurement to settle */
        platform_delay_10us(35);
 8006580:	2023      	movs	r0, #35	; 0x23
 8006582:	f7fa f94d 	bl	8000820 <platform_delay_10us>
    }

    DeviceRead(port->I2cAddr, regStatus0, 1, &val);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800658c:	f107 030b 	add.w	r3, r7, #11
 8006590:	2201      	movs	r2, #1
 8006592:	2140      	movs	r1, #64	; 0x40
 8006594:	f000 fc6f 	bl	8006e76 <DeviceRead>
    /* COMP = bit 5 of status0 (Device specific?) */
    val &= 0x20;
 8006598:	7afb      	ldrb	r3, [r7, #11]
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	72fb      	strb	r3, [r7, #11]

    /* Determine return value based on COMP */
    ret = (val) ? TRUE : FALSE;
 80065a2:	7afb      	ldrb	r3, [r7, #11]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	bf14      	ite	ne
 80065a8:	2301      	movne	r3, #1
 80065aa:	2300      	moveq	r3, #0
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	73bb      	strb	r3, [r7, #14]

    if (mdacUpdated == TRUE)
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d108      	bne.n	80065c8 <isVBUSOverVoltage+0xc8>
    {
        /* Restore register values */
        DeviceWrite(port->I2cAddr, regMeasure, 1, &port->Registers.Measure.byte);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	332c      	adds	r3, #44	; 0x2c
 80065c0:	2201      	movs	r2, #1
 80065c2:	2104      	movs	r1, #4
 80065c4:	f000 fc3a 	bl	8006e3c <DeviceWrite>
    }

    return TRUE;//Pankaj - fix to update register with CC* pins to zero
 80065c8:	2301      	movs	r3, #1
#endif /* PLATFORM_PIC32_ADC */
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	4e04e04f 	.word	0x4e04e04f

080065d8 <DetectCCPinSource>:

void DetectCCPinSource(Port_t *port)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
    CCTermType CCTerm;
    FSC_BOOL CC1IsRa = FALSE;
 80065e0:	2300      	movs	r3, #0
 80065e2:	73fb      	strb	r3, [r7, #15]

    if (port->Registers.DeviceID.VERSION_ID == VERSION_302A)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ea:	f023 030f 	bic.w	r3, r3, #15
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b80      	cmp	r3, #128	; 0x80
 80065f2:	d104      	bne.n	80065fe <DetectCCPinSource+0x26>
    {
        /* Enable CC1 pull-up and measure */
        port->Registers.Switches.byte[0] = 0x44;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2244      	movs	r2, #68	; 0x44
 80065f8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80065fc:	e003      	b.n	8006606 <DetectCCPinSource+0x2e>
    }
    else
    {
        /* Enable CC pull-ups and CC1 measure */
        port->Registers.Switches.byte[0] = 0xC4;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	22c4      	movs	r2, #196	; 0xc4
 8006602:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    }
    DeviceWrite(port->I2cAddr, regSwitches0, 1,
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	332a      	adds	r3, #42	; 0x2a
 8006610:	2201      	movs	r2, #1
 8006612:	2102      	movs	r1, #2
 8006614:	f000 fc12 	bl	8006e3c <DeviceWrite>
                &(port->Registers.Switches.byte[0]));

    CCTerm = DecodeCCTermination(port);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7ff fe44 	bl	80062a6 <DecodeCCTermination>
 800661e:	4603      	mov	r3, r0
 8006620:	73bb      	strb	r3, [r7, #14]

    if ((CCTerm >= CCTypeRdUSB) && (CCTerm < CCTypeUndefined))
 8006622:	7bbb      	ldrb	r3, [r7, #14]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d907      	bls.n	8006638 <DetectCCPinSource+0x60>
 8006628:	7bbb      	ldrb	r3, [r7, #14]
 800662a:	2b04      	cmp	r3, #4
 800662c:	d804      	bhi.n	8006638 <DetectCCPinSource+0x60>
    {
        port->CCPin = CC1;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        return;
 8006636:	e03c      	b.n	80066b2 <DetectCCPinSource+0xda>
    }
    else if (CCTerm == CCTypeRa)
 8006638:	7bbb      	ldrb	r3, [r7, #14]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d101      	bne.n	8006642 <DetectCCPinSource+0x6a>
    {
        CC1IsRa = TRUE;
 800663e:	2301      	movs	r3, #1
 8006640:	73fb      	strb	r3, [r7, #15]
    }

    if (port->Registers.DeviceID.VERSION_ID == VERSION_302A)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006648:	f023 030f 	bic.w	r3, r3, #15
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b80      	cmp	r3, #128	; 0x80
 8006650:	d104      	bne.n	800665c <DetectCCPinSource+0x84>
    {
        /* Enable CC2 pull-up and measure */
        port->Registers.Switches.byte[0] = 0x88;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2288      	movs	r2, #136	; 0x88
 8006656:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800665a:	e003      	b.n	8006664 <DetectCCPinSource+0x8c>
    }
    else
    {
        /* Enable CC pull-ups and CC2 measure */
        port->Registers.Switches.byte[0] = 0xC8;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	22c8      	movs	r2, #200	; 0xc8
 8006660:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    }

    DeviceWrite(port->I2cAddr, regSwitches0, 1,
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	332a      	adds	r3, #42	; 0x2a
 800666e:	2201      	movs	r2, #1
 8006670:	2102      	movs	r1, #2
 8006672:	f000 fbe3 	bl	8006e3c <DeviceWrite>
                &(port->Registers.Switches.byte[0]));

    CCTerm = DecodeCCTermination(port);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7ff fe15 	bl	80062a6 <DecodeCCTermination>
 800667c:	4603      	mov	r3, r0
 800667e:	73bb      	strb	r3, [r7, #14]

    if ((CCTerm >= CCTypeRdUSB) && (CCTerm < CCTypeUndefined))
 8006680:	7bbb      	ldrb	r3, [r7, #14]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d907      	bls.n	8006696 <DetectCCPinSource+0xbe>
 8006686:	7bbb      	ldrb	r3, [r7, #14]
 8006688:	2b04      	cmp	r3, #4
 800668a:	d804      	bhi.n	8006696 <DetectCCPinSource+0xbe>
    {

        port->CCPin = CC2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        return;
 8006694:	e00d      	b.n	80066b2 <DetectCCPinSource+0xda>
    }

    /* Only Ra found... on CC1 or CC2?
     * This supports correct dangling Ra cable behavior.
     */
    port->CCPin = CC1IsRa ? CC1 : (CCTerm == CCTypeRa) ? CC2 : CCNone;
 8006696:	7bfb      	ldrb	r3, [r7, #15]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d106      	bne.n	80066aa <DetectCCPinSource+0xd2>
 800669c:	7bbb      	ldrb	r3, [r7, #14]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d101      	bne.n	80066a6 <DetectCCPinSource+0xce>
 80066a2:	2302      	movs	r3, #2
 80066a4:	e002      	b.n	80066ac <DetectCCPinSource+0xd4>
 80066a6:	2300      	movs	r3, #0
 80066a8:	e000      	b.n	80066ac <DetectCCPinSource+0xd4>
 80066aa:	2301      	movs	r3, #1
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	f882 304e 	strb.w	r3, [r2, #78]	; 0x4e
}
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <resetDebounceVariables>:
        return;
    }
}

void resetDebounceVariables(Port_t *port)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
    port->CCTerm = CCTypeUndefined;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2205      	movs	r2, #5
 80066c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    port->CCTermCCDebounce = CCTypeUndefined;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2205      	movs	r2, #5
 80066cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    port->CCTermPDDebounce = CCTypeUndefined;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2205      	movs	r2, #5
 80066d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    port->CCTermPDDebouncePrevious = CCTypeUndefined;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2205      	movs	r2, #5
 80066dc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    port->VCONNTerm = CCTypeUndefined;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2205      	movs	r2, #5
 80066e4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bc80      	pop	{r7}
 80066f0:	4770      	bx	lr
	...

080066f4 <debounceCC>:
    return TRUE;
}
#endif /* FSC_DEBUG */

void debounceCC(Port_t *port)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
    /* The functionality here should work correctly using the Idle mode.
     * Will idling, a CC change or timer interrupt will
     * generate an appropriate update to the debounce state.
     */
    /* Grab the latest CC termination value */
    CCTermType CCTermCurrent = DecodeCCTermination(port);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7ff fdd2 	bl	80062a6 <DecodeCCTermination>
 8006702:	4603      	mov	r3, r0
 8006704:	73fb      	strb	r3, [r7, #15]

    /* While debouncing to connect as a Sink, only care about one value for Rp.
     * When in AttachedSink state, debounce for sink sub-state. */
    if (port->sourceOrSink == SINK && port->ConnState != AttachedSink &&
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10c      	bne.n	800672a <debounceCC+0x36>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006716:	2b04      	cmp	r3, #4
 8006718:	d007      	beq.n	800672a <debounceCC+0x36>
 800671a:	7bfb      	ldrb	r3, [r7, #15]
 800671c:	2b03      	cmp	r3, #3
 800671e:	d002      	beq.n	8006726 <debounceCC+0x32>
        (CCTermCurrent == CCTypeRd1p5 || CCTermCurrent == CCTypeRd3p0))
 8006720:	7bfb      	ldrb	r3, [r7, #15]
 8006722:	2b04      	cmp	r3, #4
 8006724:	d101      	bne.n	800672a <debounceCC+0x36>
    {
        CCTermCurrent = CCTypeRdUSB;
 8006726:	2302      	movs	r3, #2
 8006728:	73fb      	strb	r3, [r7, #15]
    }

    /* Check to see if the value has changed... */
    if (port->CCTerm != CCTermCurrent)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006730:	7bfa      	ldrb	r2, [r7, #15]
 8006732:	429a      	cmp	r2, r3
 8006734:	d00b      	beq.n	800674e <debounceCC+0x5a>
    {
        /* If it has, update the value */
        port->CCTerm = CCTermCurrent;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	7bfa      	ldrb	r2, [r7, #15]
 800673a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

        /* Restart the debounce timer (wait 10ms before detach) */
        TimerStart(&port->PDDebounceTimer, tPDDebounce);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8006744:	f643 2198 	movw	r1, #15000	; 0x3a98
 8006748:	4618      	mov	r0, r3
 800674a:	f000 fbb1 	bl	8006eb0 <TimerStart>
    }

    /* Check to see if our debounce timer has expired... */
    if (TimerExpired(&port->PDDebounceTimer))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8006754:	4618      	mov	r0, r3
 8006756:	f000 fbe6 	bl	8006f26 <TimerExpired>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00b      	beq.n	8006778 <debounceCC+0x84>
    {
        /* Update the CC debounced values */
        port->CCTermPDDebounce = port->CCTerm;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        TimerDisable(&port->PDDebounceTimer);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fbb7 	bl	8006ee6 <TimerDisable>
    }

    /* CC debounce */
    if (port->CCTermPDDebouncePrevious != port->CCTermPDDebounce)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006784:	429a      	cmp	r2, r3
 8006786:	d010      	beq.n	80067aa <debounceCC+0xb6>
    {
        /* If the PDDebounce values have changed */
        /* Update the previous value */
        port->CCTermPDDebouncePrevious = port->CCTermPDDebounce;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Reset the tCCDebounce timers */
        TimerStart(&port->CCDebounceTimer, tCCDebounce - tPDDebounce);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800679a:	4910      	ldr	r1, [pc, #64]	; (80067dc <debounceCC+0xe8>)
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fb87 	bl	8006eb0 <TimerStart>

        /* Set CC debounce values to undefined while it is being debounced */
        port->CCTermCCDebounce = CCTypeUndefined;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2205      	movs	r2, #5
 80067a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    }

    if (TimerExpired(&port->CCDebounceTimer))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 fbb8 	bl	8006f26 <TimerExpired>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00b      	beq.n	80067d4 <debounceCC+0xe0>
    {
        /* Update the CC debounced values */
        port->CCTermCCDebounce = port->CCTermPDDebouncePrevious;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        TimerDisable(&port->CCDebounceTimer);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 fb89 	bl	8006ee6 <TimerDisable>
    }
}
 80067d4:	bf00      	nop
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	00019a28 	.word	0x00019a28

080067e0 <updateVCONNSource>:

#if (defined(FSC_HAVE_SRC) || \
     (defined(FSC_HAVE_SNK) && defined(FSC_HAVE_ACCMODE)))
void updateVCONNSource(Port_t *port)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
    /* Assumes PUs have been set */

    /* Save current Switches */
    FSC_U8 saveRegister = port->Registers.Switches.byte[0];
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80067ee:	73fb      	strb	r3, [r7, #15]

    /* Toggle measure to VCONN */
    ToggleMeasure(port);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff fd1a 	bl	800622a <ToggleMeasure>

    /* Toggle PU if 302A */
    if (port->Registers.DeviceID.VERSION_ID == VERSION_302A)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067fc:	f023 030f 	bic.w	r3, r3, #15
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b80      	cmp	r3, #128	; 0x80
 8006804:	d12a      	bne.n	800685c <updateVCONNSource+0x7c>
    {
        if (port->CCPin == CC1)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800680c:	2b01      	cmp	r3, #1
 800680e:	d10e      	bne.n	800682e <updateVCONNSource+0x4e>
        {
            port->Registers.Switches.PU_EN1 = 0;
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8006816:	f36f 1386 	bfc	r3, #6, #1
 800681a:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            port->Registers.Switches.PU_EN2 = 1;
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8006824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006828:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
 800682c:	e00d      	b.n	800684a <updateVCONNSource+0x6a>
        }
        else
        {
            port->Registers.Switches.PU_EN1 = 1;
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8006834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006838:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            port->Registers.Switches.PU_EN2 = 0;
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8006842:	f36f 13c7 	bfc	r3, #7, #1
 8006846:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
        }

        DeviceWrite(port->I2cAddr, regSwitches0, 1,
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	332a      	adds	r3, #42	; 0x2a
 8006854:	2201      	movs	r2, #1
 8006856:	2102      	movs	r1, #2
 8006858:	f000 faf0 	bl	8006e3c <DeviceWrite>
                    &port->Registers.Switches.byte[0]);
    }

    port->VCONNTerm = DecodeCCTermination(port);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff fd22 	bl	80062a6 <DecodeCCTermination>
 8006862:	4603      	mov	r3, r0
 8006864:	461a      	mov	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

    /* Restore Switches */
    port->Registers.Switches.byte[0] = saveRegister;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	7bfa      	ldrb	r2, [r7, #15]
 8006870:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    DeviceWrite(port->I2cAddr, regSwitches0, 1,
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	332a      	adds	r3, #42	; 0x2a
 800687e:	2201      	movs	r2, #1
 8006880:	2102      	movs	r1, #2
 8006882:	f000 fadb 	bl	8006e3c <DeviceWrite>
                &port->Registers.Switches.byte[0]);
}
 8006886:	bf00      	nop
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
	...

08006890 <setStateSource>:

void setStateSource(Port_t *port, FSC_BOOL vconn)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	70fb      	strb	r3, [r7, #3]
    port->sourceOrSink = SOURCE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    resetDebounceVariables(port);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7ff ff07 	bl	80066b8 <resetDebounceVariables>
    updateSourceCurrent(port);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7ff fbf6 	bl	800609c <updateSourceCurrent>
    updateSourceMDACHigh(port);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff fc32 	bl	800611a <updateSourceMDACHigh>

    /* Enable everything except internal oscillator */
    port->Registers.Power.POWER = 0x7;
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80068bc:	2107      	movs	r1, #7
 80068be:	f361 0303 	bfi	r3, r1, #0, #4
 80068c2:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
    DeviceWrite(port->I2cAddr, regPower, 1, &port->Registers.Power.byte);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3335      	adds	r3, #53	; 0x35
 80068d0:	2201      	movs	r2, #1
 80068d2:	210b      	movs	r1, #11
 80068d4:	f000 fab2 	bl	8006e3c <DeviceWrite>

    /* For automated testing */
    if (port->CCPin == CCNone)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d102      	bne.n	80068e8 <setStateSource+0x58>
    {
        DetectCCPinSource(port);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7ff fe78 	bl	80065d8 <DetectCCPinSource>
    }

    if (port->CCPin == CC1)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d111      	bne.n	8006916 <setStateSource+0x86>
    {
        /* If we detected CC1 as an Rd */
        if (port->Registers.DeviceID.VERSION_ID == VERSION_302A)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068f8:	f023 030f 	bic.w	r3, r3, #15
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b80      	cmp	r3, #128	; 0x80
 8006900:	d104      	bne.n	800690c <setStateSource+0x7c>
        {
            /* Enable CC1 pull-up and measure */
            port->Registers.Switches.byte[0] = 0x44;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2244      	movs	r2, #68	; 0x44
 8006906:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800690a:	e015      	b.n	8006938 <setStateSource+0xa8>
        }
        else
        {
            /* Enable CC pull-ups and CC1 measure */
            port->Registers.Switches.byte[0] = 0xC4;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	22c4      	movs	r2, #196	; 0xc4
 8006910:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8006914:	e010      	b.n	8006938 <setStateSource+0xa8>
        }
    }
    else
    {
        /* If we detected CC2 as an Rd */
        if (port->Registers.DeviceID.VERSION_ID == VERSION_302A)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800691c:	f023 030f 	bic.w	r3, r3, #15
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b80      	cmp	r3, #128	; 0x80
 8006924:	d104      	bne.n	8006930 <setStateSource+0xa0>
        {
            /* Enable CC2 pull-up and measure */
            port->Registers.Switches.byte[0] = 0x88;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2288      	movs	r2, #136	; 0x88
 800692a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800692e:	e003      	b.n	8006938 <setStateSource+0xa8>
        }
        else
        {
            /* Enable CC pull-ups and CC2 measure */
            port->Registers.Switches.byte[0] = 0xC8;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	22c8      	movs	r2, #200	; 0xc8
 8006934:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        }
    }
    DeviceWrite(port->I2cAddr, regSwitches0, 1,
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	332a      	adds	r3, #42	; 0x2a
 8006942:	2201      	movs	r2, #1
 8006944:	2102      	movs	r1, #2
 8006946:	f000 fa79 	bl	8006e3c <DeviceWrite>
                &port->Registers.Switches.byte[0]);

    updateVCONNSource(port);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7ff ff48 	bl	80067e0 <updateVCONNSource>

    /* Turn on VConn after checking the VConn termination */
    if (vconn && Type_C_Sources_VCONN)
 8006950:	78fb      	ldrb	r3, [r7, #3]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d01c      	beq.n	8006990 <setStateSource+0x100>
    {
        if (port->CCPin == CC1)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800695c:	2b01      	cmp	r3, #1
 800695e:	d107      	bne.n	8006970 <setStateSource+0xe0>
            port->Registers.Switches.VCONN_CC2 = 1;
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8006966:	f043 0320 	orr.w	r3, r3, #32
 800696a:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
 800696e:	e006      	b.n	800697e <setStateSource+0xee>
        else
            port->Registers.Switches.VCONN_CC1 = 1;
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8006976:	f043 0310 	orr.w	r3, r3, #16
 800697a:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

        DeviceWrite(port->I2cAddr, regSwitches0, 1,
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	332a      	adds	r3, #42	; 0x2a
 8006988:	2201      	movs	r2, #1
 800698a:	2102      	movs	r1, #2
 800698c:	f000 fa56 	bl	8006e3c <DeviceWrite>
                    &port->Registers.Switches.byte[0]);
    }

    port->SinkCurrent = utccNone;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    TimerDisable(&port->PDDebounceTimer);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 faa1 	bl	8006ee6 <TimerDisable>
    TimerStart(&port->CCDebounceTimer, tCCDebounce);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80069aa:	4904      	ldr	r1, [pc, #16]	; (80069bc <setStateSource+0x12c>)
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 fa7f 	bl	8006eb0 <TimerStart>
}
 80069b2:	bf00      	nop
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	0001d4c0 	.word	0x0001d4c0

080069c0 <clearState>:
}

#endif /* FSC_HAVE_SNK */

void clearState(Port_t *port)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
    /* Disable the vbus outputs */
    platform_set_vbus_lvl_enable(port->PortID, VBUS_LVL_ALL, FALSE, FALSE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 80069ce:	2300      	movs	r3, #0
 80069d0:	2200      	movs	r2, #0
 80069d2:	2102      	movs	r1, #2
 80069d4:	f7f9 fe2a 	bl	800062c <platform_set_vbus_lvl_enable>

#ifdef FSC_HAVE_PPS_SOURCE
    platform_set_pps_voltage(port->PortID, 0);
#endif /* FSC_HAVE_PPS_SOURCE */

    USBPDDisable(port, TRUE);
 80069d8:	2101      	movs	r1, #1
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7fa f9ec 	bl	8000db8 <USBPDDisable>

    /* Mask/disable interrupts */
    port->Registers.Mask.byte = 0xFF;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	22ff      	movs	r2, #255	; 0xff
 80069e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    DeviceWrite(port->I2cAddr, regMask, 1, &port->Registers.Mask.byte);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	3334      	adds	r3, #52	; 0x34
 80069f2:	2201      	movs	r2, #1
 80069f4:	210a      	movs	r1, #10
 80069f6:	f000 fa21 	bl	8006e3c <DeviceWrite>
    port->Registers.MaskAdv.byte[0] = 0xFF;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	22ff      	movs	r2, #255	; 0xff
 80069fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    DeviceWrite(port->I2cAddr, regMaska, 1, &port->Registers.MaskAdv.byte[0]);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3338      	adds	r3, #56	; 0x38
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	210e      	movs	r1, #14
 8006a10:	f000 fa14 	bl	8006e3c <DeviceWrite>
    port->Registers.MaskAdv.M_GCRCSENT = 1;
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8006a1a:	f043 0301 	orr.w	r3, r3, #1
 8006a1e:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
    DeviceWrite(port->I2cAddr, regMaskb, 1, &port->Registers.MaskAdv.byte[1]);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	3339      	adds	r3, #57	; 0x39
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	210f      	movs	r1, #15
 8006a30:	f000 fa04 	bl	8006e3c <DeviceWrite>

    port->Registers.Control.TOGGLE = 0;         /* Disable toggling */
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8006a3a:	f36f 0300 	bfc	r3, #0, #1
 8006a3e:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
    port->Registers.Control.HOST_CUR = 0x0;     /* Clear PU advertisement */
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8006a48:	f36f 0383 	bfc	r3, #2, #2
 8006a4c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    DeviceWrite(port->I2cAddr, regControl0, 3,
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	3330      	adds	r3, #48	; 0x30
 8006a5a:	2203      	movs	r2, #3
 8006a5c:	2106      	movs	r1, #6
 8006a5e:	f000 f9ed 	bl	8006e3c <DeviceWrite>
                &port->Registers.Control.byte[0]);

    port->Registers.Switches.byte[0] = 0x00;    /* Disable PU, PD, etc. */
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    DeviceWrite(port->I2cAddr, regSwitches0, 1,
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	332a      	adds	r3, #42	; 0x2a
 8006a74:	2201      	movs	r2, #1
 8006a76:	2102      	movs	r1, #2
 8006a78:	f000 f9e0 	bl	8006e3c <DeviceWrite>
                &port->Registers.Switches.byte[0]);

    SetConfiguredCurrent(port);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7fe fda1 	bl	80055c4 <SetConfiguredCurrent>
    resetDebounceVariables(port);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7ff fe18 	bl	80066b8 <resetDebounceVariables>
    port->CCPin = CCNone;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

    TimerDisable(&port->PDDebounceTimer);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fa25 	bl	8006ee6 <TimerDisable>
    TimerDisable(&port->CCDebounceTimer);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fa1f 	bl	8006ee6 <TimerDisable>

    notify_observers(CC_NO_ORIENT, port->I2cAddr, 0);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006aae:	2200      	movs	r2, #0
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	2004      	movs	r0, #4
 8006ab4:	f000 fdc6 	bl	8007644 <notify_observers>

    port->Registers.Power.POWER = 0x1;
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8006abe:	2101      	movs	r1, #1
 8006ac0:	f361 0303 	bfi	r3, r1, #0, #4
 8006ac4:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
    DeviceWrite(port->I2cAddr, regPower, 1, &port->Registers.Power.byte);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	3335      	adds	r3, #53	; 0x35
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	210b      	movs	r1, #11
 8006ad6:	f000 f9b1 	bl	8006e3c <DeviceWrite>
}
 8006ada:	bf00      	nop
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <SetStateIllegalCable>:

void SetStateIllegalCable(Port_t *port)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b082      	sub	sp, #8
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
    port->TCIdle = TRUE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    port->loopCounter = 0;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    platform_set_vbus_lvl_enable(port->PortID, VBUS_LVL_ALL, FALSE, FALSE);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 8006b00:	2300      	movs	r3, #0
 8006b02:	2200      	movs	r2, #0
 8006b04:	2102      	movs	r1, #2
 8006b06:	f7f9 fd91 	bl	800062c <platform_set_vbus_lvl_enable>
    platform_set_vbus_discharge(port->PortID, TRUE);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b10:	2101      	movs	r1, #1
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7f9 fdfe 	bl	8000714 <platform_set_vbus_discharge>

    /* Disable toggle */
    port->Registers.Control.TOGGLE = 0;
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8006b1e:	f36f 0300 	bfc	r3, #0, #1
 8006b22:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
    DeviceWrite(port->I2cAddr, regControl2, 1,&port->Registers.Control.byte[2]);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	3332      	adds	r3, #50	; 0x32
 8006b30:	2201      	movs	r2, #1
 8006b32:	2108      	movs	r1, #8
 8006b34:	f000 f982 	bl	8006e3c <DeviceWrite>

    SetTypeCState(port, IllegalCable);
 8006b38:	211a      	movs	r1, #26
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7fe fb19 	bl	8005172 <SetTypeCState>

    UpdateCurrentAdvert(port, utcc3p0A);
 8006b40:	2103      	movs	r1, #3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7ff fcbd 	bl	80064c2 <UpdateCurrentAdvert>

    /* This level (MDAC == 0x24) seems to be appropriate for 3.0A PU's */
    port->Registers.Measure.MDAC = MDAC_1P596V - 1;
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006b4e:	2124      	movs	r1, #36	; 0x24
 8006b50:	f361 0305 	bfi	r3, r1, #0, #6
 8006b54:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
    port->Registers.Measure.MEAS_VBUS = 0;
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006b5e:	f36f 1386 	bfc	r3, #6, #1
 8006b62:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
    DeviceWrite(port->I2cAddr, regMeasure, 1, &port->Registers.Measure.byte);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	332c      	adds	r3, #44	; 0x2c
 8006b70:	2201      	movs	r2, #1
 8006b72:	2104      	movs	r1, #4
 8006b74:	f000 f962 	bl	8006e3c <DeviceWrite>

    port->sourceOrSink = SOURCE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

    /* Enable everything except internal oscillator */
    port->Registers.Power.POWER = 0x7;
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8006b86:	2107      	movs	r1, #7
 8006b88:	f361 0303 	bfi	r3, r1, #0, #4
 8006b8c:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
    DeviceWrite(port->I2cAddr, regPower, 1, &port->Registers.Power.byte);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	3335      	adds	r3, #53	; 0x35
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	210b      	movs	r1, #11
 8006b9e:	f000 f94d 	bl	8006e3c <DeviceWrite>

    /* Determine Orientation.
     * NOTE: This code enables both pullups and pulldowns in order to provide
     * a somewhat accurate reading with an illegal cable.
     */
    if (port->Registers.DeviceID.VERSION_ID == VERSION_302A)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ba8:	f023 030f 	bic.w	r3, r3, #15
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b80      	cmp	r3, #128	; 0x80
 8006bb0:	d104      	bne.n	8006bbc <SetStateIllegalCable+0xda>
    {
        /* Enable CC1 pull-up and pull-downs and measure */
        port->Registers.Switches.byte[0] = 0x47;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2247      	movs	r2, #71	; 0x47
 8006bb6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8006bba:	e003      	b.n	8006bc4 <SetStateIllegalCable+0xe2>
    }
    else
    {
        /* Enable CC pull-ups and pull-downs and CC1 measure */
        port->Registers.Switches.byte[0] = 0xC7;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	22c7      	movs	r2, #199	; 0xc7
 8006bc0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    }
    DeviceWrite(port->I2cAddr, regSwitches0, 1,
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	332a      	adds	r3, #42	; 0x2a
 8006bce:	2201      	movs	r2, #1
 8006bd0:	2102      	movs	r1, #2
 8006bd2:	f000 f933 	bl	8006e3c <DeviceWrite>
                &(port->Registers.Switches.byte[0]));

    port->CCPin = CC1;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    port->CCTerm = DecodeCCTermination(port);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7ff fb61 	bl	80062a6 <DecodeCCTermination>
 8006be4:	4603      	mov	r3, r0
 8006be6:	461a      	mov	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

    if ((port->CCTerm >= CCTypeRdUSB) && (port->CCTerm < CCTypeUndefined))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d904      	bls.n	8006c02 <SetStateIllegalCable+0x120>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	d925      	bls.n	8006c4e <SetStateIllegalCable+0x16c>
    {
    }
    else
    {
        port->CCPin = CC2;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2202      	movs	r2, #2
 8006c06:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (port->Registers.DeviceID.VERSION_ID == VERSION_302A)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c10:	f023 030f 	bic.w	r3, r3, #15
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b80      	cmp	r3, #128	; 0x80
 8006c18:	d104      	bne.n	8006c24 <SetStateIllegalCable+0x142>
        {
            /* Enable CC2 pull-up and pull-downs and measure */
            port->Registers.Switches.byte[0] = 0x8B;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	228b      	movs	r2, #139	; 0x8b
 8006c1e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8006c22:	e003      	b.n	8006c2c <SetStateIllegalCable+0x14a>
        }
        else
        {
            /* Enable CC pull-ups and pull-downs and CC2 measure */
            port->Registers.Switches.byte[0] = 0xCB;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	22cb      	movs	r2, #203	; 0xcb
 8006c28:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        }

        DeviceWrite(port->I2cAddr, regSwitches0, 1,
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	332a      	adds	r3, #42	; 0x2a
 8006c36:	2201      	movs	r2, #1
 8006c38:	2102      	movs	r1, #2
 8006c3a:	f000 f8ff 	bl	8006e3c <DeviceWrite>
                    &(port->Registers.Switches.byte[0]));

        port->CCTerm = DecodeCCTermination(port);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7ff fb31 	bl	80062a6 <DecodeCCTermination>
 8006c44:	4603      	mov	r3, r0
 8006c46:	461a      	mov	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    }

    if ((port->CCTerm >= CCTypeRdUSB) && (port->CCTerm < CCTypeUndefined))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d922      	bls.n	8006c9e <SetStateIllegalCable+0x1bc>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006c5e:	2b04      	cmp	r3, #4
 8006c60:	d81d      	bhi.n	8006c9e <SetStateIllegalCable+0x1bc>
    {
        port->Registers.Mask.M_COMP_CHNG = 0;
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8006c68:	f36f 1345 	bfc	r3, #5, #1
 8006c6c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        port->Registers.Mask.M_BC_LVL = 0;
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8006c76:	f36f 0300 	bfc	r3, #0, #1
 8006c7a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        DeviceWrite(port->I2cAddr, regMask, 1, &port->Registers.Mask.byte);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	3334      	adds	r3, #52	; 0x34
 8006c88:	2201      	movs	r2, #1
 8006c8a:	210a      	movs	r1, #10
 8006c8c:	f000 f8d6 	bl	8006e3c <DeviceWrite>

        TimerDisable(&port->StateTimer);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 f925 	bl	8006ee6 <TimerDisable>
 8006c9c:	e003      	b.n	8006ca6 <SetStateIllegalCable+0x1c4>
    }
    else
    {
        /* Couldn't find an appropriate termination - detach and try again */
        SetStateUnattached(port);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7ff f874 	bl	8005d8c <SetStateUnattached>
    }
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <StateMachineIllegalCable>:

void StateMachineIllegalCable(Port_t *port)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b082      	sub	sp, #8
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
     * cycle of attach-detach that could continue ad infinitum or until the
     * cable or travel adapter is plugged in.  This state breaks the loop and
     * waits for a change in termination.
     * NOTE: In most cases this requires VBUS bleed resistor (~7kohm)
     */
    port->TCIdle = TRUE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    if (port->Registers.Status.I_COMP_CHNG == 1)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cc4:	f003 0320 	and.w	r3, r3, #32
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d016      	beq.n	8006cfc <StateMachineIllegalCable+0x4e>
    {
        port->CCTerm = DecodeCCTermination(port);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7ff fae9 	bl	80062a6 <DecodeCCTermination>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

        if (port->CCTerm == CCTypeOpen)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d109      	bne.n	8006cfc <StateMachineIllegalCable+0x4e>
        {
            platform_set_vbus_discharge(port->PortID, FALSE);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006cee:	2100      	movs	r1, #0
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7f9 fd0f 	bl	8000714 <platform_set_vbus_discharge>

            SetStateUnattached(port);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7ff f848 	bl	8005d8c <SetStateUnattached>
        }
    }
}
 8006cfc:	bf00      	nop
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <core_initialize>:
#include "version.h"
/*
 * Call this function to initialize the core.
 */
void core_initialize(Port_t *port, FSC_U8 i2cAddr)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	70fb      	strb	r3, [r7, #3]
    PortInit(port, i2cAddr);
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7fe f9b0 	bl	800507a <PortInit>
    core_enable_typec(port, TRUE);
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f80b 	bl	8006d38 <core_enable_typec>
    core_enable_pd(port,  TRUE);
 8006d22:	2101      	movs	r1, #1
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f816 	bl	8006d56 <core_enable_pd>
    core_set_state_unattached(port);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f87b 	bl	8006e26 <core_set_state_unattached>
}
 8006d30:	bf00      	nop
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <core_enable_typec>:

/*
 * Call this function to enable or disable the core Type-C state machine.
 */
void core_enable_typec(Port_t *port, FSC_BOOL enable)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	460b      	mov	r3, r1
 8006d42:	70fb      	strb	r3, [r7, #3]
    port->SMEnabled = enable;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	78fa      	ldrb	r2, [r7, #3]
 8006d48:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bc80      	pop	{r7}
 8006d54:	4770      	bx	lr

08006d56 <core_enable_pd>:

/*
 * Call this function to enable or disable the core PD state machines.
 */
void core_enable_pd(Port_t *port, FSC_BOOL enable)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	70fb      	strb	r3, [r7, #3]
    port->USBPDEnabled = enable;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	78fa      	ldrb	r2, [r7, #3]
 8006d66:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
}
 8006d6a:	bf00      	nop
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bc80      	pop	{r7}
 8006d72:	4770      	bx	lr

08006d74 <core_state_machine>:

/*
 * Call this function to run the state machines.
 */
void core_state_machine(Port_t *port)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
    FSC_U8 data = port->Registers.Control.byte[3] | 0x40;  /* Hard Reset bit */
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	73fb      	strb	r3, [r7, #15]

    /* Check on HardReset timeout (shortcut for SenderResponse timeout) */
    if ((port->WaitingOnHR == TRUE) &&
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d111      	bne.n	8006db8 <core_state_machine+0x44>
        TimerExpired(&port->PolicyStateTimer))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 f8c3 	bl	8006f26 <TimerExpired>
 8006da0:	4603      	mov	r3, r0
    if ((port->WaitingOnHR == TRUE) &&
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d008      	beq.n	8006db8 <core_state_machine+0x44>
    {
        DeviceWrite(port->I2cAddr, regControl3, 1, &data);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006dac:	f107 030f 	add.w	r3, r7, #15
 8006db0:	2201      	movs	r2, #1
 8006db2:	2109      	movs	r1, #9
 8006db4:	f000 f842 	bl	8006e3c <DeviceWrite>
    }

    /* Update the current port being used and process the port */
    /* The Protocol and Policy functions are called from within this call */
    StateMachineTypeC(port);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7fe fc2d 	bl	8005618 <StateMachineTypeC>
}
 8006dbe:	bf00      	nop
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <core_get_next_timeout>:

/*
 * Check for the next required timeout to support timer interrupt functionality
 */
FSC_U32 core_get_next_timeout(Port_t *port)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b086      	sub	sp, #24
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  FSC_U32 time = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]
  FSC_U32 nexttime = 0xFFFFFFFF;
 8006dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dd6:	617b      	str	r3, [r7, #20]
  FSC_U8 i;

  for (i = 0; i < FSC_NUM_TIMERS; ++i)
 8006dd8:	2300      	movs	r3, #0
 8006dda:	74fb      	strb	r3, [r7, #19]
 8006ddc:	e015      	b.n	8006e0a <core_get_next_timeout+0x44>
  {
    time = TimerRemaining(port->Timers[i]);
 8006dde:	7cfb      	ldrb	r3, [r7, #19]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	33b2      	adds	r3, #178	; 0xb2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 f8cb 	bl	8006f86 <TimerRemaining>
 8006df0:	60f8      	str	r0, [r7, #12]
    if (time > 0 && time < nexttime) nexttime = time;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d005      	beq.n	8006e04 <core_get_next_timeout+0x3e>
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d201      	bcs.n	8006e04 <core_get_next_timeout+0x3e>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	617b      	str	r3, [r7, #20]
  for (i = 0; i < FSC_NUM_TIMERS; ++i)
 8006e04:	7cfb      	ldrb	r3, [r7, #19]
 8006e06:	3301      	adds	r3, #1
 8006e08:	74fb      	strb	r3, [r7, #19]
 8006e0a:	7cfb      	ldrb	r3, [r7, #19]
 8006e0c:	2b09      	cmp	r3, #9
 8006e0e:	d9e6      	bls.n	8006dde <core_get_next_timeout+0x18>
  }

  if (nexttime == 0xFFFFFFFF) nexttime = 0;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e16:	d101      	bne.n	8006e1c <core_get_next_timeout+0x56>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	617b      	str	r3, [r7, #20]

  return nexttime;
 8006e1c:	697b      	ldr	r3, [r7, #20]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <core_set_state_unattached>:
    SendUSBPDHardReset(port);
#endif
}

void core_set_state_unattached(Port_t *port)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b082      	sub	sp, #8
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
    SetStateUnattached(port);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7fe ffac 	bl	8005d8c <SetStateUnattached>
}
 8006e34:	bf00      	nop
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <DeviceWrite>:

#include "platform.h"

FSC_BOOL DeviceWrite(FSC_U8 i2cAddr, FSC_U8 regAddr,
                     FSC_U8 length, FSC_U8* data)
{
 8006e3c:	b590      	push	{r4, r7, lr}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af04      	add	r7, sp, #16
 8006e42:	603b      	str	r3, [r7, #0]
 8006e44:	4603      	mov	r3, r0
 8006e46:	71fb      	strb	r3, [r7, #7]
 8006e48:	460b      	mov	r3, r1
 8006e4a:	71bb      	strb	r3, [r7, #6]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	717b      	strb	r3, [r7, #5]
    return platform_i2c_write(i2cAddr, FUSB300AddrLength, length,
 8006e50:	79bb      	ldrb	r3, [r7, #6]
 8006e52:	797c      	ldrb	r4, [r7, #5]
 8006e54:	7979      	ldrb	r1, [r7, #5]
 8006e56:	79f8      	ldrb	r0, [r7, #7]
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	9202      	str	r2, [sp, #8]
 8006e5c:	9301      	str	r3, [sp, #4]
 8006e5e:	2301      	movs	r3, #1
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	4623      	mov	r3, r4
 8006e64:	460a      	mov	r2, r1
 8006e66:	2101      	movs	r1, #1
 8006e68:	f7f9 fc7a 	bl	8000760 <platform_i2c_write>
 8006e6c:	4603      	mov	r3, r0
                              length, FUSB300IncSize, regAddr, data);
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd90      	pop	{r4, r7, pc}

08006e76 <DeviceRead>:

FSC_BOOL DeviceRead(FSC_U8 i2cAddr, FSC_U8 regAddr,
                    FSC_U8 length, FSC_U8* data)
{
 8006e76:	b590      	push	{r4, r7, lr}
 8006e78:	b087      	sub	sp, #28
 8006e7a:	af04      	add	r7, sp, #16
 8006e7c:	603b      	str	r3, [r7, #0]
 8006e7e:	4603      	mov	r3, r0
 8006e80:	71fb      	strb	r3, [r7, #7]
 8006e82:	460b      	mov	r3, r1
 8006e84:	71bb      	strb	r3, [r7, #6]
 8006e86:	4613      	mov	r3, r2
 8006e88:	717b      	strb	r3, [r7, #5]
    return platform_i2c_read(i2cAddr, FUSB300AddrLength, length,
 8006e8a:	79bb      	ldrb	r3, [r7, #6]
 8006e8c:	797c      	ldrb	r4, [r7, #5]
 8006e8e:	7979      	ldrb	r1, [r7, #5]
 8006e90:	79f8      	ldrb	r0, [r7, #7]
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	9202      	str	r2, [sp, #8]
 8006e96:	9301      	str	r3, [sp, #4]
 8006e98:	2301      	movs	r3, #1
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	4623      	mov	r3, r4
 8006e9e:	460a      	mov	r2, r1
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	f7f9 fc8d 	bl	80007c0 <platform_i2c_read>
 8006ea6:	4603      	mov	r3, r0
                             length, FUSB300IncSize, regAddr, data);
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd90      	pop	{r4, r7, pc}

08006eb0 <TimerStart>:
 ******************************************************************************/
#include "timer.h"

#include "platform.h"

void TimerStart(struct TimerObj *obj, FSC_U32 time) {
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  /* Grab the current time stamp and store the wait period. */
  /* Time must be > 0 */
  obj->starttime_ = platform_get_system_time();
 8006eba:	f7f9 fcd8 	bl	800086e <platform_get_system_time>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	601a      	str	r2, [r3, #0]
  obj->period_ = time;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	605a      	str	r2, [r3, #4]

  obj->disablecount_ = TIMER_DISABLE_COUNT;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2204      	movs	r2, #4
 8006ece:	721a      	strb	r2, [r3, #8]

  if (obj->period_ == 0) obj->period_ = 1;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d102      	bne.n	8006ede <TimerStart+0x2e>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	605a      	str	r2, [r3, #4]
}
 8006ede:	bf00      	nop
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <TimerDisable>:
void TimerRestart(struct TimerObj *obj) {
  /* Grab the current time stamp for the next period. */
  obj->starttime_ = platform_get_system_time();
}

void TimerDisable(struct TimerObj *obj) {
 8006ee6:	b480      	push	{r7}
 8006ee8:	b083      	sub	sp, #12
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  /* Zero means disabled */
  obj->starttime_ = obj->period_ = 0;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	605a      	str	r2, [r3, #4]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685a      	ldr	r2, [r3, #4]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	601a      	str	r2, [r3, #0]
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bc80      	pop	{r7}
 8006f04:	4770      	bx	lr

08006f06 <TimerDisabled>:

FSC_BOOL TimerDisabled(struct TimerObj *obj) {
 8006f06:	b480      	push	{r7}
 8006f08:	b083      	sub	sp, #12
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  /* Zero means disabled */
  return (obj->period_ == 0) ? TRUE : FALSE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	bf0c      	ite	eq
 8006f16:	2301      	moveq	r3, #1
 8006f18:	2300      	movne	r3, #0
 8006f1a:	b2db      	uxtb	r3, r3
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bc80      	pop	{r7}
 8006f24:	4770      	bx	lr

08006f26 <TimerExpired>:

FSC_BOOL TimerExpired(struct TimerObj *obj) {
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  FSC_BOOL result = FALSE;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	73fb      	strb	r3, [r7, #15]

  if (TimerDisabled(obj)) {
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7ff ffe7 	bl	8006f06 <TimerDisabled>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <TimerExpired+0x1e>
      /* Disabled */
      /* TODO - possible cases where this return value might case issue? */
      result = FALSE;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	73fb      	strb	r3, [r7, #15]
 8006f42:	e00d      	b.n	8006f60 <TimerExpired+0x3a>
  }
  else {
      /* Elapsed time >= period? */
      result = ((FSC_U32)(platform_get_system_time() - obj->starttime_) >=
 8006f44:	f7f9 fc93 	bl	800086e <platform_get_system_time>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	1ad2      	subs	r2, r2, r3
               obj->period_) ? TRUE : FALSE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	bf2c      	ite	cs
 8006f58:	2301      	movcs	r3, #1
 8006f5a:	2300      	movcc	r3, #0
 8006f5c:	b2db      	uxtb	r3, r3
      result = ((FSC_U32)(platform_get_system_time() - obj->starttime_) >=
 8006f5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Check for auto-disable if expired and not explicitly disabled */
  if (result) {
 8006f60:	7bfb      	ldrb	r3, [r7, #15]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <TimerExpired+0x56>
    if (obj->disablecount_-- == 0) {
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	7a1b      	ldrb	r3, [r3, #8]
 8006f6a:	1e5a      	subs	r2, r3, #1
 8006f6c:	b2d1      	uxtb	r1, r2
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	7211      	strb	r1, [r2, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d102      	bne.n	8006f7c <TimerExpired+0x56>
      TimerDisable(obj);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7ff ffb5 	bl	8006ee6 <TimerDisable>
    }
  }

  return result;
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <TimerRemaining>:

FSC_U32 TimerRemaining(struct TimerObj *obj)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  FSC_U32 currenttime = platform_get_system_time();
 8006f8e:	f7f9 fc6e 	bl	800086e <platform_get_system_time>
 8006f92:	60f8      	str	r0, [r7, #12]

  if (TimerDisabled(obj)) {
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f7ff ffb6 	bl	8006f06 <TimerDisabled>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <TimerRemaining+0x1e>
    return 0;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	e00e      	b.n	8006fc2 <TimerRemaining+0x3c>
  }

  /* If expired before it could be handled, return a minimum delay. */
  if (TimerExpired(obj)) {
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7ff ffbe 	bl	8006f26 <TimerExpired>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <TimerRemaining+0x2e>
    return 1;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e006      	b.n	8006fc2 <TimerRemaining+0x3c>
  }

  /* Timer hasn't expired, so this should return a valid time left. */
  return (FSC_U32)(obj->starttime_ + obj->period_ - currenttime);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	441a      	add	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	1ad3      	subs	r3, r2, r3
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <VIF_InitializeSrcCaps>:
#include "vendor_info.h"

#include "PD_Types.h"

void VIF_InitializeSrcCaps(doDataObject_t *src_caps)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b08b      	sub	sp, #44	; 0x2c
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
    FSC_U8 i;
    doDataObject_t gSrc_caps[7] =
 8006fd2:	f107 0308 	add.w	r3, r7, #8
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	605a      	str	r2, [r3, #4]
 8006fdc:	609a      	str	r2, [r3, #8]
 8006fde:	60da      	str	r2, [r3, #12]
 8006fe0:	611a      	str	r2, [r3, #16]
 8006fe2:	615a      	str	r2, [r3, #20]
 8006fe4:	619a      	str	r2, [r3, #24]
 8006fe6:	893b      	ldrh	r3, [r7, #8]
 8006fe8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006fec:	f362 0309 	bfi	r3, r2, #0, #10
 8006ff0:	813b      	strh	r3, [r7, #8]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2264      	movs	r2, #100	; 0x64
 8006ff6:	f362 2393 	bfi	r3, r2, #10, #10
 8006ffa:	60bb      	str	r3, [r7, #8]
 8006ffc:	7afb      	ldrb	r3, [r7, #11]
 8006ffe:	f043 0302 	orr.w	r3, r3, #2
 8007002:	72fb      	strb	r3, [r7, #11]
 8007004:	7afb      	ldrb	r3, [r7, #11]
 8007006:	f043 0308 	orr.w	r3, r3, #8
 800700a:	72fb      	strb	r3, [r7, #11]
 800700c:	7afb      	ldrb	r3, [r7, #11]
 800700e:	f043 0320 	orr.w	r3, r3, #32
 8007012:	72fb      	strb	r3, [r7, #11]
 8007014:	89bb      	ldrh	r3, [r7, #12]
 8007016:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800701a:	f362 0309 	bfi	r3, r2, #0, #10
 800701e:	81bb      	strh	r3, [r7, #12]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	22b4      	movs	r2, #180	; 0xb4
 8007024:	f362 2393 	bfi	r3, r2, #10, #10
 8007028:	60fb      	str	r3, [r7, #12]
 800702a:	7c3b      	ldrb	r3, [r7, #16]
 800702c:	223c      	movs	r2, #60	; 0x3c
 800702e:	f362 0306 	bfi	r3, r2, #0, #7
 8007032:	743b      	strb	r3, [r7, #16]
 8007034:	231e      	movs	r3, #30
 8007036:	747b      	strb	r3, [r7, #17]
 8007038:	8a7b      	ldrh	r3, [r7, #18]
 800703a:	226e      	movs	r2, #110	; 0x6e
 800703c:	f362 0348 	bfi	r3, r2, #1, #8
 8007040:	827b      	strh	r3, [r7, #18]
 8007042:	7cfb      	ldrb	r3, [r7, #19]
 8007044:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007048:	74fb      	strb	r3, [r7, #19]
        CREATE_SUPPLY_PDO(5, Src_PDO_Supply_Type5),
        CREATE_SUPPLY_PDO(6, Src_PDO_Supply_Type6),
        CREATE_SUPPLY_PDO(7, Src_PDO_Supply_Type7),
    };

    for(i = 0; i < 7; ++i) {src_caps[i].object = gSrc_caps[i].object;}
 800704a:	2300      	movs	r3, #0
 800704c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007050:	e012      	b.n	8007078 <VIF_InitializeSrcCaps+0xae>
 8007052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007056:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800705a:	0092      	lsls	r2, r2, #2
 800705c:	6879      	ldr	r1, [r7, #4]
 800705e:	440a      	add	r2, r1
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007066:	440b      	add	r3, r1
 8007068:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007072:	3301      	adds	r3, #1
 8007074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800707c:	2b06      	cmp	r3, #6
 800707e:	d9e8      	bls.n	8007052 <VIF_InitializeSrcCaps+0x88>
}
 8007080:	bf00      	nop
 8007082:	bf00      	nop
 8007084:	372c      	adds	r7, #44	; 0x2c
 8007086:	46bd      	mov	sp, r7
 8007088:	bc80      	pop	{r7}
 800708a:	4770      	bx	lr

0800708c <VIF_InitializeSnkCaps>:
void VIF_InitializeSnkCaps(doDataObject_t *snk_caps)
{
 800708c:	b480      	push	{r7}
 800708e:	b08b      	sub	sp, #44	; 0x2c
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
    FSC_U8 i;
    doDataObject_t gSnk_caps[7] =
 8007094:	f107 0308 	add.w	r3, r7, #8
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]
 800709c:	605a      	str	r2, [r3, #4]
 800709e:	609a      	str	r2, [r3, #8]
 80070a0:	60da      	str	r2, [r3, #12]
 80070a2:	611a      	str	r2, [r3, #16]
 80070a4:	615a      	str	r2, [r3, #20]
 80070a6:	619a      	str	r2, [r3, #24]
 80070a8:	893b      	ldrh	r3, [r7, #8]
 80070aa:	220a      	movs	r2, #10
 80070ac:	f362 0309 	bfi	r3, r2, #0, #10
 80070b0:	813b      	strh	r3, [r7, #8]
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	2264      	movs	r2, #100	; 0x64
 80070b6:	f362 2393 	bfi	r3, r2, #10, #10
 80070ba:	60bb      	str	r3, [r7, #8]
 80070bc:	7afb      	ldrb	r3, [r7, #11]
 80070be:	f043 0302 	orr.w	r3, r3, #2
 80070c2:	72fb      	strb	r3, [r7, #11]
 80070c4:	7afb      	ldrb	r3, [r7, #11]
 80070c6:	f043 0308 	orr.w	r3, r3, #8
 80070ca:	72fb      	strb	r3, [r7, #11]
 80070cc:	7afb      	ldrb	r3, [r7, #11]
 80070ce:	f043 0320 	orr.w	r3, r3, #32
 80070d2:	72fb      	strb	r3, [r7, #11]
 80070d4:	89bb      	ldrh	r3, [r7, #12]
 80070d6:	220a      	movs	r2, #10
 80070d8:	f362 0309 	bfi	r3, r2, #0, #10
 80070dc:	81bb      	strh	r3, [r7, #12]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	22b4      	movs	r2, #180	; 0xb4
 80070e2:	f362 2393 	bfi	r3, r2, #10, #10
 80070e6:	60fb      	str	r3, [r7, #12]
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
 80070ea:	f043 0302 	orr.w	r3, r3, #2
 80070ee:	73fb      	strb	r3, [r7, #15]
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
 80070f2:	f043 0308 	orr.w	r3, r3, #8
 80070f6:	73fb      	strb	r3, [r7, #15]
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	f043 0320 	orr.w	r3, r3, #32
 80070fe:	73fb      	strb	r3, [r7, #15]
 8007100:	7cfb      	ldrb	r3, [r7, #19]
 8007102:	f043 0302 	orr.w	r3, r3, #2
 8007106:	74fb      	strb	r3, [r7, #19]
 8007108:	7cfb      	ldrb	r3, [r7, #19]
 800710a:	f043 0308 	orr.w	r3, r3, #8
 800710e:	74fb      	strb	r3, [r7, #19]
 8007110:	7cfb      	ldrb	r3, [r7, #19]
 8007112:	f043 0320 	orr.w	r3, r3, #32
 8007116:	74fb      	strb	r3, [r7, #19]
 8007118:	7dfb      	ldrb	r3, [r7, #23]
 800711a:	f043 0302 	orr.w	r3, r3, #2
 800711e:	75fb      	strb	r3, [r7, #23]
 8007120:	7dfb      	ldrb	r3, [r7, #23]
 8007122:	f043 0308 	orr.w	r3, r3, #8
 8007126:	75fb      	strb	r3, [r7, #23]
 8007128:	7dfb      	ldrb	r3, [r7, #23]
 800712a:	f043 0320 	orr.w	r3, r3, #32
 800712e:	75fb      	strb	r3, [r7, #23]
 8007130:	7efb      	ldrb	r3, [r7, #27]
 8007132:	f043 0302 	orr.w	r3, r3, #2
 8007136:	76fb      	strb	r3, [r7, #27]
 8007138:	7efb      	ldrb	r3, [r7, #27]
 800713a:	f043 0308 	orr.w	r3, r3, #8
 800713e:	76fb      	strb	r3, [r7, #27]
 8007140:	7efb      	ldrb	r3, [r7, #27]
 8007142:	f043 0320 	orr.w	r3, r3, #32
 8007146:	76fb      	strb	r3, [r7, #27]
 8007148:	7ffb      	ldrb	r3, [r7, #31]
 800714a:	f043 0302 	orr.w	r3, r3, #2
 800714e:	77fb      	strb	r3, [r7, #31]
 8007150:	7ffb      	ldrb	r3, [r7, #31]
 8007152:	f043 0308 	orr.w	r3, r3, #8
 8007156:	77fb      	strb	r3, [r7, #31]
 8007158:	7ffb      	ldrb	r3, [r7, #31]
 800715a:	f043 0320 	orr.w	r3, r3, #32
 800715e:	77fb      	strb	r3, [r7, #31]
 8007160:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007164:	f043 0302 	orr.w	r3, r3, #2
 8007168:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800716c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007170:	f043 0308 	orr.w	r3, r3, #8
 8007174:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007178:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800717c:	f043 0320 	orr.w	r3, r3, #32
 8007180:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        CREATE_SINK_PDO(5, Snk_PDO_Supply_Type5),
        CREATE_SINK_PDO(6, Snk_PDO_Supply_Type6),
        CREATE_SINK_PDO(7, Snk_PDO_Supply_Type7),
    };

    for(i = 0; i < 7; ++i) {snk_caps[i].object = gSnk_caps[i].object;}
 8007184:	2300      	movs	r3, #0
 8007186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800718a:	e012      	b.n	80071b2 <VIF_InitializeSnkCaps+0x126>
 800718c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007190:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007194:	0092      	lsls	r2, r2, #2
 8007196:	6879      	ldr	r1, [r7, #4]
 8007198:	440a      	add	r2, r1
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80071a0:	440b      	add	r3, r1
 80071a2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80071a6:	6013      	str	r3, [r2, #0]
 80071a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071ac:	3301      	adds	r3, #1
 80071ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071b6:	2b06      	cmp	r3, #6
 80071b8:	d9e8      	bls.n	800718c <VIF_InitializeSnkCaps+0x100>

}
 80071ba:	bf00      	nop
 80071bc:	bf00      	nop
 80071be:	372c      	adds	r7, #44	; 0x2c
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bc80      	pop	{r7}
 80071c4:	4770      	bx	lr
	...

080071c8 <DPM_Init>:
};

static DevicePolicy_t devicePolicyMgr;

void DPM_Init(DevicePolicy_t **dpm)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
    devicePolicyMgr.num_ports = 0;
 80071d0:	4b06      	ldr	r3, [pc, #24]	; (80071ec <DPM_Init+0x24>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	711a      	strb	r2, [r3, #4]
    devicePolicyMgr.dpm_state = dpmIdle;
 80071d6:	4b05      	ldr	r3, [pc, #20]	; (80071ec <DPM_Init+0x24>)
 80071d8:	2201      	movs	r2, #1
 80071da:	715a      	strb	r2, [r3, #5]

    *dpm = &devicePolicyMgr;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a03      	ldr	r2, [pc, #12]	; (80071ec <DPM_Init+0x24>)
 80071e0:	601a      	str	r2, [r3, #0]
}
 80071e2:	bf00      	nop
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bc80      	pop	{r7}
 80071ea:	4770      	bx	lr
 80071ec:	2000043c 	.word	0x2000043c

080071f0 <DPM_AddPort>:

void DPM_AddPort(DevicePolicy_t *dpm, Port_t *port)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
    dpm->ports[dpm->num_ports++] = port;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	791b      	ldrb	r3, [r3, #4]
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	b2d1      	uxtb	r1, r2
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	7111      	strb	r1, [r2, #4]
 8007206:	4619      	mov	r1, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	bc80      	pop	{r7}
 8007218:	4770      	bx	lr

0800721a <DPM_GetSourceCapHeader>:

sopMainHeader_t* DPM_GetSourceCapHeader(DevicePolicy_t *dpm, Port_t *port)
{
 800721a:	b480      	push	{r7}
 800721c:	b083      	sub	sp, #12
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	6039      	str	r1, [r7, #0]
    /* The DPM has access to all ports.  If needed, update this port here based
     * on the status of other ports - e.g. power sharing, etc.
     */
    return &(port->src_cap_header);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	3366      	adds	r3, #102	; 0x66
}
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	bc80      	pop	{r7}
 8007230:	4770      	bx	lr

08007232 <DPM_GetSourceCap>:
     */
    return &(port->snk_cap_header);
}

doDataObject_t* DPM_GetSourceCap(DevicePolicy_t *dpm, Port_t *port)
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	6039      	str	r1, [r7, #0]
    /* The DPM has access to all ports.  If needed, update this port here based
     * on the status of other ports - e.g. power sharing, etc.
     */
    return port->src_caps;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	336c      	adds	r3, #108	; 0x6c
}
 8007240:	4618      	mov	r0, r3
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	bc80      	pop	{r7}
 8007248:	4770      	bx	lr

0800724a <DPM_TransitionSource>:
     */
    return port->snk_caps;
}

FSC_BOOL DPM_TransitionSource(DevicePolicy_t *dpm, Port_t *port, FSC_U8 index)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b086      	sub	sp, #24
 800724e:	af00      	add	r7, sp, #0
 8007250:	60f8      	str	r0, [r7, #12]
 8007252:	60b9      	str	r1, [r7, #8]
 8007254:	4613      	mov	r3, r2
 8007256:	71fb      	strb	r3, [r7, #7]
    FSC_BOOL status = TRUE;
 8007258:	2301      	movs	r3, #1
 800725a:	75fb      	strb	r3, [r7, #23]
    FSC_U32 voltage = 0;
 800725c:	2300      	movs	r3, #0
 800725e:	613b      	str	r3, [r7, #16]

    if (port->src_caps[index].PDO.SupplyType == pdoTypeFixed)
 8007260:	79fb      	ldrb	r3, [r7, #7]
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	331a      	adds	r3, #26
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	79db      	ldrb	r3, [r3, #7]
 800726c:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d14d      	bne.n	8007312 <DPM_TransitionSource+0xc8>
    {
      /* Convert 10mA units to mA for setting supply current */
      platform_set_pps_current(port->PortID,
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
                               port->PolicyRxDataObj[0].FVRDO.OpCurrent*10);
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007282:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8007286:	b29b      	uxth	r3, r3
 8007288:	4619      	mov	r1, r3
 800728a:	460b      	mov	r3, r1
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	440b      	add	r3, r1
 8007290:	005b      	lsls	r3, r3, #1
      platform_set_pps_current(port->PortID,
 8007292:	4619      	mov	r1, r3
 8007294:	4610      	mov	r0, r2
 8007296:	f7f9 fa31 	bl	80006fc <platform_set_pps_current>

      if (port->src_caps[index].FPDOSupply.Voltage == 100)
 800729a:	79fb      	ldrb	r3, [r7, #7]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	331a      	adds	r3, #26
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	4413      	add	r3, r2
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f3c3 2389 	ubfx	r3, r3, #10, #10
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	2b64      	cmp	r3, #100	; 0x64
 80072ae:	d10f      	bne.n	80072d0 <DPM_TransitionSource+0x86>
      {
          platform_set_pps_voltage(port->PortID, 250);
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072b6:	21fa      	movs	r1, #250	; 0xfa
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7f9 fa09 	bl	80006d0 <platform_set_pps_voltage>
          platform_set_vbus_lvl_enable(port->PortID, VBUS_LVL_5V, TRUE, TRUE);
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 80072c4:	2301      	movs	r3, #1
 80072c6:	2201      	movs	r2, #1
 80072c8:	2100      	movs	r1, #0
 80072ca:	f7f9 f9af 	bl	800062c <platform_set_vbus_lvl_enable>
 80072ce:	e051      	b.n	8007374 <DPM_TransitionSource+0x12a>
      }
      else
      {
          /* Convert 50mV units to 20mV for setting supply voltage */
          voltage = (port->src_caps[index].FPDOSupply.Voltage * 5) / 2;
 80072d0:	79fb      	ldrb	r3, [r7, #7]
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	331a      	adds	r3, #26
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f3c3 2389 	ubfx	r3, r3, #10, #10
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	461a      	mov	r2, r3
 80072e4:	4613      	mov	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4413      	add	r3, r2
 80072ea:	0fda      	lsrs	r2, r3, #31
 80072ec:	4413      	add	r3, r2
 80072ee:	105b      	asrs	r3, r3, #1
 80072f0:	613b      	str	r3, [r7, #16]
          platform_set_pps_voltage(port->PortID, voltage);
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072f8:	6939      	ldr	r1, [r7, #16]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7f9 f9e8 	bl	80006d0 <platform_set_pps_voltage>
          platform_set_vbus_lvl_enable(port->PortID, VBUS_LVL_HV, TRUE, TRUE);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 8007306:	2301      	movs	r3, #1
 8007308:	2201      	movs	r2, #1
 800730a:	2101      	movs	r1, #1
 800730c:	f7f9 f98e 	bl	800062c <platform_set_vbus_lvl_enable>
 8007310:	e030      	b.n	8007374 <DPM_TransitionSource+0x12a>
      }
    }
    else if (port->src_caps[index].PDO.SupplyType == pdoTypeAugmented)
 8007312:	79fb      	ldrb	r3, [r7, #7]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	331a      	adds	r3, #26
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	79db      	ldrb	r3, [r3, #7]
 800731e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b03      	cmp	r3, #3
 8007326:	d125      	bne.n	8007374 <DPM_TransitionSource+0x12a>
    {
      /* PPS request is already in 20mV units */
      platform_set_pps_voltage(port->PortID,
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
                               port->PolicyRxDataObj[0].PPSRDO.Voltage);
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007334:	f3c3 234a 	ubfx	r3, r3, #9, #11
 8007338:	b29b      	uxth	r3, r3
      platform_set_pps_voltage(port->PortID,
 800733a:	4619      	mov	r1, r3
 800733c:	4610      	mov	r0, r2
 800733e:	f7f9 f9c7 	bl	80006d0 <platform_set_pps_voltage>

      /* Convert 50mA units to mA for setting supply current */
      platform_set_pps_current(port->PortID,
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
                               port->PolicyRxDataObj[0].PPSRDO.OpCurrent * 50);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800734e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8007352:	b2db      	uxtb	r3, r3
 8007354:	4619      	mov	r1, r3
 8007356:	2332      	movs	r3, #50	; 0x32
 8007358:	fb03 f301 	mul.w	r3, r3, r1
      platform_set_pps_current(port->PortID,
 800735c:	4619      	mov	r1, r3
 800735e:	4610      	mov	r0, r2
 8007360:	f7f9 f9cc 	bl	80006fc <platform_set_pps_current>
      platform_set_vbus_lvl_enable(port->PortID, VBUS_LVL_HV, TRUE, TRUE);
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 800736a:	2301      	movs	r3, #1
 800736c:	2201      	movs	r2, #1
 800736e:	2101      	movs	r1, #1
 8007370:	f7f9 f95c 	bl	800062c <platform_set_vbus_lvl_enable>
    }

    return status;
 8007374:	7dfb      	ldrb	r3, [r7, #23]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3718      	adds	r7, #24
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
	...

08007380 <DPM_IsSourceCapEnabled>:

FSC_BOOL DPM_IsSourceCapEnabled(DevicePolicy_t *dpm, Port_t *port, FSC_U8 index)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	4613      	mov	r3, r2
 800738c:	71fb      	strb	r3, [r7, #7]
    FSC_BOOL status = FALSE;
 800738e:	2300      	movs	r3, #0
 8007390:	75fb      	strb	r3, [r7, #23]
    FSC_U32 sourceVoltage = 0;
 8007392:	2300      	movs	r3, #0
 8007394:	613b      	str	r3, [r7, #16]

    if (port->src_caps[index].PDO.SupplyType == pdoTypeFixed)
 8007396:	79fb      	ldrb	r3, [r7, #7]
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	331a      	adds	r3, #26
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	79db      	ldrb	r3, [r3, #7]
 80073a2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d14b      	bne.n	8007444 <DPM_IsSourceCapEnabled+0xc4>
    {
      sourceVoltage = port->src_caps[index].FPDOSupply.Voltage;
 80073ac:	79fb      	ldrb	r3, [r7, #7]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	331a      	adds	r3, #26
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f3c3 2389 	ubfx	r3, r3, #10, #10
 80073bc:	b29b      	uxth	r3, r3
 80073be:	613b      	str	r3, [r7, #16]

      if (!isVBUSOverVoltage(port,
            VBUS_MV_NEW_MAX(VBUS_PD_TO_MV(sourceVoltage)) + MDAC_MV_LSB) &&
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	461a      	mov	r2, r3
 80073c6:	0092      	lsls	r2, r2, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	461a      	mov	r2, r3
 80073cc:	0091      	lsls	r1, r2, #2
 80073ce:	461a      	mov	r2, r3
 80073d0:	460b      	mov	r3, r1
 80073d2:	4413      	add	r3, r2
 80073d4:	005b      	lsls	r3, r3, #1
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	2132      	movs	r1, #50	; 0x32
 80073dc:	fb01 f303 	mul.w	r3, r1, r3
 80073e0:	4941      	ldr	r1, [pc, #260]	; (80074e8 <DPM_IsSourceCapEnabled+0x168>)
 80073e2:	fba1 1303 	umull	r1, r3, r1, r3
 80073e6:	091b      	lsrs	r3, r3, #4
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	4413      	add	r3, r2
 80073ec:	b29b      	uxth	r3, r3
      if (!isVBUSOverVoltage(port,
 80073ee:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	4619      	mov	r1, r3
 80073f6:	68b8      	ldr	r0, [r7, #8]
 80073f8:	f7ff f882 	bl	8006500 <isVBUSOverVoltage>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d16d      	bne.n	80074de <DPM_IsSourceCapEnabled+0x15e>
          isVBUSOverVoltage(port,
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	b29b      	uxth	r3, r3
 8007406:	461a      	mov	r2, r3
 8007408:	0092      	lsls	r2, r2, #2
 800740a:	4413      	add	r3, r2
 800740c:	461a      	mov	r2, r3
 800740e:	0091      	lsls	r1, r2, #2
 8007410:	461a      	mov	r2, r3
 8007412:	460b      	mov	r3, r1
 8007414:	4413      	add	r3, r2
 8007416:	005b      	lsls	r3, r3, #1
 8007418:	b29a      	uxth	r2, r3
            VBUS_MV_NEW_MIN(VBUS_PD_TO_MV(sourceVoltage))))
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	2132      	movs	r1, #50	; 0x32
 800741e:	fb01 f303 	mul.w	r3, r1, r3
 8007422:	4931      	ldr	r1, [pc, #196]	; (80074e8 <DPM_IsSourceCapEnabled+0x168>)
 8007424:	fba1 1303 	umull	r1, r3, r1, r3
 8007428:	091b      	lsrs	r3, r3, #4
          isVBUSOverVoltage(port,
 800742a:	b29b      	uxth	r3, r3
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	b29b      	uxth	r3, r3
 8007430:	4619      	mov	r1, r3
 8007432:	68b8      	ldr	r0, [r7, #8]
 8007434:	f7ff f864 	bl	8006500 <isVBUSOverVoltage>
 8007438:	4603      	mov	r3, r0
            VBUS_MV_NEW_MAX(VBUS_PD_TO_MV(sourceVoltage)) + MDAC_MV_LSB) &&
 800743a:	2b00      	cmp	r3, #0
 800743c:	d04f      	beq.n	80074de <DPM_IsSourceCapEnabled+0x15e>
      {
          status = TRUE;
 800743e:	2301      	movs	r3, #1
 8007440:	75fb      	strb	r3, [r7, #23]
 8007442:	e04c      	b.n	80074de <DPM_IsSourceCapEnabled+0x15e>
      }
    }
    else if (port->src_caps[index].PDO.SupplyType == pdoTypeAugmented)
 8007444:	79fb      	ldrb	r3, [r7, #7]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	331a      	adds	r3, #26
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	79db      	ldrb	r3, [r3, #7]
 8007450:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b03      	cmp	r3, #3
 8007458:	d141      	bne.n	80074de <DPM_IsSourceCapEnabled+0x15e>
    {
      sourceVoltage = port->USBPDContract.PPSRDO.Voltage;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8007460:	f3c3 234a 	ubfx	r3, r3, #9, #11
 8007464:	b29b      	uxth	r3, r3
 8007466:	613b      	str	r3, [r7, #16]

      if (!isVBUSOverVoltage(port,
            VBUS_MV_NEW_MAX(VBUS_PPS_TO_MV(sourceVoltage)) + MDAC_MV_LSB) &&
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	b29b      	uxth	r3, r3
 800746c:	461a      	mov	r2, r3
 800746e:	0092      	lsls	r2, r2, #2
 8007470:	4413      	add	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	b299      	uxth	r1, r3
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	4613      	mov	r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	461a      	mov	r2, r3
 8007482:	4b19      	ldr	r3, [pc, #100]	; (80074e8 <DPM_IsSourceCapEnabled+0x168>)
 8007484:	fba3 2302 	umull	r2, r3, r3, r2
 8007488:	091b      	lsrs	r3, r3, #4
 800748a:	b29b      	uxth	r3, r3
 800748c:	440b      	add	r3, r1
 800748e:	b29b      	uxth	r3, r3
      if (!isVBUSOverVoltage(port,
 8007490:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8007494:	b29b      	uxth	r3, r3
 8007496:	4619      	mov	r1, r3
 8007498:	68b8      	ldr	r0, [r7, #8]
 800749a:	f7ff f831 	bl	8006500 <isVBUSOverVoltage>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d11c      	bne.n	80074de <DPM_IsSourceCapEnabled+0x15e>
          isVBUSOverVoltage(port,
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	461a      	mov	r2, r3
 80074aa:	0092      	lsls	r2, r2, #2
 80074ac:	4413      	add	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	b299      	uxth	r1, r3
            VBUS_MV_NEW_MIN(VBUS_PPS_TO_MV(sourceVoltage))))
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	4613      	mov	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4413      	add	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	461a      	mov	r2, r3
 80074be:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <DPM_IsSourceCapEnabled+0x168>)
 80074c0:	fba3 2302 	umull	r2, r3, r3, r2
 80074c4:	091b      	lsrs	r3, r3, #4
          isVBUSOverVoltage(port,
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	1acb      	subs	r3, r1, r3
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	4619      	mov	r1, r3
 80074ce:	68b8      	ldr	r0, [r7, #8]
 80074d0:	f7ff f816 	bl	8006500 <isVBUSOverVoltage>
 80074d4:	4603      	mov	r3, r0
            VBUS_MV_NEW_MAX(VBUS_PPS_TO_MV(sourceVoltage)) + MDAC_MV_LSB) &&
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <DPM_IsSourceCapEnabled+0x15e>
      {
          status = TRUE;
 80074da:	2301      	movs	r3, #1
 80074dc:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 80074de:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	cccccccd 	.word	0xcccccccd

080074ec <DPM_SpecRev>:

SpecRev DPM_SpecRev(Port_t *port, SopType sop)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	70fb      	strb	r3, [r7, #3]
    if (sop == SOP_TYPE_SOP)
 80074f8:	78fb      	ldrb	r3, [r7, #3]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d103      	bne.n	8007506 <DPM_SpecRev+0x1a>
    {
        /* Port Partner */
        return port->PdRevSop;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8007504:	e00a      	b.n	800751c <DPM_SpecRev+0x30>
    }
    else if (sop == SOP_TYPE_SOP1 || sop == SOP_TYPE_SOP2)
 8007506:	78fb      	ldrb	r3, [r7, #3]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d002      	beq.n	8007512 <DPM_SpecRev+0x26>
 800750c:	78fb      	ldrb	r3, [r7, #3]
 800750e:	2b02      	cmp	r3, #2
 8007510:	d103      	bne.n	800751a <DPM_SpecRev+0x2e>
    {
        /* Cable marker */
        return port->PdRevCable;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007518:	e000      	b.n	800751c <DPM_SpecRev+0x30>
    }
    else
    {
        /* Debug, default, etc. Handle as needed. */
        return USBPDSPECREV2p0;
 800751a:	2301      	movs	r3, #1
    }
}
 800751c:	4618      	mov	r0, r3
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	bc80      	pop	{r7}
 8007524:	4770      	bx	lr

08007526 <DPM_SetSpecRev>:

void DPM_SetSpecRev(Port_t *port, SopType sop, SpecRev rev)
{
 8007526:	b480      	push	{r7}
 8007528:	b083      	sub	sp, #12
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	460b      	mov	r3, r1
 8007530:	70fb      	strb	r3, [r7, #3]
 8007532:	4613      	mov	r3, r2
 8007534:	70bb      	strb	r3, [r7, #2]
    if (rev >= USBPDSPECREVMAX)
 8007536:	78bb      	ldrb	r3, [r7, #2]
 8007538:	2b02      	cmp	r3, #2
 800753a:	d901      	bls.n	8007540 <DPM_SetSpecRev+0x1a>
    {
        /* Compliance test tries invalid revision value */
        rev = USBPDSPECREVMAX - 1;
 800753c:	2302      	movs	r3, #2
 800753e:	70bb      	strb	r3, [r7, #2]
    }

    if (sop == SOP_TYPE_SOP && port->PdRevSop > rev)
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10a      	bne.n	800755c <DPM_SetSpecRev+0x36>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800754c:	78ba      	ldrb	r2, [r7, #2]
 800754e:	429a      	cmp	r2, r3
 8007550:	d204      	bcs.n	800755c <DPM_SetSpecRev+0x36>
    {
        port->PdRevSop = rev;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	78ba      	ldrb	r2, [r7, #2]
 8007556:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 800755a:	e009      	b.n	8007570 <DPM_SetSpecRev+0x4a>
    }
    else if (sop == SOP_TYPE_SOP1 || sop == SOP_TYPE_SOP2)
 800755c:	78fb      	ldrb	r3, [r7, #3]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d002      	beq.n	8007568 <DPM_SetSpecRev+0x42>
 8007562:	78fb      	ldrb	r3, [r7, #3]
 8007564:	2b02      	cmp	r3, #2
 8007566:	d103      	bne.n	8007570 <DPM_SetSpecRev+0x4a>
    {
        port->PdRevCable = rev;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	78ba      	ldrb	r2, [r7, #2]
 800756c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
    }

    /* Adjust according to compatibility table */
    if (port->PdRevSop == USBPDSPECREV2p0 &&
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8007576:	2b01      	cmp	r3, #1
 8007578:	d108      	bne.n	800758c <DPM_SetSpecRev+0x66>
        port->PdRevCable == USBPDSPECREV3p0)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
    if (port->PdRevSop == USBPDSPECREV2p0 &&
 8007580:	2b02      	cmp	r3, #2
 8007582:	d103      	bne.n	800758c <DPM_SetSpecRev+0x66>
    {
        port->PdRevCable = USBPDSPECREV2p0;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
    }
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	bc80      	pop	{r7}
 8007594:	4770      	bx	lr

08007596 <DPM_Retries>:
    return (DPM_SpecRev(port, sop) == USBPDSPECREV2p0) ? V1P0 : V2P0;
}
#endif /* FSC_HAVE_VDM */

FSC_U8 DPM_Retries(Port_t *port, SopType sop)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b084      	sub	sp, #16
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	460b      	mov	r3, r1
 80075a0:	70fb      	strb	r3, [r7, #3]
    SpecRev rev = DPM_SpecRev(port, sop);
 80075a2:	78fb      	ldrb	r3, [r7, #3]
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7ff ffa0 	bl	80074ec <DPM_SpecRev>
 80075ac:	4603      	mov	r3, r0
 80075ae:	73fb      	strb	r3, [r7, #15]

    return (rev == USBPDSPECREV3p0) ? 2 : 3;
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d101      	bne.n	80075ba <DPM_Retries+0x24>
 80075b6:	2302      	movs	r3, #2
 80075b8:	e000      	b.n	80075bc <DPM_Retries+0x26>
 80075ba:	2303      	movs	r3, #3
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <register_observer>:
} ObserversList_t;

static ObserversList_t observers = {0};

FSC_BOOL register_observer(FSC_U32 event, EventHandler handler, void *context)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
    FSC_BOOL status = FALSE;
 80075d0:	2300      	movs	r3, #0
 80075d2:	75fb      	strb	r3, [r7, #23]
    if (observers.obs_count < MAX_OBSERVERS)
 80075d4:	4b1a      	ldr	r3, [pc, #104]	; (8007640 <register_observer+0x7c>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	2b09      	cmp	r3, #9
 80075da:	d82b      	bhi.n	8007634 <register_observer+0x70>
    {
        observers.list[observers.obs_count].event = event;
 80075dc:	4b18      	ldr	r3, [pc, #96]	; (8007640 <register_observer+0x7c>)
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	4619      	mov	r1, r3
 80075e2:	4a17      	ldr	r2, [pc, #92]	; (8007640 <register_observer+0x7c>)
 80075e4:	460b      	mov	r3, r1
 80075e6:	005b      	lsls	r3, r3, #1
 80075e8:	440b      	add	r3, r1
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	3304      	adds	r3, #4
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	601a      	str	r2, [r3, #0]
        observers.list[observers.obs_count].event_handler = handler;
 80075f4:	4b12      	ldr	r3, [pc, #72]	; (8007640 <register_observer+0x7c>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	4619      	mov	r1, r3
 80075fa:	4a11      	ldr	r2, [pc, #68]	; (8007640 <register_observer+0x7c>)
 80075fc:	460b      	mov	r3, r1
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	440b      	add	r3, r1
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	3308      	adds	r3, #8
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	601a      	str	r2, [r3, #0]
        observers.list[observers.obs_count].context = context;
 800760c:	4b0c      	ldr	r3, [pc, #48]	; (8007640 <register_observer+0x7c>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	4619      	mov	r1, r3
 8007612:	4a0b      	ldr	r2, [pc, #44]	; (8007640 <register_observer+0x7c>)
 8007614:	460b      	mov	r3, r1
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	440b      	add	r3, r1
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	330c      	adds	r3, #12
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	601a      	str	r2, [r3, #0]
        observers.obs_count++;
 8007624:	4b06      	ldr	r3, [pc, #24]	; (8007640 <register_observer+0x7c>)
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	3301      	adds	r3, #1
 800762a:	b2da      	uxtb	r2, r3
 800762c:	4b04      	ldr	r3, [pc, #16]	; (8007640 <register_observer+0x7c>)
 800762e:	701a      	strb	r2, [r3, #0]
        status = TRUE;
 8007630:	2301      	movs	r3, #1
 8007632:	75fb      	strb	r3, [r7, #23]
    }
    return status;
 8007634:	7dfb      	ldrb	r3, [r7, #23]
}
 8007636:	4618      	mov	r0, r3
 8007638:	371c      	adds	r7, #28
 800763a:	46bd      	mov	sp, r7
 800763c:	bc80      	pop	{r7}
 800763e:	4770      	bx	lr
 8007640:	20000444 	.word	0x20000444

08007644 <notify_observers>:
        observers.obs_count--;
    }
}

void notify_observers(FSC_U32 event, FSC_U8 portId, void *app_ctx)
{
 8007644:	b590      	push	{r4, r7, lr}
 8007646:	b087      	sub	sp, #28
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	460b      	mov	r3, r1
 800764e:	607a      	str	r2, [r7, #4]
 8007650:	72fb      	strb	r3, [r7, #11]
    FSC_U32 i;
    for (i = 0; i < observers.obs_count; i++)
 8007652:	2300      	movs	r3, #0
 8007654:	617b      	str	r3, [r7, #20]
 8007656:	e025      	b.n	80076a4 <notify_observers+0x60>
    {
        if (observers.list[i].event & event)
 8007658:	4918      	ldr	r1, [pc, #96]	; (80076bc <notify_observers+0x78>)
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	4613      	mov	r3, r2
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	4413      	add	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	440b      	add	r3, r1
 8007666:	3304      	adds	r3, #4
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	4013      	ands	r3, r2
 800766e:	2b00      	cmp	r3, #0
 8007670:	d015      	beq.n	800769e <notify_observers+0x5a>
        {
            observers.list[i].event_handler(event, portId,
 8007672:	4912      	ldr	r1, [pc, #72]	; (80076bc <notify_observers+0x78>)
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	4613      	mov	r3, r2
 8007678:	005b      	lsls	r3, r3, #1
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	440b      	add	r3, r1
 8007680:	3308      	adds	r3, #8
 8007682:	681c      	ldr	r4, [r3, #0]
 8007684:	490d      	ldr	r1, [pc, #52]	; (80076bc <notify_observers+0x78>)
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	4613      	mov	r3, r2
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	4413      	add	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	440b      	add	r3, r1
 8007692:	330c      	adds	r3, #12
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	7af9      	ldrb	r1, [r7, #11]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	47a0      	blx	r4
    for (i = 0; i < observers.obs_count; i++)
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	3301      	adds	r3, #1
 80076a2:	617b      	str	r3, [r7, #20]
 80076a4:	4b05      	ldr	r3, [pc, #20]	; (80076bc <notify_observers+0x78>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	461a      	mov	r2, r3
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d3d3      	bcc.n	8007658 <notify_observers+0x14>
                                            observers.list[i].context, app_ctx);
        }
    }
}
 80076b0:	bf00      	nop
 80076b2:	bf00      	nop
 80076b4:	371c      	adds	r7, #28
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd90      	pop	{r4, r7, pc}
 80076ba:	bf00      	nop
 80076bc:	20000444 	.word	0x20000444

080076c0 <InitializeTickTimer>:
#include "stm32f1xx_hal.h"

#include "../../FUSB_CORE/core.h"

void InitializeTickTimer(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	af00      	add	r7, sp, #0
    /* Disable */
    TIM2->CR1 = 0x00000000;
 80076c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076c8:	2200      	movs	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]

    /*SystemCoreClock is 48MHz. Prescaler - 48 gives 1us resolution */
    TIM2->PSC = 48;
 80076cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076d0:	2230      	movs	r2, #48	; 0x30
 80076d2:	629a      	str	r2, [r3, #40]	; 0x28

    /*
     * Start the count at the end.  Certain registers (PSC,ARR,...) are
     * "shadowed" and only get updated on a rollover or other event.
     */
    TIM2->CNT = 0xFFFFFFFF;
 80076d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076dc:	625a      	str	r2, [r3, #36]	; 0x24

    /*
     * Period/Reload - a long period give a free-running time-stamp-mode timer
     */
    TIM2->ARR = 0xFFFFFFFF;
 80076de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable! */
    EnableTickTimer(TRUE);
 80076e8:	2001      	movs	r0, #1
 80076ea:	f000 f80e 	bl	800770a <EnableTickTimer>

    /* Enable and set TIM2 Interrupt */
    TIM2->SR = 0;
 80076ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076f2:	2200      	movs	r2, #0
 80076f4:	611a      	str	r2, [r3, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80076f6:	2200      	movs	r2, #0
 80076f8:	2101      	movs	r1, #1
 80076fa:	201c      	movs	r0, #28
 80076fc:	f000 f9b9 	bl	8007a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007700:	201c      	movs	r0, #28
 8007702:	f000 f9d2 	bl	8007aaa <HAL_NVIC_EnableIRQ>
}
 8007706:	bf00      	nop
 8007708:	bd80      	pop	{r7, pc}

0800770a <EnableTickTimer>:

void EnableTickTimer(FSC_BOOL enable)
{
 800770a:	b480      	push	{r7}
 800770c:	b083      	sub	sp, #12
 800770e:	af00      	add	r7, sp, #0
 8007710:	4603      	mov	r3, r0
 8007712:	71fb      	strb	r3, [r7, #7]
    if (enable)
 8007714:	79fb      	ldrb	r3, [r7, #7]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d008      	beq.n	800772c <EnableTickTimer+0x22>
    {
        TIM2->CR1 |= TIM_CR1_CEN;
 800771a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007724:	f043 0301 	orr.w	r3, r3, #1
 8007728:	6013      	str	r3, [r2, #0]
    }
    else
    {
        TIM2->CR1 &= ~TIM_CR1_CEN;
    }
}
 800772a:	e007      	b.n	800773c <EnableTickTimer+0x32>
        TIM2->CR1 &= ~TIM_CR1_CEN;
 800772c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007736:	f023 0301 	bic.w	r3, r3, #1
 800773a:	6013      	str	r3, [r2, #0]
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	bc80      	pop	{r7}
 8007744:	4770      	bx	lr

08007746 <SetTimeInterrupt>:


void SetTimeInterrupt(FSC_U32 microseconds)
{
 8007746:	b480      	push	{r7}
 8007748:	b083      	sub	sp, #12
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  /* Set the offset for the next interrupt request */
  TIM2->CCR1 = TIM2->CNT + microseconds;
 800774e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007754:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4413      	add	r3, r2
 800775c:	634b      	str	r3, [r1, #52]	; 0x34

  /* Clear the previous and enable the next CC1 Interrupt */
  TIM2->SR = 0;
 800775e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007762:	2200      	movs	r2, #0
 8007764:	611a      	str	r2, [r3, #16]
  TIM2->DIER |= TIM_DIER_CC1IE;
 8007766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007770:	f043 0302 	orr.w	r3, r3, #2
 8007774:	60d3      	str	r3, [r2, #12]
}
 8007776:	bf00      	nop
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	bc80      	pop	{r7}
 800777e:	4770      	bx	lr

08007780 <ClearTimeInterrupt>:

void ClearTimeInterrupt(void)
{
 8007780:	b480      	push	{r7}
 8007782:	af00      	add	r7, sp, #0
    /* Disable the interrupt enable bit */
    TIM2->DIER &= ~TIM_DIER_CC1IE;
 8007784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800778e:	f023 0302 	bic.w	r3, r3, #2
 8007792:	60d3      	str	r3, [r2, #12]
}
 8007794:	bf00      	nop
 8007796:	46bd      	mov	sp, r7
 8007798:	bc80      	pop	{r7}
 800779a:	4770      	bx	lr

0800779c <InitializeTSTimer>:


void InitializeTSTimer(void)
{
 800779c:	b480      	push	{r7}
 800779e:	af00      	add	r7, sp, #0
    /* Use Timer1 to count at 0.1ms resolution up to one second. */
    /* Use Timer3, triggered by Timer16, to count seconds. */

    /* SystemCoreClock is 48MHz. */
    TIM1->PSC = 4800; /* A prescaler of 4800 gives 0.1ms res */
 80077a0:	4b15      	ldr	r3, [pc, #84]	; (80077f8 <InitializeTSTimer+0x5c>)
 80077a2:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80077a6:	629a      	str	r2, [r3, #40]	; 0x28
    TIM1->ARR = 10000; /* A period of 10000 gives 1sec intervals */
 80077a8:	4b13      	ldr	r3, [pc, #76]	; (80077f8 <InitializeTSTimer+0x5c>)
 80077aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80077ae:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM1->CR2 |= TIM_CR2_MMS_1; /* MMS = 0b010 generates TRGO */
 80077b0:	4b11      	ldr	r3, [pc, #68]	; (80077f8 <InitializeTSTimer+0x5c>)
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	4a10      	ldr	r2, [pc, #64]	; (80077f8 <InitializeTSTimer+0x5c>)
 80077b6:	f043 0320 	orr.w	r3, r3, #32
 80077ba:	6053      	str	r3, [r2, #4]

    /* Start the count at the end.  Certain registers (PSC,ARR,...) are */
    /* "shadowed" and only get updated on a rollover or other event. */
    TIM1->CNT = 0xFFFFFFFF;
 80077bc:	4b0e      	ldr	r3, [pc, #56]	; (80077f8 <InitializeTSTimer+0x5c>)
 80077be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Timer3 up as a slave to Timer1.  Timer3 will count in seconds. */
    TIM3->SMCR |= TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0;
 80077c4:	4b0d      	ldr	r3, [pc, #52]	; (80077fc <InitializeTSTimer+0x60>)
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	4a0c      	ldr	r2, [pc, #48]	; (80077fc <InitializeTSTimer+0x60>)
 80077ca:	f043 0307 	orr.w	r3, r3, #7
 80077ce:	6093      	str	r3, [r2, #8]
    TIM3->CNT = 0;
 80077d0:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <InitializeTSTimer+0x60>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enable both. */
    TIM1->CR1 |= TIM_CR1_CEN;
 80077d6:	4b08      	ldr	r3, [pc, #32]	; (80077f8 <InitializeTSTimer+0x5c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a07      	ldr	r2, [pc, #28]	; (80077f8 <InitializeTSTimer+0x5c>)
 80077dc:	f043 0301 	orr.w	r3, r3, #1
 80077e0:	6013      	str	r3, [r2, #0]
    TIM3->CR1 |= TIM_CR1_CEN;
 80077e2:	4b06      	ldr	r3, [pc, #24]	; (80077fc <InitializeTSTimer+0x60>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a05      	ldr	r2, [pc, #20]	; (80077fc <InitializeTSTimer+0x60>)
 80077e8:	f043 0301 	orr.w	r3, r3, #1
 80077ec:	6013      	str	r3, [r2, #0]
}
 80077ee:	bf00      	nop
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bc80      	pop	{r7}
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	40012c00 	.word	0x40012c00
 80077fc:	40000400 	.word	0x40000400

08007800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007804:	4b08      	ldr	r3, [pc, #32]	; (8007828 <HAL_Init+0x28>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a07      	ldr	r2, [pc, #28]	; (8007828 <HAL_Init+0x28>)
 800780a:	f043 0310 	orr.w	r3, r3, #16
 800780e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007810:	2003      	movs	r0, #3
 8007812:	f000 f923 	bl	8007a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007816:	200f      	movs	r0, #15
 8007818:	f000 f808 	bl	800782c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800781c:	f7f9 f830 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	40022000 	.word	0x40022000

0800782c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007834:	4b12      	ldr	r3, [pc, #72]	; (8007880 <HAL_InitTick+0x54>)
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	4b12      	ldr	r3, [pc, #72]	; (8007884 <HAL_InitTick+0x58>)
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	4619      	mov	r1, r3
 800783e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007842:	fbb3 f3f1 	udiv	r3, r3, r1
 8007846:	fbb2 f3f3 	udiv	r3, r2, r3
 800784a:	4618      	mov	r0, r3
 800784c:	f000 f93b 	bl	8007ac6 <HAL_SYSTICK_Config>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e00e      	b.n	8007878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b0f      	cmp	r3, #15
 800785e:	d80a      	bhi.n	8007876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007860:	2200      	movs	r2, #0
 8007862:	6879      	ldr	r1, [r7, #4]
 8007864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007868:	f000 f903 	bl	8007a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800786c:	4a06      	ldr	r2, [pc, #24]	; (8007888 <HAL_InitTick+0x5c>)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	e000      	b.n	8007878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
}
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	20000000 	.word	0x20000000
 8007884:	20000010 	.word	0x20000010
 8007888:	2000000c 	.word	0x2000000c

0800788c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800788c:	b480      	push	{r7}
 800788e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007890:	4b05      	ldr	r3, [pc, #20]	; (80078a8 <HAL_IncTick+0x1c>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	461a      	mov	r2, r3
 8007896:	4b05      	ldr	r3, [pc, #20]	; (80078ac <HAL_IncTick+0x20>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4413      	add	r3, r2
 800789c:	4a03      	ldr	r2, [pc, #12]	; (80078ac <HAL_IncTick+0x20>)
 800789e:	6013      	str	r3, [r2, #0]
}
 80078a0:	bf00      	nop
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bc80      	pop	{r7}
 80078a6:	4770      	bx	lr
 80078a8:	20000010 	.word	0x20000010
 80078ac:	20000674 	.word	0x20000674

080078b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
  return uwTick;
 80078b4:	4b02      	ldr	r3, [pc, #8]	; (80078c0 <HAL_GetTick+0x10>)
 80078b6:	681b      	ldr	r3, [r3, #0]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bc80      	pop	{r7}
 80078be:	4770      	bx	lr
 80078c0:	20000674 	.word	0x20000674

080078c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f003 0307 	and.w	r3, r3, #7
 80078d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078d4:	4b0c      	ldr	r3, [pc, #48]	; (8007908 <__NVIC_SetPriorityGrouping+0x44>)
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80078e0:	4013      	ands	r3, r2
 80078e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80078ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80078f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80078f6:	4a04      	ldr	r2, [pc, #16]	; (8007908 <__NVIC_SetPriorityGrouping+0x44>)
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	60d3      	str	r3, [r2, #12]
}
 80078fc:	bf00      	nop
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	bc80      	pop	{r7}
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	e000ed00 	.word	0xe000ed00

0800790c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800790c:	b480      	push	{r7}
 800790e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007910:	4b04      	ldr	r3, [pc, #16]	; (8007924 <__NVIC_GetPriorityGrouping+0x18>)
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	0a1b      	lsrs	r3, r3, #8
 8007916:	f003 0307 	and.w	r3, r3, #7
}
 800791a:	4618      	mov	r0, r3
 800791c:	46bd      	mov	sp, r7
 800791e:	bc80      	pop	{r7}
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	e000ed00 	.word	0xe000ed00

08007928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	4603      	mov	r3, r0
 8007930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007936:	2b00      	cmp	r3, #0
 8007938:	db0b      	blt.n	8007952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800793a:	79fb      	ldrb	r3, [r7, #7]
 800793c:	f003 021f 	and.w	r2, r3, #31
 8007940:	4906      	ldr	r1, [pc, #24]	; (800795c <__NVIC_EnableIRQ+0x34>)
 8007942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007946:	095b      	lsrs	r3, r3, #5
 8007948:	2001      	movs	r0, #1
 800794a:	fa00 f202 	lsl.w	r2, r0, r2
 800794e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	bc80      	pop	{r7}
 800795a:	4770      	bx	lr
 800795c:	e000e100 	.word	0xe000e100

08007960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	4603      	mov	r3, r0
 8007968:	6039      	str	r1, [r7, #0]
 800796a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800796c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007970:	2b00      	cmp	r3, #0
 8007972:	db0a      	blt.n	800798a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	b2da      	uxtb	r2, r3
 8007978:	490c      	ldr	r1, [pc, #48]	; (80079ac <__NVIC_SetPriority+0x4c>)
 800797a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800797e:	0112      	lsls	r2, r2, #4
 8007980:	b2d2      	uxtb	r2, r2
 8007982:	440b      	add	r3, r1
 8007984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007988:	e00a      	b.n	80079a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	b2da      	uxtb	r2, r3
 800798e:	4908      	ldr	r1, [pc, #32]	; (80079b0 <__NVIC_SetPriority+0x50>)
 8007990:	79fb      	ldrb	r3, [r7, #7]
 8007992:	f003 030f 	and.w	r3, r3, #15
 8007996:	3b04      	subs	r3, #4
 8007998:	0112      	lsls	r2, r2, #4
 800799a:	b2d2      	uxtb	r2, r2
 800799c:	440b      	add	r3, r1
 800799e:	761a      	strb	r2, [r3, #24]
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bc80      	pop	{r7}
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	e000e100 	.word	0xe000e100
 80079b0:	e000ed00 	.word	0xe000ed00

080079b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b089      	sub	sp, #36	; 0x24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f003 0307 	and.w	r3, r3, #7
 80079c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	f1c3 0307 	rsb	r3, r3, #7
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	bf28      	it	cs
 80079d2:	2304      	movcs	r3, #4
 80079d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	3304      	adds	r3, #4
 80079da:	2b06      	cmp	r3, #6
 80079dc:	d902      	bls.n	80079e4 <NVIC_EncodePriority+0x30>
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	3b03      	subs	r3, #3
 80079e2:	e000      	b.n	80079e6 <NVIC_EncodePriority+0x32>
 80079e4:	2300      	movs	r3, #0
 80079e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	fa02 f303 	lsl.w	r3, r2, r3
 80079f2:	43da      	mvns	r2, r3
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	401a      	ands	r2, r3
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80079fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	fa01 f303 	lsl.w	r3, r1, r3
 8007a06:	43d9      	mvns	r1, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a0c:	4313      	orrs	r3, r2
         );
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3724      	adds	r7, #36	; 0x24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bc80      	pop	{r7}
 8007a16:	4770      	bx	lr

08007a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a28:	d301      	bcc.n	8007a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e00f      	b.n	8007a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a2e:	4a0a      	ldr	r2, [pc, #40]	; (8007a58 <SysTick_Config+0x40>)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	3b01      	subs	r3, #1
 8007a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007a36:	210f      	movs	r1, #15
 8007a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a3c:	f7ff ff90 	bl	8007960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a40:	4b05      	ldr	r3, [pc, #20]	; (8007a58 <SysTick_Config+0x40>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a46:	4b04      	ldr	r3, [pc, #16]	; (8007a58 <SysTick_Config+0x40>)
 8007a48:	2207      	movs	r2, #7
 8007a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	e000e010 	.word	0xe000e010

08007a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7ff ff2d 	bl	80078c4 <__NVIC_SetPriorityGrouping>
}
 8007a6a:	bf00      	nop
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b086      	sub	sp, #24
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	4603      	mov	r3, r0
 8007a7a:	60b9      	str	r1, [r7, #8]
 8007a7c:	607a      	str	r2, [r7, #4]
 8007a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007a80:	2300      	movs	r3, #0
 8007a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007a84:	f7ff ff42 	bl	800790c <__NVIC_GetPriorityGrouping>
 8007a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	68b9      	ldr	r1, [r7, #8]
 8007a8e:	6978      	ldr	r0, [r7, #20]
 8007a90:	f7ff ff90 	bl	80079b4 <NVIC_EncodePriority>
 8007a94:	4602      	mov	r2, r0
 8007a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a9a:	4611      	mov	r1, r2
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7ff ff5f 	bl	8007960 <__NVIC_SetPriority>
}
 8007aa2:	bf00      	nop
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b082      	sub	sp, #8
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7ff ff35 	bl	8007928 <__NVIC_EnableIRQ>
}
 8007abe:	bf00      	nop
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff ffa2 	bl	8007a18 <SysTick_Config>
 8007ad4:	4603      	mov	r3, r0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
	...

08007ae0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d101      	bne.n	8007af6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e043      	b.n	8007b7e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	461a      	mov	r2, r3
 8007afc:	4b22      	ldr	r3, [pc, #136]	; (8007b88 <HAL_DMA_Init+0xa8>)
 8007afe:	4413      	add	r3, r2
 8007b00:	4a22      	ldr	r2, [pc, #136]	; (8007b8c <HAL_DMA_Init+0xac>)
 8007b02:	fba2 2303 	umull	r2, r3, r2, r3
 8007b06:	091b      	lsrs	r3, r3, #4
 8007b08:	009a      	lsls	r2, r3, #2
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a1f      	ldr	r2, [pc, #124]	; (8007b90 <HAL_DMA_Init+0xb0>)
 8007b12:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2202      	movs	r2, #2
 8007b18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007b2a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007b2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8007b38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	69db      	ldr	r3, [r3, #28]
 8007b56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bc80      	pop	{r7}
 8007b86:	4770      	bx	lr
 8007b88:	bffdfff8 	.word	0xbffdfff8
 8007b8c:	cccccccd 	.word	0xcccccccd
 8007b90:	40020000 	.word	0x40020000

08007b94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb0:	2204      	movs	r2, #4
 8007bb2:	409a      	lsls	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d04f      	beq.n	8007c5c <HAL_DMA_IRQHandler+0xc8>
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f003 0304 	and.w	r3, r3, #4
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d04a      	beq.n	8007c5c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0320 	and.w	r3, r3, #32
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d107      	bne.n	8007be4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f022 0204 	bic.w	r2, r2, #4
 8007be2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a66      	ldr	r2, [pc, #408]	; (8007d84 <HAL_DMA_IRQHandler+0x1f0>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d029      	beq.n	8007c42 <HAL_DMA_IRQHandler+0xae>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a65      	ldr	r2, [pc, #404]	; (8007d88 <HAL_DMA_IRQHandler+0x1f4>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d022      	beq.n	8007c3e <HAL_DMA_IRQHandler+0xaa>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a63      	ldr	r2, [pc, #396]	; (8007d8c <HAL_DMA_IRQHandler+0x1f8>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d01a      	beq.n	8007c38 <HAL_DMA_IRQHandler+0xa4>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a62      	ldr	r2, [pc, #392]	; (8007d90 <HAL_DMA_IRQHandler+0x1fc>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d012      	beq.n	8007c32 <HAL_DMA_IRQHandler+0x9e>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a60      	ldr	r2, [pc, #384]	; (8007d94 <HAL_DMA_IRQHandler+0x200>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d00a      	beq.n	8007c2c <HAL_DMA_IRQHandler+0x98>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a5f      	ldr	r2, [pc, #380]	; (8007d98 <HAL_DMA_IRQHandler+0x204>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d102      	bne.n	8007c26 <HAL_DMA_IRQHandler+0x92>
 8007c20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007c24:	e00e      	b.n	8007c44 <HAL_DMA_IRQHandler+0xb0>
 8007c26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007c2a:	e00b      	b.n	8007c44 <HAL_DMA_IRQHandler+0xb0>
 8007c2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007c30:	e008      	b.n	8007c44 <HAL_DMA_IRQHandler+0xb0>
 8007c32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007c36:	e005      	b.n	8007c44 <HAL_DMA_IRQHandler+0xb0>
 8007c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c3c:	e002      	b.n	8007c44 <HAL_DMA_IRQHandler+0xb0>
 8007c3e:	2340      	movs	r3, #64	; 0x40
 8007c40:	e000      	b.n	8007c44 <HAL_DMA_IRQHandler+0xb0>
 8007c42:	2304      	movs	r3, #4
 8007c44:	4a55      	ldr	r2, [pc, #340]	; (8007d9c <HAL_DMA_IRQHandler+0x208>)
 8007c46:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 8094 	beq.w	8007d7a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8007c5a:	e08e      	b.n	8007d7a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c60:	2202      	movs	r2, #2
 8007c62:	409a      	lsls	r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	4013      	ands	r3, r2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d056      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x186>
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d051      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0320 	and.w	r3, r3, #32
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10b      	bne.n	8007c9c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f022 020a 	bic.w	r2, r2, #10
 8007c92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a38      	ldr	r2, [pc, #224]	; (8007d84 <HAL_DMA_IRQHandler+0x1f0>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d029      	beq.n	8007cfa <HAL_DMA_IRQHandler+0x166>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a37      	ldr	r2, [pc, #220]	; (8007d88 <HAL_DMA_IRQHandler+0x1f4>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d022      	beq.n	8007cf6 <HAL_DMA_IRQHandler+0x162>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a35      	ldr	r2, [pc, #212]	; (8007d8c <HAL_DMA_IRQHandler+0x1f8>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d01a      	beq.n	8007cf0 <HAL_DMA_IRQHandler+0x15c>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a34      	ldr	r2, [pc, #208]	; (8007d90 <HAL_DMA_IRQHandler+0x1fc>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d012      	beq.n	8007cea <HAL_DMA_IRQHandler+0x156>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a32      	ldr	r2, [pc, #200]	; (8007d94 <HAL_DMA_IRQHandler+0x200>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d00a      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0x150>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a31      	ldr	r2, [pc, #196]	; (8007d98 <HAL_DMA_IRQHandler+0x204>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d102      	bne.n	8007cde <HAL_DMA_IRQHandler+0x14a>
 8007cd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007cdc:	e00e      	b.n	8007cfc <HAL_DMA_IRQHandler+0x168>
 8007cde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ce2:	e00b      	b.n	8007cfc <HAL_DMA_IRQHandler+0x168>
 8007ce4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ce8:	e008      	b.n	8007cfc <HAL_DMA_IRQHandler+0x168>
 8007cea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007cee:	e005      	b.n	8007cfc <HAL_DMA_IRQHandler+0x168>
 8007cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cf4:	e002      	b.n	8007cfc <HAL_DMA_IRQHandler+0x168>
 8007cf6:	2320      	movs	r3, #32
 8007cf8:	e000      	b.n	8007cfc <HAL_DMA_IRQHandler+0x168>
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	4a27      	ldr	r2, [pc, #156]	; (8007d9c <HAL_DMA_IRQHandler+0x208>)
 8007cfe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d034      	beq.n	8007d7a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007d18:	e02f      	b.n	8007d7a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1e:	2208      	movs	r2, #8
 8007d20:	409a      	lsls	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4013      	ands	r3, r2
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d028      	beq.n	8007d7c <HAL_DMA_IRQHandler+0x1e8>
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f003 0308 	and.w	r3, r3, #8
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d023      	beq.n	8007d7c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f022 020e 	bic.w	r2, r2, #14
 8007d42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8007d52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d004      	beq.n	8007d7c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	4798      	blx	r3
    }
  }
  return;
 8007d7a:	bf00      	nop
 8007d7c:	bf00      	nop
}
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	40020008 	.word	0x40020008
 8007d88:	4002001c 	.word	0x4002001c
 8007d8c:	40020030 	.word	0x40020030
 8007d90:	40020044 	.word	0x40020044
 8007d94:	40020058 	.word	0x40020058
 8007d98:	4002006c 	.word	0x4002006c
 8007d9c:	40020000 	.word	0x40020000

08007da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b08b      	sub	sp, #44	; 0x2c
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007daa:	2300      	movs	r3, #0
 8007dac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007dae:	2300      	movs	r3, #0
 8007db0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007db2:	e169      	b.n	8008088 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007db4:	2201      	movs	r2, #1
 8007db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	69fa      	ldr	r2, [r7, #28]
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007dc8:	69ba      	ldr	r2, [r7, #24]
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	f040 8158 	bne.w	8008082 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	4a9a      	ldr	r2, [pc, #616]	; (8008040 <HAL_GPIO_Init+0x2a0>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d05e      	beq.n	8007e9a <HAL_GPIO_Init+0xfa>
 8007ddc:	4a98      	ldr	r2, [pc, #608]	; (8008040 <HAL_GPIO_Init+0x2a0>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d875      	bhi.n	8007ece <HAL_GPIO_Init+0x12e>
 8007de2:	4a98      	ldr	r2, [pc, #608]	; (8008044 <HAL_GPIO_Init+0x2a4>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d058      	beq.n	8007e9a <HAL_GPIO_Init+0xfa>
 8007de8:	4a96      	ldr	r2, [pc, #600]	; (8008044 <HAL_GPIO_Init+0x2a4>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d86f      	bhi.n	8007ece <HAL_GPIO_Init+0x12e>
 8007dee:	4a96      	ldr	r2, [pc, #600]	; (8008048 <HAL_GPIO_Init+0x2a8>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d052      	beq.n	8007e9a <HAL_GPIO_Init+0xfa>
 8007df4:	4a94      	ldr	r2, [pc, #592]	; (8008048 <HAL_GPIO_Init+0x2a8>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d869      	bhi.n	8007ece <HAL_GPIO_Init+0x12e>
 8007dfa:	4a94      	ldr	r2, [pc, #592]	; (800804c <HAL_GPIO_Init+0x2ac>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d04c      	beq.n	8007e9a <HAL_GPIO_Init+0xfa>
 8007e00:	4a92      	ldr	r2, [pc, #584]	; (800804c <HAL_GPIO_Init+0x2ac>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d863      	bhi.n	8007ece <HAL_GPIO_Init+0x12e>
 8007e06:	4a92      	ldr	r2, [pc, #584]	; (8008050 <HAL_GPIO_Init+0x2b0>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d046      	beq.n	8007e9a <HAL_GPIO_Init+0xfa>
 8007e0c:	4a90      	ldr	r2, [pc, #576]	; (8008050 <HAL_GPIO_Init+0x2b0>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d85d      	bhi.n	8007ece <HAL_GPIO_Init+0x12e>
 8007e12:	2b12      	cmp	r3, #18
 8007e14:	d82a      	bhi.n	8007e6c <HAL_GPIO_Init+0xcc>
 8007e16:	2b12      	cmp	r3, #18
 8007e18:	d859      	bhi.n	8007ece <HAL_GPIO_Init+0x12e>
 8007e1a:	a201      	add	r2, pc, #4	; (adr r2, 8007e20 <HAL_GPIO_Init+0x80>)
 8007e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e20:	08007e9b 	.word	0x08007e9b
 8007e24:	08007e75 	.word	0x08007e75
 8007e28:	08007e87 	.word	0x08007e87
 8007e2c:	08007ec9 	.word	0x08007ec9
 8007e30:	08007ecf 	.word	0x08007ecf
 8007e34:	08007ecf 	.word	0x08007ecf
 8007e38:	08007ecf 	.word	0x08007ecf
 8007e3c:	08007ecf 	.word	0x08007ecf
 8007e40:	08007ecf 	.word	0x08007ecf
 8007e44:	08007ecf 	.word	0x08007ecf
 8007e48:	08007ecf 	.word	0x08007ecf
 8007e4c:	08007ecf 	.word	0x08007ecf
 8007e50:	08007ecf 	.word	0x08007ecf
 8007e54:	08007ecf 	.word	0x08007ecf
 8007e58:	08007ecf 	.word	0x08007ecf
 8007e5c:	08007ecf 	.word	0x08007ecf
 8007e60:	08007ecf 	.word	0x08007ecf
 8007e64:	08007e7d 	.word	0x08007e7d
 8007e68:	08007e91 	.word	0x08007e91
 8007e6c:	4a79      	ldr	r2, [pc, #484]	; (8008054 <HAL_GPIO_Init+0x2b4>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d013      	beq.n	8007e9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007e72:	e02c      	b.n	8007ece <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	623b      	str	r3, [r7, #32]
          break;
 8007e7a:	e029      	b.n	8007ed0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	3304      	adds	r3, #4
 8007e82:	623b      	str	r3, [r7, #32]
          break;
 8007e84:	e024      	b.n	8007ed0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	3308      	adds	r3, #8
 8007e8c:	623b      	str	r3, [r7, #32]
          break;
 8007e8e:	e01f      	b.n	8007ed0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	330c      	adds	r3, #12
 8007e96:	623b      	str	r3, [r7, #32]
          break;
 8007e98:	e01a      	b.n	8007ed0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d102      	bne.n	8007ea8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007ea2:	2304      	movs	r3, #4
 8007ea4:	623b      	str	r3, [r7, #32]
          break;
 8007ea6:	e013      	b.n	8007ed0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d105      	bne.n	8007ebc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007eb0:	2308      	movs	r3, #8
 8007eb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	69fa      	ldr	r2, [r7, #28]
 8007eb8:	611a      	str	r2, [r3, #16]
          break;
 8007eba:	e009      	b.n	8007ed0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007ebc:	2308      	movs	r3, #8
 8007ebe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	69fa      	ldr	r2, [r7, #28]
 8007ec4:	615a      	str	r2, [r3, #20]
          break;
 8007ec6:	e003      	b.n	8007ed0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	623b      	str	r3, [r7, #32]
          break;
 8007ecc:	e000      	b.n	8007ed0 <HAL_GPIO_Init+0x130>
          break;
 8007ece:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	2bff      	cmp	r3, #255	; 0xff
 8007ed4:	d801      	bhi.n	8007eda <HAL_GPIO_Init+0x13a>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	e001      	b.n	8007ede <HAL_GPIO_Init+0x13e>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	3304      	adds	r3, #4
 8007ede:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	2bff      	cmp	r3, #255	; 0xff
 8007ee4:	d802      	bhi.n	8007eec <HAL_GPIO_Init+0x14c>
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	e002      	b.n	8007ef2 <HAL_GPIO_Init+0x152>
 8007eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eee:	3b08      	subs	r3, #8
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	210f      	movs	r1, #15
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	fa01 f303 	lsl.w	r3, r1, r3
 8007f00:	43db      	mvns	r3, r3
 8007f02:	401a      	ands	r2, r3
 8007f04:	6a39      	ldr	r1, [r7, #32]
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	fa01 f303 	lsl.w	r3, r1, r3
 8007f0c:	431a      	orrs	r2, r3
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f000 80b1 	beq.w	8008082 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007f20:	4b4d      	ldr	r3, [pc, #308]	; (8008058 <HAL_GPIO_Init+0x2b8>)
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	4a4c      	ldr	r2, [pc, #304]	; (8008058 <HAL_GPIO_Init+0x2b8>)
 8007f26:	f043 0301 	orr.w	r3, r3, #1
 8007f2a:	6193      	str	r3, [r2, #24]
 8007f2c:	4b4a      	ldr	r3, [pc, #296]	; (8008058 <HAL_GPIO_Init+0x2b8>)
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	f003 0301 	and.w	r3, r3, #1
 8007f34:	60bb      	str	r3, [r7, #8]
 8007f36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007f38:	4a48      	ldr	r2, [pc, #288]	; (800805c <HAL_GPIO_Init+0x2bc>)
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	089b      	lsrs	r3, r3, #2
 8007f3e:	3302      	adds	r3, #2
 8007f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	f003 0303 	and.w	r3, r3, #3
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	220f      	movs	r2, #15
 8007f50:	fa02 f303 	lsl.w	r3, r2, r3
 8007f54:	43db      	mvns	r3, r3
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	4013      	ands	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a40      	ldr	r2, [pc, #256]	; (8008060 <HAL_GPIO_Init+0x2c0>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d013      	beq.n	8007f8c <HAL_GPIO_Init+0x1ec>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a3f      	ldr	r2, [pc, #252]	; (8008064 <HAL_GPIO_Init+0x2c4>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d00d      	beq.n	8007f88 <HAL_GPIO_Init+0x1e8>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a3e      	ldr	r2, [pc, #248]	; (8008068 <HAL_GPIO_Init+0x2c8>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d007      	beq.n	8007f84 <HAL_GPIO_Init+0x1e4>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a3d      	ldr	r2, [pc, #244]	; (800806c <HAL_GPIO_Init+0x2cc>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d101      	bne.n	8007f80 <HAL_GPIO_Init+0x1e0>
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e006      	b.n	8007f8e <HAL_GPIO_Init+0x1ee>
 8007f80:	2304      	movs	r3, #4
 8007f82:	e004      	b.n	8007f8e <HAL_GPIO_Init+0x1ee>
 8007f84:	2302      	movs	r3, #2
 8007f86:	e002      	b.n	8007f8e <HAL_GPIO_Init+0x1ee>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e000      	b.n	8007f8e <HAL_GPIO_Init+0x1ee>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f90:	f002 0203 	and.w	r2, r2, #3
 8007f94:	0092      	lsls	r2, r2, #2
 8007f96:	4093      	lsls	r3, r2
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007f9e:	492f      	ldr	r1, [pc, #188]	; (800805c <HAL_GPIO_Init+0x2bc>)
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	089b      	lsrs	r3, r3, #2
 8007fa4:	3302      	adds	r3, #2
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d006      	beq.n	8007fc6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007fb8:	4b2d      	ldr	r3, [pc, #180]	; (8008070 <HAL_GPIO_Init+0x2d0>)
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	492c      	ldr	r1, [pc, #176]	; (8008070 <HAL_GPIO_Init+0x2d0>)
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	600b      	str	r3, [r1, #0]
 8007fc4:	e006      	b.n	8007fd4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007fc6:	4b2a      	ldr	r3, [pc, #168]	; (8008070 <HAL_GPIO_Init+0x2d0>)
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	43db      	mvns	r3, r3
 8007fce:	4928      	ldr	r1, [pc, #160]	; (8008070 <HAL_GPIO_Init+0x2d0>)
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d006      	beq.n	8007fee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007fe0:	4b23      	ldr	r3, [pc, #140]	; (8008070 <HAL_GPIO_Init+0x2d0>)
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	4922      	ldr	r1, [pc, #136]	; (8008070 <HAL_GPIO_Init+0x2d0>)
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	604b      	str	r3, [r1, #4]
 8007fec:	e006      	b.n	8007ffc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007fee:	4b20      	ldr	r3, [pc, #128]	; (8008070 <HAL_GPIO_Init+0x2d0>)
 8007ff0:	685a      	ldr	r2, [r3, #4]
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	43db      	mvns	r3, r3
 8007ff6:	491e      	ldr	r1, [pc, #120]	; (8008070 <HAL_GPIO_Init+0x2d0>)
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d006      	beq.n	8008016 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008008:	4b19      	ldr	r3, [pc, #100]	; (8008070 <HAL_GPIO_Init+0x2d0>)
 800800a:	689a      	ldr	r2, [r3, #8]
 800800c:	4918      	ldr	r1, [pc, #96]	; (8008070 <HAL_GPIO_Init+0x2d0>)
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	4313      	orrs	r3, r2
 8008012:	608b      	str	r3, [r1, #8]
 8008014:	e006      	b.n	8008024 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008016:	4b16      	ldr	r3, [pc, #88]	; (8008070 <HAL_GPIO_Init+0x2d0>)
 8008018:	689a      	ldr	r2, [r3, #8]
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	43db      	mvns	r3, r3
 800801e:	4914      	ldr	r1, [pc, #80]	; (8008070 <HAL_GPIO_Init+0x2d0>)
 8008020:	4013      	ands	r3, r2
 8008022:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d021      	beq.n	8008074 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008030:	4b0f      	ldr	r3, [pc, #60]	; (8008070 <HAL_GPIO_Init+0x2d0>)
 8008032:	68da      	ldr	r2, [r3, #12]
 8008034:	490e      	ldr	r1, [pc, #56]	; (8008070 <HAL_GPIO_Init+0x2d0>)
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	4313      	orrs	r3, r2
 800803a:	60cb      	str	r3, [r1, #12]
 800803c:	e021      	b.n	8008082 <HAL_GPIO_Init+0x2e2>
 800803e:	bf00      	nop
 8008040:	10320000 	.word	0x10320000
 8008044:	10310000 	.word	0x10310000
 8008048:	10220000 	.word	0x10220000
 800804c:	10210000 	.word	0x10210000
 8008050:	10120000 	.word	0x10120000
 8008054:	10110000 	.word	0x10110000
 8008058:	40021000 	.word	0x40021000
 800805c:	40010000 	.word	0x40010000
 8008060:	40010800 	.word	0x40010800
 8008064:	40010c00 	.word	0x40010c00
 8008068:	40011000 	.word	0x40011000
 800806c:	40011400 	.word	0x40011400
 8008070:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008074:	4b0b      	ldr	r3, [pc, #44]	; (80080a4 <HAL_GPIO_Init+0x304>)
 8008076:	68da      	ldr	r2, [r3, #12]
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	43db      	mvns	r3, r3
 800807c:	4909      	ldr	r1, [pc, #36]	; (80080a4 <HAL_GPIO_Init+0x304>)
 800807e:	4013      	ands	r3, r2
 8008080:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8008082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008084:	3301      	adds	r3, #1
 8008086:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808e:	fa22 f303 	lsr.w	r3, r2, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	f47f ae8e 	bne.w	8007db4 <HAL_GPIO_Init+0x14>
  }
}
 8008098:	bf00      	nop
 800809a:	bf00      	nop
 800809c:	372c      	adds	r7, #44	; 0x2c
 800809e:	46bd      	mov	sp, r7
 80080a0:	bc80      	pop	{r7}
 80080a2:	4770      	bx	lr
 80080a4:	40010400 	.word	0x40010400

080080a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	807b      	strh	r3, [r7, #2]
 80080b4:	4613      	mov	r3, r2
 80080b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80080b8:	787b      	ldrb	r3, [r7, #1]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80080be:	887a      	ldrh	r2, [r7, #2]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80080c4:	e003      	b.n	80080ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80080c6:	887b      	ldrh	r3, [r7, #2]
 80080c8:	041a      	lsls	r2, r3, #16
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	611a      	str	r2, [r3, #16]
}
 80080ce:	bf00      	nop
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bc80      	pop	{r7}
 80080d6:	4770      	bx	lr

080080d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d101      	bne.n	80080ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e12b      	b.n	8008342 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d106      	bne.n	8008104 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f7f8 fbf0 	bl	80008e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2224      	movs	r2, #36	; 0x24
 8008108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f022 0201 	bic.w	r2, r2, #1
 800811a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800812a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800813a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800813c:	f002 f84e 	bl	800a1dc <HAL_RCC_GetPCLK1Freq>
 8008140:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	4a81      	ldr	r2, [pc, #516]	; (800834c <HAL_I2C_Init+0x274>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d807      	bhi.n	800815c <HAL_I2C_Init+0x84>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	4a80      	ldr	r2, [pc, #512]	; (8008350 <HAL_I2C_Init+0x278>)
 8008150:	4293      	cmp	r3, r2
 8008152:	bf94      	ite	ls
 8008154:	2301      	movls	r3, #1
 8008156:	2300      	movhi	r3, #0
 8008158:	b2db      	uxtb	r3, r3
 800815a:	e006      	b.n	800816a <HAL_I2C_Init+0x92>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	4a7d      	ldr	r2, [pc, #500]	; (8008354 <HAL_I2C_Init+0x27c>)
 8008160:	4293      	cmp	r3, r2
 8008162:	bf94      	ite	ls
 8008164:	2301      	movls	r3, #1
 8008166:	2300      	movhi	r3, #0
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e0e7      	b.n	8008342 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	4a78      	ldr	r2, [pc, #480]	; (8008358 <HAL_I2C_Init+0x280>)
 8008176:	fba2 2303 	umull	r2, r3, r2, r3
 800817a:	0c9b      	lsrs	r3, r3, #18
 800817c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	430a      	orrs	r2, r1
 8008190:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6a1b      	ldr	r3, [r3, #32]
 8008198:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	4a6a      	ldr	r2, [pc, #424]	; (800834c <HAL_I2C_Init+0x274>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d802      	bhi.n	80081ac <HAL_I2C_Init+0xd4>
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	3301      	adds	r3, #1
 80081aa:	e009      	b.n	80081c0 <HAL_I2C_Init+0xe8>
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80081b2:	fb02 f303 	mul.w	r3, r2, r3
 80081b6:	4a69      	ldr	r2, [pc, #420]	; (800835c <HAL_I2C_Init+0x284>)
 80081b8:	fba2 2303 	umull	r2, r3, r2, r3
 80081bc:	099b      	lsrs	r3, r3, #6
 80081be:	3301      	adds	r3, #1
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	6812      	ldr	r2, [r2, #0]
 80081c4:	430b      	orrs	r3, r1
 80081c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	69db      	ldr	r3, [r3, #28]
 80081ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80081d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	495c      	ldr	r1, [pc, #368]	; (800834c <HAL_I2C_Init+0x274>)
 80081dc:	428b      	cmp	r3, r1
 80081de:	d819      	bhi.n	8008214 <HAL_I2C_Init+0x13c>
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	1e59      	subs	r1, r3, #1
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	005b      	lsls	r3, r3, #1
 80081ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80081ee:	1c59      	adds	r1, r3, #1
 80081f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80081f4:	400b      	ands	r3, r1
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00a      	beq.n	8008210 <HAL_I2C_Init+0x138>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	1e59      	subs	r1, r3, #1
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	005b      	lsls	r3, r3, #1
 8008204:	fbb1 f3f3 	udiv	r3, r1, r3
 8008208:	3301      	adds	r3, #1
 800820a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800820e:	e051      	b.n	80082b4 <HAL_I2C_Init+0x1dc>
 8008210:	2304      	movs	r3, #4
 8008212:	e04f      	b.n	80082b4 <HAL_I2C_Init+0x1dc>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d111      	bne.n	8008240 <HAL_I2C_Init+0x168>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	1e58      	subs	r0, r3, #1
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6859      	ldr	r1, [r3, #4]
 8008224:	460b      	mov	r3, r1
 8008226:	005b      	lsls	r3, r3, #1
 8008228:	440b      	add	r3, r1
 800822a:	fbb0 f3f3 	udiv	r3, r0, r3
 800822e:	3301      	adds	r3, #1
 8008230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008234:	2b00      	cmp	r3, #0
 8008236:	bf0c      	ite	eq
 8008238:	2301      	moveq	r3, #1
 800823a:	2300      	movne	r3, #0
 800823c:	b2db      	uxtb	r3, r3
 800823e:	e012      	b.n	8008266 <HAL_I2C_Init+0x18e>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	1e58      	subs	r0, r3, #1
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6859      	ldr	r1, [r3, #4]
 8008248:	460b      	mov	r3, r1
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	440b      	add	r3, r1
 800824e:	0099      	lsls	r1, r3, #2
 8008250:	440b      	add	r3, r1
 8008252:	fbb0 f3f3 	udiv	r3, r0, r3
 8008256:	3301      	adds	r3, #1
 8008258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800825c:	2b00      	cmp	r3, #0
 800825e:	bf0c      	ite	eq
 8008260:	2301      	moveq	r3, #1
 8008262:	2300      	movne	r3, #0
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <HAL_I2C_Init+0x196>
 800826a:	2301      	movs	r3, #1
 800826c:	e022      	b.n	80082b4 <HAL_I2C_Init+0x1dc>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d10e      	bne.n	8008294 <HAL_I2C_Init+0x1bc>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	1e58      	subs	r0, r3, #1
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6859      	ldr	r1, [r3, #4]
 800827e:	460b      	mov	r3, r1
 8008280:	005b      	lsls	r3, r3, #1
 8008282:	440b      	add	r3, r1
 8008284:	fbb0 f3f3 	udiv	r3, r0, r3
 8008288:	3301      	adds	r3, #1
 800828a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800828e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008292:	e00f      	b.n	80082b4 <HAL_I2C_Init+0x1dc>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	1e58      	subs	r0, r3, #1
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6859      	ldr	r1, [r3, #4]
 800829c:	460b      	mov	r3, r1
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	440b      	add	r3, r1
 80082a2:	0099      	lsls	r1, r3, #2
 80082a4:	440b      	add	r3, r1
 80082a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80082aa:	3301      	adds	r3, #1
 80082ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082b4:	6879      	ldr	r1, [r7, #4]
 80082b6:	6809      	ldr	r1, [r1, #0]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	69da      	ldr	r2, [r3, #28]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	431a      	orrs	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	430a      	orrs	r2, r1
 80082d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80082e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	6911      	ldr	r1, [r2, #16]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	68d2      	ldr	r2, [r2, #12]
 80082ee:	4311      	orrs	r1, r2
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	6812      	ldr	r2, [r2, #0]
 80082f4:	430b      	orrs	r3, r1
 80082f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	695a      	ldr	r2, [r3, #20]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	431a      	orrs	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	430a      	orrs	r2, r1
 8008312:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f042 0201 	orr.w	r2, r2, #1
 8008322:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2220      	movs	r2, #32
 800832e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	000186a0 	.word	0x000186a0
 8008350:	001e847f 	.word	0x001e847f
 8008354:	003d08ff 	.word	0x003d08ff
 8008358:	431bde83 	.word	0x431bde83
 800835c:	10624dd3 	.word	0x10624dd3

08008360 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b088      	sub	sp, #32
 8008364:	af02      	add	r7, sp, #8
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	607a      	str	r2, [r7, #4]
 800836a:	461a      	mov	r2, r3
 800836c:	460b      	mov	r3, r1
 800836e:	817b      	strh	r3, [r7, #10]
 8008370:	4613      	mov	r3, r2
 8008372:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008374:	f7ff fa9c 	bl	80078b0 <HAL_GetTick>
 8008378:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b20      	cmp	r3, #32
 8008384:	f040 80e0 	bne.w	8008548 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	2319      	movs	r3, #25
 800838e:	2201      	movs	r2, #1
 8008390:	4970      	ldr	r1, [pc, #448]	; (8008554 <HAL_I2C_Master_Transmit+0x1f4>)
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f001 f972 	bl	800967c <I2C_WaitOnFlagUntilTimeout>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800839e:	2302      	movs	r3, #2
 80083a0:	e0d3      	b.n	800854a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d101      	bne.n	80083b0 <HAL_I2C_Master_Transmit+0x50>
 80083ac:	2302      	movs	r3, #2
 80083ae:	e0cc      	b.n	800854a <HAL_I2C_Master_Transmit+0x1ea>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d007      	beq.n	80083d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f042 0201 	orr.w	r2, r2, #1
 80083d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2221      	movs	r2, #33	; 0x21
 80083ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2210      	movs	r2, #16
 80083f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2200      	movs	r2, #0
 80083fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	893a      	ldrh	r2, [r7, #8]
 8008406:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800840c:	b29a      	uxth	r2, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	4a50      	ldr	r2, [pc, #320]	; (8008558 <HAL_I2C_Master_Transmit+0x1f8>)
 8008416:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008418:	8979      	ldrh	r1, [r7, #10]
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	6a3a      	ldr	r2, [r7, #32]
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f000 fe5e 	bl	80090e0 <I2C_MasterRequestWrite>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e08d      	b.n	800854a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800842e:	2300      	movs	r3, #0
 8008430:	613b      	str	r3, [r7, #16]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	695b      	ldr	r3, [r3, #20]
 8008438:	613b      	str	r3, [r7, #16]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	613b      	str	r3, [r7, #16]
 8008442:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008444:	e066      	b.n	8008514 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008446:	697a      	ldr	r2, [r7, #20]
 8008448:	6a39      	ldr	r1, [r7, #32]
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f001 f9ec 	bl	8009828 <I2C_WaitOnTXEFlagUntilTimeout>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00d      	beq.n	8008472 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845a:	2b04      	cmp	r3, #4
 800845c:	d107      	bne.n	800846e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800846c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e06b      	b.n	800854a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	781a      	ldrb	r2, [r3, #0]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008482:	1c5a      	adds	r2, r3, #1
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800848c:	b29b      	uxth	r3, r3
 800848e:	3b01      	subs	r3, #1
 8008490:	b29a      	uxth	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800849a:	3b01      	subs	r3, #1
 800849c:	b29a      	uxth	r2, r3
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	f003 0304 	and.w	r3, r3, #4
 80084ac:	2b04      	cmp	r3, #4
 80084ae:	d11b      	bne.n	80084e8 <HAL_I2C_Master_Transmit+0x188>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d017      	beq.n	80084e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084bc:	781a      	ldrb	r2, [r3, #0]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c8:	1c5a      	adds	r2, r3, #1
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	3b01      	subs	r3, #1
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084e0:	3b01      	subs	r3, #1
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	6a39      	ldr	r1, [r7, #32]
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f001 f9dc 	bl	80098aa <I2C_WaitOnBTFFlagUntilTimeout>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00d      	beq.n	8008514 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fc:	2b04      	cmp	r3, #4
 80084fe:	d107      	bne.n	8008510 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800850e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	e01a      	b.n	800854a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008518:	2b00      	cmp	r3, #0
 800851a:	d194      	bne.n	8008446 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800852a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2220      	movs	r2, #32
 8008530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	e000      	b.n	800854a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008548:	2302      	movs	r3, #2
  }
}
 800854a:	4618      	mov	r0, r3
 800854c:	3718      	adds	r7, #24
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	00100002 	.word	0x00100002
 8008558:	ffff0000 	.word	0xffff0000

0800855c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b08c      	sub	sp, #48	; 0x30
 8008560:	af02      	add	r7, sp, #8
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	607a      	str	r2, [r7, #4]
 8008566:	461a      	mov	r2, r3
 8008568:	460b      	mov	r3, r1
 800856a:	817b      	strh	r3, [r7, #10]
 800856c:	4613      	mov	r3, r2
 800856e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8008570:	2300      	movs	r3, #0
 8008572:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008574:	f7ff f99c 	bl	80078b0 <HAL_GetTick>
 8008578:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b20      	cmp	r3, #32
 8008584:	f040 823f 	bne.w	8008a06 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	2319      	movs	r3, #25
 800858e:	2201      	movs	r2, #1
 8008590:	497f      	ldr	r1, [pc, #508]	; (8008790 <HAL_I2C_Master_Receive+0x234>)
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f001 f872 	bl	800967c <I2C_WaitOnFlagUntilTimeout>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d001      	beq.n	80085a2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800859e:	2302      	movs	r3, #2
 80085a0:	e232      	b.n	8008a08 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d101      	bne.n	80085b0 <HAL_I2C_Master_Receive+0x54>
 80085ac:	2302      	movs	r3, #2
 80085ae:	e22b      	b.n	8008a08 <HAL_I2C_Master_Receive+0x4ac>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d007      	beq.n	80085d6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f042 0201 	orr.w	r2, r2, #1
 80085d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2222      	movs	r2, #34	; 0x22
 80085ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2210      	movs	r2, #16
 80085f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	893a      	ldrh	r2, [r7, #8]
 8008606:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800860c:	b29a      	uxth	r2, r3
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	4a5f      	ldr	r2, [pc, #380]	; (8008794 <HAL_I2C_Master_Receive+0x238>)
 8008616:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008618:	8979      	ldrh	r1, [r7, #10]
 800861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f000 fde0 	bl	80091e4 <I2C_MasterRequestRead>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d001      	beq.n	800862e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e1ec      	b.n	8008a08 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008632:	2b00      	cmp	r3, #0
 8008634:	d113      	bne.n	800865e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008636:	2300      	movs	r3, #0
 8008638:	61fb      	str	r3, [r7, #28]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	695b      	ldr	r3, [r3, #20]
 8008640:	61fb      	str	r3, [r7, #28]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	61fb      	str	r3, [r7, #28]
 800864a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800865a:	601a      	str	r2, [r3, #0]
 800865c:	e1c0      	b.n	80089e0 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008662:	2b01      	cmp	r3, #1
 8008664:	d11e      	bne.n	80086a4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008674:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008676:	b672      	cpsid	i
}
 8008678:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800867a:	2300      	movs	r3, #0
 800867c:	61bb      	str	r3, [r7, #24]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	61bb      	str	r3, [r7, #24]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	61bb      	str	r3, [r7, #24]
 800868e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800869e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80086a0:	b662      	cpsie	i
}
 80086a2:	e035      	b.n	8008710 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d11e      	bne.n	80086ea <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80086bc:	b672      	cpsid	i
}
 80086be:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086c0:	2300      	movs	r3, #0
 80086c2:	617b      	str	r3, [r7, #20]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	695b      	ldr	r3, [r3, #20]
 80086ca:	617b      	str	r3, [r7, #20]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	617b      	str	r3, [r7, #20]
 80086d4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80086e6:	b662      	cpsie	i
}
 80086e8:	e012      	b.n	8008710 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80086f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086fa:	2300      	movs	r3, #0
 80086fc:	613b      	str	r3, [r7, #16]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	695b      	ldr	r3, [r3, #20]
 8008704:	613b      	str	r3, [r7, #16]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	613b      	str	r3, [r7, #16]
 800870e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8008710:	e166      	b.n	80089e0 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008716:	2b03      	cmp	r3, #3
 8008718:	f200 811f 	bhi.w	800895a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008720:	2b01      	cmp	r3, #1
 8008722:	d123      	bne.n	800876c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008726:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f001 f8ff 	bl	800992c <I2C_WaitOnRXNEFlagUntilTimeout>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d001      	beq.n	8008738 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e167      	b.n	8008a08 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	691a      	ldr	r2, [r3, #16]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008742:	b2d2      	uxtb	r2, r2
 8008744:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874a:	1c5a      	adds	r2, r3, #1
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008754:	3b01      	subs	r3, #1
 8008756:	b29a      	uxth	r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008760:	b29b      	uxth	r3, r3
 8008762:	3b01      	subs	r3, #1
 8008764:	b29a      	uxth	r2, r3
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	855a      	strh	r2, [r3, #42]	; 0x2a
 800876a:	e139      	b.n	80089e0 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008770:	2b02      	cmp	r3, #2
 8008772:	d152      	bne.n	800881a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877a:	2200      	movs	r2, #0
 800877c:	4906      	ldr	r1, [pc, #24]	; (8008798 <HAL_I2C_Master_Receive+0x23c>)
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f000 ff7c 	bl	800967c <I2C_WaitOnFlagUntilTimeout>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d008      	beq.n	800879c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e13c      	b.n	8008a08 <HAL_I2C_Master_Receive+0x4ac>
 800878e:	bf00      	nop
 8008790:	00100002 	.word	0x00100002
 8008794:	ffff0000 	.word	0xffff0000
 8008798:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800879c:	b672      	cpsid	i
}
 800879e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	691a      	ldr	r2, [r3, #16]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	b2d2      	uxtb	r2, r2
 80087bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c2:	1c5a      	adds	r2, r3, #1
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087cc:	3b01      	subs	r3, #1
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087d8:	b29b      	uxth	r3, r3
 80087da:	3b01      	subs	r3, #1
 80087dc:	b29a      	uxth	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80087e2:	b662      	cpsie	i
}
 80087e4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	691a      	ldr	r2, [r3, #16]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f0:	b2d2      	uxtb	r2, r2
 80087f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	1c5a      	adds	r2, r3, #1
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008802:	3b01      	subs	r3, #1
 8008804:	b29a      	uxth	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800880e:	b29b      	uxth	r3, r3
 8008810:	3b01      	subs	r3, #1
 8008812:	b29a      	uxth	r2, r3
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008818:	e0e2      	b.n	80089e0 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008820:	2200      	movs	r2, #0
 8008822:	497b      	ldr	r1, [pc, #492]	; (8008a10 <HAL_I2C_Master_Receive+0x4b4>)
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 ff29 	bl	800967c <I2C_WaitOnFlagUntilTimeout>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d001      	beq.n	8008834 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e0e9      	b.n	8008a08 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008842:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008844:	b672      	cpsid	i
}
 8008846:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	691a      	ldr	r2, [r3, #16]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008852:	b2d2      	uxtb	r2, r2
 8008854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885a:	1c5a      	adds	r2, r3, #1
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008864:	3b01      	subs	r3, #1
 8008866:	b29a      	uxth	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008870:	b29b      	uxth	r3, r3
 8008872:	3b01      	subs	r3, #1
 8008874:	b29a      	uxth	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800887a:	4b66      	ldr	r3, [pc, #408]	; (8008a14 <HAL_I2C_Master_Receive+0x4b8>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	08db      	lsrs	r3, r3, #3
 8008880:	4a65      	ldr	r2, [pc, #404]	; (8008a18 <HAL_I2C_Master_Receive+0x4bc>)
 8008882:	fba2 2303 	umull	r2, r3, r2, r3
 8008886:	0a1a      	lsrs	r2, r3, #8
 8008888:	4613      	mov	r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	4413      	add	r3, r2
 800888e:	00da      	lsls	r2, r3, #3
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	3b01      	subs	r3, #1
 8008898:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800889a:	6a3b      	ldr	r3, [r7, #32]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d118      	bne.n	80088d2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2220      	movs	r2, #32
 80088aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ba:	f043 0220 	orr.w	r2, r3, #32
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80088c2:	b662      	cpsie	i
}
 80088c4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e09a      	b.n	8008a08 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	695b      	ldr	r3, [r3, #20]
 80088d8:	f003 0304 	and.w	r3, r3, #4
 80088dc:	2b04      	cmp	r3, #4
 80088de:	d1d9      	bne.n	8008894 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	691a      	ldr	r2, [r3, #16]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fa:	b2d2      	uxtb	r2, r2
 80088fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008902:	1c5a      	adds	r2, r3, #1
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800890c:	3b01      	subs	r3, #1
 800890e:	b29a      	uxth	r2, r3
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008918:	b29b      	uxth	r3, r3
 800891a:	3b01      	subs	r3, #1
 800891c:	b29a      	uxth	r2, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008922:	b662      	cpsie	i
}
 8008924:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	691a      	ldr	r2, [r3, #16]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008930:	b2d2      	uxtb	r2, r2
 8008932:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008938:	1c5a      	adds	r2, r3, #1
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008942:	3b01      	subs	r3, #1
 8008944:	b29a      	uxth	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800894e:	b29b      	uxth	r3, r3
 8008950:	3b01      	subs	r3, #1
 8008952:	b29a      	uxth	r2, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008958:	e042      	b.n	80089e0 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800895a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800895c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 ffe4 	bl	800992c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e04c      	b.n	8008a08 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	691a      	ldr	r2, [r3, #16]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008978:	b2d2      	uxtb	r2, r2
 800897a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008980:	1c5a      	adds	r2, r3, #1
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800898a:	3b01      	subs	r3, #1
 800898c:	b29a      	uxth	r2, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008996:	b29b      	uxth	r3, r3
 8008998:	3b01      	subs	r3, #1
 800899a:	b29a      	uxth	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	f003 0304 	and.w	r3, r3, #4
 80089aa:	2b04      	cmp	r3, #4
 80089ac:	d118      	bne.n	80089e0 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	691a      	ldr	r2, [r3, #16]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b8:	b2d2      	uxtb	r2, r2
 80089ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c0:	1c5a      	adds	r2, r3, #1
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089ca:	3b01      	subs	r3, #1
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	3b01      	subs	r3, #1
 80089da:	b29a      	uxth	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f47f ae94 	bne.w	8008712 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2220      	movs	r2, #32
 80089ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	e000      	b.n	8008a08 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8008a06:	2302      	movs	r3, #2
  }
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3728      	adds	r7, #40	; 0x28
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	00010004 	.word	0x00010004
 8008a14:	20000000 	.word	0x20000000
 8008a18:	14f8b589 	.word	0x14f8b589

08008a1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b088      	sub	sp, #32
 8008a20:	af02      	add	r7, sp, #8
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	4608      	mov	r0, r1
 8008a26:	4611      	mov	r1, r2
 8008a28:	461a      	mov	r2, r3
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	817b      	strh	r3, [r7, #10]
 8008a2e:	460b      	mov	r3, r1
 8008a30:	813b      	strh	r3, [r7, #8]
 8008a32:	4613      	mov	r3, r2
 8008a34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008a36:	f7fe ff3b 	bl	80078b0 <HAL_GetTick>
 8008a3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	2b20      	cmp	r3, #32
 8008a46:	f040 80d9 	bne.w	8008bfc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	2319      	movs	r3, #25
 8008a50:	2201      	movs	r2, #1
 8008a52:	496d      	ldr	r1, [pc, #436]	; (8008c08 <HAL_I2C_Mem_Write+0x1ec>)
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f000 fe11 	bl	800967c <I2C_WaitOnFlagUntilTimeout>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008a60:	2302      	movs	r3, #2
 8008a62:	e0cc      	b.n	8008bfe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d101      	bne.n	8008a72 <HAL_I2C_Mem_Write+0x56>
 8008a6e:	2302      	movs	r3, #2
 8008a70:	e0c5      	b.n	8008bfe <HAL_I2C_Mem_Write+0x1e2>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0301 	and.w	r3, r3, #1
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d007      	beq.n	8008a98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f042 0201 	orr.w	r2, r2, #1
 8008a96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008aa6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2221      	movs	r2, #33	; 0x21
 8008aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2240      	movs	r2, #64	; 0x40
 8008ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6a3a      	ldr	r2, [r7, #32]
 8008ac2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ac8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4a4d      	ldr	r2, [pc, #308]	; (8008c0c <HAL_I2C_Mem_Write+0x1f0>)
 8008ad8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ada:	88f8      	ldrh	r0, [r7, #6]
 8008adc:	893a      	ldrh	r2, [r7, #8]
 8008ade:	8979      	ldrh	r1, [r7, #10]
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	9301      	str	r3, [sp, #4]
 8008ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae6:	9300      	str	r3, [sp, #0]
 8008ae8:	4603      	mov	r3, r0
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f000 fc48 	bl	8009380 <I2C_RequestMemoryWrite>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d052      	beq.n	8008b9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e081      	b.n	8008bfe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	f000 fe92 	bl	8009828 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00d      	beq.n	8008b26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0e:	2b04      	cmp	r3, #4
 8008b10:	d107      	bne.n	8008b22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e06b      	b.n	8008bfe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2a:	781a      	ldrb	r2, [r3, #0]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b36:	1c5a      	adds	r2, r3, #1
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b40:	3b01      	subs	r3, #1
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	695b      	ldr	r3, [r3, #20]
 8008b5c:	f003 0304 	and.w	r3, r3, #4
 8008b60:	2b04      	cmp	r3, #4
 8008b62:	d11b      	bne.n	8008b9c <HAL_I2C_Mem_Write+0x180>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d017      	beq.n	8008b9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b70:	781a      	ldrb	r2, [r3, #0]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7c:	1c5a      	adds	r2, r3, #1
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b86:	3b01      	subs	r3, #1
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	3b01      	subs	r3, #1
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1aa      	bne.n	8008afa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f000 fe7e 	bl	80098aa <I2C_WaitOnBTFFlagUntilTimeout>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00d      	beq.n	8008bd0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb8:	2b04      	cmp	r3, #4
 8008bba:	d107      	bne.n	8008bcc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e016      	b.n	8008bfe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2220      	movs	r2, #32
 8008be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	e000      	b.n	8008bfe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008bfc:	2302      	movs	r3, #2
  }
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3718      	adds	r7, #24
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	00100002 	.word	0x00100002
 8008c0c:	ffff0000 	.word	0xffff0000

08008c10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b08c      	sub	sp, #48	; 0x30
 8008c14:	af02      	add	r7, sp, #8
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	4608      	mov	r0, r1
 8008c1a:	4611      	mov	r1, r2
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	4603      	mov	r3, r0
 8008c20:	817b      	strh	r3, [r7, #10]
 8008c22:	460b      	mov	r3, r1
 8008c24:	813b      	strh	r3, [r7, #8]
 8008c26:	4613      	mov	r3, r2
 8008c28:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008c2e:	f7fe fe3f 	bl	80078b0 <HAL_GetTick>
 8008c32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b20      	cmp	r3, #32
 8008c3e:	f040 8244 	bne.w	80090ca <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	2319      	movs	r3, #25
 8008c48:	2201      	movs	r2, #1
 8008c4a:	4982      	ldr	r1, [pc, #520]	; (8008e54 <HAL_I2C_Mem_Read+0x244>)
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f000 fd15 	bl	800967c <I2C_WaitOnFlagUntilTimeout>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d001      	beq.n	8008c5c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8008c58:	2302      	movs	r3, #2
 8008c5a:	e237      	b.n	80090cc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d101      	bne.n	8008c6a <HAL_I2C_Mem_Read+0x5a>
 8008c66:	2302      	movs	r3, #2
 8008c68:	e230      	b.n	80090cc <HAL_I2C_Mem_Read+0x4bc>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 0301 	and.w	r3, r3, #1
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d007      	beq.n	8008c90 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f042 0201 	orr.w	r2, r2, #1
 8008c8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2222      	movs	r2, #34	; 0x22
 8008ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2240      	movs	r2, #64	; 0x40
 8008cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	4a62      	ldr	r2, [pc, #392]	; (8008e58 <HAL_I2C_Mem_Read+0x248>)
 8008cd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008cd2:	88f8      	ldrh	r0, [r7, #6]
 8008cd4:	893a      	ldrh	r2, [r7, #8]
 8008cd6:	8979      	ldrh	r1, [r7, #10]
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cda:	9301      	str	r3, [sp, #4]
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f000 fbe2 	bl	80094ac <I2C_RequestMemoryRead>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d001      	beq.n	8008cf2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e1ec      	b.n	80090cc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d113      	bne.n	8008d22 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	61fb      	str	r3, [r7, #28]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	695b      	ldr	r3, [r3, #20]
 8008d04:	61fb      	str	r3, [r7, #28]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	61fb      	str	r3, [r7, #28]
 8008d0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	e1c0      	b.n	80090a4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d11e      	bne.n	8008d68 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d3a:	b672      	cpsid	i
}
 8008d3c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d3e:	2300      	movs	r3, #0
 8008d40:	61bb      	str	r3, [r7, #24]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	61bb      	str	r3, [r7, #24]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	61bb      	str	r3, [r7, #24]
 8008d52:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008d64:	b662      	cpsie	i
}
 8008d66:	e035      	b.n	8008dd4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d11e      	bne.n	8008dae <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d7e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d80:	b672      	cpsid	i
}
 8008d82:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d84:	2300      	movs	r3, #0
 8008d86:	617b      	str	r3, [r7, #20]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	617b      	str	r3, [r7, #20]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	617b      	str	r3, [r7, #20]
 8008d98:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008da8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008daa:	b662      	cpsie	i
}
 8008dac:	e012      	b.n	8008dd4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008dbc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	613b      	str	r3, [r7, #16]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	695b      	ldr	r3, [r3, #20]
 8008dc8:	613b      	str	r3, [r7, #16]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	613b      	str	r3, [r7, #16]
 8008dd2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8008dd4:	e166      	b.n	80090a4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	f200 811f 	bhi.w	800901e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d123      	bne.n	8008e30 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f000 fd9d 	bl	800992c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d001      	beq.n	8008dfc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e167      	b.n	80090cc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	691a      	ldr	r2, [r3, #16]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e06:	b2d2      	uxtb	r2, r2
 8008e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0e:	1c5a      	adds	r2, r3, #1
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	3b01      	subs	r3, #1
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008e2e:	e139      	b.n	80090a4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d152      	bne.n	8008ede <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3e:	2200      	movs	r2, #0
 8008e40:	4906      	ldr	r1, [pc, #24]	; (8008e5c <HAL_I2C_Mem_Read+0x24c>)
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f000 fc1a 	bl	800967c <I2C_WaitOnFlagUntilTimeout>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d008      	beq.n	8008e60 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e13c      	b.n	80090cc <HAL_I2C_Mem_Read+0x4bc>
 8008e52:	bf00      	nop
 8008e54:	00100002 	.word	0x00100002
 8008e58:	ffff0000 	.word	0xffff0000
 8008e5c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8008e60:	b672      	cpsid	i
}
 8008e62:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	691a      	ldr	r2, [r3, #16]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7e:	b2d2      	uxtb	r2, r2
 8008e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e86:	1c5a      	adds	r2, r3, #1
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e90:	3b01      	subs	r3, #1
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008ea6:	b662      	cpsie	i
}
 8008ea8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	691a      	ldr	r2, [r3, #16]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb4:	b2d2      	uxtb	r2, r2
 8008eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebc:	1c5a      	adds	r2, r3, #1
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008edc:	e0e2      	b.n	80090a4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee0:	9300      	str	r3, [sp, #0]
 8008ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	497b      	ldr	r1, [pc, #492]	; (80090d4 <HAL_I2C_Mem_Read+0x4c4>)
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	f000 fbc7 	bl	800967c <I2C_WaitOnFlagUntilTimeout>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e0e9      	b.n	80090cc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f08:	b672      	cpsid	i
}
 8008f0a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	691a      	ldr	r2, [r3, #16]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f16:	b2d2      	uxtb	r2, r2
 8008f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1e:	1c5a      	adds	r2, r3, #1
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	3b01      	subs	r3, #1
 8008f38:	b29a      	uxth	r2, r3
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008f3e:	4b66      	ldr	r3, [pc, #408]	; (80090d8 <HAL_I2C_Mem_Read+0x4c8>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	08db      	lsrs	r3, r3, #3
 8008f44:	4a65      	ldr	r2, [pc, #404]	; (80090dc <HAL_I2C_Mem_Read+0x4cc>)
 8008f46:	fba2 2303 	umull	r2, r3, r2, r3
 8008f4a:	0a1a      	lsrs	r2, r3, #8
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	4413      	add	r3, r2
 8008f52:	00da      	lsls	r2, r3, #3
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8008f58:	6a3b      	ldr	r3, [r7, #32]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8008f5e:	6a3b      	ldr	r3, [r7, #32]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d118      	bne.n	8008f96 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2220      	movs	r2, #32
 8008f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7e:	f043 0220 	orr.w	r2, r3, #32
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8008f86:	b662      	cpsie	i
}
 8008f88:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e09a      	b.n	80090cc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	695b      	ldr	r3, [r3, #20]
 8008f9c:	f003 0304 	and.w	r3, r3, #4
 8008fa0:	2b04      	cmp	r3, #4
 8008fa2:	d1d9      	bne.n	8008f58 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	691a      	ldr	r2, [r3, #16]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbe:	b2d2      	uxtb	r2, r2
 8008fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc6:	1c5a      	adds	r2, r3, #1
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008fe6:	b662      	cpsie	i
}
 8008fe8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	691a      	ldr	r2, [r3, #16]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff4:	b2d2      	uxtb	r2, r2
 8008ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffc:	1c5a      	adds	r2, r3, #1
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009006:	3b01      	subs	r3, #1
 8009008:	b29a      	uxth	r2, r3
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009012:	b29b      	uxth	r3, r3
 8009014:	3b01      	subs	r3, #1
 8009016:	b29a      	uxth	r2, r3
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800901c:	e042      	b.n	80090a4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800901e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009020:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f000 fc82 	bl	800992c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e04c      	b.n	80090cc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	691a      	ldr	r2, [r3, #16]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903c:	b2d2      	uxtb	r2, r2
 800903e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009044:	1c5a      	adds	r2, r3, #1
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800904e:	3b01      	subs	r3, #1
 8009050:	b29a      	uxth	r2, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800905a:	b29b      	uxth	r3, r3
 800905c:	3b01      	subs	r3, #1
 800905e:	b29a      	uxth	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	f003 0304 	and.w	r3, r3, #4
 800906e:	2b04      	cmp	r3, #4
 8009070:	d118      	bne.n	80090a4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	691a      	ldr	r2, [r3, #16]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907c:	b2d2      	uxtb	r2, r2
 800907e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800908e:	3b01      	subs	r3, #1
 8009090:	b29a      	uxth	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800909a:	b29b      	uxth	r3, r3
 800909c:	3b01      	subs	r3, #1
 800909e:	b29a      	uxth	r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f47f ae94 	bne.w	8008dd6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2220      	movs	r2, #32
 80090b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	e000      	b.n	80090cc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80090ca:	2302      	movs	r3, #2
  }
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3728      	adds	r7, #40	; 0x28
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	00010004 	.word	0x00010004
 80090d8:	20000000 	.word	0x20000000
 80090dc:	14f8b589 	.word	0x14f8b589

080090e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b088      	sub	sp, #32
 80090e4:	af02      	add	r7, sp, #8
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	607a      	str	r2, [r7, #4]
 80090ea:	603b      	str	r3, [r7, #0]
 80090ec:	460b      	mov	r3, r1
 80090ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	2b08      	cmp	r3, #8
 80090fa:	d006      	beq.n	800910a <I2C_MasterRequestWrite+0x2a>
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d003      	beq.n	800910a <I2C_MasterRequestWrite+0x2a>
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009108:	d108      	bne.n	800911c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009118:	601a      	str	r2, [r3, #0]
 800911a:	e00b      	b.n	8009134 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009120:	2b12      	cmp	r3, #18
 8009122:	d107      	bne.n	8009134 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009132:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f000 fa9b 	bl	800967c <I2C_WaitOnFlagUntilTimeout>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00d      	beq.n	8009168 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800915a:	d103      	bne.n	8009164 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009162:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009164:	2303      	movs	r3, #3
 8009166:	e035      	b.n	80091d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009170:	d108      	bne.n	8009184 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009172:	897b      	ldrh	r3, [r7, #10]
 8009174:	b2db      	uxtb	r3, r3
 8009176:	461a      	mov	r2, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009180:	611a      	str	r2, [r3, #16]
 8009182:	e01b      	b.n	80091bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009184:	897b      	ldrh	r3, [r7, #10]
 8009186:	11db      	asrs	r3, r3, #7
 8009188:	b2db      	uxtb	r3, r3
 800918a:	f003 0306 	and.w	r3, r3, #6
 800918e:	b2db      	uxtb	r3, r3
 8009190:	f063 030f 	orn	r3, r3, #15
 8009194:	b2da      	uxtb	r2, r3
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	490e      	ldr	r1, [pc, #56]	; (80091dc <I2C_MasterRequestWrite+0xfc>)
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f000 fac1 	bl	800972a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	e010      	b.n	80091d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80091b2:	897b      	ldrh	r3, [r7, #10]
 80091b4:	b2da      	uxtb	r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	4907      	ldr	r1, [pc, #28]	; (80091e0 <I2C_MasterRequestWrite+0x100>)
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f000 fab1 	bl	800972a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d001      	beq.n	80091d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e000      	b.n	80091d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3718      	adds	r7, #24
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	00010008 	.word	0x00010008
 80091e0:	00010002 	.word	0x00010002

080091e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b088      	sub	sp, #32
 80091e8:	af02      	add	r7, sp, #8
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	607a      	str	r2, [r7, #4]
 80091ee:	603b      	str	r3, [r7, #0]
 80091f0:	460b      	mov	r3, r1
 80091f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009208:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	2b08      	cmp	r3, #8
 800920e:	d006      	beq.n	800921e <I2C_MasterRequestRead+0x3a>
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	2b01      	cmp	r3, #1
 8009214:	d003      	beq.n	800921e <I2C_MasterRequestRead+0x3a>
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800921c:	d108      	bne.n	8009230 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800922c:	601a      	str	r2, [r3, #0]
 800922e:	e00b      	b.n	8009248 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009234:	2b11      	cmp	r3, #17
 8009236:	d107      	bne.n	8009248 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009246:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	9300      	str	r3, [sp, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	f000 fa11 	bl	800967c <I2C_WaitOnFlagUntilTimeout>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00d      	beq.n	800927c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800926a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800926e:	d103      	bne.n	8009278 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009276:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009278:	2303      	movs	r3, #3
 800927a:	e079      	b.n	8009370 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009284:	d108      	bne.n	8009298 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009286:	897b      	ldrh	r3, [r7, #10]
 8009288:	b2db      	uxtb	r3, r3
 800928a:	f043 0301 	orr.w	r3, r3, #1
 800928e:	b2da      	uxtb	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	611a      	str	r2, [r3, #16]
 8009296:	e05f      	b.n	8009358 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009298:	897b      	ldrh	r3, [r7, #10]
 800929a:	11db      	asrs	r3, r3, #7
 800929c:	b2db      	uxtb	r3, r3
 800929e:	f003 0306 	and.w	r3, r3, #6
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	f063 030f 	orn	r3, r3, #15
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	4930      	ldr	r1, [pc, #192]	; (8009378 <I2C_MasterRequestRead+0x194>)
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f000 fa37 	bl	800972a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d001      	beq.n	80092c6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e054      	b.n	8009370 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80092c6:	897b      	ldrh	r3, [r7, #10]
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	4929      	ldr	r1, [pc, #164]	; (800937c <I2C_MasterRequestRead+0x198>)
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f000 fa27 	bl	800972a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d001      	beq.n	80092e6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e044      	b.n	8009370 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092e6:	2300      	movs	r3, #0
 80092e8:	613b      	str	r3, [r7, #16]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	695b      	ldr	r3, [r3, #20]
 80092f0:	613b      	str	r3, [r7, #16]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	613b      	str	r3, [r7, #16]
 80092fa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800930a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f000 f9af 	bl	800967c <I2C_WaitOnFlagUntilTimeout>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00d      	beq.n	8009340 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800932e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009332:	d103      	bne.n	800933c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800933a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800933c:	2303      	movs	r3, #3
 800933e:	e017      	b.n	8009370 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009340:	897b      	ldrh	r3, [r7, #10]
 8009342:	11db      	asrs	r3, r3, #7
 8009344:	b2db      	uxtb	r3, r3
 8009346:	f003 0306 	and.w	r3, r3, #6
 800934a:	b2db      	uxtb	r3, r3
 800934c:	f063 030e 	orn	r3, r3, #14
 8009350:	b2da      	uxtb	r2, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	4907      	ldr	r1, [pc, #28]	; (800937c <I2C_MasterRequestRead+0x198>)
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	f000 f9e3 	bl	800972a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	e000      	b.n	8009370 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	00010008 	.word	0x00010008
 800937c:	00010002 	.word	0x00010002

08009380 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b088      	sub	sp, #32
 8009384:	af02      	add	r7, sp, #8
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	4608      	mov	r0, r1
 800938a:	4611      	mov	r1, r2
 800938c:	461a      	mov	r2, r3
 800938e:	4603      	mov	r3, r0
 8009390:	817b      	strh	r3, [r7, #10]
 8009392:	460b      	mov	r3, r1
 8009394:	813b      	strh	r3, [r7, #8]
 8009396:	4613      	mov	r3, r2
 8009398:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80093aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	6a3b      	ldr	r3, [r7, #32]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f000 f960 	bl	800967c <I2C_WaitOnFlagUntilTimeout>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00d      	beq.n	80093de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093d0:	d103      	bne.n	80093da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80093da:	2303      	movs	r3, #3
 80093dc:	e05f      	b.n	800949e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80093de:	897b      	ldrh	r3, [r7, #10]
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	461a      	mov	r2, r3
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80093ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80093ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f0:	6a3a      	ldr	r2, [r7, #32]
 80093f2:	492d      	ldr	r1, [pc, #180]	; (80094a8 <I2C_RequestMemoryWrite+0x128>)
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f000 f998 	bl	800972a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e04c      	b.n	800949e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009404:	2300      	movs	r3, #0
 8009406:	617b      	str	r3, [r7, #20]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	695b      	ldr	r3, [r3, #20]
 800940e:	617b      	str	r3, [r7, #20]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	699b      	ldr	r3, [r3, #24]
 8009416:	617b      	str	r3, [r7, #20]
 8009418:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800941a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800941c:	6a39      	ldr	r1, [r7, #32]
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f000 fa02 	bl	8009828 <I2C_WaitOnTXEFlagUntilTimeout>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00d      	beq.n	8009446 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942e:	2b04      	cmp	r3, #4
 8009430:	d107      	bne.n	8009442 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009440:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e02b      	b.n	800949e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009446:	88fb      	ldrh	r3, [r7, #6]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d105      	bne.n	8009458 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800944c:	893b      	ldrh	r3, [r7, #8]
 800944e:	b2da      	uxtb	r2, r3
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	611a      	str	r2, [r3, #16]
 8009456:	e021      	b.n	800949c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009458:	893b      	ldrh	r3, [r7, #8]
 800945a:	0a1b      	lsrs	r3, r3, #8
 800945c:	b29b      	uxth	r3, r3
 800945e:	b2da      	uxtb	r2, r3
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009468:	6a39      	ldr	r1, [r7, #32]
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f000 f9dc 	bl	8009828 <I2C_WaitOnTXEFlagUntilTimeout>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00d      	beq.n	8009492 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947a:	2b04      	cmp	r3, #4
 800947c:	d107      	bne.n	800948e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800948c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	e005      	b.n	800949e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009492:	893b      	ldrh	r3, [r7, #8]
 8009494:	b2da      	uxtb	r2, r3
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3718      	adds	r7, #24
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	00010002 	.word	0x00010002

080094ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af02      	add	r7, sp, #8
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	4608      	mov	r0, r1
 80094b6:	4611      	mov	r1, r2
 80094b8:	461a      	mov	r2, r3
 80094ba:	4603      	mov	r3, r0
 80094bc:	817b      	strh	r3, [r7, #10]
 80094be:	460b      	mov	r3, r1
 80094c0:	813b      	strh	r3, [r7, #8]
 80094c2:	4613      	mov	r3, r2
 80094c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80094d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80094e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e8:	9300      	str	r3, [sp, #0]
 80094ea:	6a3b      	ldr	r3, [r7, #32]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f000 f8c2 	bl	800967c <I2C_WaitOnFlagUntilTimeout>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00d      	beq.n	800951a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800950c:	d103      	bne.n	8009516 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009514:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009516:	2303      	movs	r3, #3
 8009518:	e0aa      	b.n	8009670 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800951a:	897b      	ldrh	r3, [r7, #10]
 800951c:	b2db      	uxtb	r3, r3
 800951e:	461a      	mov	r2, r3
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009528:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800952a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952c:	6a3a      	ldr	r2, [r7, #32]
 800952e:	4952      	ldr	r1, [pc, #328]	; (8009678 <I2C_RequestMemoryRead+0x1cc>)
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f000 f8fa 	bl	800972a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d001      	beq.n	8009540 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	e097      	b.n	8009670 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009540:	2300      	movs	r3, #0
 8009542:	617b      	str	r3, [r7, #20]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	617b      	str	r3, [r7, #20]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	617b      	str	r3, [r7, #20]
 8009554:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009558:	6a39      	ldr	r1, [r7, #32]
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 f964 	bl	8009828 <I2C_WaitOnTXEFlagUntilTimeout>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00d      	beq.n	8009582 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956a:	2b04      	cmp	r3, #4
 800956c:	d107      	bne.n	800957e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800957c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	e076      	b.n	8009670 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009582:	88fb      	ldrh	r3, [r7, #6]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d105      	bne.n	8009594 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009588:	893b      	ldrh	r3, [r7, #8]
 800958a:	b2da      	uxtb	r2, r3
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	611a      	str	r2, [r3, #16]
 8009592:	e021      	b.n	80095d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009594:	893b      	ldrh	r3, [r7, #8]
 8009596:	0a1b      	lsrs	r3, r3, #8
 8009598:	b29b      	uxth	r3, r3
 800959a:	b2da      	uxtb	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095a4:	6a39      	ldr	r1, [r7, #32]
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f000 f93e 	bl	8009828 <I2C_WaitOnTXEFlagUntilTimeout>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00d      	beq.n	80095ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b6:	2b04      	cmp	r3, #4
 80095b8:	d107      	bne.n	80095ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e050      	b.n	8009670 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80095ce:	893b      	ldrh	r3, [r7, #8]
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095da:	6a39      	ldr	r1, [r7, #32]
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f000 f923 	bl	8009828 <I2C_WaitOnTXEFlagUntilTimeout>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00d      	beq.n	8009604 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ec:	2b04      	cmp	r3, #4
 80095ee:	d107      	bne.n	8009600 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e035      	b.n	8009670 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009612:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	6a3b      	ldr	r3, [r7, #32]
 800961a:	2200      	movs	r2, #0
 800961c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f000 f82b 	bl	800967c <I2C_WaitOnFlagUntilTimeout>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00d      	beq.n	8009648 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800963a:	d103      	bne.n	8009644 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009642:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009644:	2303      	movs	r3, #3
 8009646:	e013      	b.n	8009670 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009648:	897b      	ldrh	r3, [r7, #10]
 800964a:	b2db      	uxtb	r3, r3
 800964c:	f043 0301 	orr.w	r3, r3, #1
 8009650:	b2da      	uxtb	r2, r3
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965a:	6a3a      	ldr	r2, [r7, #32]
 800965c:	4906      	ldr	r1, [pc, #24]	; (8009678 <I2C_RequestMemoryRead+0x1cc>)
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f000 f863 	bl	800972a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e000      	b.n	8009670 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3718      	adds	r7, #24
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	00010002 	.word	0x00010002

0800967c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	603b      	str	r3, [r7, #0]
 8009688:	4613      	mov	r3, r2
 800968a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800968c:	e025      	b.n	80096da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009694:	d021      	beq.n	80096da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009696:	f7fe f90b 	bl	80078b0 <HAL_GetTick>
 800969a:	4602      	mov	r2, r0
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	683a      	ldr	r2, [r7, #0]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d302      	bcc.n	80096ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d116      	bne.n	80096da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2200      	movs	r2, #0
 80096b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2220      	movs	r2, #32
 80096b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c6:	f043 0220 	orr.w	r2, r3, #32
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e023      	b.n	8009722 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	0c1b      	lsrs	r3, r3, #16
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d10d      	bne.n	8009700 <I2C_WaitOnFlagUntilTimeout+0x84>
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	695b      	ldr	r3, [r3, #20]
 80096ea:	43da      	mvns	r2, r3
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	4013      	ands	r3, r2
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	bf0c      	ite	eq
 80096f6:	2301      	moveq	r3, #1
 80096f8:	2300      	movne	r3, #0
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	461a      	mov	r2, r3
 80096fe:	e00c      	b.n	800971a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	43da      	mvns	r2, r3
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	4013      	ands	r3, r2
 800970c:	b29b      	uxth	r3, r3
 800970e:	2b00      	cmp	r3, #0
 8009710:	bf0c      	ite	eq
 8009712:	2301      	moveq	r3, #1
 8009714:	2300      	movne	r3, #0
 8009716:	b2db      	uxtb	r3, r3
 8009718:	461a      	mov	r2, r3
 800971a:	79fb      	ldrb	r3, [r7, #7]
 800971c:	429a      	cmp	r2, r3
 800971e:	d0b6      	beq.n	800968e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b084      	sub	sp, #16
 800972e:	af00      	add	r7, sp, #0
 8009730:	60f8      	str	r0, [r7, #12]
 8009732:	60b9      	str	r1, [r7, #8]
 8009734:	607a      	str	r2, [r7, #4]
 8009736:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009738:	e051      	b.n	80097de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	695b      	ldr	r3, [r3, #20]
 8009740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009748:	d123      	bne.n	8009792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009758:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009762:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2220      	movs	r2, #32
 800976e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977e:	f043 0204 	orr.w	r2, r3, #4
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e046      	b.n	8009820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009798:	d021      	beq.n	80097de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800979a:	f7fe f889 	bl	80078b0 <HAL_GetTick>
 800979e:	4602      	mov	r2, r0
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	1ad3      	subs	r3, r2, r3
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d302      	bcc.n	80097b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d116      	bne.n	80097de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2220      	movs	r2, #32
 80097ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ca:	f043 0220 	orr.w	r2, r3, #32
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	e020      	b.n	8009820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	0c1b      	lsrs	r3, r3, #16
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d10c      	bne.n	8009802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	43da      	mvns	r2, r3
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	4013      	ands	r3, r2
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	bf14      	ite	ne
 80097fa:	2301      	movne	r3, #1
 80097fc:	2300      	moveq	r3, #0
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	e00b      	b.n	800981a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	699b      	ldr	r3, [r3, #24]
 8009808:	43da      	mvns	r2, r3
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	4013      	ands	r3, r2
 800980e:	b29b      	uxth	r3, r3
 8009810:	2b00      	cmp	r3, #0
 8009812:	bf14      	ite	ne
 8009814:	2301      	movne	r3, #1
 8009816:	2300      	moveq	r3, #0
 8009818:	b2db      	uxtb	r3, r3
 800981a:	2b00      	cmp	r3, #0
 800981c:	d18d      	bne.n	800973a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009834:	e02d      	b.n	8009892 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f000 f8ce 	bl	80099d8 <I2C_IsAcknowledgeFailed>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d001      	beq.n	8009846 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e02d      	b.n	80098a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800984c:	d021      	beq.n	8009892 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800984e:	f7fe f82f 	bl	80078b0 <HAL_GetTick>
 8009852:	4602      	mov	r2, r0
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	68ba      	ldr	r2, [r7, #8]
 800985a:	429a      	cmp	r2, r3
 800985c:	d302      	bcc.n	8009864 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d116      	bne.n	8009892 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2200      	movs	r2, #0
 8009868:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2220      	movs	r2, #32
 800986e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800987e:	f043 0220 	orr.w	r2, r3, #32
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2200      	movs	r2, #0
 800988a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	e007      	b.n	80098a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	695b      	ldr	r3, [r3, #20]
 8009898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800989c:	2b80      	cmp	r3, #128	; 0x80
 800989e:	d1ca      	bne.n	8009836 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b084      	sub	sp, #16
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	60f8      	str	r0, [r7, #12]
 80098b2:	60b9      	str	r1, [r7, #8]
 80098b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80098b6:	e02d      	b.n	8009914 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f000 f88d 	bl	80099d8 <I2C_IsAcknowledgeFailed>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	e02d      	b.n	8009924 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098ce:	d021      	beq.n	8009914 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098d0:	f7fd ffee 	bl	80078b0 <HAL_GetTick>
 80098d4:	4602      	mov	r2, r0
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d302      	bcc.n	80098e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d116      	bne.n	8009914 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2220      	movs	r2, #32
 80098f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009900:	f043 0220 	orr.w	r2, r3, #32
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e007      	b.n	8009924 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	f003 0304 	and.w	r3, r3, #4
 800991e:	2b04      	cmp	r3, #4
 8009920:	d1ca      	bne.n	80098b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009938:	e042      	b.n	80099c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	695b      	ldr	r3, [r3, #20]
 8009940:	f003 0310 	and.w	r3, r3, #16
 8009944:	2b10      	cmp	r3, #16
 8009946:	d119      	bne.n	800997c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f06f 0210 	mvn.w	r2, #16
 8009950:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2200      	movs	r2, #0
 8009956:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2220      	movs	r2, #32
 800995c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	e029      	b.n	80099d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800997c:	f7fd ff98 	bl	80078b0 <HAL_GetTick>
 8009980:	4602      	mov	r2, r0
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	1ad3      	subs	r3, r2, r3
 8009986:	68ba      	ldr	r2, [r7, #8]
 8009988:	429a      	cmp	r2, r3
 800998a:	d302      	bcc.n	8009992 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d116      	bne.n	80099c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2200      	movs	r2, #0
 8009996:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2220      	movs	r2, #32
 800999c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2200      	movs	r2, #0
 80099a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ac:	f043 0220 	orr.w	r2, r3, #32
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	e007      	b.n	80099d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	695b      	ldr	r3, [r3, #20]
 80099c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ca:	2b40      	cmp	r3, #64	; 0x40
 80099cc:	d1b5      	bne.n	800993a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099ee:	d11b      	bne.n	8009a28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80099f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2220      	movs	r2, #32
 8009a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a14:	f043 0204 	orr.w	r2, r3, #4
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	e000      	b.n	8009a2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	370c      	adds	r7, #12
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bc80      	pop	{r7}
 8009a32:	4770      	bx	lr

08009a34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d101      	bne.n	8009a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e26c      	b.n	8009f20 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f003 0301 	and.w	r3, r3, #1
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f000 8087 	beq.w	8009b62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009a54:	4b92      	ldr	r3, [pc, #584]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	f003 030c 	and.w	r3, r3, #12
 8009a5c:	2b04      	cmp	r3, #4
 8009a5e:	d00c      	beq.n	8009a7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009a60:	4b8f      	ldr	r3, [pc, #572]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	f003 030c 	and.w	r3, r3, #12
 8009a68:	2b08      	cmp	r3, #8
 8009a6a:	d112      	bne.n	8009a92 <HAL_RCC_OscConfig+0x5e>
 8009a6c:	4b8c      	ldr	r3, [pc, #560]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a78:	d10b      	bne.n	8009a92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a7a:	4b89      	ldr	r3, [pc, #548]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d06c      	beq.n	8009b60 <HAL_RCC_OscConfig+0x12c>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d168      	bne.n	8009b60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e246      	b.n	8009f20 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a9a:	d106      	bne.n	8009aaa <HAL_RCC_OscConfig+0x76>
 8009a9c:	4b80      	ldr	r3, [pc, #512]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a7f      	ldr	r2, [pc, #508]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009aa6:	6013      	str	r3, [r2, #0]
 8009aa8:	e02e      	b.n	8009b08 <HAL_RCC_OscConfig+0xd4>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10c      	bne.n	8009acc <HAL_RCC_OscConfig+0x98>
 8009ab2:	4b7b      	ldr	r3, [pc, #492]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a7a      	ldr	r2, [pc, #488]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009abc:	6013      	str	r3, [r2, #0]
 8009abe:	4b78      	ldr	r3, [pc, #480]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a77      	ldr	r2, [pc, #476]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009ac4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ac8:	6013      	str	r3, [r2, #0]
 8009aca:	e01d      	b.n	8009b08 <HAL_RCC_OscConfig+0xd4>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ad4:	d10c      	bne.n	8009af0 <HAL_RCC_OscConfig+0xbc>
 8009ad6:	4b72      	ldr	r3, [pc, #456]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a71      	ldr	r2, [pc, #452]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ae0:	6013      	str	r3, [r2, #0]
 8009ae2:	4b6f      	ldr	r3, [pc, #444]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a6e      	ldr	r2, [pc, #440]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009aec:	6013      	str	r3, [r2, #0]
 8009aee:	e00b      	b.n	8009b08 <HAL_RCC_OscConfig+0xd4>
 8009af0:	4b6b      	ldr	r3, [pc, #428]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a6a      	ldr	r2, [pc, #424]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009afa:	6013      	str	r3, [r2, #0]
 8009afc:	4b68      	ldr	r3, [pc, #416]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a67      	ldr	r2, [pc, #412]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d013      	beq.n	8009b38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b10:	f7fd fece 	bl	80078b0 <HAL_GetTick>
 8009b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b16:	e008      	b.n	8009b2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b18:	f7fd feca 	bl	80078b0 <HAL_GetTick>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	2b64      	cmp	r3, #100	; 0x64
 8009b24:	d901      	bls.n	8009b2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009b26:	2303      	movs	r3, #3
 8009b28:	e1fa      	b.n	8009f20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b2a:	4b5d      	ldr	r3, [pc, #372]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d0f0      	beq.n	8009b18 <HAL_RCC_OscConfig+0xe4>
 8009b36:	e014      	b.n	8009b62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b38:	f7fd feba 	bl	80078b0 <HAL_GetTick>
 8009b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b3e:	e008      	b.n	8009b52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b40:	f7fd feb6 	bl	80078b0 <HAL_GetTick>
 8009b44:	4602      	mov	r2, r0
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	2b64      	cmp	r3, #100	; 0x64
 8009b4c:	d901      	bls.n	8009b52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009b4e:	2303      	movs	r3, #3
 8009b50:	e1e6      	b.n	8009f20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b52:	4b53      	ldr	r3, [pc, #332]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1f0      	bne.n	8009b40 <HAL_RCC_OscConfig+0x10c>
 8009b5e:	e000      	b.n	8009b62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f003 0302 	and.w	r3, r3, #2
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d063      	beq.n	8009c36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009b6e:	4b4c      	ldr	r3, [pc, #304]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	f003 030c 	and.w	r3, r3, #12
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00b      	beq.n	8009b92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009b7a:	4b49      	ldr	r3, [pc, #292]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	f003 030c 	and.w	r3, r3, #12
 8009b82:	2b08      	cmp	r3, #8
 8009b84:	d11c      	bne.n	8009bc0 <HAL_RCC_OscConfig+0x18c>
 8009b86:	4b46      	ldr	r3, [pc, #280]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d116      	bne.n	8009bc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b92:	4b43      	ldr	r3, [pc, #268]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f003 0302 	and.w	r3, r3, #2
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d005      	beq.n	8009baa <HAL_RCC_OscConfig+0x176>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	691b      	ldr	r3, [r3, #16]
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d001      	beq.n	8009baa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e1ba      	b.n	8009f20 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009baa:	4b3d      	ldr	r3, [pc, #244]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	695b      	ldr	r3, [r3, #20]
 8009bb6:	00db      	lsls	r3, r3, #3
 8009bb8:	4939      	ldr	r1, [pc, #228]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009bbe:	e03a      	b.n	8009c36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d020      	beq.n	8009c0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009bc8:	4b36      	ldr	r3, [pc, #216]	; (8009ca4 <HAL_RCC_OscConfig+0x270>)
 8009bca:	2201      	movs	r2, #1
 8009bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bce:	f7fd fe6f 	bl	80078b0 <HAL_GetTick>
 8009bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009bd4:	e008      	b.n	8009be8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009bd6:	f7fd fe6b 	bl	80078b0 <HAL_GetTick>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	d901      	bls.n	8009be8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009be4:	2303      	movs	r3, #3
 8009be6:	e19b      	b.n	8009f20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009be8:	4b2d      	ldr	r3, [pc, #180]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f003 0302 	and.w	r3, r3, #2
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d0f0      	beq.n	8009bd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bf4:	4b2a      	ldr	r3, [pc, #168]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	00db      	lsls	r3, r3, #3
 8009c02:	4927      	ldr	r1, [pc, #156]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009c04:	4313      	orrs	r3, r2
 8009c06:	600b      	str	r3, [r1, #0]
 8009c08:	e015      	b.n	8009c36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c0a:	4b26      	ldr	r3, [pc, #152]	; (8009ca4 <HAL_RCC_OscConfig+0x270>)
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c10:	f7fd fe4e 	bl	80078b0 <HAL_GetTick>
 8009c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c16:	e008      	b.n	8009c2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c18:	f7fd fe4a 	bl	80078b0 <HAL_GetTick>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d901      	bls.n	8009c2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8009c26:	2303      	movs	r3, #3
 8009c28:	e17a      	b.n	8009f20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c2a:	4b1d      	ldr	r3, [pc, #116]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 0302 	and.w	r3, r3, #2
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1f0      	bne.n	8009c18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f003 0308 	and.w	r3, r3, #8
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d03a      	beq.n	8009cb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d019      	beq.n	8009c7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c4a:	4b17      	ldr	r3, [pc, #92]	; (8009ca8 <HAL_RCC_OscConfig+0x274>)
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c50:	f7fd fe2e 	bl	80078b0 <HAL_GetTick>
 8009c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c56:	e008      	b.n	8009c6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c58:	f7fd fe2a 	bl	80078b0 <HAL_GetTick>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d901      	bls.n	8009c6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8009c66:	2303      	movs	r3, #3
 8009c68:	e15a      	b.n	8009f20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c6a:	4b0d      	ldr	r3, [pc, #52]	; (8009ca0 <HAL_RCC_OscConfig+0x26c>)
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6e:	f003 0302 	and.w	r3, r3, #2
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d0f0      	beq.n	8009c58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8009c76:	2001      	movs	r0, #1
 8009c78:	f000 fac4 	bl	800a204 <RCC_Delay>
 8009c7c:	e01c      	b.n	8009cb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c7e:	4b0a      	ldr	r3, [pc, #40]	; (8009ca8 <HAL_RCC_OscConfig+0x274>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c84:	f7fd fe14 	bl	80078b0 <HAL_GetTick>
 8009c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c8a:	e00f      	b.n	8009cac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c8c:	f7fd fe10 	bl	80078b0 <HAL_GetTick>
 8009c90:	4602      	mov	r2, r0
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	d908      	bls.n	8009cac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	e140      	b.n	8009f20 <HAL_RCC_OscConfig+0x4ec>
 8009c9e:	bf00      	nop
 8009ca0:	40021000 	.word	0x40021000
 8009ca4:	42420000 	.word	0x42420000
 8009ca8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009cac:	4b9e      	ldr	r3, [pc, #632]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb0:	f003 0302 	and.w	r3, r3, #2
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1e9      	bne.n	8009c8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 0304 	and.w	r3, r3, #4
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 80a6 	beq.w	8009e12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009cca:	4b97      	ldr	r3, [pc, #604]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009ccc:	69db      	ldr	r3, [r3, #28]
 8009cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d10d      	bne.n	8009cf2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009cd6:	4b94      	ldr	r3, [pc, #592]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009cd8:	69db      	ldr	r3, [r3, #28]
 8009cda:	4a93      	ldr	r2, [pc, #588]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ce0:	61d3      	str	r3, [r2, #28]
 8009ce2:	4b91      	ldr	r3, [pc, #580]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009ce4:	69db      	ldr	r3, [r3, #28]
 8009ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cea:	60bb      	str	r3, [r7, #8]
 8009cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cf2:	4b8e      	ldr	r3, [pc, #568]	; (8009f2c <HAL_RCC_OscConfig+0x4f8>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d118      	bne.n	8009d30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009cfe:	4b8b      	ldr	r3, [pc, #556]	; (8009f2c <HAL_RCC_OscConfig+0x4f8>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a8a      	ldr	r2, [pc, #552]	; (8009f2c <HAL_RCC_OscConfig+0x4f8>)
 8009d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d0a:	f7fd fdd1 	bl	80078b0 <HAL_GetTick>
 8009d0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d10:	e008      	b.n	8009d24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d12:	f7fd fdcd 	bl	80078b0 <HAL_GetTick>
 8009d16:	4602      	mov	r2, r0
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	2b64      	cmp	r3, #100	; 0x64
 8009d1e:	d901      	bls.n	8009d24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e0fd      	b.n	8009f20 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d24:	4b81      	ldr	r3, [pc, #516]	; (8009f2c <HAL_RCC_OscConfig+0x4f8>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d0f0      	beq.n	8009d12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d106      	bne.n	8009d46 <HAL_RCC_OscConfig+0x312>
 8009d38:	4b7b      	ldr	r3, [pc, #492]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009d3a:	6a1b      	ldr	r3, [r3, #32]
 8009d3c:	4a7a      	ldr	r2, [pc, #488]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009d3e:	f043 0301 	orr.w	r3, r3, #1
 8009d42:	6213      	str	r3, [r2, #32]
 8009d44:	e02d      	b.n	8009da2 <HAL_RCC_OscConfig+0x36e>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d10c      	bne.n	8009d68 <HAL_RCC_OscConfig+0x334>
 8009d4e:	4b76      	ldr	r3, [pc, #472]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009d50:	6a1b      	ldr	r3, [r3, #32]
 8009d52:	4a75      	ldr	r2, [pc, #468]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009d54:	f023 0301 	bic.w	r3, r3, #1
 8009d58:	6213      	str	r3, [r2, #32]
 8009d5a:	4b73      	ldr	r3, [pc, #460]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009d5c:	6a1b      	ldr	r3, [r3, #32]
 8009d5e:	4a72      	ldr	r2, [pc, #456]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009d60:	f023 0304 	bic.w	r3, r3, #4
 8009d64:	6213      	str	r3, [r2, #32]
 8009d66:	e01c      	b.n	8009da2 <HAL_RCC_OscConfig+0x36e>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	2b05      	cmp	r3, #5
 8009d6e:	d10c      	bne.n	8009d8a <HAL_RCC_OscConfig+0x356>
 8009d70:	4b6d      	ldr	r3, [pc, #436]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009d72:	6a1b      	ldr	r3, [r3, #32]
 8009d74:	4a6c      	ldr	r2, [pc, #432]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009d76:	f043 0304 	orr.w	r3, r3, #4
 8009d7a:	6213      	str	r3, [r2, #32]
 8009d7c:	4b6a      	ldr	r3, [pc, #424]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009d7e:	6a1b      	ldr	r3, [r3, #32]
 8009d80:	4a69      	ldr	r2, [pc, #420]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009d82:	f043 0301 	orr.w	r3, r3, #1
 8009d86:	6213      	str	r3, [r2, #32]
 8009d88:	e00b      	b.n	8009da2 <HAL_RCC_OscConfig+0x36e>
 8009d8a:	4b67      	ldr	r3, [pc, #412]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009d8c:	6a1b      	ldr	r3, [r3, #32]
 8009d8e:	4a66      	ldr	r2, [pc, #408]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009d90:	f023 0301 	bic.w	r3, r3, #1
 8009d94:	6213      	str	r3, [r2, #32]
 8009d96:	4b64      	ldr	r3, [pc, #400]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009d98:	6a1b      	ldr	r3, [r3, #32]
 8009d9a:	4a63      	ldr	r2, [pc, #396]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009d9c:	f023 0304 	bic.w	r3, r3, #4
 8009da0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d015      	beq.n	8009dd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009daa:	f7fd fd81 	bl	80078b0 <HAL_GetTick>
 8009dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009db0:	e00a      	b.n	8009dc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009db2:	f7fd fd7d 	bl	80078b0 <HAL_GetTick>
 8009db6:	4602      	mov	r2, r0
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	1ad3      	subs	r3, r2, r3
 8009dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d901      	bls.n	8009dc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	e0ab      	b.n	8009f20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009dc8:	4b57      	ldr	r3, [pc, #348]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009dca:	6a1b      	ldr	r3, [r3, #32]
 8009dcc:	f003 0302 	and.w	r3, r3, #2
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d0ee      	beq.n	8009db2 <HAL_RCC_OscConfig+0x37e>
 8009dd4:	e014      	b.n	8009e00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009dd6:	f7fd fd6b 	bl	80078b0 <HAL_GetTick>
 8009dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ddc:	e00a      	b.n	8009df4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dde:	f7fd fd67 	bl	80078b0 <HAL_GetTick>
 8009de2:	4602      	mov	r2, r0
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	1ad3      	subs	r3, r2, r3
 8009de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d901      	bls.n	8009df4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009df0:	2303      	movs	r3, #3
 8009df2:	e095      	b.n	8009f20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009df4:	4b4c      	ldr	r3, [pc, #304]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009df6:	6a1b      	ldr	r3, [r3, #32]
 8009df8:	f003 0302 	and.w	r3, r3, #2
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d1ee      	bne.n	8009dde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009e00:	7dfb      	ldrb	r3, [r7, #23]
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d105      	bne.n	8009e12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e06:	4b48      	ldr	r3, [pc, #288]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009e08:	69db      	ldr	r3, [r3, #28]
 8009e0a:	4a47      	ldr	r2, [pc, #284]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	69db      	ldr	r3, [r3, #28]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f000 8081 	beq.w	8009f1e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009e1c:	4b42      	ldr	r3, [pc, #264]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	f003 030c 	and.w	r3, r3, #12
 8009e24:	2b08      	cmp	r3, #8
 8009e26:	d061      	beq.n	8009eec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	69db      	ldr	r3, [r3, #28]
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d146      	bne.n	8009ebe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e30:	4b3f      	ldr	r3, [pc, #252]	; (8009f30 <HAL_RCC_OscConfig+0x4fc>)
 8009e32:	2200      	movs	r2, #0
 8009e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e36:	f7fd fd3b 	bl	80078b0 <HAL_GetTick>
 8009e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009e3c:	e008      	b.n	8009e50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e3e:	f7fd fd37 	bl	80078b0 <HAL_GetTick>
 8009e42:	4602      	mov	r2, r0
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	2b02      	cmp	r3, #2
 8009e4a:	d901      	bls.n	8009e50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	e067      	b.n	8009f20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009e50:	4b35      	ldr	r3, [pc, #212]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1f0      	bne.n	8009e3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6a1b      	ldr	r3, [r3, #32]
 8009e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e64:	d108      	bne.n	8009e78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009e66:	4b30      	ldr	r3, [pc, #192]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	492d      	ldr	r1, [pc, #180]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009e74:	4313      	orrs	r3, r2
 8009e76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e78:	4b2b      	ldr	r3, [pc, #172]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6a19      	ldr	r1, [r3, #32]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e88:	430b      	orrs	r3, r1
 8009e8a:	4927      	ldr	r1, [pc, #156]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e90:	4b27      	ldr	r3, [pc, #156]	; (8009f30 <HAL_RCC_OscConfig+0x4fc>)
 8009e92:	2201      	movs	r2, #1
 8009e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e96:	f7fd fd0b 	bl	80078b0 <HAL_GetTick>
 8009e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009e9c:	e008      	b.n	8009eb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e9e:	f7fd fd07 	bl	80078b0 <HAL_GetTick>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d901      	bls.n	8009eb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009eac:	2303      	movs	r3, #3
 8009eae:	e037      	b.n	8009f20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009eb0:	4b1d      	ldr	r3, [pc, #116]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d0f0      	beq.n	8009e9e <HAL_RCC_OscConfig+0x46a>
 8009ebc:	e02f      	b.n	8009f1e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ebe:	4b1c      	ldr	r3, [pc, #112]	; (8009f30 <HAL_RCC_OscConfig+0x4fc>)
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ec4:	f7fd fcf4 	bl	80078b0 <HAL_GetTick>
 8009ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009eca:	e008      	b.n	8009ede <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ecc:	f7fd fcf0 	bl	80078b0 <HAL_GetTick>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	1ad3      	subs	r3, r2, r3
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	d901      	bls.n	8009ede <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009eda:	2303      	movs	r3, #3
 8009edc:	e020      	b.n	8009f20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009ede:	4b12      	ldr	r3, [pc, #72]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1f0      	bne.n	8009ecc <HAL_RCC_OscConfig+0x498>
 8009eea:	e018      	b.n	8009f1e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	69db      	ldr	r3, [r3, #28]
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d101      	bne.n	8009ef8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e013      	b.n	8009f20 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009ef8:	4b0b      	ldr	r3, [pc, #44]	; (8009f28 <HAL_RCC_OscConfig+0x4f4>)
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6a1b      	ldr	r3, [r3, #32]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d106      	bne.n	8009f1a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d001      	beq.n	8009f1e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e000      	b.n	8009f20 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3718      	adds	r7, #24
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	40021000 	.word	0x40021000
 8009f2c:	40007000 	.word	0x40007000
 8009f30:	42420060 	.word	0x42420060

08009f34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d101      	bne.n	8009f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	e0d0      	b.n	800a0ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f48:	4b6a      	ldr	r3, [pc, #424]	; (800a0f4 <HAL_RCC_ClockConfig+0x1c0>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0307 	and.w	r3, r3, #7
 8009f50:	683a      	ldr	r2, [r7, #0]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d910      	bls.n	8009f78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f56:	4b67      	ldr	r3, [pc, #412]	; (800a0f4 <HAL_RCC_ClockConfig+0x1c0>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f023 0207 	bic.w	r2, r3, #7
 8009f5e:	4965      	ldr	r1, [pc, #404]	; (800a0f4 <HAL_RCC_ClockConfig+0x1c0>)
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f66:	4b63      	ldr	r3, [pc, #396]	; (800a0f4 <HAL_RCC_ClockConfig+0x1c0>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f003 0307 	and.w	r3, r3, #7
 8009f6e:	683a      	ldr	r2, [r7, #0]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d001      	beq.n	8009f78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009f74:	2301      	movs	r3, #1
 8009f76:	e0b8      	b.n	800a0ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 0302 	and.w	r3, r3, #2
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d020      	beq.n	8009fc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 0304 	and.w	r3, r3, #4
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d005      	beq.n	8009f9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009f90:	4b59      	ldr	r3, [pc, #356]	; (800a0f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	4a58      	ldr	r2, [pc, #352]	; (800a0f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009f96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009f9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f003 0308 	and.w	r3, r3, #8
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d005      	beq.n	8009fb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009fa8:	4b53      	ldr	r3, [pc, #332]	; (800a0f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	4a52      	ldr	r2, [pc, #328]	; (800a0f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009fae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8009fb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fb4:	4b50      	ldr	r3, [pc, #320]	; (800a0f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	494d      	ldr	r1, [pc, #308]	; (800a0f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f003 0301 	and.w	r3, r3, #1
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d040      	beq.n	800a054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d107      	bne.n	8009fea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009fda:	4b47      	ldr	r3, [pc, #284]	; (800a0f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d115      	bne.n	800a012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e07f      	b.n	800a0ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d107      	bne.n	800a002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ff2:	4b41      	ldr	r3, [pc, #260]	; (800a0f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d109      	bne.n	800a012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	e073      	b.n	800a0ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a002:	4b3d      	ldr	r3, [pc, #244]	; (800a0f8 <HAL_RCC_ClockConfig+0x1c4>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 0302 	and.w	r3, r3, #2
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d101      	bne.n	800a012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	e06b      	b.n	800a0ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a012:	4b39      	ldr	r3, [pc, #228]	; (800a0f8 <HAL_RCC_ClockConfig+0x1c4>)
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	f023 0203 	bic.w	r2, r3, #3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	4936      	ldr	r1, [pc, #216]	; (800a0f8 <HAL_RCC_ClockConfig+0x1c4>)
 800a020:	4313      	orrs	r3, r2
 800a022:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a024:	f7fd fc44 	bl	80078b0 <HAL_GetTick>
 800a028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a02a:	e00a      	b.n	800a042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a02c:	f7fd fc40 	bl	80078b0 <HAL_GetTick>
 800a030:	4602      	mov	r2, r0
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	1ad3      	subs	r3, r2, r3
 800a036:	f241 3288 	movw	r2, #5000	; 0x1388
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d901      	bls.n	800a042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a03e:	2303      	movs	r3, #3
 800a040:	e053      	b.n	800a0ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a042:	4b2d      	ldr	r3, [pc, #180]	; (800a0f8 <HAL_RCC_ClockConfig+0x1c4>)
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	f003 020c 	and.w	r2, r3, #12
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	429a      	cmp	r2, r3
 800a052:	d1eb      	bne.n	800a02c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a054:	4b27      	ldr	r3, [pc, #156]	; (800a0f4 <HAL_RCC_ClockConfig+0x1c0>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 0307 	and.w	r3, r3, #7
 800a05c:	683a      	ldr	r2, [r7, #0]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d210      	bcs.n	800a084 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a062:	4b24      	ldr	r3, [pc, #144]	; (800a0f4 <HAL_RCC_ClockConfig+0x1c0>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f023 0207 	bic.w	r2, r3, #7
 800a06a:	4922      	ldr	r1, [pc, #136]	; (800a0f4 <HAL_RCC_ClockConfig+0x1c0>)
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	4313      	orrs	r3, r2
 800a070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a072:	4b20      	ldr	r3, [pc, #128]	; (800a0f4 <HAL_RCC_ClockConfig+0x1c0>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 0307 	and.w	r3, r3, #7
 800a07a:	683a      	ldr	r2, [r7, #0]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d001      	beq.n	800a084 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	e032      	b.n	800a0ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f003 0304 	and.w	r3, r3, #4
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d008      	beq.n	800a0a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a090:	4b19      	ldr	r3, [pc, #100]	; (800a0f8 <HAL_RCC_ClockConfig+0x1c4>)
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	4916      	ldr	r1, [pc, #88]	; (800a0f8 <HAL_RCC_ClockConfig+0x1c4>)
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f003 0308 	and.w	r3, r3, #8
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d009      	beq.n	800a0c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a0ae:	4b12      	ldr	r3, [pc, #72]	; (800a0f8 <HAL_RCC_ClockConfig+0x1c4>)
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	00db      	lsls	r3, r3, #3
 800a0bc:	490e      	ldr	r1, [pc, #56]	; (800a0f8 <HAL_RCC_ClockConfig+0x1c4>)
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a0c2:	f000 f821 	bl	800a108 <HAL_RCC_GetSysClockFreq>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	4b0b      	ldr	r3, [pc, #44]	; (800a0f8 <HAL_RCC_ClockConfig+0x1c4>)
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	091b      	lsrs	r3, r3, #4
 800a0ce:	f003 030f 	and.w	r3, r3, #15
 800a0d2:	490a      	ldr	r1, [pc, #40]	; (800a0fc <HAL_RCC_ClockConfig+0x1c8>)
 800a0d4:	5ccb      	ldrb	r3, [r1, r3]
 800a0d6:	fa22 f303 	lsr.w	r3, r2, r3
 800a0da:	4a09      	ldr	r2, [pc, #36]	; (800a100 <HAL_RCC_ClockConfig+0x1cc>)
 800a0dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a0de:	4b09      	ldr	r3, [pc, #36]	; (800a104 <HAL_RCC_ClockConfig+0x1d0>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7fd fba2 	bl	800782c <HAL_InitTick>

  return HAL_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	40022000 	.word	0x40022000
 800a0f8:	40021000 	.word	0x40021000
 800a0fc:	0800a794 	.word	0x0800a794
 800a100:	20000000 	.word	0x20000000
 800a104:	2000000c 	.word	0x2000000c

0800a108 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a108:	b490      	push	{r4, r7}
 800a10a:	b08a      	sub	sp, #40	; 0x28
 800a10c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800a10e:	4b2a      	ldr	r3, [pc, #168]	; (800a1b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800a110:	1d3c      	adds	r4, r7, #4
 800a112:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a114:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800a118:	f240 2301 	movw	r3, #513	; 0x201
 800a11c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a11e:	2300      	movs	r3, #0
 800a120:	61fb      	str	r3, [r7, #28]
 800a122:	2300      	movs	r3, #0
 800a124:	61bb      	str	r3, [r7, #24]
 800a126:	2300      	movs	r3, #0
 800a128:	627b      	str	r3, [r7, #36]	; 0x24
 800a12a:	2300      	movs	r3, #0
 800a12c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800a12e:	2300      	movs	r3, #0
 800a130:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a132:	4b22      	ldr	r3, [pc, #136]	; (800a1bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	f003 030c 	and.w	r3, r3, #12
 800a13e:	2b04      	cmp	r3, #4
 800a140:	d002      	beq.n	800a148 <HAL_RCC_GetSysClockFreq+0x40>
 800a142:	2b08      	cmp	r3, #8
 800a144:	d003      	beq.n	800a14e <HAL_RCC_GetSysClockFreq+0x46>
 800a146:	e02d      	b.n	800a1a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a148:	4b1d      	ldr	r3, [pc, #116]	; (800a1c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a14a:	623b      	str	r3, [r7, #32]
      break;
 800a14c:	e02d      	b.n	800a1aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	0c9b      	lsrs	r3, r3, #18
 800a152:	f003 030f 	and.w	r3, r3, #15
 800a156:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a15a:	4413      	add	r3, r2
 800a15c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800a160:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d013      	beq.n	800a194 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a16c:	4b13      	ldr	r3, [pc, #76]	; (800a1bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	0c5b      	lsrs	r3, r3, #17
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a17a:	4413      	add	r3, r2
 800a17c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a180:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	4a0e      	ldr	r2, [pc, #56]	; (800a1c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a186:	fb02 f203 	mul.w	r2, r2, r3
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a190:	627b      	str	r3, [r7, #36]	; 0x24
 800a192:	e004      	b.n	800a19e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	4a0b      	ldr	r2, [pc, #44]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a198:	fb02 f303 	mul.w	r3, r2, r3
 800a19c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800a19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a0:	623b      	str	r3, [r7, #32]
      break;
 800a1a2:	e002      	b.n	800a1aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a1a4:	4b06      	ldr	r3, [pc, #24]	; (800a1c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a1a6:	623b      	str	r3, [r7, #32]
      break;
 800a1a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a1aa:	6a3b      	ldr	r3, [r7, #32]
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3728      	adds	r7, #40	; 0x28
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bc90      	pop	{r4, r7}
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	0800a784 	.word	0x0800a784
 800a1bc:	40021000 	.word	0x40021000
 800a1c0:	007a1200 	.word	0x007a1200
 800a1c4:	003d0900 	.word	0x003d0900

0800a1c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a1cc:	4b02      	ldr	r3, [pc, #8]	; (800a1d8 <HAL_RCC_GetHCLKFreq+0x10>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bc80      	pop	{r7}
 800a1d6:	4770      	bx	lr
 800a1d8:	20000000 	.word	0x20000000

0800a1dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a1e0:	f7ff fff2 	bl	800a1c8 <HAL_RCC_GetHCLKFreq>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	4b05      	ldr	r3, [pc, #20]	; (800a1fc <HAL_RCC_GetPCLK1Freq+0x20>)
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	0a1b      	lsrs	r3, r3, #8
 800a1ec:	f003 0307 	and.w	r3, r3, #7
 800a1f0:	4903      	ldr	r1, [pc, #12]	; (800a200 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a1f2:	5ccb      	ldrb	r3, [r1, r3]
 800a1f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	40021000 	.word	0x40021000
 800a200:	0800a7a4 	.word	0x0800a7a4

0800a204 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a20c:	4b0a      	ldr	r3, [pc, #40]	; (800a238 <RCC_Delay+0x34>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a0a      	ldr	r2, [pc, #40]	; (800a23c <RCC_Delay+0x38>)
 800a212:	fba2 2303 	umull	r2, r3, r2, r3
 800a216:	0a5b      	lsrs	r3, r3, #9
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	fb02 f303 	mul.w	r3, r2, r3
 800a21e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a220:	bf00      	nop
  }
  while (Delay --);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	1e5a      	subs	r2, r3, #1
 800a226:	60fa      	str	r2, [r7, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1f9      	bne.n	800a220 <RCC_Delay+0x1c>
}
 800a22c:	bf00      	nop
 800a22e:	bf00      	nop
 800a230:	3714      	adds	r7, #20
 800a232:	46bd      	mov	sp, r7
 800a234:	bc80      	pop	{r7}
 800a236:	4770      	bx	lr
 800a238:	20000000 	.word	0x20000000
 800a23c:	10624dd3 	.word	0x10624dd3

0800a240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d101      	bne.n	800a252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e041      	b.n	800a2d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d106      	bne.n	800a26c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f7f6 fbce 	bl	8000a08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2202      	movs	r2, #2
 800a270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	3304      	adds	r3, #4
 800a27c:	4619      	mov	r1, r3
 800a27e:	4610      	mov	r0, r2
 800a280:	f000 f8f2 	bl	800a468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2201      	movs	r2, #1
 800a298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2d4:	2300      	movs	r3, #0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b084      	sub	sp, #16
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
 800a2e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d101      	bne.n	800a2f6 <HAL_TIM_ConfigClockSource+0x18>
 800a2f2:	2302      	movs	r3, #2
 800a2f4:	e0b3      	b.n	800a45e <HAL_TIM_ConfigClockSource+0x180>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2202      	movs	r2, #2
 800a302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a314:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a31c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a32e:	d03e      	beq.n	800a3ae <HAL_TIM_ConfigClockSource+0xd0>
 800a330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a334:	f200 8087 	bhi.w	800a446 <HAL_TIM_ConfigClockSource+0x168>
 800a338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a33c:	f000 8085 	beq.w	800a44a <HAL_TIM_ConfigClockSource+0x16c>
 800a340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a344:	d87f      	bhi.n	800a446 <HAL_TIM_ConfigClockSource+0x168>
 800a346:	2b70      	cmp	r3, #112	; 0x70
 800a348:	d01a      	beq.n	800a380 <HAL_TIM_ConfigClockSource+0xa2>
 800a34a:	2b70      	cmp	r3, #112	; 0x70
 800a34c:	d87b      	bhi.n	800a446 <HAL_TIM_ConfigClockSource+0x168>
 800a34e:	2b60      	cmp	r3, #96	; 0x60
 800a350:	d050      	beq.n	800a3f4 <HAL_TIM_ConfigClockSource+0x116>
 800a352:	2b60      	cmp	r3, #96	; 0x60
 800a354:	d877      	bhi.n	800a446 <HAL_TIM_ConfigClockSource+0x168>
 800a356:	2b50      	cmp	r3, #80	; 0x50
 800a358:	d03c      	beq.n	800a3d4 <HAL_TIM_ConfigClockSource+0xf6>
 800a35a:	2b50      	cmp	r3, #80	; 0x50
 800a35c:	d873      	bhi.n	800a446 <HAL_TIM_ConfigClockSource+0x168>
 800a35e:	2b40      	cmp	r3, #64	; 0x40
 800a360:	d058      	beq.n	800a414 <HAL_TIM_ConfigClockSource+0x136>
 800a362:	2b40      	cmp	r3, #64	; 0x40
 800a364:	d86f      	bhi.n	800a446 <HAL_TIM_ConfigClockSource+0x168>
 800a366:	2b30      	cmp	r3, #48	; 0x30
 800a368:	d064      	beq.n	800a434 <HAL_TIM_ConfigClockSource+0x156>
 800a36a:	2b30      	cmp	r3, #48	; 0x30
 800a36c:	d86b      	bhi.n	800a446 <HAL_TIM_ConfigClockSource+0x168>
 800a36e:	2b20      	cmp	r3, #32
 800a370:	d060      	beq.n	800a434 <HAL_TIM_ConfigClockSource+0x156>
 800a372:	2b20      	cmp	r3, #32
 800a374:	d867      	bhi.n	800a446 <HAL_TIM_ConfigClockSource+0x168>
 800a376:	2b00      	cmp	r3, #0
 800a378:	d05c      	beq.n	800a434 <HAL_TIM_ConfigClockSource+0x156>
 800a37a:	2b10      	cmp	r3, #16
 800a37c:	d05a      	beq.n	800a434 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a37e:	e062      	b.n	800a446 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6818      	ldr	r0, [r3, #0]
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	6899      	ldr	r1, [r3, #8]
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	685a      	ldr	r2, [r3, #4]
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	f000 f943 	bl	800a61a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a3a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	609a      	str	r2, [r3, #8]
      break;
 800a3ac:	e04e      	b.n	800a44c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6818      	ldr	r0, [r3, #0]
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	6899      	ldr	r1, [r3, #8]
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	685a      	ldr	r2, [r3, #4]
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	f000 f92c 	bl	800a61a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	689a      	ldr	r2, [r3, #8]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a3d0:	609a      	str	r2, [r3, #8]
      break;
 800a3d2:	e03b      	b.n	800a44c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6818      	ldr	r0, [r3, #0]
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	6859      	ldr	r1, [r3, #4]
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	f000 f8a3 	bl	800a52c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2150      	movs	r1, #80	; 0x50
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f000 f8fa 	bl	800a5e6 <TIM_ITRx_SetConfig>
      break;
 800a3f2:	e02b      	b.n	800a44c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6818      	ldr	r0, [r3, #0]
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	6859      	ldr	r1, [r3, #4]
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	461a      	mov	r2, r3
 800a402:	f000 f8c1 	bl	800a588 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	2160      	movs	r1, #96	; 0x60
 800a40c:	4618      	mov	r0, r3
 800a40e:	f000 f8ea 	bl	800a5e6 <TIM_ITRx_SetConfig>
      break;
 800a412:	e01b      	b.n	800a44c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6818      	ldr	r0, [r3, #0]
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	6859      	ldr	r1, [r3, #4]
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	461a      	mov	r2, r3
 800a422:	f000 f883 	bl	800a52c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	2140      	movs	r1, #64	; 0x40
 800a42c:	4618      	mov	r0, r3
 800a42e:	f000 f8da 	bl	800a5e6 <TIM_ITRx_SetConfig>
      break;
 800a432:	e00b      	b.n	800a44c <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4619      	mov	r1, r3
 800a43e:	4610      	mov	r0, r2
 800a440:	f000 f8d1 	bl	800a5e6 <TIM_ITRx_SetConfig>
        break;
 800a444:	e002      	b.n	800a44c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a446:	bf00      	nop
 800a448:	e000      	b.n	800a44c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a44a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a45c:	2300      	movs	r3, #0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
	...

0800a468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a468:	b480      	push	{r7}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4a29      	ldr	r2, [pc, #164]	; (800a520 <TIM_Base_SetConfig+0xb8>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d00b      	beq.n	800a498 <TIM_Base_SetConfig+0x30>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a486:	d007      	beq.n	800a498 <TIM_Base_SetConfig+0x30>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4a26      	ldr	r2, [pc, #152]	; (800a524 <TIM_Base_SetConfig+0xbc>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d003      	beq.n	800a498 <TIM_Base_SetConfig+0x30>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4a25      	ldr	r2, [pc, #148]	; (800a528 <TIM_Base_SetConfig+0xc0>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d108      	bne.n	800a4aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a49e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	4a1c      	ldr	r2, [pc, #112]	; (800a520 <TIM_Base_SetConfig+0xb8>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d00b      	beq.n	800a4ca <TIM_Base_SetConfig+0x62>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4b8:	d007      	beq.n	800a4ca <TIM_Base_SetConfig+0x62>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4a19      	ldr	r2, [pc, #100]	; (800a524 <TIM_Base_SetConfig+0xbc>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d003      	beq.n	800a4ca <TIM_Base_SetConfig+0x62>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4a18      	ldr	r2, [pc, #96]	; (800a528 <TIM_Base_SetConfig+0xc0>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d108      	bne.n	800a4dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	695b      	ldr	r3, [r3, #20]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	689a      	ldr	r2, [r3, #8]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4a07      	ldr	r2, [pc, #28]	; (800a520 <TIM_Base_SetConfig+0xb8>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d103      	bne.n	800a510 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	691a      	ldr	r2, [r3, #16]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	615a      	str	r2, [r3, #20]
}
 800a516:	bf00      	nop
 800a518:	3714      	adds	r7, #20
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bc80      	pop	{r7}
 800a51e:	4770      	bx	lr
 800a520:	40012c00 	.word	0x40012c00
 800a524:	40000400 	.word	0x40000400
 800a528:	40000800 	.word	0x40000800

0800a52c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b087      	sub	sp, #28
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6a1b      	ldr	r3, [r3, #32]
 800a53c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	f023 0201 	bic.w	r2, r3, #1
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	699b      	ldr	r3, [r3, #24]
 800a54e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	011b      	lsls	r3, r3, #4
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	4313      	orrs	r3, r2
 800a560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	f023 030a 	bic.w	r3, r3, #10
 800a568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	4313      	orrs	r3, r2
 800a570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	693a      	ldr	r2, [r7, #16]
 800a576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	697a      	ldr	r2, [r7, #20]
 800a57c:	621a      	str	r2, [r3, #32]
}
 800a57e:	bf00      	nop
 800a580:	371c      	adds	r7, #28
 800a582:	46bd      	mov	sp, r7
 800a584:	bc80      	pop	{r7}
 800a586:	4770      	bx	lr

0800a588 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a588:	b480      	push	{r7}
 800a58a:	b087      	sub	sp, #28
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	6a1b      	ldr	r3, [r3, #32]
 800a598:	f023 0210 	bic.w	r2, r3, #16
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	699b      	ldr	r3, [r3, #24]
 800a5a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	031b      	lsls	r3, r3, #12
 800a5b8:	697a      	ldr	r2, [r7, #20]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a5c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	011b      	lsls	r3, r3, #4
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	693a      	ldr	r2, [r7, #16]
 800a5da:	621a      	str	r2, [r3, #32]
}
 800a5dc:	bf00      	nop
 800a5de:	371c      	adds	r7, #28
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bc80      	pop	{r7}
 800a5e4:	4770      	bx	lr

0800a5e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5e6:	b480      	push	{r7}
 800a5e8:	b085      	sub	sp, #20
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
 800a5ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5fe:	683a      	ldr	r2, [r7, #0]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	4313      	orrs	r3, r2
 800a604:	f043 0307 	orr.w	r3, r3, #7
 800a608:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	609a      	str	r2, [r3, #8]
}
 800a610:	bf00      	nop
 800a612:	3714      	adds	r7, #20
 800a614:	46bd      	mov	sp, r7
 800a616:	bc80      	pop	{r7}
 800a618:	4770      	bx	lr

0800a61a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a61a:	b480      	push	{r7}
 800a61c:	b087      	sub	sp, #28
 800a61e:	af00      	add	r7, sp, #0
 800a620:	60f8      	str	r0, [r7, #12]
 800a622:	60b9      	str	r1, [r7, #8]
 800a624:	607a      	str	r2, [r7, #4]
 800a626:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a634:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	021a      	lsls	r2, r3, #8
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	431a      	orrs	r2, r3
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	4313      	orrs	r3, r2
 800a642:	697a      	ldr	r2, [r7, #20]
 800a644:	4313      	orrs	r3, r2
 800a646:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	697a      	ldr	r2, [r7, #20]
 800a64c:	609a      	str	r2, [r3, #8]
}
 800a64e:	bf00      	nop
 800a650:	371c      	adds	r7, #28
 800a652:	46bd      	mov	sp, r7
 800a654:	bc80      	pop	{r7}
 800a656:	4770      	bx	lr

0800a658 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d101      	bne.n	800a670 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a66c:	2302      	movs	r3, #2
 800a66e:	e046      	b.n	800a6fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2202      	movs	r2, #2
 800a67c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a696:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a16      	ldr	r2, [pc, #88]	; (800a708 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d00e      	beq.n	800a6d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6bc:	d009      	beq.n	800a6d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a12      	ldr	r2, [pc, #72]	; (800a70c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d004      	beq.n	800a6d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a10      	ldr	r2, [pc, #64]	; (800a710 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d10c      	bne.n	800a6ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3714      	adds	r7, #20
 800a702:	46bd      	mov	sp, r7
 800a704:	bc80      	pop	{r7}
 800a706:	4770      	bx	lr
 800a708:	40012c00 	.word	0x40012c00
 800a70c:	40000400 	.word	0x40000400
 800a710:	40000800 	.word	0x40000800

0800a714 <__libc_init_array>:
 800a714:	b570      	push	{r4, r5, r6, lr}
 800a716:	2600      	movs	r6, #0
 800a718:	4d0c      	ldr	r5, [pc, #48]	; (800a74c <__libc_init_array+0x38>)
 800a71a:	4c0d      	ldr	r4, [pc, #52]	; (800a750 <__libc_init_array+0x3c>)
 800a71c:	1b64      	subs	r4, r4, r5
 800a71e:	10a4      	asrs	r4, r4, #2
 800a720:	42a6      	cmp	r6, r4
 800a722:	d109      	bne.n	800a738 <__libc_init_array+0x24>
 800a724:	f000 f822 	bl	800a76c <_init>
 800a728:	2600      	movs	r6, #0
 800a72a:	4d0a      	ldr	r5, [pc, #40]	; (800a754 <__libc_init_array+0x40>)
 800a72c:	4c0a      	ldr	r4, [pc, #40]	; (800a758 <__libc_init_array+0x44>)
 800a72e:	1b64      	subs	r4, r4, r5
 800a730:	10a4      	asrs	r4, r4, #2
 800a732:	42a6      	cmp	r6, r4
 800a734:	d105      	bne.n	800a742 <__libc_init_array+0x2e>
 800a736:	bd70      	pop	{r4, r5, r6, pc}
 800a738:	f855 3b04 	ldr.w	r3, [r5], #4
 800a73c:	4798      	blx	r3
 800a73e:	3601      	adds	r6, #1
 800a740:	e7ee      	b.n	800a720 <__libc_init_array+0xc>
 800a742:	f855 3b04 	ldr.w	r3, [r5], #4
 800a746:	4798      	blx	r3
 800a748:	3601      	adds	r6, #1
 800a74a:	e7f2      	b.n	800a732 <__libc_init_array+0x1e>
 800a74c:	0800a7ac 	.word	0x0800a7ac
 800a750:	0800a7ac 	.word	0x0800a7ac
 800a754:	0800a7ac 	.word	0x0800a7ac
 800a758:	0800a7b0 	.word	0x0800a7b0

0800a75c <memset>:
 800a75c:	4603      	mov	r3, r0
 800a75e:	4402      	add	r2, r0
 800a760:	4293      	cmp	r3, r2
 800a762:	d100      	bne.n	800a766 <memset+0xa>
 800a764:	4770      	bx	lr
 800a766:	f803 1b01 	strb.w	r1, [r3], #1
 800a76a:	e7f9      	b.n	800a760 <memset+0x4>

0800a76c <_init>:
 800a76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76e:	bf00      	nop
 800a770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a772:	bc08      	pop	{r3}
 800a774:	469e      	mov	lr, r3
 800a776:	4770      	bx	lr

0800a778 <_fini>:
 800a778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77a:	bf00      	nop
 800a77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a77e:	bc08      	pop	{r3}
 800a780:	469e      	mov	lr, r3
 800a782:	4770      	bx	lr
