
usbpd_fusb302.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08009e28  08009e28  00019e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e50  08009e50  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08009e50  08009e50  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e50  08009e50  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e50  08009e50  00019e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e54  08009e54  00019e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08009e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  20000014  08009e6c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000678  08009e6c  00020678  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001db25  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c6  00000000  00000000  0003db62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00041128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e0  00000000  00000000  00042420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e26  00000000  00000000  00043600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138c5  00000000  00000000  0005c426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f5a2  00000000  00000000  0006fceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff28d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004edc  00000000  00000000  000ff2e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08009e10 	.word	0x08009e10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08009e10 	.word	0x08009e10

0800014c <InitializeBoard>:
static Port_t ports[NUM_PORTS]; /* Array of ports */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void InitializeBoard(void) {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
    /* Initialize Host com */
    HCom_Init(ports, 1);
    /* Initialize the USB interface */
    InitializeUSB();
#endif /* FSC_DEBUG */
}
 8000150:	bf00      	nop
 8000152:	46bd      	mov	sp, r7
 8000154:	bc80      	pop	{r7}
 8000156:	4770      	bx	lr

08000158 <InitializeSystem>:

static void InitializeSystem(void) {
 8000158:	b580      	push	{r7, lr}
 800015a:	af00      	add	r7, sp, #0
	InitializeBoard();
 800015c:	f7ff fff6 	bl	800014c <InitializeBoard>
	InitializeTickTimer();
 8000160:	f006 fddc 	bl	8006d1c <InitializeTickTimer>
	InitializeTSTimer();
 8000164:	f006 fe48 	bl	8006df8 <InitializeTSTimer>
}
 8000168:	bf00      	nop
 800016a:	bd80      	pop	{r7, pc}

0800016c <handle_core_event>:

void platform_set_debug(FSC_U8 port, FSC_BOOL enable) {

}

void handle_core_event(int event, int portid, void *usr_ctx, void *app_ctx) {
 800016c:	b480      	push	{r7}
 800016e:	b087      	sub	sp, #28
 8000170:	af00      	add	r7, sp, #0
 8000172:	60f8      	str	r0, [r7, #12]
 8000174:	60b9      	str	r1, [r7, #8]
 8000176:	607a      	str	r2, [r7, #4]
 8000178:	603b      	str	r3, [r7, #0]
       doDataObject_t pdo;
       if (event & PD_NEW_CONTRACT)
       {
//          pdo = (doDataObject_t*)app_ctx;
          /* handle event */
} }
 800017a:	bf00      	nop
 800017c:	371c      	adds	r7, #28
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr

08000184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b088      	sub	sp, #32
 8000188:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018a:	f006 fe67 	bl	8006e5c <HAL_Init>

  /* USER CODE BEGIN Init */
	HAL_InitTick(1);
 800018e:	2001      	movs	r0, #1
 8000190:	f006 fe7a 	bl	8006e88 <HAL_InitTick>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000194:	f000 f896 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000198:	f000 fa14 	bl	80005c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800019c:	f000 f9ec 	bl	8000578 <MX_DMA_Init>
  MX_I2C1_Init();
 80001a0:	f000 f8d2 	bl	8000348 <MX_I2C1_Init>
  MX_TIM1_Init();
 80001a4:	f000 f8fe 	bl	80003a4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80001a8:	f000 f998 	bl	80004dc <MX_TIM3_Init>
  MX_TIM2_Init();
 80001ac:	f000 f94a 	bl	8000444 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	while (1) {
		bufin[0] = REG_DEVICE_ID;
 80001b0:	2301      	movs	r3, #1
 80001b2:	733b      	strb	r3, [r7, #12]
		ret = HAL_I2C_Master_Transmit(&hi2c1, FUSB300SlaveAddr, bufin, 1,
 80001b4:	f107 020c 	add.w	r2, r7, #12
 80001b8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80001bc:	9300      	str	r3, [sp, #0]
 80001be:	2301      	movs	r3, #1
 80001c0:	2144      	movs	r1, #68	; 0x44
 80001c2:	483a      	ldr	r0, [pc, #232]	; (80002ac <main+0x128>)
 80001c4:	f007 fc1e 	bl	8007a04 <HAL_I2C_Master_Transmit>
 80001c8:	4603      	mov	r3, r0
 80001ca:	75fb      	strb	r3, [r7, #23]
				3000);
		if (ret != HAL_OK) {
 80001cc:	7dfb      	ldrb	r3, [r7, #23]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d10c      	bne.n	80001ec <main+0x68>
		} else {
			// Read 2 bytes from the temperature register
			ret = HAL_I2C_Master_Receive(&hi2c1, FUSB102_ADDR, bufout, 1,
 80001d2:	2344      	movs	r3, #68	; 0x44
 80001d4:	b299      	uxth	r1, r3
 80001d6:	f107 0208 	add.w	r2, r7, #8
 80001da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80001de:	9300      	str	r3, [sp, #0]
 80001e0:	2301      	movs	r3, #1
 80001e2:	4832      	ldr	r0, [pc, #200]	; (80002ac <main+0x128>)
 80001e4:	f007 fd0c 	bl	8007c00 <HAL_I2C_Master_Receive>
 80001e8:	4603      	mov	r3, r0
 80001ea:	75fb      	strb	r3, [r7, #23]
					3000);
			if (ret == HAL_OK) {
			}
		}

		FSC_BOOL status = DeviceRead(FUSB300SlaveAddr, regDeviceID, 1, bufout2);
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2201      	movs	r2, #1
 80001f0:	2101      	movs	r1, #1
 80001f2:	2044      	movs	r0, #68	; 0x44
 80001f4:	f006 fab1 	bl	800675a <DeviceRead>
 80001f8:	4603      	mov	r3, r0
 80001fa:	75bb      	strb	r3, [r7, #22]
		if (status == TRUE) {
 80001fc:	7dbb      	ldrb	r3, [r7, #22]
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d000      	beq.n	8000204 <main+0x80>
	while (1) {
 8000202:	e7d5      	b.n	80001b0 <main+0x2c>
			break;
 8000204:	bf00      	nop

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	FSC_U32 timer_value;

	InitializeSystem();
 8000206:	f7ff ffa7 	bl	8000158 <InitializeSystem>

	DPM_Init(&dpm);
 800020a:	4829      	ldr	r0, [pc, #164]	; (80002b0 <main+0x12c>)
 800020c:	f006 fc4e 	bl	8006aac <DPM_Init>

	ports[0].dpm = dpm;
 8000210:	4b27      	ldr	r3, [pc, #156]	; (80002b0 <main+0x12c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a27      	ldr	r2, [pc, #156]	; (80002b4 <main+0x130>)
 8000216:	6013      	str	r3, [r2, #0]
	ports[0].PortID = 0;
 8000218:	4b26      	ldr	r3, [pc, #152]	; (80002b4 <main+0x130>)
 800021a:	2200      	movs	r2, #0
 800021c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
//	&ports[0]->PortConfig.SinkUSBSuspendOperation = TRUE;
//	&ports[0]->PortConfig.SinkUSBCommCapable = TRUE;
	core_initialize(&ports[0], FUSB300SlaveAddr);
 8000220:	2144      	movs	r1, #68	; 0x44
 8000222:	4824      	ldr	r0, [pc, #144]	; (80002b4 <main+0x130>)
 8000224:	f006 f9e0 	bl	80065e8 <core_initialize>

	DPM_AddPort(dpm, &ports[0]);
 8000228:	4b21      	ldr	r3, [pc, #132]	; (80002b0 <main+0x12c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4921      	ldr	r1, [pc, #132]	; (80002b4 <main+0x130>)
 800022e:	4618      	mov	r0, r3
 8000230:	f006 fc50 	bl	8006ad4 <DPM_AddPort>
	register_observer(EVENT_ALL, handle_core_event, 0);
 8000234:	2200      	movs	r2, #0
 8000236:	4920      	ldr	r1, [pc, #128]	; (80002b8 <main+0x134>)
 8000238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800023c:	f006 fcf0 	bl	8006c20 <register_observer>
      platform_set_debug(ports[0].PortID,FALSE);
  #endif /* FSC_DEBUG */

	while (1) {
//  #ifdef this
		haveINTReady = TRUE;
 8000240:	4b1e      	ldr	r3, [pc, #120]	; (80002bc <main+0x138>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
//  #endif /* FSC_POLLING_MODE */

		/* Run the Type-C state machine */
		if (haveINTReady
 8000246:	4b1d      	ldr	r3, [pc, #116]	; (80002bc <main+0x138>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	b2db      	uxtb	r3, r3
 800024c:	2b00      	cmp	r3, #0
 800024e:	d0f7      	beq.n	8000240 <main+0xbc>
#ifdef FSC_DEBUG
                  || haveUSBInMsg
  #endif /* FSC_DEBUG */
		) {
			/* Disable the timer interrupt */
			ClearTimeInterrupt();
 8000250:	f006 fdc4 	bl	8006ddc <ClearTimeInterrupt>

#ifdef FSC_DEBUG
              platform_set_debug(ports[0].PortID,TRUE);
  #endif /* FSC_DEBUG */

			core_state_machine(&ports[0]);
 8000254:	4817      	ldr	r0, [pc, #92]	; (80002b4 <main+0x130>)
 8000256:	f006 f9ff 	bl	8006658 <core_state_machine>
			if(ports[0].ConnState == AttachedSink && &ports[0].PolicyState == peSinkTransitionDefault) {
 800025a:	4b16      	ldr	r3, [pc, #88]	; (80002b4 <main+0x130>)
 800025c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000260:	2b04      	cmp	r3, #4
 8000262:	d101      	bne.n	8000268 <main+0xe4>
 8000264:	4b16      	ldr	r3, [pc, #88]	; (80002c0 <main+0x13c>)
 8000266:	2b1d      	cmp	r3, #29

#ifdef FSC_DEBUG
              platform_set_debug(ports[0].PortID,FALSE);
  #endif /* FSC_DEBUG */

			haveINTReady = FALSE;
 8000268:	4b14      	ldr	r3, [pc, #80]	; (80002bc <main+0x138>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
			 * It is possible for the state machine to go into idle mode with
			 * the interrupt pin still low and as a result the edge-sensitive
			 * IRQ won't get triggered.  Check here before returning to wait
			 * on the IRQ.
			 */
			if (platform_get_device_irq_state(ports[0].PortID)) {
 800026e:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <main+0x130>)
 8000270:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000274:	4618      	mov	r0, r3
 8000276:	f000 fa51 	bl	800071c <platform_get_device_irq_state>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d003      	beq.n	8000288 <main+0x104>
				haveINTReady = TRUE;
 8000280:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <main+0x138>)
 8000282:	2201      	movs	r2, #1
 8000284:	701a      	strb	r2, [r3, #0]
 8000286:	e7db      	b.n	8000240 <main+0xbc>
			} else {
				/* If needed, enable timer interrupt before idling */
				timer_value = core_get_next_timeout(&ports[0]);
 8000288:	480a      	ldr	r0, [pc, #40]	; (80002b4 <main+0x130>)
 800028a:	f006 fa0e 	bl	80066aa <core_get_next_timeout>
 800028e:	6138      	str	r0, [r7, #16]

				if (timer_value > 0) {
 8000290:	693b      	ldr	r3, [r7, #16]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d0d4      	beq.n	8000240 <main+0xbc>
					if (timer_value == 1) {
 8000296:	693b      	ldr	r3, [r7, #16]
 8000298:	2b01      	cmp	r3, #1
 800029a:	d103      	bne.n	80002a4 <main+0x120>
						/* A value of 1 indicates that a timer has expired
						 * or is about to expire and needs further processing.
						 */
						haveINTReady = TRUE;
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <main+0x138>)
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
 80002a2:	e7cd      	b.n	8000240 <main+0xbc>
					} else {
						/* A non-zero time requires a future timer interrupt */
						SetTimeInterrupt(timer_value);
 80002a4:	6938      	ldr	r0, [r7, #16]
 80002a6:	f006 fd7c 	bl	8006da2 <SetTimeInterrupt>
		haveINTReady = TRUE;
 80002aa:	e7c9      	b.n	8000240 <main+0xbc>
 80002ac:	20000504 	.word	0x20000504
 80002b0:	20000034 	.word	0x20000034
 80002b4:	20000038 	.word	0x20000038
 80002b8:	0800016d 	.word	0x0800016d
 80002bc:	20000030 	.word	0x20000030
 80002c0:	2000008e 	.word	0x2000008e

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b090      	sub	sp, #64	; 0x40
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0318 	add.w	r3, r7, #24
 80002ce:	2228      	movs	r2, #40	; 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f009 fd94 	bl	8009e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e6:	2302      	movs	r3, #2
 80002e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ea:	2301      	movs	r3, #1
 80002ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ee:	2310      	movs	r3, #16
 80002f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f2:	2302      	movs	r3, #2
 80002f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002f6:	2300      	movs	r3, #0
 80002f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002fa:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80002fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000300:	f107 0318 	add.w	r3, r7, #24
 8000304:	4618      	mov	r0, r3
 8000306:	f008 fee7 	bl	80090d8 <HAL_RCC_OscConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000310:	f000 f986 	bl	8000620 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000314:	230f      	movs	r3, #15
 8000316:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000318:	2302      	movs	r3, #2
 800031a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2101      	movs	r1, #1
 800032e:	4618      	mov	r0, r3
 8000330:	f009 f952 	bl	80095d8 <HAL_RCC_ClockConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800033a:	f000 f971 	bl	8000620 <Error_Handler>
  }
}
 800033e:	bf00      	nop
 8000340:	3740      	adds	r7, #64	; 0x40
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800034c:	4b12      	ldr	r3, [pc, #72]	; (8000398 <MX_I2C1_Init+0x50>)
 800034e:	4a13      	ldr	r2, [pc, #76]	; (800039c <MX_I2C1_Init+0x54>)
 8000350:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <MX_I2C1_Init+0x50>)
 8000354:	4a12      	ldr	r2, [pc, #72]	; (80003a0 <MX_I2C1_Init+0x58>)
 8000356:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_I2C1_Init+0x50>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <MX_I2C1_Init+0x50>)
 8000360:	2200      	movs	r2, #0
 8000362:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_I2C1_Init+0x50>)
 8000366:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800036a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <MX_I2C1_Init+0x50>)
 800036e:	2200      	movs	r2, #0
 8000370:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000372:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MX_I2C1_Init+0x50>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <MX_I2C1_Init+0x50>)
 800037a:	2200      	movs	r2, #0
 800037c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <MX_I2C1_Init+0x50>)
 8000380:	2200      	movs	r2, #0
 8000382:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <MX_I2C1_Init+0x50>)
 8000386:	f007 f9f9 	bl	800777c <HAL_I2C_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000390:	f000 f946 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000504 	.word	0x20000504
 800039c:	40005400 	.word	0x40005400
 80003a0:	00061a80 	.word	0x00061a80

080003a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003aa:	f107 0308 	add.w	r3, r7, #8
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b8:	463b      	mov	r3, r7
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003c0:	4b1e      	ldr	r3, [pc, #120]	; (800043c <MX_TIM1_Init+0x98>)
 80003c2:	4a1f      	ldr	r2, [pc, #124]	; (8000440 <MX_TIM1_Init+0x9c>)
 80003c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003c6:	4b1d      	ldr	r3, [pc, #116]	; (800043c <MX_TIM1_Init+0x98>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003cc:	4b1b      	ldr	r3, [pc, #108]	; (800043c <MX_TIM1_Init+0x98>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80003d2:	4b1a      	ldr	r3, [pc, #104]	; (800043c <MX_TIM1_Init+0x98>)
 80003d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003da:	4b18      	ldr	r3, [pc, #96]	; (800043c <MX_TIM1_Init+0x98>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003e0:	4b16      	ldr	r3, [pc, #88]	; (800043c <MX_TIM1_Init+0x98>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <MX_TIM1_Init+0x98>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003ec:	4813      	ldr	r0, [pc, #76]	; (800043c <MX_TIM1_Init+0x98>)
 80003ee:	f009 fa79 	bl	80098e4 <HAL_TIM_Base_Init>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80003f8:	f000 f912 	bl	8000620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000400:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000402:	f107 0308 	add.w	r3, r7, #8
 8000406:	4619      	mov	r1, r3
 8000408:	480c      	ldr	r0, [pc, #48]	; (800043c <MX_TIM1_Init+0x98>)
 800040a:	f009 faba 	bl	8009982 <HAL_TIM_ConfigClockSource>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000414:	f000 f904 	bl	8000620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000418:	2300      	movs	r3, #0
 800041a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800041c:	2300      	movs	r3, #0
 800041e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000420:	463b      	mov	r3, r7
 8000422:	4619      	mov	r1, r3
 8000424:	4805      	ldr	r0, [pc, #20]	; (800043c <MX_TIM1_Init+0x98>)
 8000426:	f009 fc69 	bl	8009cfc <HAL_TIMEx_MasterConfigSynchronization>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000430:	f000 f8f6 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000434:	bf00      	nop
 8000436:	3718      	adds	r7, #24
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	200005a0 	.word	0x200005a0
 8000440:	40012c00 	.word	0x40012c00

08000444 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800044a:	f107 0308 	add.w	r3, r7, #8
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000458:	463b      	mov	r3, r7
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000460:	4b1d      	ldr	r3, [pc, #116]	; (80004d8 <MX_TIM2_Init+0x94>)
 8000462:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000466:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8000468:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <MX_TIM2_Init+0x94>)
 800046a:	222f      	movs	r2, #47	; 0x2f
 800046c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800046e:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <MX_TIM2_Init+0x94>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <MX_TIM2_Init+0x94>)
 8000476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800047a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800047c:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <MX_TIM2_Init+0x94>)
 800047e:	2200      	movs	r2, #0
 8000480:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <MX_TIM2_Init+0x94>)
 8000484:	2200      	movs	r2, #0
 8000486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000488:	4813      	ldr	r0, [pc, #76]	; (80004d8 <MX_TIM2_Init+0x94>)
 800048a:	f009 fa2b 	bl	80098e4 <HAL_TIM_Base_Init>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000494:	f000 f8c4 	bl	8000620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800049c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800049e:	f107 0308 	add.w	r3, r7, #8
 80004a2:	4619      	mov	r1, r3
 80004a4:	480c      	ldr	r0, [pc, #48]	; (80004d8 <MX_TIM2_Init+0x94>)
 80004a6:	f009 fa6c 	bl	8009982 <HAL_TIM_ConfigClockSource>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004b0:	f000 f8b6 	bl	8000620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b4:	2300      	movs	r3, #0
 80004b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004bc:	463b      	mov	r3, r7
 80004be:	4619      	mov	r1, r3
 80004c0:	4805      	ldr	r0, [pc, #20]	; (80004d8 <MX_TIM2_Init+0x94>)
 80004c2:	f009 fc1b 	bl	8009cfc <HAL_TIMEx_MasterConfigSynchronization>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004cc:	f000 f8a8 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004d0:	bf00      	nop
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	2000062c 	.word	0x2000062c

080004dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004e2:	f107 0308 	add.w	r3, r7, #8
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004f0:	463b      	mov	r3, r7
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004f8:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <MX_TIM3_Init+0x94>)
 80004fa:	4a1e      	ldr	r2, [pc, #120]	; (8000574 <MX_TIM3_Init+0x98>)
 80004fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004fe:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <MX_TIM3_Init+0x94>)
 8000500:	2200      	movs	r2, #0
 8000502:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000504:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <MX_TIM3_Init+0x94>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800050a:	4b19      	ldr	r3, [pc, #100]	; (8000570 <MX_TIM3_Init+0x94>)
 800050c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000510:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <MX_TIM3_Init+0x94>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_TIM3_Init+0x94>)
 800051a:	2200      	movs	r2, #0
 800051c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800051e:	4814      	ldr	r0, [pc, #80]	; (8000570 <MX_TIM3_Init+0x94>)
 8000520:	f009 f9e0 	bl	80098e4 <HAL_TIM_Base_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800052a:	f000 f879 	bl	8000620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800052e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000532:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000534:	f107 0308 	add.w	r3, r7, #8
 8000538:	4619      	mov	r1, r3
 800053a:	480d      	ldr	r0, [pc, #52]	; (8000570 <MX_TIM3_Init+0x94>)
 800053c:	f009 fa21 	bl	8009982 <HAL_TIM_ConfigClockSource>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000546:	f000 f86b 	bl	8000620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800054a:	2300      	movs	r3, #0
 800054c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000552:	463b      	mov	r3, r7
 8000554:	4619      	mov	r1, r3
 8000556:	4806      	ldr	r0, [pc, #24]	; (8000570 <MX_TIM3_Init+0x94>)
 8000558:	f009 fbd0 	bl	8009cfc <HAL_TIMEx_MasterConfigSynchronization>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000562:	f000 f85d 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	3718      	adds	r7, #24
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000558 	.word	0x20000558
 8000574:	40000400 	.word	0x40000400

08000578 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <MX_DMA_Init+0x48>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a0f      	ldr	r2, [pc, #60]	; (80005c0 <MX_DMA_Init+0x48>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6153      	str	r3, [r2, #20]
 800058a:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <MX_DMA_Init+0x48>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2100      	movs	r1, #0
 800059a:	2010      	movs	r0, #16
 800059c:	f006 fdbb 	bl	8007116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80005a0:	2010      	movs	r0, #16
 80005a2:	f006 fdd4 	bl	800714e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	2011      	movs	r0, #17
 80005ac:	f006 fdb3 	bl	8007116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80005b0:	2011      	movs	r0, #17
 80005b2:	f006 fdcc 	bl	800714e <HAL_NVIC_EnableIRQ>

}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000

080005c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <MX_GPIO_Init+0x58>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	4a13      	ldr	r2, [pc, #76]	; (800061c <MX_GPIO_Init+0x58>)
 80005d0:	f043 0320 	orr.w	r3, r3, #32
 80005d4:	6193      	str	r3, [r2, #24]
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_GPIO_Init+0x58>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	f003 0320 	and.w	r3, r3, #32
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_GPIO_Init+0x58>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	4a0d      	ldr	r2, [pc, #52]	; (800061c <MX_GPIO_Init+0x58>)
 80005e8:	f043 0304 	orr.w	r3, r3, #4
 80005ec:	6193      	str	r3, [r2, #24]
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <MX_GPIO_Init+0x58>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	f003 0304 	and.w	r3, r3, #4
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <MX_GPIO_Init+0x58>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <MX_GPIO_Init+0x58>)
 8000600:	f043 0308 	orr.w	r3, r3, #8
 8000604:	6193      	str	r3, [r2, #24]
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <MX_GPIO_Init+0x58>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f003 0308 	and.w	r3, r3, #8
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	40021000 	.word	0x40021000

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000628:	e7fe      	b.n	8000628 <Error_Handler+0x8>
	...

0800062c <platform_set_vbus_lvl_enable>:
 * @param disableOthers Disable other sources in make-before-break fashion
 * @return None or state of vbus.
 */
void platform_set_vbus_lvl_enable(FSC_U8 port, VBUS_LVL level, FSC_BOOL enable,
                                  FSC_BOOL disableOthers)
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4604      	mov	r4, r0
 8000634:	4608      	mov	r0, r1
 8000636:	4611      	mov	r1, r2
 8000638:	461a      	mov	r2, r3
 800063a:	4623      	mov	r3, r4
 800063c:	71fb      	strb	r3, [r7, #7]
 800063e:	4603      	mov	r3, r0
 8000640:	71bb      	strb	r3, [r7, #6]
 8000642:	460b      	mov	r3, r1
 8000644:	717b      	strb	r3, [r7, #5]
 8000646:	4613      	mov	r3, r2
 8000648:	713b      	strb	r3, [r7, #4]
    if (level == VBUS_LVL_5V)
 800064a:	79bb      	ldrb	r3, [r7, #6]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d113      	bne.n	8000678 <platform_set_vbus_lvl_enable+0x4c>
    {
        /* Enable/Disable the 5V Source */
        HAL_GPIO_WritePin( VBUS_PORT, VBUS_5V_PIN,
 8000650:	797b      	ldrb	r3, [r7, #5]
 8000652:	2b00      	cmp	r3, #0
 8000654:	bf14      	ite	ne
 8000656:	2301      	movne	r3, #1
 8000658:	2300      	moveq	r3, #0
 800065a:	b2db      	uxtb	r3, r3
 800065c:	461a      	mov	r2, r3
 800065e:	2108      	movs	r1, #8
 8000660:	481a      	ldr	r0, [pc, #104]	; (80006cc <platform_set_vbus_lvl_enable+0xa0>)
 8000662:	f007 f873 	bl	800774c <HAL_GPIO_WritePin>
                           enable ? GPIO_PIN_SET : GPIO_PIN_RESET );

        if (disableOthers)
 8000666:	793b      	ldrb	r3, [r7, #4]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d01b      	beq.n	80006a4 <platform_set_vbus_lvl_enable+0x78>
        {
          HAL_GPIO_WritePin( VBUS_PORT, VBUS_HV_PIN, GPIO_PIN_RESET );
 800066c:	2200      	movs	r2, #0
 800066e:	2110      	movs	r1, #16
 8000670:	4816      	ldr	r0, [pc, #88]	; (80006cc <platform_set_vbus_lvl_enable+0xa0>)
 8000672:	f007 f86b 	bl	800774c <HAL_GPIO_WritePin>
 8000676:	e015      	b.n	80006a4 <platform_set_vbus_lvl_enable+0x78>
        }
    }
    else if (level == VBUS_LVL_HV)
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d112      	bne.n	80006a4 <platform_set_vbus_lvl_enable+0x78>
    {
        /* Enable/Disable the HV Source */
        HAL_GPIO_WritePin( VBUS_PORT, VBUS_HV_PIN,
 800067e:	797b      	ldrb	r3, [r7, #5]
 8000680:	2b00      	cmp	r3, #0
 8000682:	bf14      	ite	ne
 8000684:	2301      	movne	r3, #1
 8000686:	2300      	moveq	r3, #0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	461a      	mov	r2, r3
 800068c:	2110      	movs	r1, #16
 800068e:	480f      	ldr	r0, [pc, #60]	; (80006cc <platform_set_vbus_lvl_enable+0xa0>)
 8000690:	f007 f85c 	bl	800774c <HAL_GPIO_WritePin>
                           enable ? GPIO_PIN_SET : GPIO_PIN_RESET );

        if (disableOthers)
 8000694:	793b      	ldrb	r3, [r7, #4]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d004      	beq.n	80006a4 <platform_set_vbus_lvl_enable+0x78>
        {
          HAL_GPIO_WritePin( VBUS_PORT, VBUS_5V_PIN, GPIO_PIN_RESET );
 800069a:	2200      	movs	r2, #0
 800069c:	2108      	movs	r1, #8
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <platform_set_vbus_lvl_enable+0xa0>)
 80006a0:	f007 f854 	bl	800774c <HAL_GPIO_WritePin>
        }
    }

    /* Turn off all levels, if requested */
    if ((level == VBUS_LVL_ALL) && (enable == FALSE))
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	2b02      	cmp	r3, #2
 80006a8:	d10c      	bne.n	80006c4 <platform_set_vbus_lvl_enable+0x98>
 80006aa:	797b      	ldrb	r3, [r7, #5]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d109      	bne.n	80006c4 <platform_set_vbus_lvl_enable+0x98>
    {
      HAL_GPIO_WritePin( VBUS_PORT, VBUS_5V_PIN, GPIO_PIN_RESET );
 80006b0:	2200      	movs	r2, #0
 80006b2:	2108      	movs	r1, #8
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <platform_set_vbus_lvl_enable+0xa0>)
 80006b6:	f007 f849 	bl	800774c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin( VBUS_PORT, VBUS_HV_PIN, GPIO_PIN_RESET );
 80006ba:	2200      	movs	r2, #0
 80006bc:	2110      	movs	r1, #16
 80006be:	4803      	ldr	r0, [pc, #12]	; (80006cc <platform_set_vbus_lvl_enable+0xa0>)
 80006c0:	f007 f844 	bl	800774c <HAL_GPIO_WritePin>
    }
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd90      	pop	{r4, r7, pc}
 80006cc:	40011000 	.word	0x40011000

080006d0 <platform_get_pps_voltage>:
 *
 * @param port ID for multiple port controls
 * @return VBUS level supplied by PPS in milivolt resolution
 */
FSC_U16 platform_get_pps_voltage(FSC_U8 port)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
    return 0;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
	...

080006e8 <platform_set_vbus_discharge>:
 * @param port ID for multiple port controls
 * @param enable TRUE = discharge path ON.
 * @return None
 */
void platform_set_vbus_discharge(FSC_U8 port, FSC_BOOL enable)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	460a      	mov	r2, r1
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	4613      	mov	r3, r2
 80006f6:	71bb      	strb	r3, [r7, #6]
    /**
     *  Enable/Disable the discharge path
     * @todo - Implement as needed on platforms that support this feature.
     */
    HAL_GPIO_WritePin( VBUS_PORT, VBUS_DISC_PIN,
 80006f8:	79bb      	ldrb	r3, [r7, #6]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	bf0c      	ite	eq
 80006fe:	2301      	moveq	r3, #1
 8000700:	2300      	movne	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	2101      	movs	r1, #1
 8000708:	4803      	ldr	r0, [pc, #12]	; (8000718 <platform_set_vbus_discharge+0x30>)
 800070a:	f007 f81f 	bl	800774c <HAL_GPIO_WritePin>
                       (enable == TRUE) ? GPIO_PIN_SET : GPIO_PIN_RESET );
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40011000 	.word	0x40011000

0800071c <platform_get_device_irq_state>:
 *
 * @param port ID for multiple port controls
 * @return TRUE if interrupt condition present.  Note: pin is active low.
 */
FSC_BOOL platform_get_device_irq_state(FSC_U8 port)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
    /**
     * Return the state of the device interrupt signal.
     * Port A, GPIO_PIN_1 -- ACTIVE LOW!
     */
#ifdef FSC_POLLING_MODE
    return TRUE;
 8000726:	2301      	movs	r3, #1
#else
    return HAL_GPIO_ReadPin(INT_N_PORT, INT_N_PIN) ? FALSE : TRUE;
#endif /* FSC_POLLING MODE */
}
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
	...

08000734 <platform_i2c_write>:
                            FSC_U8 DataLength,
                            FSC_U8 PacketSize,
                            FSC_U8 IncSize,
                            FSC_U32 RegisterAddress,
                            FSC_U8* Data)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b089      	sub	sp, #36	; 0x24
 8000738:	af04      	add	r7, sp, #16
 800073a:	4604      	mov	r4, r0
 800073c:	4608      	mov	r0, r1
 800073e:	4611      	mov	r1, r2
 8000740:	461a      	mov	r2, r3
 8000742:	4623      	mov	r3, r4
 8000744:	71fb      	strb	r3, [r7, #7]
 8000746:	4603      	mov	r3, r0
 8000748:	71bb      	strb	r3, [r7, #6]
 800074a:	460b      	mov	r3, r1
 800074c:	717b      	strb	r3, [r7, #5]
 800074e:	4613      	mov	r3, r2
 8000750:	713b      	strb	r3, [r7, #4]
    HAL_StatusTypeDef result = HAL_OK;
 8000752:	2300      	movs	r3, #0
 8000754:	73fb      	strb	r3, [r7, #15]

    result = HAL_I2C_Mem_Write(&hi2c1, SlaveAddress, RegisterAddress,
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	b299      	uxth	r1, r3
 800075a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075c:	b29a      	uxth	r2, r3
 800075e:	79bb      	ldrb	r3, [r7, #6]
 8000760:	b298      	uxth	r0, r3
 8000762:	797b      	ldrb	r3, [r7, #5]
 8000764:	b29b      	uxth	r3, r3
 8000766:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800076a:	9402      	str	r4, [sp, #8]
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	4603      	mov	r3, r0
 8000774:	4807      	ldr	r0, [pc, #28]	; (8000794 <platform_i2c_write+0x60>)
 8000776:	f007 fca3 	bl	80080c0 <HAL_I2C_Mem_Write>
 800077a:	4603      	mov	r3, r0
 800077c:	73fb      	strb	r3, [r7, #15]
                               RegAddrLength, Data, DataLength,
                               I2C1_TIMEOUT_MAX);

    return ((result == HAL_OK) ? TRUE : FALSE);
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	2b00      	cmp	r3, #0
 8000782:	bf0c      	ite	eq
 8000784:	2301      	moveq	r3, #1
 8000786:	2300      	movne	r3, #0
 8000788:	b2db      	uxtb	r3, r3
}
 800078a:	4618      	mov	r0, r3
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	bd90      	pop	{r4, r7, pc}
 8000792:	bf00      	nop
 8000794:	20000504 	.word	0x20000504

08000798 <platform_i2c_read>:
                            FSC_U8 DataLength,
                            FSC_U8 PacketSize,
                            FSC_U8 IncSize,
                            FSC_U32 RegisterAddress,
                            FSC_U8* Data)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b089      	sub	sp, #36	; 0x24
 800079c:	af04      	add	r7, sp, #16
 800079e:	4604      	mov	r4, r0
 80007a0:	4608      	mov	r0, r1
 80007a2:	4611      	mov	r1, r2
 80007a4:	461a      	mov	r2, r3
 80007a6:	4623      	mov	r3, r4
 80007a8:	71fb      	strb	r3, [r7, #7]
 80007aa:	4603      	mov	r3, r0
 80007ac:	71bb      	strb	r3, [r7, #6]
 80007ae:	460b      	mov	r3, r1
 80007b0:	717b      	strb	r3, [r7, #5]
 80007b2:	4613      	mov	r3, r2
 80007b4:	713b      	strb	r3, [r7, #4]
    HAL_StatusTypeDef result = HAL_OK;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]

    result = HAL_I2C_Mem_Read(&hi2c1, SlaveAddress, RegisterAddress,
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	b299      	uxth	r1, r3
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	79bb      	ldrb	r3, [r7, #6]
 80007c4:	b298      	uxth	r0, r3
 80007c6:	797b      	ldrb	r3, [r7, #5]
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80007ce:	9402      	str	r4, [sp, #8]
 80007d0:	9301      	str	r3, [sp, #4]
 80007d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	4603      	mov	r3, r0
 80007d8:	4807      	ldr	r0, [pc, #28]	; (80007f8 <platform_i2c_read+0x60>)
 80007da:	f007 fd6b 	bl	80082b4 <HAL_I2C_Mem_Read>
 80007de:	4603      	mov	r3, r0
 80007e0:	73fb      	strb	r3, [r7, #15]
                              RegAddrLength, Data, DataLength,
                              I2C1_TIMEOUT_MAX);

    return ((result == HAL_OK) ? TRUE : FALSE);
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	bf0c      	ite	eq
 80007e8:	2301      	moveq	r3, #1
 80007ea:	2300      	movne	r3, #0
 80007ec:	b2db      	uxtb	r3, r3
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd90      	pop	{r4, r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000504 	.word	0x20000504

080007fc <platform_delay_10us>:
 *
 * @param delayCount - Number of 10us delays to wait
 * @return None
 */
void platform_delay_10us(FSC_U32 tenMicroSecondCounter)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
    platform_delay(tenMicroSecondCounter * 10);
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	4613      	mov	r3, r2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4413      	add	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f804 	bl	800081c <platform_delay>
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <platform_delay>:
 *
 * @param delayCount - Number of us delays to wait
 * @return None
 */
void platform_delay(FSC_U32 microseconds)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
    FSC_U32 currentTime = TIM2->CNT;
 8000824:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800082a:	60fb      	str	r3, [r7, #12]
//    HAL_Delay(1);

    /* Use the free running clock */
    while ((FSC_U32)((FSC_U32)TIM2->CNT - currentTime) < microseconds);
 800082c:	bf00      	nop
 800082e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	1ad3      	subs	r3, r2, r3
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	429a      	cmp	r2, r3
 800083c:	d8f7      	bhi.n	800082e <platform_delay+0x12>
}
 800083e:	bf00      	nop
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <platform_get_system_time>:
 *
 * @param None
 * @return System time value in units of (milliseconds / TICK_SCALE_TO_MS)
 */
FSC_U32 platform_get_system_time(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  return TIM2->CNT;
 800084e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000854:	4618      	mov	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_MspInit+0x5c>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <HAL_MspInit+0x5c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6193      	str	r3, [r2, #24]
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_MspInit+0x5c>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_MspInit+0x5c>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <HAL_MspInit+0x5c>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	61d3      	str	r3, [r2, #28]
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_MspInit+0x5c>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <HAL_MspInit+0x60>)
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <HAL_MspInit+0x60>)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40010000 	.word	0x40010000

080008c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a3b      	ldr	r2, [pc, #236]	; (80009c8 <HAL_I2C_MspInit+0x108>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d16f      	bne.n	80009c0 <HAL_I2C_MspInit+0x100>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e0:	4b3a      	ldr	r3, [pc, #232]	; (80009cc <HAL_I2C_MspInit+0x10c>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a39      	ldr	r2, [pc, #228]	; (80009cc <HAL_I2C_MspInit+0x10c>)
 80008e6:	f043 0308 	orr.w	r3, r3, #8
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b37      	ldr	r3, [pc, #220]	; (80009cc <HAL_I2C_MspInit+0x10c>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f003 0308 	and.w	r3, r3, #8
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008f8:	23c0      	movs	r3, #192	; 0xc0
 80008fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4619      	mov	r1, r3
 800090a:	4831      	ldr	r0, [pc, #196]	; (80009d0 <HAL_I2C_MspInit+0x110>)
 800090c:	f006 fd9a 	bl	8007444 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000910:	4b2e      	ldr	r3, [pc, #184]	; (80009cc <HAL_I2C_MspInit+0x10c>)
 8000912:	69db      	ldr	r3, [r3, #28]
 8000914:	4a2d      	ldr	r2, [pc, #180]	; (80009cc <HAL_I2C_MspInit+0x10c>)
 8000916:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800091a:	61d3      	str	r3, [r2, #28]
 800091c:	4b2b      	ldr	r3, [pc, #172]	; (80009cc <HAL_I2C_MspInit+0x10c>)
 800091e:	69db      	ldr	r3, [r3, #28]
 8000920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000928:	4b2a      	ldr	r3, [pc, #168]	; (80009d4 <HAL_I2C_MspInit+0x114>)
 800092a:	4a2b      	ldr	r2, [pc, #172]	; (80009d8 <HAL_I2C_MspInit+0x118>)
 800092c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800092e:	4b29      	ldr	r3, [pc, #164]	; (80009d4 <HAL_I2C_MspInit+0x114>)
 8000930:	2200      	movs	r2, #0
 8000932:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000934:	4b27      	ldr	r3, [pc, #156]	; (80009d4 <HAL_I2C_MspInit+0x114>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800093a:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <HAL_I2C_MspInit+0x114>)
 800093c:	2280      	movs	r2, #128	; 0x80
 800093e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000940:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <HAL_I2C_MspInit+0x114>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000946:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <HAL_I2C_MspInit+0x114>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800094c:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <HAL_I2C_MspInit+0x114>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000952:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <HAL_I2C_MspInit+0x114>)
 8000954:	2200      	movs	r2, #0
 8000956:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000958:	481e      	ldr	r0, [pc, #120]	; (80009d4 <HAL_I2C_MspInit+0x114>)
 800095a:	f006 fc13 	bl	8007184 <HAL_DMA_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8000964:	f7ff fe5c 	bl	8000620 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a1a      	ldr	r2, [pc, #104]	; (80009d4 <HAL_I2C_MspInit+0x114>)
 800096c:	639a      	str	r2, [r3, #56]	; 0x38
 800096e:	4a19      	ldr	r2, [pc, #100]	; (80009d4 <HAL_I2C_MspInit+0x114>)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000974:	4b19      	ldr	r3, [pc, #100]	; (80009dc <HAL_I2C_MspInit+0x11c>)
 8000976:	4a1a      	ldr	r2, [pc, #104]	; (80009e0 <HAL_I2C_MspInit+0x120>)
 8000978:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <HAL_I2C_MspInit+0x11c>)
 800097c:	2210      	movs	r2, #16
 800097e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000980:	4b16      	ldr	r3, [pc, #88]	; (80009dc <HAL_I2C_MspInit+0x11c>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <HAL_I2C_MspInit+0x11c>)
 8000988:	2280      	movs	r2, #128	; 0x80
 800098a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <HAL_I2C_MspInit+0x11c>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000992:	4b12      	ldr	r3, [pc, #72]	; (80009dc <HAL_I2C_MspInit+0x11c>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <HAL_I2C_MspInit+0x11c>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <HAL_I2C_MspInit+0x11c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <HAL_I2C_MspInit+0x11c>)
 80009a6:	f006 fbed 	bl	8007184 <HAL_DMA_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 80009b0:	f7ff fe36 	bl	8000620 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a09      	ldr	r2, [pc, #36]	; (80009dc <HAL_I2C_MspInit+0x11c>)
 80009b8:	635a      	str	r2, [r3, #52]	; 0x34
 80009ba:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_I2C_MspInit+0x11c>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009c0:	bf00      	nop
 80009c2:	3720      	adds	r7, #32
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40005400 	.word	0x40005400
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40010c00 	.word	0x40010c00
 80009d4:	200005e8 	.word	0x200005e8
 80009d8:	40020080 	.word	0x40020080
 80009dc:	200004c0 	.word	0x200004c0
 80009e0:	4002006c 	.word	0x4002006c

080009e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b087      	sub	sp, #28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a1b      	ldr	r2, [pc, #108]	; (8000a60 <HAL_TIM_Base_MspInit+0x7c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d10c      	bne.n	8000a10 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009f6:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <HAL_TIM_Base_MspInit+0x80>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	4a1a      	ldr	r2, [pc, #104]	; (8000a64 <HAL_TIM_Base_MspInit+0x80>)
 80009fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a00:	6193      	str	r3, [r2, #24]
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <HAL_TIM_Base_MspInit+0x80>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a0e:	e022      	b.n	8000a56 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a18:	d10c      	bne.n	8000a34 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a1a:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <HAL_TIM_Base_MspInit+0x80>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	4a11      	ldr	r2, [pc, #68]	; (8000a64 <HAL_TIM_Base_MspInit+0x80>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	61d3      	str	r3, [r2, #28]
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <HAL_TIM_Base_MspInit+0x80>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
}
 8000a32:	e010      	b.n	8000a56 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <HAL_TIM_Base_MspInit+0x84>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d10b      	bne.n	8000a56 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <HAL_TIM_Base_MspInit+0x80>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <HAL_TIM_Base_MspInit+0x80>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	61d3      	str	r3, [r2, #28]
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_TIM_Base_MspInit+0x80>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
}
 8000a56:	bf00      	nop
 8000a58:	371c      	adds	r7, #28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	40012c00 	.word	0x40012c00
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40000400 	.word	0x40000400

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <NMI_Handler+0x4>

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler+0x4>

08000a7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr

08000a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr

08000aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr

08000aae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab2:	f006 fa19 	bl	8006ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <DMA1_Channel6_IRQHandler+0x10>)
 8000ac2:	f006 fbb9 	bl	8007238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200004c0 	.word	0x200004c0

08000ad0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <DMA1_Channel7_IRQHandler+0x10>)
 8000ad6:	f006 fbaf 	bl	8007238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200005e8 	.word	0x200005e8

08000ae4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000af2:	490d      	ldr	r1, [pc, #52]	; (8000b28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000af4:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b08:	4c0a      	ldr	r4, [pc, #40]	; (8000b34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b16:	f7ff ffe5 	bl	8000ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f009 f94d 	bl	8009db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b1e:	f7ff fb31 	bl	8000184 <main>
  bx lr
 8000b22:	4770      	bx	lr
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b2c:	08009e58 	.word	0x08009e58
  ldr r2, =_sbss
 8000b30:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b34:	20000678 	.word	0x20000678

08000b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC1_2_IRQHandler>

08000b3a <USBPDEnable>:
#include "Log.h"
#endif /* FSC_DEBUG */

/* USB PD Enable / Disable Routines */
void USBPDEnable(Port_t *port, FSC_BOOL DeviceUpdate, SourceOrSink TypeCDFP)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	460b      	mov	r3, r1
 8000b44:	70fb      	strb	r3, [r7, #3]
 8000b46:	4613      	mov	r3, r2
 8000b48:	70bb      	strb	r3, [r7, #2]
    port->PortConfig.reqPRSwapAsSrc = Requests_PR_Swap_As_Src;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	779a      	strb	r2, [r3, #30]
    port->PortConfig.reqPRSwapAsSnk = Requests_PR_Swap_As_Snk;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	77da      	strb	r2, [r3, #31]
    port->PortConfig.reqDRSwapToDfpAsSink = Attempt_DR_Swap_to_Dfp_As_Sink;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	769a      	strb	r2, [r3, #26]
    port->PortConfig.reqDRSwapToUfpAsSrc = Attempt_DR_Swap_to_Ufp_As_Src;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	76da      	strb	r2, [r3, #27]
    port->PortConfig.reqVconnSwapToOnAsSink = Attempt_Vconn_Swap_to_On_As_Sink;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	771a      	strb	r2, [r3, #28]
    port->PortConfig.reqVconnSwapToOffAsSrc = Attempt_Vconn_Swap_to_Off_As_Src;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	775a      	strb	r2, [r3, #29]

    port->IsHardReset = FALSE;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2200      	movs	r2, #0
 8000b72:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
    port->IsPRSwap = FALSE;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    port->HardResetCounter = 0;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

    if (port->USBPDEnabled == TRUE)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	f040 80fd 	bne.w	8000d8c <USBPDEnable+0x252>
    {
        ResetProtocolLayer(port, TRUE);
 8000b92:	2101      	movs	r1, #1
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f004 f96d 	bl	8004e74 <ResetProtocolLayer>
                    
        /* Check CC pin to monitor */
        if (port->CCPin == CC1)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d11c      	bne.n	8000bde <USBPDEnable+0xa4>
        {
            port->Registers.Switches.TXCC1 = 1;
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
            port->Registers.Switches.MEAS_CC1 = 1;
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

            port->Registers.Switches.TXCC2 = 0;
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000bc6:	f36f 0341 	bfc	r3, #1, #1
 8000bca:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
            port->Registers.Switches.MEAS_CC2 = 0;
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8000bd4:	f36f 03c3 	bfc	r3, #3, #1
 8000bd8:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
 8000bdc:	e020      	b.n	8000c20 <USBPDEnable+0xe6>
        }
        else if (port->CCPin == CC2)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d11b      	bne.n	8000c20 <USBPDEnable+0xe6>
        {
            port->Registers.Switches.TXCC2 = 1;
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000bee:	f043 0302 	orr.w	r3, r3, #2
 8000bf2:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
            port->Registers.Switches.MEAS_CC2 = 1;
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8000bfc:	f043 0308 	orr.w	r3, r3, #8
 8000c00:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

            port->Registers.Switches.TXCC1 = 0;
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000c0a:	f36f 0300 	bfc	r3, #0, #1
 8000c0e:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
            port->Registers.Switches.MEAS_CC1 = 0;
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8000c18:	f36f 0382 	bfc	r3, #2, #1
 8000c1c:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
        }

        if (port->CCPin != CCNone)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f000 80ac 	beq.w	8000d84 <USBPDEnable+0x24a>
        {
            port->USBPDActive = TRUE;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

            port->PolicyIsSource = (TypeCDFP == SOURCE) ? TRUE : FALSE;
 8000c34:	78bb      	ldrb	r3, [r7, #2]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	bf0c      	ite	eq
 8000c3a:	2301      	moveq	r3, #1
 8000c3c:	2300      	movne	r3, #0
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	461a      	mov	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
            port->PolicyIsDFP = (TypeCDFP == SOURCE) ? TRUE : FALSE;
 8000c48:	78bb      	ldrb	r3, [r7, #2]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	bf0c      	ite	eq
 8000c4e:	2301      	moveq	r3, #1
 8000c50:	2300      	movne	r3, #0
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	461a      	mov	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            port->IsVCONNSource = (TypeCDFP == SOURCE) ? TRUE : FALSE;
 8000c5c:	78bb      	ldrb	r3, [r7, #2]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	bf0c      	ite	eq
 8000c62:	2301      	moveq	r3, #1
 8000c64:	2300      	movne	r3, #0
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	461a      	mov	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

            if (port->PolicyIsSource)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d020      	beq.n	8000cbc <USBPDEnable+0x182>
            {
                SetPEState(port, peSourceStartup);
 8000c7a:	2106      	movs	r1, #6
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f004 fa0d 	bl	800509c <SetPEState>
                port->Registers.Switches.POWERROLE = 1;
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c8c:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                port->Registers.Switches.DATAROLE = 1;
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000c96:	f043 0310 	orr.w	r3, r3, #16
 8000c9a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                port->Registers.Control.ENSOP1 = SOP_P_Capable;
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000ca4:	f36f 0300 	bfc	r3, #0, #1
 8000ca8:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                port->Registers.Control.ENSOP2 = SOP_PP_Capable;
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000cb2:	f36f 0341 	bfc	r3, #1, #1
 8000cb6:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
 8000cba:	e033      	b.n	8000d24 <USBPDEnable+0x1ea>
            }
            else
            {
                SetPEState(port, peSinkStartup);
 8000cbc:	211e      	movs	r1, #30
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f004 f9ec 	bl	800509c <SetPEState>
                TimerDisable(&port->PolicyStateTimer);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f005 fd7d 	bl	80067ca <TimerDisable>
                port->Registers.Switches.POWERROLE = 0;
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000cd6:	f36f 13c7 	bfc	r3, #7, #1
 8000cda:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                port->Registers.Switches.DATAROLE = 0;
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000ce4:	f36f 1304 	bfc	r3, #4, #1
 8000ce8:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b

                port->Registers.Control.ENSOP1 = 0;
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000cf2:	f36f 0300 	bfc	r3, #0, #1
 8000cf6:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                port->Registers.Control.ENSOP1DP = 0;
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000d00:	f36f 1345 	bfc	r3, #5, #1
 8000d04:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                port->Registers.Control.ENSOP2 = 0;
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000d0e:	f36f 0341 	bfc	r3, #1, #1
 8000d12:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                port->Registers.Control.ENSOP2DB = 0;
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000d1c:	f36f 1386 	bfc	r3, #6, #1
 8000d20:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
            }

            port->Registers.Switches.AUTO_CRC = 1;
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
            port->Registers.Control.AUTO_PRE = 0;
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8000d38:	f36f 0341 	bfc	r3, #1, #1
 8000d3c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
            port->Registers.Control.AUTO_RETRY = 1;
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33

            DeviceWrite(port->I2cAddr, regControl0, 4, 
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3330      	adds	r3, #48	; 0x30
 8000d58:	2204      	movs	r2, #4
 8000d5a:	2106      	movs	r1, #6
 8000d5c:	f005 fce0 	bl	8006720 <DeviceWrite>
                    &port->Registers.Control.byte[0]);

            if (DeviceUpdate)
 8000d60:	78fb      	ldrb	r3, [r7, #3]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d008      	beq.n	8000d78 <USBPDEnable+0x23e>
            {
                DeviceWrite(port->I2cAddr, regSwitches1, 1,
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	332b      	adds	r3, #43	; 0x2b
 8000d70:	2201      	movs	r2, #1
 8000d72:	2103      	movs	r1, #3
 8000d74:	f005 fcd4 	bl	8006720 <DeviceWrite>
                            &port->Registers.Switches.byte[1]);
            }

            TimerDisable(&port->SwapSourceStartTimer);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f005 fd23 	bl	80067ca <TimerDisable>
            /* Store the PD attach token in the log */
            StoreUSBPDToken(port, TRUE, pdtAttach);
#endif /* FSC_DEBUG */
        }

        port->PEIdle = FALSE;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        port->cblPresent = FALSE;
        port->cblRstState = CBL_RST_DISABLED;
#endif /* FSC_HAVE_VDM */
    }
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <USBPDDisable>:

void USBPDDisable(Port_t *port, FSC_BOOL DeviceUpdate)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	70fb      	strb	r3, [r7, #3]
    if (port->Registers.Control.BIST_MODE2 != 0)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000da6:	f003 0310 	and.w	r3, r3, #16
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d00f      	beq.n	8000dd0 <USBPDDisable+0x3c>
    {
        port->Registers.Control.BIST_MODE2 = 0;
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000db6:	f36f 1304 	bfc	r3, #4, #1
 8000dba:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
        DeviceWrite(port->I2cAddr, regControl1, 1,
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3331      	adds	r3, #49	; 0x31
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2107      	movs	r1, #7
 8000dcc:	f005 fca8 	bl	8006720 <DeviceWrite>
                    &port->Registers.Control.byte[1]);
    }

    port->IsHardReset = FALSE;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
    port->IsPRSwap = FALSE;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    port->PEIdle = TRUE;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2201      	movs	r2, #1
 8000de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Set the source caps updated flag to trigger an update of the GUI */
    port->SourceCapsUpdated = TRUE;
#endif /* FSC_DEBUG */

    port->PdRevSop = port->PortConfig.PdRevPreferred;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    port->PdRevCable = port->PortConfig.PdRevPreferred;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
    port->USBPDActive = FALSE;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    port->ProtocolState = PRLDisabled;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    SetPEState(port, peDisabled);
 8000e10:	2100      	movs	r1, #0
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f004 f942 	bl	800509c <SetPEState>
    port->PolicyIsSource = FALSE;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    port->PolicyHasContract = FALSE;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    port->DetachThreshold = VBUS_MV_VSAFE5V_DISC;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f640 6256 	movw	r2, #3670	; 0xe56
 8000e2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    notify_observers(BIST_DISABLED, port->I2cAddr, 0);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e38:	2200      	movs	r2, #0
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e40:	f005 ff2e 	bl	8006ca0 <notify_observers>
    notify_observers(PD_NO_CONTRACT, port->I2cAddr, 0);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	2010      	movs	r0, #16
 8000e50:	f005 ff26 	bl	8006ca0 <notify_observers>

    if (DeviceUpdate)
 8000e54:	78fb      	ldrb	r3, [r7, #3]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d01d      	beq.n	8000e96 <USBPDDisable+0x102>
    {
        /* Disable the BMC transmitter (both CC1 & CC2) */
        port->Registers.Switches.TXCC1 = 0;
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000e60:	f36f 0300 	bfc	r3, #0, #1
 8000e64:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        port->Registers.Switches.TXCC2 = 0;
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000e6e:	f36f 0341 	bfc	r3, #1, #1
 8000e72:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b

        /* Turn off Auto CRC */
        port->Registers.Switches.AUTO_CRC = 0;
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8000e7c:	f36f 0382 	bfc	r3, #2, #1
 8000e80:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        DeviceWrite(port->I2cAddr, regSwitches1, 1,
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	332b      	adds	r3, #43	; 0x2b
 8000e8e:	2201      	movs	r2, #1
 8000e90:	2103      	movs	r1, #3
 8000e92:	f005 fc45 	bl	8006720 <DeviceWrite>
                    &port->Registers.Switches.byte[1]);
    }

    /* Disable the internal oscillator for USB PD */
    port->Registers.Power.POWER = 0x7;
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8000e9c:	2107      	movs	r1, #7
 8000e9e:	f361 0303 	bfi	r3, r1, #0, #4
 8000ea2:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
    DeviceWrite(port->I2cAddr, regPower, 1, &port->Registers.Power.byte);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3335      	adds	r3, #53	; 0x35
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	210b      	movs	r1, #11
 8000eb4:	f005 fc34 	bl	8006720 <DeviceWrite>
    ProtocolFlushRxFIFO(port);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f003 ffab 	bl	8004e14 <ProtocolFlushRxFIFO>
    ProtocolFlushTxFIFO(port);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f003 ffc0 	bl	8004e44 <ProtocolFlushTxFIFO>

    /* Mask PD Interrupts */
    port->Registers.Mask.M_COLLISION = 1;
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8000eca:	f043 0302 	orr.w	r3, r3, #2
 8000ece:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    DeviceWrite(port->I2cAddr, regMask, 1, &port->Registers.Mask.byte);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3334      	adds	r3, #52	; 0x34
 8000edc:	2201      	movs	r2, #1
 8000ede:	210a      	movs	r1, #10
 8000ee0:	f005 fc1e 	bl	8006720 <DeviceWrite>
    port->Registers.MaskAdv.M_RETRYFAIL = 1;
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000eea:	f043 0310 	orr.w	r3, r3, #16
 8000eee:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
    port->Registers.MaskAdv.M_TXSENT = 1;
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000ef8:	f043 0304 	orr.w	r3, r3, #4
 8000efc:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
    port->Registers.MaskAdv.M_HARDRST = 1;
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
    DeviceWrite(port->I2cAddr, regMaska, 1, &port->Registers.MaskAdv.byte[0]);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3338      	adds	r3, #56	; 0x38
 8000f18:	2201      	movs	r2, #1
 8000f1a:	210e      	movs	r1, #14
 8000f1c:	f005 fc00 	bl	8006720 <DeviceWrite>
    port->Registers.MaskAdv.M_GCRCSENT = 1;
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
    DeviceWrite(port->I2cAddr, regMaskb, 1, &port->Registers.MaskAdv.byte[1]);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3339      	adds	r3, #57	; 0x39
 8000f38:	2201      	movs	r2, #1
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	f005 fbf0 	bl	8006720 <DeviceWrite>

    /* Force VBUS check */
    port->Registers.Status.I_COMP_CHNG = 1;
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 8000f46:	f043 0320 	orr.w	r3, r3, #32
 8000f4a:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <USBPDPolicyEngine>:

/* USB PD Policy Engine Routines */
void USBPDPolicyEngine(Port_t *port)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    switch (port->PolicyState)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8000f66:	2b7b      	cmp	r3, #123	; 0x7b
 8000f68:	f200 8188 	bhi.w	800127c <USBPDPolicyEngine+0x324>
 8000f6c:	a201      	add	r2, pc, #4	; (adr r2, 8000f74 <USBPDPolicyEngine+0x1c>)
 8000f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f72:	bf00      	nop
 8000f74:	08001285 	.word	0x08001285
 8000f78:	08001165 	.word	0x08001165
 8000f7c:	0800127d 	.word	0x0800127d
 8000f80:	0800127d 	.word	0x0800127d
 8000f84:	0800127d 	.word	0x0800127d
 8000f88:	0800127d 	.word	0x0800127d
 8000f8c:	0800127d 	.word	0x0800127d
 8000f90:	0800127d 	.word	0x0800127d
 8000f94:	0800127d 	.word	0x0800127d
 8000f98:	0800127d 	.word	0x0800127d
 8000f9c:	0800127d 	.word	0x0800127d
 8000fa0:	0800127d 	.word	0x0800127d
 8000fa4:	0800127d 	.word	0x0800127d
 8000fa8:	0800127d 	.word	0x0800127d
 8000fac:	0800127d 	.word	0x0800127d
 8000fb0:	0800127d 	.word	0x0800127d
 8000fb4:	0800127d 	.word	0x0800127d
 8000fb8:	0800127d 	.word	0x0800127d
 8000fbc:	0800127d 	.word	0x0800127d
 8000fc0:	0800127d 	.word	0x0800127d
 8000fc4:	0800127d 	.word	0x0800127d
 8000fc8:	0800127d 	.word	0x0800127d
 8000fcc:	0800127d 	.word	0x0800127d
 8000fd0:	0800127d 	.word	0x0800127d
 8000fd4:	0800127d 	.word	0x0800127d
 8000fd8:	0800127d 	.word	0x0800127d
 8000fdc:	08001175 	.word	0x08001175
 8000fe0:	0800117d 	.word	0x0800117d
 8000fe4:	08001185 	.word	0x08001185
 8000fe8:	0800118d 	.word	0x0800118d
 8000fec:	0800116d 	.word	0x0800116d
 8000ff0:	08001195 	.word	0x08001195
 8000ff4:	0800119d 	.word	0x0800119d
 8000ff8:	080011a5 	.word	0x080011a5
 8000ffc:	080011ad 	.word	0x080011ad
 8001000:	080011b5 	.word	0x080011b5
 8001004:	080011bd 	.word	0x080011bd
 8001008:	080011c5 	.word	0x080011c5
 800100c:	080011cd 	.word	0x080011cd
 8001010:	080011d5 	.word	0x080011d5
 8001014:	080011dd 	.word	0x080011dd
 8001018:	080011e5 	.word	0x080011e5
 800101c:	08001215 	.word	0x08001215
 8001020:	080011ed 	.word	0x080011ed
 8001024:	0800127d 	.word	0x0800127d
 8001028:	0800127d 	.word	0x0800127d
 800102c:	080011f5 	.word	0x080011f5
 8001030:	080011fd 	.word	0x080011fd
 8001034:	0800127d 	.word	0x0800127d
 8001038:	0800127d 	.word	0x0800127d
 800103c:	08001205 	.word	0x08001205
 8001040:	0800120d 	.word	0x0800120d
 8001044:	0800122d 	.word	0x0800122d
 8001048:	08001225 	.word	0x08001225
 800104c:	0800121d 	.word	0x0800121d
 8001050:	08001245 	.word	0x08001245
 8001054:	0800123d 	.word	0x0800123d
 8001058:	08001235 	.word	0x08001235
 800105c:	0800127d 	.word	0x0800127d
 8001060:	0800127d 	.word	0x0800127d
 8001064:	0800127d 	.word	0x0800127d
 8001068:	0800127d 	.word	0x0800127d
 800106c:	0800127d 	.word	0x0800127d
 8001070:	0800127d 	.word	0x0800127d
 8001074:	0800127d 	.word	0x0800127d
 8001078:	0800127d 	.word	0x0800127d
 800107c:	0800127d 	.word	0x0800127d
 8001080:	0800127d 	.word	0x0800127d
 8001084:	0800127d 	.word	0x0800127d
 8001088:	0800127d 	.word	0x0800127d
 800108c:	0800127d 	.word	0x0800127d
 8001090:	0800127d 	.word	0x0800127d
 8001094:	0800127d 	.word	0x0800127d
 8001098:	0800127d 	.word	0x0800127d
 800109c:	0800127d 	.word	0x0800127d
 80010a0:	0800127d 	.word	0x0800127d
 80010a4:	0800127d 	.word	0x0800127d
 80010a8:	0800127d 	.word	0x0800127d
 80010ac:	0800127d 	.word	0x0800127d
 80010b0:	0800127d 	.word	0x0800127d
 80010b4:	0800127d 	.word	0x0800127d
 80010b8:	0800127d 	.word	0x0800127d
 80010bc:	0800127d 	.word	0x0800127d
 80010c0:	0800127d 	.word	0x0800127d
 80010c4:	0800127d 	.word	0x0800127d
 80010c8:	0800127d 	.word	0x0800127d
 80010cc:	0800127d 	.word	0x0800127d
 80010d0:	0800127d 	.word	0x0800127d
 80010d4:	0800127d 	.word	0x0800127d
 80010d8:	0800127d 	.word	0x0800127d
 80010dc:	0800127d 	.word	0x0800127d
 80010e0:	0800127d 	.word	0x0800127d
 80010e4:	0800127d 	.word	0x0800127d
 80010e8:	0800127d 	.word	0x0800127d
 80010ec:	0800127d 	.word	0x0800127d
 80010f0:	0800127d 	.word	0x0800127d
 80010f4:	0800127d 	.word	0x0800127d
 80010f8:	0800127d 	.word	0x0800127d
 80010fc:	0800127d 	.word	0x0800127d
 8001100:	0800127d 	.word	0x0800127d
 8001104:	0800127d 	.word	0x0800127d
 8001108:	0800127d 	.word	0x0800127d
 800110c:	0800127d 	.word	0x0800127d
 8001110:	0800127d 	.word	0x0800127d
 8001114:	0800127d 	.word	0x0800127d
 8001118:	0800127d 	.word	0x0800127d
 800111c:	0800127d 	.word	0x0800127d
 8001120:	0800127d 	.word	0x0800127d
 8001124:	0800127d 	.word	0x0800127d
 8001128:	0800127d 	.word	0x0800127d
 800112c:	0800127d 	.word	0x0800127d
 8001130:	0800127d 	.word	0x0800127d
 8001134:	0800127d 	.word	0x0800127d
 8001138:	0800127d 	.word	0x0800127d
 800113c:	0800127d 	.word	0x0800127d
 8001140:	0800124d 	.word	0x0800124d
 8001144:	08001255 	.word	0x08001255
 8001148:	0800125d 	.word	0x0800125d
 800114c:	08001265 	.word	0x08001265
 8001150:	0800127d 	.word	0x0800127d
 8001154:	0800127d 	.word	0x0800127d
 8001158:	0800127d 	.word	0x0800127d
 800115c:	0800126d 	.word	0x0800126d
 8001160:	08001275 	.word	0x08001275
    {
    case peDisabled:
        break;
    case peErrorRecovery:
        PolicyErrorRecovery(port);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f893 	bl	8001290 <PolicyErrorRecovery>
        break;
 800116a:	e08c      	b.n	8001286 <USBPDPolicyEngine+0x32e>
        break;
#endif /* FSC_HAVE_SRC */
#ifdef FSC_HAVE_SNK
    /* Sink States */
    case peSinkStartup:
        PolicySinkStartup(port);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 fac5 	bl	80016fc <PolicySinkStartup>
        break;
 8001172:	e088      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSinkSendHardReset:
        PolicySinkSendHardReset(port);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 f8c7 	bl	8001308 <PolicySinkSendHardReset>
        break;
 800117a:	e084      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSinkSoftReset:
        PolicySinkSoftReset(port);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 f8cf 	bl	8001320 <PolicySinkSoftReset>
        break;
 8001182:	e080      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSinkSendSoftReset:
        PolicySinkSendSoftReset(port);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f8e7 	bl	8001358 <PolicySinkSendSoftReset>
        break;
 800118a:	e07c      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSinkTransitionDefault:
        PolicySinkTransitionDefault(port);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f949 	bl	8001424 <PolicySinkTransitionDefault>
        break;
 8001192:	e078      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSinkDiscovery:
        PolicySinkDiscovery(port);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f000 fbc7 	bl	8001928 <PolicySinkDiscovery>
        break;
 800119a:	e074      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSinkWaitCaps:
        PolicySinkWaitCaps(port);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 fbef 	bl	8001980 <PolicySinkWaitCaps>
        break;
 80011a2:	e070      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSinkEvaluateCaps:
        PolicySinkEvaluateCaps(port);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 fc5d 	bl	8001a64 <PolicySinkEvaluateCaps>
        break;
 80011aa:	e06c      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSinkSelectCapability:
        PolicySinkSelectCapability(port);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 fe0b 	bl	8001dc8 <PolicySinkSelectCapability>
        break;
 80011b2:	e068      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSinkTransitionSink:
        PolicySinkTransitionSink(port);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 fef9 	bl	8001fac <PolicySinkTransitionSink>
        break;
 80011ba:	e064      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSinkReady:
        PolicySinkReady(port);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 ff8f 	bl	80020e0 <PolicySinkReady>
        break;
 80011c2:	e060      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSinkGiveSinkCap:
        PolicySinkGiveSinkCap(port);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f001 f919 	bl	80023fc <PolicySinkGiveSinkCap>
        break;
 80011ca:	e05c      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSinkGetSourceCap:
        PolicySinkGetSourceCap(port);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f001 f9bf 	bl	8002550 <PolicySinkGetSourceCap>
        break;
 80011d2:	e058      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSinkGetSinkCap:
        PolicySinkGetSinkCap(port);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f001 f939 	bl	800244c <PolicySinkGetSinkCap>
        break;
 80011da:	e054      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSinkGiveSourceCap:
        PolicySinkGiveSourceCap(port);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f001 f9ab 	bl	8002538 <PolicySinkGiveSourceCap>
        break;
 80011e2:	e050      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSinkSendDRSwap:
        PolicySinkSendDRSwap(port);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f001 fa0f 	bl	8002608 <PolicySinkSendDRSwap>
        break;
 80011ea:	e04c      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSinkEvaluateDRSwap:
        PolicySinkEvaluateDRSwap(port);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f001 fabf 	bl	8002770 <PolicySinkEvaluateDRSwap>
        break;
 80011f2:	e048      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSinkSendVCONNSwap:
        PolicySinkSendVCONNSwap(port);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f001 fb21 	bl	800283c <PolicySinkSendVCONNSwap>
        break;
 80011fa:	e044      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSinkEvaluateVCONNSwap:
        PolicySinkEvaluateVCONNSwap(port);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f001 fca5 	bl	8002b4c <PolicySinkEvaluateVCONNSwap>
        break;
 8001202:	e040      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSinkSendPRSwap:
        PolicySinkSendPRSwap(port);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f001 fde1 	bl	8002dcc <PolicySinkSendPRSwap>
        break;
 800120a:	e03c      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSinkEvaluatePRSwap:
        PolicySinkEvaluatePRSwap(port);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f001 fde6 	bl	8002dde <PolicySinkEvaluatePRSwap>
        break;
 8001212:	e038      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSinkAlertReceived:
        PolicySinkAlertReceived(port);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f001 fdf4 	bl	8002e02 <PolicySinkAlertReceived>
        break;
 800121a:	e034      	b.n	8001286 <USBPDPolicyEngine+0x32e>
#endif /* FSC_HAVE_SNK */
    case peNotSupported:
        PolicyNotSupported(port);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 f842 	bl	80012a6 <PolicyNotSupported>
        break;
 8001222:	e030      	b.n	8001286 <USBPDPolicyEngine+0x32e>
        PolicyGiveVdm(port);
        break;
#endif /* FSC_HAVE_VDM */
#ifdef FSC_HAVE_EXT_MSG
    case peGiveCountryCodes:
        PolicyGiveCountryCodes(port);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f002 fa8d 	bl	8003744 <PolicyGiveCountryCodes>
        break;
 800122a:	e02c      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peGetCountryCodes:
        PolicyGetCountryCodes(port);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f002 fab3 	bl	8003798 <PolicyGetCountryCodes>
        break;
 8001232:	e028      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peGiveCountryInfo:
        PolicyGiveCountryInfo(port);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f002 fac6 	bl	80037c6 <PolicyGiveCountryInfo>
        break;
 800123a:	e024      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peGivePPSStatus:
        PolicyGivePPSStatus(port);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f002 fb67 	bl	8003910 <PolicyGivePPSStatus>
        break;
 8001242:	e020      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peGetPPSStatus:
        PolicyGetPPSStatus(port);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f002 faf2 	bl	800382e <PolicyGetPPSStatus>
        break;
 800124a:	e01c      	b.n	8001286 <USBPDPolicyEngine+0x32e>
#endif /* FSC_HAVE_EXT_MSG */
    case PE_BIST_Receive_Mode:
        policyBISTReceiveMode(port);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f002 fba3 	bl	8003998 <policyBISTReceiveMode>
        break;
 8001252:	e018      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case PE_BIST_Frame_Received:
        policyBISTFrameReceived(port);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f002 fba8 	bl	80039aa <policyBISTFrameReceived>
        break;
 800125a:	e014      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case PE_BIST_Carrier_Mode_2:
        policyBISTCarrierMode2(port);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f002 fbad 	bl	80039bc <policyBISTCarrierMode2>
        break;
 8001262:	e010      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case PE_BIST_Test_Data:
        policyBISTTestData(port);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f002 fc36 	bl	8003ad6 <policyBISTTestData>
        break;
 800126a:	e00c      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSendGenericCommand:
        PolicySendGenericCommand(port);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f001 fe1c 	bl	8002eaa <PolicySendGenericCommand>
        break;
 8001272:	e008      	b.n	8001286 <USBPDPolicyEngine+0x32e>
    case peSendGenericData:
        PolicySendGenericData(port);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f001 fe83 	bl	8002f80 <PolicySendGenericData>
        break;
 800127a:	e004      	b.n	8001286 <USBPDPolicyEngine+0x32e>
        }
        else
#endif /* FSC_HAVE_VDM */
        {
            /* Invalid state, reset */
            PolicyInvalidState(port);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f001 fdfe 	bl	8002e7e <PolicyInvalidState>
        }
        break;
 8001282:	e000      	b.n	8001286 <USBPDPolicyEngine+0x32e>
        break;
 8001284:	bf00      	nop
    }
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop

08001290 <PolicyErrorRecovery>:

void PolicyErrorRecovery(Port_t *port)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
    SetStateErrorRecovery(port);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f004 fb64 	bl	8005966 <SetStateErrorRecovery>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <PolicyNotSupported>:

    SetPEState(port, peSourceReady);
}

void PolicyNotSupported(Port_t *port)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af02      	add	r7, sp, #8
 80012ac:	6078      	str	r0, [r7, #4]
    if (port->PdRevSop == USBPDSPECREV2p0)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d111      	bne.n	80012dc <PolicyNotSupported+0x36>
    {
        PolicySendCommand(port, CMTReject,
            port->PolicyIsSource ? peSourceReady : peSinkReady, 0,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
        PolicySendCommand(port, CMTReject,
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <PolicyNotSupported+0x20>
 80012c2:	220f      	movs	r2, #15
 80012c4:	e000      	b.n	80012c8 <PolicyNotSupported+0x22>
 80012c6:	2224      	movs	r2, #36	; 0x24
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2300      	movs	r3, #0
 80012d2:	2104      	movs	r1, #4
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f001 fef9 	bl	80030cc <PolicySendCommand>
                        port->PolicyIsSource ? peSourceReady : peSinkReady, 0,
                        port->ProtocolMsgRxSop);
            break;
        }
    }
}
 80012da:	e011      	b.n	8001300 <PolicyNotSupported+0x5a>
                        port->PolicyIsSource ? peSourceReady : peSinkReady, 0,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
            PolicySendCommand(port, CMTNotSupported,
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <PolicyNotSupported+0x44>
 80012e6:	220f      	movs	r2, #15
 80012e8:	e000      	b.n	80012ec <PolicyNotSupported+0x46>
 80012ea:	2224      	movs	r2, #36	; 0x24
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2300      	movs	r3, #0
 80012f6:	2110      	movs	r1, #16
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f001 fee7 	bl	80030cc <PolicySendCommand>
            break;
 80012fe:	bf00      	nop
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <PolicySinkSendHardReset>:

#ifdef FSC_HAVE_SNK
void PolicySinkSendHardReset(Port_t *port)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
    PolicySendHardReset(port);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f001 feb2 	bl	800307a <PolicySendHardReset>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <PolicySinkSoftReset>:

void PolicySinkSoftReset(Port_t *port)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af02      	add	r7, sp, #8
 8001326:	6078      	str	r0, [r7, #4]
    if (PolicySendCommand(port, CMTAccept, peSinkWaitCaps, 0,
 8001328:	2300      	movs	r3, #0
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2300      	movs	r3, #0
 800132e:	2220      	movs	r2, #32
 8001330:	2103      	movs	r1, #3
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f001 feca 	bl	80030cc <PolicySendCommand>
 8001338:	4603      	mov	r3, r0
 800133a:	2b01      	cmp	r3, #1
 800133c:	d106      	bne.n	800134c <PolicySinkSoftReset+0x2c>
                          SOP_TYPE_SOP) == STAT_SUCCESS)
    {
        TimerStart(&port->PolicyStateTimer, tSinkWaitCap);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001344:	4903      	ldr	r1, [pc, #12]	; (8001354 <PolicySinkSoftReset+0x34>)
 8001346:	4618      	mov	r0, r3
 8001348:	f005 fa24 	bl	8006794 <TimerStart>
#ifdef FSC_HAVE_VDM
        port->discoverIdCounter = 0;
#endif /* FSC_HAVE_VDM */
    }
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	0007a120 	.word	0x0007a120

08001358 <PolicySinkSendSoftReset>:

void PolicySinkSendSoftReset(Port_t *port)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af02      	add	r7, sp, #8
 800135e:	6078      	str	r0, [r7, #4]
    switch (port->PolicySubIndex)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001366:	2b00      	cmp	r3, #0
 8001368:	d117      	bne.n	800139a <PolicySinkSendSoftReset+0x42>
    {
    case 0:
        if (PolicySendCommand(port, CMTSoftReset, peSinkSendSoftReset, 1,
 800136a:	2300      	movs	r3, #0
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2301      	movs	r3, #1
 8001370:	221c      	movs	r2, #28
 8001372:	210d      	movs	r1, #13
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f001 fea9 	bl	80030cc <PolicySendCommand>
 800137a:	4603      	mov	r3, r0
 800137c:	2b01      	cmp	r3, #1
 800137e:	d149      	bne.n	8001414 <PolicySinkSendSoftReset+0xbc>
                              SOP_TYPE_SOP) == STAT_SUCCESS)
        {
            TimerStart(&port->PolicyStateTimer, tSenderResponse);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001386:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 800138a:	4618      	mov	r0, r3
 800138c:	f005 fa02 	bl	8006794 <TimerStart>
            port->WaitingOnHR = TRUE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        }
        break;
 8001398:	e03c      	b.n	8001414 <PolicySinkSendSoftReset+0xbc>
    default:
        if (port->ProtocolMsgRx)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d024      	beq.n	80013ee <PolicySinkSendSoftReset+0x96>
        {
            port->ProtocolMsgRx = FALSE;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
            if ((port->PolicyRxHeader.NumDataObjects == 0) &&
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80013b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d113      	bne.n	80013e4 <PolicySinkSendSoftReset+0x8c>
                (port->PolicyRxHeader.MessageType == CMTAccept))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80013c2:	f003 031f 	and.w	r3, r3, #31
 80013c6:	b2db      	uxtb	r3, r3
            if ((port->PolicyRxHeader.NumDataObjects == 0) &&
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d10b      	bne.n	80013e4 <PolicySinkSendSoftReset+0x8c>
            {
#ifdef FSC_HAVE_VDM
                port->discoverIdCounter = 0;
#endif /* FSC_HAVE_VDM */
                SetPEState(port, peSinkWaitCaps);
 80013cc:	2120      	movs	r1, #32
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f003 fe64 	bl	800509c <SetPEState>
                TimerStart(&port->PolicyStateTimer, tSinkWaitCap);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80013da:	4911      	ldr	r1, [pc, #68]	; (8001420 <PolicySinkSendSoftReset+0xc8>)
 80013dc:	4618      	mov	r0, r3
 80013de:	f005 f9d9 	bl	8006794 <TimerStart>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 80013e2:	e018      	b.n	8001416 <PolicySinkSendSoftReset+0xbe>
                SetPEState(port, peSinkSendHardReset);
 80013e4:	211a      	movs	r1, #26
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f003 fe58 	bl	800509c <SetPEState>
        break;
 80013ec:	e013      	b.n	8001416 <PolicySinkSendSoftReset+0xbe>
        else if (TimerExpired(&port->PolicyStateTimer))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80013f4:	4618      	mov	r0, r3
 80013f6:	f005 fa08 	bl	800680a <TimerExpired>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d004      	beq.n	800140a <PolicySinkSendSoftReset+0xb2>
            SetPEState(port, peSinkSendHardReset);
 8001400:	211a      	movs	r1, #26
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f003 fe4a 	bl	800509c <SetPEState>
        break;
 8001408:	e005      	b.n	8001416 <PolicySinkSendSoftReset+0xbe>
            port->PEIdle = TRUE;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8001412:	e000      	b.n	8001416 <PolicySinkSendSoftReset+0xbe>
        break;
 8001414:	bf00      	nop
    }
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	0007a120 	.word	0x0007a120

08001424 <PolicySinkTransitionDefault>:

void PolicySinkTransitionDefault(Port_t *port)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
    switch (port->PolicySubIndex)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001432:	2b02      	cmp	r3, #2
 8001434:	f000 811d 	beq.w	8001672 <PolicySinkTransitionDefault+0x24e>
 8001438:	2b02      	cmp	r3, #2
 800143a:	f300 8152 	bgt.w	80016e2 <PolicySinkTransitionDefault+0x2be>
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <PolicySinkTransitionDefault+0x26>
 8001442:	2b01      	cmp	r3, #1
 8001444:	f000 80c4 	beq.w	80015d0 <PolicySinkTransitionDefault+0x1ac>
 8001448:	e14b      	b.n	80016e2 <PolicySinkTransitionDefault+0x2be>
    {
    case 0:
        port->Registers.Power.POWER = 0x7;
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8001450:	2107      	movs	r1, #7
 8001452:	f361 0303 	bfi	r3, r1, #0, #4
 8001456:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
        DeviceWrite(port->I2cAddr, regPower, 1, &port->Registers.Power.byte);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3335      	adds	r3, #53	; 0x35
 8001464:	2201      	movs	r2, #1
 8001466:	210b      	movs	r1, #11
 8001468:	f005 f95a 	bl	8006720 <DeviceWrite>

        /* Set up VBus measure interrupt to watch for vSafe0V */
        port->Registers.Measure.MEAS_VBUS = 1;
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8001472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001476:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
        port->Registers.Measure.MDAC = VBUS_MDAC_0P84V;
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8001480:	2101      	movs	r1, #1
 8001482:	f361 0305 	bfi	r3, r1, #0, #6
 8001486:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
        DeviceWrite(port->I2cAddr, regMeasure, 1,
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	332c      	adds	r3, #44	; 0x2c
 8001494:	2201      	movs	r2, #1
 8001496:	2104      	movs	r1, #4
 8001498:	f005 f942 	bl	8006720 <DeviceWrite>
                    &port->Registers.Measure.byte);

        port->IsHardReset = TRUE;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
        port->PolicyHasContract = FALSE;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        port->PdRevSop = port->PortConfig.PdRevPreferred;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        port->PdRevCable = port->PortConfig.PdRevPreferred;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        port->DetachThreshold = VBUS_MV_VSAFE5V_DISC;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f640 6256 	movw	r2, #3670	; 0xe56
 80014ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        notify_observers(BIST_DISABLED, port->I2cAddr, 0);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014d4:	2200      	movs	r2, #0
 80014d6:	4619      	mov	r1, r3
 80014d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014dc:	f005 fbe0 	bl	8006ca0 <notify_observers>

        notify_observers(PD_NO_CONTRACT, port->I2cAddr, 0);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014e6:	2200      	movs	r2, #0
 80014e8:	4619      	mov	r1, r3
 80014ea:	2010      	movs	r0, #16
 80014ec:	f005 fbd8 	bl	8006ca0 <notify_observers>

        TimerStart(&port->PolicyStateTimer, tPSHardResetMax + tSafe0V);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80014f6:	497f      	ldr	r1, [pc, #508]	; (80016f4 <PolicySinkTransitionDefault+0x2d0>)
 80014f8:	4618      	mov	r0, r3
 80014fa:	f005 f94b 	bl	8006794 <TimerStart>

        if (port->PolicyIsDFP)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001504:	2b00      	cmp	r3, #0
 8001506:	d030      	beq.n	800156a <PolicySinkTransitionDefault+0x146>
        {
            port->PolicyIsDFP = FALSE;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            port->Registers.Switches.DATAROLE = port->PolicyIsDFP;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	b2d9      	uxtb	r1, r3
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8001522:	f361 1304 	bfi	r3, r1, #4, #1
 8001526:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
            DeviceWrite(port->I2cAddr, regSwitches1, 1,
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	332b      	adds	r3, #43	; 0x2b
 8001534:	2201      	movs	r2, #1
 8001536:	2103      	movs	r1, #3
 8001538:	f005 f8f2 	bl	8006720 <DeviceWrite>
                        &port->Registers.Switches.byte[1]);

            port->Registers.Control.ENSOP1 = 0;
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8001542:	f36f 0300 	bfc	r3, #0, #1
 8001546:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
            port->Registers.Control.ENSOP2 = 0;
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8001550:	f36f 0341 	bfc	r3, #1, #1
 8001554:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
            DeviceWrite(port->I2cAddr, regControl1, 1,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3331      	adds	r3, #49	; 0x31
 8001562:	2201      	movs	r2, #1
 8001564:	2107      	movs	r1, #7
 8001566:	f005 f8db 	bl	8006720 <DeviceWrite>
                        &port->Registers.Control.byte[1]);
        }

        if (port->IsVCONNSource)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001570:	2b00      	cmp	r3, #0
 8001572:	d01a      	beq.n	80015aa <PolicySinkTransitionDefault+0x186>
        {
            port->Registers.Switches.VCONN_CC1 = 0;
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 800157a:	f36f 1304 	bfc	r3, #4, #1
 800157e:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            port->Registers.Switches.VCONN_CC2 = 0;
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8001588:	f36f 1345 	bfc	r3, #5, #1
 800158c:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            DeviceWrite(port->I2cAddr, regSwitches0, 1,
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	332a      	adds	r3, #42	; 0x2a
 800159a:	2201      	movs	r2, #1
 800159c:	2102      	movs	r1, #2
 800159e:	f005 f8bf 	bl	8006720 <DeviceWrite>
                        &port->Registers.Switches.byte[0]);
            port->IsVCONNSource = FALSE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        }

        ProtocolFlushTxFIFO(port);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f003 fc4a 	bl	8004e44 <ProtocolFlushTxFIFO>
        ProtocolFlushRxFIFO(port);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f003 fc2f 	bl	8004e14 <ProtocolFlushRxFIFO>
        ResetProtocolLayer(port, TRUE);
 80015b6:	2101      	movs	r1, #1
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f003 fc5b 	bl	8004e74 <ResetProtocolLayer>
        port->PolicySubIndex++;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80015c4:	3301      	adds	r3, #1
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        break;
 80015ce:	e08d      	b.n	80016ec <PolicySinkTransitionDefault+0x2c8>
    case 1:
        if (port->Registers.Status.I_COMP_CHNG &&
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80015d6:	f003 0320 	and.w	r3, r3, #32
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d02f      	beq.n	8001640 <PolicySinkTransitionDefault+0x21c>
            !isVBUSOverVoltage(port, VBUS_MV_VSAFE0V + MDAC_MV_LSB))
 80015e0:	f240 41ec 	movw	r1, #1260	; 0x4ec
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f004 fc6f 	bl	8005ec8 <isVBUSOverVoltage>
 80015ea:	4603      	mov	r3, r0
        if (port->Registers.Status.I_COMP_CHNG &&
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d127      	bne.n	8001640 <PolicySinkTransitionDefault+0x21c>
        {
            port->PolicySubIndex++;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80015f6:	3301      	adds	r3, #1
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

            /* Set up VBus measure interrupt to watch for vSafe5V */
            port->Registers.Measure.MEAS_VBUS = 1;
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8001606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800160a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
            port->Registers.Measure.MDAC = VBUS_MDAC_4P62;
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8001614:	210a      	movs	r1, #10
 8001616:	f361 0305 	bfi	r3, r1, #0, #6
 800161a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
            DeviceWrite(port->I2cAddr, regMeasure, 1,
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	332c      	adds	r3, #44	; 0x2c
 8001628:	2201      	movs	r2, #1
 800162a:	2104      	movs	r1, #4
 800162c:	f005 f878 	bl	8006720 <DeviceWrite>
                        &port->Registers.Measure.byte);

            TimerStart(&port->PolicyStateTimer, tSrcRecoverMax + tSrcTurnOn);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001636:	4930      	ldr	r1, [pc, #192]	; (80016f8 <PolicySinkTransitionDefault+0x2d4>)
 8001638:	4618      	mov	r0, r3
 800163a:	f005 f8ab 	bl	8006794 <TimerStart>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 800163e:	e055      	b.n	80016ec <PolicySinkTransitionDefault+0x2c8>
        else if (TimerExpired(&port->PolicyStateTimer))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001646:	4618      	mov	r0, r3
 8001648:	f005 f8df 	bl	800680a <TimerExpired>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00a      	beq.n	8001668 <PolicySinkTransitionDefault+0x244>
            TimerDisable(&port->PolicyStateTimer);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001658:	4618      	mov	r0, r3
 800165a:	f005 f8b6 	bl	80067ca <TimerDisable>
            SetPEState(port, peSinkStartup);
 800165e:	211e      	movs	r1, #30
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f003 fd1b 	bl	800509c <SetPEState>
        break;
 8001666:	e041      	b.n	80016ec <PolicySinkTransitionDefault+0x2c8>
            port->PEIdle = TRUE;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8001670:	e03c      	b.n	80016ec <PolicySinkTransitionDefault+0x2c8>
    case 2:
        if (port->Registers.Status.I_COMP_CHNG &&
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001678:	f003 0320 	and.w	r3, r3, #32
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d016      	beq.n	80016b0 <PolicySinkTransitionDefault+0x28c>
            isVBUSOverVoltage(port, VBUS_MV_VSAFE5V_L))
 8001682:	f241 218e 	movw	r1, #4750	; 0x128e
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f004 fc1e 	bl	8005ec8 <isVBUSOverVoltage>
 800168c:	4603      	mov	r3, r0
        if (port->Registers.Status.I_COMP_CHNG &&
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00e      	beq.n	80016b0 <PolicySinkTransitionDefault+0x28c>
        {
            TimerDisable(&port->PolicyStateTimer);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001698:	4618      	mov	r0, r3
 800169a:	f005 f896 	bl	80067ca <TimerDisable>

            port->PolicySubIndex++;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80016a4:	3301      	adds	r3, #1
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 80016ae:	e01d      	b.n	80016ec <PolicySinkTransitionDefault+0x2c8>
        else if (TimerExpired(&port->PolicyStateTimer))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80016b6:	4618      	mov	r0, r3
 80016b8:	f005 f8a7 	bl	800680a <TimerExpired>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00a      	beq.n	80016d8 <PolicySinkTransitionDefault+0x2b4>
            TimerDisable(&port->PolicyStateTimer);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80016c8:	4618      	mov	r0, r3
 80016ca:	f005 f87e 	bl	80067ca <TimerDisable>
            SetPEState(port, peSinkStartup);
 80016ce:	211e      	movs	r1, #30
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f003 fce3 	bl	800509c <SetPEState>
        break;
 80016d6:	e009      	b.n	80016ec <PolicySinkTransitionDefault+0x2c8>
            port->PEIdle = TRUE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 80016e0:	e004      	b.n	80016ec <PolicySinkTransitionDefault+0x2c8>
    default:
        SetPEState(port, peSinkStartup);
 80016e2:	211e      	movs	r1, #30
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f003 fcd9 	bl	800509c <SetPEState>
        break;
 80016ea:	bf00      	nop
    }
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	000a6fe0 	.word	0x000a6fe0
 80016f8:	00137478 	.word	0x00137478

080016fc <PolicySinkStartup>:

void PolicySinkStartup(Port_t *port)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
#ifdef FSC_HAVE_VDM
    FSC_S32 i;
#endif /* FSC_HAVE_VDM */

    /* Set or restore MDAC detach value */
    port->Registers.Measure.MEAS_VBUS = 1;
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800170a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800170e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
    port->Registers.Measure.MDAC =
            (port->DetachThreshold / MDAC_MV_LSB) - 1;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001718:	089b      	lsrs	r3, r3, #2
 800171a:	4a82      	ldr	r2, [pc, #520]	; (8001924 <PolicySinkStartup+0x228>)
 800171c:	fba2 2303 	umull	r2, r3, r2, r3
 8001720:	095b      	lsrs	r3, r3, #5
 8001722:	b29b      	uxth	r3, r3
 8001724:	b2db      	uxtb	r3, r3
 8001726:	3b01      	subs	r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800172e:	b2d9      	uxtb	r1, r3
    port->Registers.Measure.MDAC =
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8001736:	f361 0305 	bfi	r3, r1, #0, #6
 800173a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
    DeviceWrite(port->I2cAddr, regMeasure, 1,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	332c      	adds	r3, #44	; 0x2c
 8001748:	2201      	movs	r2, #1
 800174a:	2104      	movs	r1, #4
 800174c:	f004 ffe8 	bl	8006720 <DeviceWrite>
                &port->Registers.Measure.byte);

#ifdef FSC_GSCE_FIX
    port->Registers.Mask.M_CRC_CHK = 0;     /* Added for GSCE workaround */
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8001756:	f36f 1304 	bfc	r3, #4, #1
 800175a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
#endif /* FSC_GSCE_FIX */
    port->Registers.Mask.M_COLLISION = 0;
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8001764:	f36f 0341 	bfc	r3, #1, #1
 8001768:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    DeviceWrite(port->I2cAddr, regMask, 1, &port->Registers.Mask.byte);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3334      	adds	r3, #52	; 0x34
 8001776:	2201      	movs	r2, #1
 8001778:	210a      	movs	r1, #10
 800177a:	f004 ffd1 	bl	8006720 <DeviceWrite>
    port->Registers.MaskAdv.M_RETRYFAIL = 0;
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001784:	f36f 1304 	bfc	r3, #4, #1
 8001788:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
    port->Registers.MaskAdv.M_HARDSENT = 0;
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001792:	f36f 03c3 	bfc	r3, #3, #1
 8001796:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
    port->Registers.MaskAdv.M_TXSENT = 0;
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80017a0:	f36f 0382 	bfc	r3, #2, #1
 80017a4:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
    port->Registers.MaskAdv.M_HARDRST = 0;
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80017ae:	f36f 0300 	bfc	r3, #0, #1
 80017b2:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
    DeviceWrite(port->I2cAddr, regMaska, 1, &port->Registers.MaskAdv.byte[0]);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3338      	adds	r3, #56	; 0x38
 80017c0:	2201      	movs	r2, #1
 80017c2:	210e      	movs	r1, #14
 80017c4:	f004 ffac 	bl	8006720 <DeviceWrite>
    port->Registers.MaskAdv.M_GCRCSENT = 0;
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 80017ce:	f36f 0300 	bfc	r3, #0, #1
 80017d2:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
    DeviceWrite(port->I2cAddr, regMaskb, 1, &port->Registers.MaskAdv.byte[1]);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3339      	adds	r3, #57	; 0x39
 80017e0:	2201      	movs	r2, #1
 80017e2:	210f      	movs	r1, #15
 80017e4:	f004 ff9c 	bl	8006720 <DeviceWrite>

    if (port->Registers.DeviceID.VERSION_ID == VERSION_302A)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80017ee:	f023 030f 	bic.w	r3, r3, #15
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b80      	cmp	r3, #128	; 0x80
 80017f6:	d118      	bne.n	800182a <PolicySinkStartup+0x12e>
    {
        if (port->Registers.Control.RX_FLUSH == 1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d028      	beq.n	800185a <PolicySinkStartup+0x15e>
        {
            port->Registers.Control.RX_FLUSH = 0;
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 800180e:	f36f 0382 	bfc	r3, #2, #1
 8001812:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
            DeviceWrite(port->I2cAddr, regControl1, 1,
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3331      	adds	r3, #49	; 0x31
 8001820:	2201      	movs	r2, #1
 8001822:	2107      	movs	r1, #7
 8001824:	f004 ff7c 	bl	8006720 <DeviceWrite>
 8001828:	e017      	b.n	800185a <PolicySinkStartup+0x15e>
                        &port->Registers.Control.byte[1]);
        }
    }
    else
    {
        if (port->Registers.Control.BIST_TMODE == 1)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001830:	f003 0320 	and.w	r3, r3, #32
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00f      	beq.n	800185a <PolicySinkStartup+0x15e>
        {
            port->Registers.Control.BIST_TMODE = 0;
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8001840:	f36f 1345 	bfc	r3, #5, #1
 8001844:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
            DeviceWrite(port->I2cAddr, regControl3, 1,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3333      	adds	r3, #51	; 0x33
 8001852:	2201      	movs	r2, #1
 8001854:	2109      	movs	r1, #9
 8001856:	f004 ff63 	bl	8006720 <DeviceWrite>
                        &port->Registers.Control.byte[3]);
        }
    }

    port->USBPDContract.object = 0;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    port->PartnerCaps.object = 0;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    port->IsPRSwap = FALSE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    port->PolicyIsSource = FALSE;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    port->PpsEnabled = FALSE;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6

    port->Registers.Switches.POWERROLE = port->PolicyIsSource;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	b2d9      	uxtb	r1, r3
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8001894:	f361 13c7 	bfi	r3, r1, #7, #1
 8001898:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
    DeviceWrite(port->I2cAddr, regSwitches1, 1,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	332b      	adds	r3, #43	; 0x2b
 80018a6:	2201      	movs	r2, #1
 80018a8:	2103      	movs	r1, #3
 80018aa:	f004 ff39 	bl	8006720 <DeviceWrite>
            &port->Registers.Switches.byte[1]);

    ResetProtocolLayer(port, FALSE);
 80018ae:	2100      	movs	r1, #0
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f003 fadf 	bl	8004e74 <ResetProtocolLayer>

    port->Registers.Switches.AUTO_CRC = 1;
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 80018bc:	f043 0304 	orr.w	r3, r3, #4
 80018c0:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
    DeviceWrite(port->I2cAddr, regSwitches1, 1,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	332b      	adds	r3, #43	; 0x2b
 80018ce:	2201      	movs	r2, #1
 80018d0:	2103      	movs	r1, #3
 80018d2:	f004 ff25 	bl	8006720 <DeviceWrite>
            &port->Registers.Switches.byte[1]);

    port->Registers.Power.POWER = 0xF;
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80018dc:	f043 030f 	orr.w	r3, r3, #15
 80018e0:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
    DeviceWrite(port->I2cAddr, regPower, 1, &port->Registers.Power.byte);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3335      	adds	r3, #53	; 0x35
 80018ee:	2201      	movs	r2, #1
 80018f0:	210b      	movs	r1, #11
 80018f2:	f004 ff15 	bl	8006720 <DeviceWrite>

    port->CapsCounter = 0;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    port->CollisionCounter = 0;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    TimerDisable(&port->PolicyStateTimer);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800190c:	4618      	mov	r0, r3
 800190e:	f004 ff5c 	bl	80067ca <TimerDisable>
    SetPEState(port, peSinkDiscovery);
 8001912:	211f      	movs	r1, #31
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f003 fbc1 	bl	800509c <SetPEState>
#endif /* FSC_HAVE_VDM */

#ifdef FSC_HAVE_DP
    DP_Initialize(port);
#endif /* FSC_HAVE_DP */
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	4e04e04f 	.word	0x4e04e04f

08001928 <PolicySinkDiscovery>:

void PolicySinkDiscovery(Port_t *port)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
    if (isVSafe5V(port))
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f004 fabb 	bl	8005eac <isVSafe5V>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00f      	beq.n	800195c <PolicySinkDiscovery+0x34>
    {
        port->IsHardReset = FALSE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f

        SetPEState(port, peSinkWaitCaps);
 8001944:	2120      	movs	r1, #32
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f003 fba8 	bl	800509c <SetPEState>
        TimerStart(&port->PolicyStateTimer, tTypeCSinkWaitCap);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001952:	490a      	ldr	r1, [pc, #40]	; (800197c <PolicySinkDiscovery+0x54>)
 8001954:	4618      	mov	r0, r3
 8001956:	f004 ff1d 	bl	8006794 <TimerStart>
    else
    {
        TimerStart(&port->PolicyStateTimer, tVBusPollShort);
        port->PEIdle = TRUE;
    }
}
 800195a:	e00b      	b.n	8001974 <PolicySinkDiscovery+0x4c>
        TimerStart(&port->PolicyStateTimer, tVBusPollShort);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001962:	f242 7110 	movw	r1, #10000	; 0x2710
 8001966:	4618      	mov	r0, r3
 8001968:	f004 ff14 	bl	8006794 <TimerStart>
        port->PEIdle = TRUE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	00055730 	.word	0x00055730

08001980 <PolicySinkWaitCaps>:

void PolicySinkWaitCaps(Port_t *port)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
    if (port->ProtocolMsgRx)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d03c      	beq.n	8001a0c <PolicySinkWaitCaps+0x8c>
    {
        port->ProtocolMsgRx = FALSE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
        if ((port->PolicyRxHeader.NumDataObjects > 0) &&
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80019a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d01b      	beq.n	80019e2 <PolicySinkWaitCaps+0x62>
            (port->PolicyRxHeader.MessageType == DMTSourceCapabilities))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	b2db      	uxtb	r3, r3
        if ((port->PolicyRxHeader.NumDataObjects > 0) &&
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d113      	bne.n	80019e2 <PolicySinkWaitCaps+0x62>
        {
            UpdateCapabilitiesRx(port, TRUE);
 80019ba:	2101      	movs	r1, #1
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f001 fe6d 	bl	800369c <UpdateCapabilitiesRx>

            /* Align our PD spec rev with the port partner */
            DPM_SetSpecRev(port, SOP_TYPE_SOP,
                           port->PolicyRxHeader.SpecRevision);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80019c8:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80019cc:	b2db      	uxtb	r3, r3
            DPM_SetSpecRev(port, SOP_TYPE_SOP,
 80019ce:	461a      	mov	r2, r3
 80019d0:	2100      	movs	r1, #0
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f005 f8d4 	bl	8006b80 <DPM_SetSpecRev>

            SetPEState(port, peSinkEvaluateCaps);
 80019d8:	2121      	movs	r1, #33	; 0x21
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f003 fb5e 	bl	800509c <SetPEState>
 80019e0:	e03b      	b.n	8001a5a <PolicySinkWaitCaps+0xda>
        }
        else if ((port->PolicyRxHeader.NumDataObjects == 0) &&
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80019e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d133      	bne.n	8001a5a <PolicySinkWaitCaps+0xda>
                 (port->PolicyRxHeader.MessageType == CMTSoftReset))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80019f8:	f003 031f 	and.w	r3, r3, #31
 80019fc:	b2db      	uxtb	r3, r3
        else if ((port->PolicyRxHeader.NumDataObjects == 0) &&
 80019fe:	2b0d      	cmp	r3, #13
 8001a00:	d12b      	bne.n	8001a5a <PolicySinkWaitCaps+0xda>
        {
            SetPEState(port, peSinkSoftReset);
 8001a02:	211b      	movs	r1, #27
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f003 fb49 	bl	800509c <SetPEState>
    }
    else
    {
        port->PEIdle = TRUE;
    }
}
 8001a0a:	e026      	b.n	8001a5a <PolicySinkWaitCaps+0xda>
    else if ((port->PolicyHasContract == TRUE) &&
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d109      	bne.n	8001a2a <PolicySinkWaitCaps+0xaa>
             (port->HardResetCounter > nHardResetCount))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    else if ((port->PolicyHasContract == TRUE) &&
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d904      	bls.n	8001a2a <PolicySinkWaitCaps+0xaa>
        SetPEState(port, peErrorRecovery);
 8001a20:	2101      	movs	r1, #1
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f003 fb3a 	bl	800509c <SetPEState>
 8001a28:	e017      	b.n	8001a5a <PolicySinkWaitCaps+0xda>
    else if ((port->HardResetCounter <= nHardResetCount) &&
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d80d      	bhi.n	8001a50 <PolicySinkWaitCaps+0xd0>
             TimerExpired(&port->PolicyStateTimer))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f004 fee5 	bl	800680a <TimerExpired>
 8001a40:	4603      	mov	r3, r0
    else if ((port->HardResetCounter <= nHardResetCount) &&
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d004      	beq.n	8001a50 <PolicySinkWaitCaps+0xd0>
        SetPEState(port, peSinkSendHardReset);
 8001a46:	211a      	movs	r1, #26
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f003 fb27 	bl	800509c <SetPEState>
 8001a4e:	e004      	b.n	8001a5a <PolicySinkWaitCaps+0xda>
        port->PEIdle = TRUE;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 8001a58:	e7ff      	b.n	8001a5a <PolicySinkWaitCaps+0xda>
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <PolicySinkEvaluateCaps>:

void PolicySinkEvaluateCaps(Port_t *port)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
    /* All units in mA, mV, mW when possible. Some PD structure values are
     * converted otherwise.
     */
    FSC_S32 i, reqPos = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	623b      	str	r3, [r7, #32]
    FSC_U32 objVoltage = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
    FSC_U32 objCurrent = 0, objPower, MaxPower = 0, SelVoltage = 0, ReqCurrent;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61bb      	str	r3, [r7, #24]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]

    port->HardResetCounter = 0;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    port->PortConfig.SinkRequestMaxVoltage = 0;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]

    /* Calculate max voltage - algorithm in case of non-compliant ordering */
    for (i = 0; i < DPM_GetSinkCapHeader(port->dpm, port)->NumDataObjects; i++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
 8001a92:	e028      	b.n	8001ae6 <PolicySinkEvaluateCaps+0x82>
    {
        port->PortConfig.SinkRequestMaxVoltage  =
            ((DPM_GetSinkCap(port->dpm, port)[i].FPDOSink.Voltage >
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f005 f847 	bl	8006b2e <DPM_GetSinkCap>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	461a      	mov	r2, r3
              port->PortConfig.SinkRequestMaxVoltage) ?
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
                DPM_GetSinkCap(port->dpm, port)[i].FPDOSink.Voltage :
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d90e      	bls.n	8001ad8 <PolicySinkEvaluateCaps+0x74>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f005 f834 	bl	8006b2e <DPM_GetSinkCap>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	e001      	b.n	8001adc <PolicySinkEvaluateCaps+0x78>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
        port->PortConfig.SinkRequestMaxVoltage  =
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	60d3      	str	r3, [r2, #12]
    for (i = 0; i < DPM_GetSinkCapHeader(port->dpm, port)->NumDataObjects; i++)
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f005 f806 	bl	8006afe <DPM_GetSinkCapHeader>
 8001af2:	4603      	mov	r3, r0
 8001af4:	785b      	ldrb	r3, [r3, #1]
 8001af6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	4293      	cmp	r3, r2
 8001b02:	dbc7      	blt.n	8001a94 <PolicySinkEvaluateCaps+0x30>
                port->PortConfig.SinkRequestMaxVoltage);
    }

    /* Convert from 50mV to 1mV units */
    port->PortConfig.SinkRequestMaxVoltage *= 50;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	2232      	movs	r2, #50	; 0x32
 8001b0a:	fb02 f203 	mul.w	r2, r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	60da      	str	r2, [r3, #12]

    /* Going to select the highest power object that we are compatible with */
    for (i = 0; i < port->SrcCapsHeaderReceived.NumDataObjects; i++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
 8001b16:	e049      	b.n	8001bac <PolicySinkEvaluateCaps+0x148>
    {
        switch (port->SrcCapsReceived[i].PDO.SupplyType)
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	3342      	adds	r3, #66	; 0x42
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	79db      	ldrb	r3, [r3, #7]
 8001b24:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d12b      	bne.n	8001b86 <PolicySinkEvaluateCaps+0x122>
        {
        case pdoTypeFixed:
            objVoltage = port->SrcCapsReceived[i].FPDOSupply.Voltage * 50;
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	3342      	adds	r3, #66	; 0x42
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	2332      	movs	r3, #50	; 0x32
 8001b44:	fb03 f302 	mul.w	r3, r3, r2
 8001b48:	61fb      	str	r3, [r7, #28]
            if (objVoltage > port->PortConfig.SinkRequestMaxVoltage )
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d827      	bhi.n	8001ba4 <PolicySinkEvaluateCaps+0x140>
            }
            else
            {
                /* Calculate the power for comparison */
                objCurrent =
                        port->SrcCapsReceived[i].FPDOSupply.MaxCurrent * 10;
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	3342      	adds	r3, #66	; 0x42
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	889b      	ldrh	r3, [r3, #4]
 8001b60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
                objCurrent =
 8001b70:	61bb      	str	r3, [r7, #24]
                objPower = (objVoltage * objCurrent) / 1000;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	fb02 f303 	mul.w	r3, r2, r3
 8001b7a:	4a8f      	ldr	r2, [pc, #572]	; (8001db8 <PolicySinkEvaluateCaps+0x354>)
 8001b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b80:	099b      	lsrs	r3, r3, #6
 8001b82:	617b      	str	r3, [r7, #20]
            }
            break;
 8001b84:	e002      	b.n	8001b8c <PolicySinkEvaluateCaps+0x128>
        case pdoTypeVariable:
        case pdoTypeBattery:
        case pdoTypeAugmented:
        default:
            /* Ignore other supply types for now */
            objPower = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
            break;
 8001b8a:	bf00      	nop
        }

        /* Look for highest power */
        if (objPower >= MaxPower)
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d308      	bcc.n	8001ba6 <PolicySinkEvaluateCaps+0x142>
        {
            MaxPower = objPower;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	613b      	str	r3, [r7, #16]
            SelVoltage = objVoltage;
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	60fb      	str	r3, [r7, #12]
            reqPos = i + 1;
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	623b      	str	r3, [r7, #32]
 8001ba2:	e000      	b.n	8001ba6 <PolicySinkEvaluateCaps+0x142>
                continue;
 8001ba4:	bf00      	nop
    for (i = 0; i < port->SrcCapsHeaderReceived.NumDataObjects; i++)
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	3301      	adds	r3, #1
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
 8001bb2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	dbab      	blt.n	8001b18 <PolicySinkEvaluateCaps+0xb4>
        }
    }

    if ((reqPos > 0) && (SelVoltage > 0))
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f340 80e8 	ble.w	8001d98 <PolicySinkEvaluateCaps+0x334>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 80e4 	beq.w	8001d98 <PolicySinkEvaluateCaps+0x334>
    {
        /* Check if PPS was selected */
        /* TODO - Non-fixed PDO selection is not implemented here,
         * but some initial PPS functionality is included below.
         */
        port->PpsEnabled = (port->SrcCapsReceived[reqPos - 1].PDO.SupplyType
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	3342      	adds	r3, #66	; 0x42
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	79db      	ldrb	r3, [r3, #7]
 8001bde:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001be2:	b2db      	uxtb	r3, r3
                == pdoTypeAugmented) ? TRUE : FALSE;
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	bf0c      	ite	eq
 8001be8:	2301      	moveq	r3, #1
 8001bea:	2300      	movne	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	461a      	mov	r2, r3
        port->PpsEnabled = (port->SrcCapsReceived[reqPos - 1].PDO.SupplyType
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6

        port->PartnerCaps.object = port->SrcCapsReceived[0].object;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

        /* Initialize common fields */
        port->SinkRequest.object = 0;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        port->SinkRequest.FVRDO.ObjectPosition = reqPos & 0x07;
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	b2d9      	uxtb	r1, r3
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	f892 314b 	ldrb.w	r3, [r2, #331]	; 0x14b
 8001c18:	f361 1306 	bfi	r3, r1, #4, #3
 8001c1c:	f882 314b 	strb.w	r3, [r2, #331]	; 0x14b
        port->SinkRequest.FVRDO.GiveBack =
            port->PortConfig.SinkGotoMinCompatible;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	79db      	ldrb	r3, [r3, #7]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	b2d9      	uxtb	r1, r3
        port->SinkRequest.FVRDO.GiveBack =
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	f892 314b 	ldrb.w	r3, [r2, #331]	; 0x14b
 8001c30:	f361 03c3 	bfi	r3, r1, #3, #1
 8001c34:	f882 314b 	strb.w	r3, [r2, #331]	; 0x14b
        port->SinkRequest.FVRDO.NoUSBSuspend =
            port->PortConfig.SinkUSBSuspendOperation;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7a1b      	ldrb	r3, [r3, #8]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	b2d9      	uxtb	r1, r3
        port->SinkRequest.FVRDO.NoUSBSuspend =
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	f892 314b 	ldrb.w	r3, [r2, #331]	; 0x14b
 8001c48:	f361 0300 	bfi	r3, r1, #0, #1
 8001c4c:	f882 314b 	strb.w	r3, [r2, #331]	; 0x14b
        port->SinkRequest.FVRDO.USBCommCapable =
            port->PortConfig.SinkUSBCommCapable;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	7a5b      	ldrb	r3, [r3, #9]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	b2d9      	uxtb	r1, r3
        port->SinkRequest.FVRDO.USBCommCapable =
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	f892 314b 	ldrb.w	r3, [r2, #331]	; 0x14b
 8001c60:	f361 0341 	bfi	r3, r1, #1, #1
 8001c64:	f882 314b 	strb.w	r3, [r2, #331]	; 0x14b

        /* PortConfig Op/MaxPower values are used here instead of individual
         * SinkCaps current values.
         */
        ReqCurrent = (port->PortConfig.SinkRequestOpPower * 1000) / SelVoltage;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c70:	fb02 f203 	mul.w	r2, r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	60bb      	str	r3, [r7, #8]

        if (port->PpsEnabled)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d01e      	beq.n	8001cc4 <PolicySinkEvaluateCaps+0x260>
        {
            /* Req current (50mA units) and voltage (20mV units) */
            port->SinkRequest.PPSRDO.OpCurrent = (ReqCurrent / 50) & 0x7F;
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	4a4c      	ldr	r2, [pc, #304]	; (8001dbc <PolicySinkEvaluateCaps+0x358>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c94:	b2d9      	uxtb	r1, r3
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	f892 3148 	ldrb.w	r3, [r2, #328]	; 0x148
 8001c9c:	f361 0306 	bfi	r3, r1, #0, #7
 8001ca0:	f882 3148 	strb.w	r3, [r2, #328]	; 0x148
            port->SinkRequest.PPSRDO.Voltage = (SelVoltage / 20) & 0x7FF;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4a46      	ldr	r2, [pc, #280]	; (8001dc0 <PolicySinkEvaluateCaps+0x35c>)
 8001ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cb2:	b299      	uxth	r1, r3
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
 8001cba:	f361 2353 	bfi	r3, r1, #9, #11
 8001cbe:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001cc2:	e027      	b.n	8001d14 <PolicySinkEvaluateCaps+0x2b0>
        }
        else
        {
            /* Fixed request */
            /* Set the current based on the selected voltage (in 10mA units) */
            port->SinkRequest.FVRDO.OpCurrent = (ReqCurrent / 10) & 0x3FF;
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4a3e      	ldr	r2, [pc, #248]	; (8001dc0 <PolicySinkEvaluateCaps+0x35c>)
 8001cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ccc:	08db      	lsrs	r3, r3, #3
 8001cce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cd2:	b299      	uxth	r1, r3
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
 8001cda:	f361 2393 	bfi	r3, r1, #10, #10
 8001cde:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
            ReqCurrent =
                    (port->PortConfig.SinkRequestMaxPower * 1000) / SelVoltage;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cea:	fb02 f203 	mul.w	r2, r2, r3
            ReqCurrent =
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	60bb      	str	r3, [r7, #8]
            port->SinkRequest.FVRDO.MinMaxCurrent = (ReqCurrent / 10) & 0x3FF;
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	4a31      	ldr	r2, [pc, #196]	; (8001dc0 <PolicySinkEvaluateCaps+0x35c>)
 8001cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfe:	08db      	lsrs	r3, r3, #3
 8001d00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d04:	b299      	uxth	r1, r3
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	f8b2 3148 	ldrh.w	r3, [r2, #328]	; 0x148
 8001d0c:	f361 0309 	bfi	r3, r1, #0, #10
 8001d10:	f8a2 3148 	strh.w	r3, [r2, #328]	; 0x148
        }

        /* If the give back flag is set there can't be a mismatch */
        if (port->PortConfig.SinkGotoMinCompatible)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	79db      	ldrb	r3, [r3, #7]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d007      	beq.n	8001d2c <PolicySinkEvaluateCaps+0x2c8>
        {
            port->SinkRequest.FVRDO.CapabilityMismatch = FALSE;
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	f892 314b 	ldrb.w	r3, [r2, #331]	; 0x14b
 8001d22:	f36f 0382 	bfc	r3, #2, #1
 8001d26:	f882 314b 	strb.w	r3, [r2, #331]	; 0x14b
 8001d2a:	e030      	b.n	8001d8e <PolicySinkEvaluateCaps+0x32a>
        else
        {
            /* If the max power available is less than the max requested... */
            /* TODO - This is fixed request only.
             *   Validate PPS requested current against advertised max */
            if (objCurrent <= ReqCurrent)
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d825      	bhi.n	8001d80 <PolicySinkEvaluateCaps+0x31c>
            {
                port->SinkRequest.FVRDO.CapabilityMismatch = TRUE;
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	f892 314b 	ldrb.w	r3, [r2, #331]	; 0x14b
 8001d3a:	f043 0304 	orr.w	r3, r3, #4
 8001d3e:	f882 314b 	strb.w	r3, [r2, #331]	; 0x14b
                port->SinkRequest.FVRDO.MinMaxCurrent =
                		objCurrent / 10;
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	4a1e      	ldr	r2, [pc, #120]	; (8001dc0 <PolicySinkEvaluateCaps+0x35c>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	08db      	lsrs	r3, r3, #3
 8001d4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d50:	b299      	uxth	r1, r3
                port->SinkRequest.FVRDO.MinMaxCurrent =
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	f8b2 3148 	ldrh.w	r3, [r2, #328]	; 0x148
 8001d58:	f361 0309 	bfi	r3, r1, #0, #10
 8001d5c:	f8a2 3148 	strh.w	r3, [r2, #328]	; 0x148
                port->SinkRequest.FVRDO.OpCurrent = objCurrent / 10; /* 10mA */
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	4a17      	ldr	r2, [pc, #92]	; (8001dc0 <PolicySinkEvaluateCaps+0x35c>)
 8001d64:	fba2 2303 	umull	r2, r3, r2, r3
 8001d68:	08db      	lsrs	r3, r3, #3
 8001d6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d6e:	b299      	uxth	r1, r3
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
 8001d76:	f361 2393 	bfi	r3, r1, #10, #10
 8001d7a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001d7e:	e006      	b.n	8001d8e <PolicySinkEvaluateCaps+0x32a>
            }
            else
            {
                port->SinkRequest.FVRDO.CapabilityMismatch = FALSE;
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	f892 314b 	ldrb.w	r3, [r2, #331]	; 0x14b
 8001d86:	f36f 0382 	bfc	r3, #2, #1
 8001d8a:	f882 314b 	strb.w	r3, [r2, #331]	; 0x14b
            }
        }

        SetPEState(port, peSinkSelectCapability);
 8001d8e:	2122      	movs	r1, #34	; 0x22
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f003 f983 	bl	800509c <SetPEState>
 8001d96:	e00b      	b.n	8001db0 <PolicySinkEvaluateCaps+0x34c>
    else
    {
        /* For now, we are just going to go back to the wait state
         * instead of sending a reject or reset (may change in future)
         */
        SetPEState(port, peSinkWaitCaps);
 8001d98:	2120      	movs	r1, #32
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f003 f97e 	bl	800509c <SetPEState>
        TimerStart(&port->PolicyStateTimer, tTypeCSinkWaitCap);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001da6:	4907      	ldr	r1, [pc, #28]	; (8001dc4 <PolicySinkEvaluateCaps+0x360>)
 8001da8:	4618      	mov	r0, r3
 8001daa:	f004 fcf3 	bl	8006794 <TimerStart>
    }
}
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
 8001db2:	3728      	adds	r7, #40	; 0x28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	10624dd3 	.word	0x10624dd3
 8001dbc:	51eb851f 	.word	0x51eb851f
 8001dc0:	cccccccd 	.word	0xcccccccd
 8001dc4:	00055730 	.word	0x00055730

08001dc8 <PolicySinkSelectCapability>:

void PolicySinkSelectCapability(Port_t *port)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af04      	add	r7, sp, #16
 8001dce:	6078      	str	r0, [r7, #4]
    switch (port->PolicySubIndex)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <PolicySinkSelectCapability+0x18>
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d025      	beq.n	8001e2a <PolicySinkSelectCapability+0x62>
        {
            port->PEIdle = TRUE;
        }
        break;
    }
}
 8001dde:	e0dc      	b.n	8001f9a <PolicySinkSelectCapability+0x1d2>
        if (PolicySendData(port, DMTRequest, &port->SinkRequest,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 8001de6:	2300      	movs	r3, #0
 8001de8:	9303      	str	r3, [sp, #12]
 8001dea:	2300      	movs	r3, #0
 8001dec:	9302      	str	r3, [sp, #8]
 8001dee:	2301      	movs	r3, #1
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	2322      	movs	r3, #34	; 0x22
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2304      	movs	r3, #4
 8001df8:	2102      	movs	r1, #2
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f001 faa4 	bl	8003348 <PolicySendData>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	f040 80c8 	bne.w	8001f98 <PolicySinkSelectCapability+0x1d0>
            HAL_Delay(500);
 8001e08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e0c:	f005 f888 	bl	8006f20 <HAL_Delay>
        	TimerStart(&port->PolicyStateTimer, tSenderResponse);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001e16:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f004 fcba 	bl	8006794 <TimerStart>
            port->WaitingOnHR = TRUE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        break;
 8001e28:	e0b6      	b.n	8001f98 <PolicySinkSelectCapability+0x1d0>
        if (port->ProtocolMsgRx)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 809c 	beq.w	8001f6e <PolicySinkSelectCapability+0x1a6>
            port->ProtocolMsgRx = FALSE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
            if (port->PolicyRxHeader.NumDataObjects == 0)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8001e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d179      	bne.n	8001f42 <PolicySinkSelectCapability+0x17a>
                switch (port->PolicyRxHeader.MessageType)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8001e54:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	3b03      	subs	r3, #3
 8001e5c:	2b0a      	cmp	r3, #10
 8001e5e:	d86b      	bhi.n	8001f38 <PolicySinkSelectCapability+0x170>
 8001e60:	a201      	add	r2, pc, #4	; (adr r2, 8001e68 <PolicySinkSelectCapability+0xa0>)
 8001e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e66:	bf00      	nop
 8001e68:	08001e95 	.word	0x08001e95
 8001e6c:	08001f09 	.word	0x08001f09
 8001e70:	08001f39 	.word	0x08001f39
 8001e74:	08001f39 	.word	0x08001f39
 8001e78:	08001f39 	.word	0x08001f39
 8001e7c:	08001f39 	.word	0x08001f39
 8001e80:	08001f39 	.word	0x08001f39
 8001e84:	08001f39 	.word	0x08001f39
 8001e88:	08001f39 	.word	0x08001f39
 8001e8c:	08001f09 	.word	0x08001f09
 8001e90:	08001f2f 	.word	0x08001f2f
                        port->SinkRequest.FVRDO.ObjectPosition - 1].PDO.
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8001e9a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	3342      	adds	r3, #66	; 0x42
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	79db      	ldrb	r3, [r3, #7]
 8001eac:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001eb0:	b2db      	uxtb	r3, r3
                            SupplyType == pdoTypeAugmented) ? TRUE : FALSE;
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	bf0c      	ite	eq
 8001eb6:	2301      	moveq	r3, #1
 8001eb8:	2300      	movne	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	461a      	mov	r2, r3
                    port->PpsEnabled = (port->SrcCapsReceived[
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
                    port->PolicyHasContract = TRUE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
                    port->USBPDContract.object = port->SinkRequest.object;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
                    TimerStart(&port->PolicyStateTimer, tPSTransition);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001ede:	4931      	ldr	r1, [pc, #196]	; (8001fa4 <PolicySinkSelectCapability+0x1dc>)
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f004 fc57 	bl	8006794 <TimerStart>
                    SetPEState(port, peSinkTransitionSink);
 8001ee6:	2123      	movs	r1, #35	; 0x23
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f003 f8d7 	bl	800509c <SetPEState>
                    if (port->PpsEnabled == TRUE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d14d      	bne.n	8001f94 <PolicySinkSelectCapability+0x1cc>
                        TimerStart(&port->PpsTimer, tPPSRequest);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8001efe:	492a      	ldr	r1, [pc, #168]	; (8001fa8 <PolicySinkSelectCapability+0x1e0>)
 8001f00:	4618      	mov	r0, r3
 8001f02:	f004 fc47 	bl	8006794 <TimerStart>
                    break;
 8001f06:	e045      	b.n	8001f94 <PolicySinkSelectCapability+0x1cc>
                    if (port->PolicyHasContract)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d004      	beq.n	8001f1c <PolicySinkSelectCapability+0x154>
                        SetPEState(port, peSinkReady);
 8001f12:	2124      	movs	r1, #36	; 0x24
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f003 f8c1 	bl	800509c <SetPEState>
                    break;
 8001f1a:	e03c      	b.n	8001f96 <PolicySinkSelectCapability+0x1ce>
                        SetPEState(port, peSinkWaitCaps);
 8001f1c:	2120      	movs	r1, #32
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f003 f8bc 	bl	800509c <SetPEState>
                        port->HardResetCounter = nHardResetCount + 1;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2203      	movs	r2, #3
 8001f28:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                    break;
 8001f2c:	e033      	b.n	8001f96 <PolicySinkSelectCapability+0x1ce>
                    SetPEState(port, peSinkSoftReset);
 8001f2e:	211b      	movs	r1, #27
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f003 f8b3 	bl	800509c <SetPEState>
                    break;
 8001f36:	e02e      	b.n	8001f96 <PolicySinkSelectCapability+0x1ce>
                    SetPEState(port, peSinkSendSoftReset);
 8001f38:	211c      	movs	r1, #28
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f003 f8ae 	bl	800509c <SetPEState>
                    break;
 8001f40:	e029      	b.n	8001f96 <PolicySinkSelectCapability+0x1ce>
                switch (port->PolicyRxHeader.MessageType)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8001f48:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d108      	bne.n	8001f64 <PolicySinkSelectCapability+0x19c>
                    UpdateCapabilitiesRx(port, TRUE);
 8001f52:	2101      	movs	r1, #1
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f001 fba1 	bl	800369c <UpdateCapabilitiesRx>
                    SetPEState(port, peSinkEvaluateCaps);
 8001f5a:	2121      	movs	r1, #33	; 0x21
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f003 f89d 	bl	800509c <SetPEState>
                    break;
 8001f62:	e018      	b.n	8001f96 <PolicySinkSelectCapability+0x1ce>
                    SetPEState(port, peSinkSendSoftReset);
 8001f64:	211c      	movs	r1, #28
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f003 f898 	bl	800509c <SetPEState>
                    break;
 8001f6c:	e013      	b.n	8001f96 <PolicySinkSelectCapability+0x1ce>
        else if (TimerExpired(&port->PolicyStateTimer))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001f74:	4618      	mov	r0, r3
 8001f76:	f004 fc48 	bl	800680a <TimerExpired>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d004      	beq.n	8001f8a <PolicySinkSelectCapability+0x1c2>
            SetPEState(port, peSinkSendHardReset);
 8001f80:	211a      	movs	r1, #26
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f003 f88a 	bl	800509c <SetPEState>
        break;
 8001f88:	e007      	b.n	8001f9a <PolicySinkSelectCapability+0x1d2>
            port->PEIdle = TRUE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8001f92:	e002      	b.n	8001f9a <PolicySinkSelectCapability+0x1d2>
                    break;
 8001f94:	bf00      	nop
        break;
 8001f96:	e000      	b.n	8001f9a <PolicySinkSelectCapability+0x1d2>
        break;
 8001f98:	bf00      	nop
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	0007a120 	.word	0x0007a120
 8001fa8:	00989680 	.word	0x00989680

08001fac <PolicySinkTransitionSink>:

void PolicySinkTransitionSink(Port_t *port)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
    port->PEIdle = FALSE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    if (port->ProtocolMsgRx)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d072      	beq.n	80020ac <PolicySinkTransitionSink+0x100>
    {
        port->ProtocolMsgRx = FALSE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
        if (port->PolicyRxHeader.NumDataObjects == 0)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8001fd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d150      	bne.n	8002080 <PolicySinkTransitionSink+0xd4>
        {
            switch (port->PolicyRxHeader.MessageType)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8001fe4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d002      	beq.n	8001ff4 <PolicySinkTransitionSink+0x48>
 8001fee:	2b0d      	cmp	r3, #13
 8001ff0:	d03c      	beq.n	800206c <PolicySinkTransitionSink+0xc0>
 8001ff2:	e040      	b.n	8002076 <PolicySinkTransitionSink+0xca>
            {
            case CMTPS_RDY:
            {
                SetPEState(port, peSinkReady);
 8001ff4:	2124      	movs	r1, #36	; 0x24
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f003 f850 	bl	800509c <SetPEState>
                notify_observers(PD_NEW_CONTRACT, port->I2cAddr,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
                        &port->USBPDContract);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f503 73a2 	add.w	r3, r3, #324	; 0x144
                notify_observers(PD_NEW_CONTRACT, port->I2cAddr,
 8002008:	461a      	mov	r2, r3
 800200a:	2008      	movs	r0, #8
 800200c:	f004 fe48 	bl	8006ca0 <notify_observers>

                if (port->PpsEnabled)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00b      	beq.n	8002032 <PolicySinkTransitionSink+0x86>
                {
                    /* 80% --> (V * 20) * (80 / 100) */
                    port->DetachThreshold =
                        port->USBPDContract.PPSRDO.Voltage * 16;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002020:	f3c3 234a 	ubfx	r3, r3, #9, #11
 8002024:	b29b      	uxth	r3, r3
                    port->DetachThreshold =
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	b29a      	uxth	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
                        /* 80% --> (V * 50) * (80 / 100) */
                        port->DetachThreshold =
                            port->PartnerCaps.FPDOSupply.Voltage * 40;
                    }
                }
                break;
 8002030:	e04f      	b.n	80020d2 <PolicySinkTransitionSink+0x126>
                    if (port->PartnerCaps.FPDOSupply.Voltage == 100)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8002038:	4b28      	ldr	r3, [pc, #160]	; (80020dc <PolicySinkTransitionSink+0x130>)
 800203a:	4013      	ands	r3, r2
 800203c:	f5b3 3fc8 	cmp.w	r3, #102400	; 0x19000
 8002040:	d105      	bne.n	800204e <PolicySinkTransitionSink+0xa2>
                        port->DetachThreshold = VBUS_MV_VSAFE5V_DISC;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f640 6256 	movw	r2, #3670	; 0xe56
 8002048:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
                break;
 800204c:	e041      	b.n	80020d2 <PolicySinkTransitionSink+0x126>
                            port->PartnerCaps.FPDOSupply.Voltage * 40;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8002054:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8002058:	b29b      	uxth	r3, r3
                        port->DetachThreshold =
 800205a:	461a      	mov	r2, r3
 800205c:	0092      	lsls	r2, r2, #2
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	b29a      	uxth	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
                break;
 800206a:	e032      	b.n	80020d2 <PolicySinkTransitionSink+0x126>
            }
            case CMTSoftReset:
                SetPEState(port, peSinkSoftReset);
 800206c:	211b      	movs	r1, #27
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f003 f814 	bl	800509c <SetPEState>
                break;
 8002074:	e02d      	b.n	80020d2 <PolicySinkTransitionSink+0x126>
            default:
                SetPEState(port, peSinkSendHardReset);
 8002076:	211a      	movs	r1, #26
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f003 f80f 	bl	800509c <SetPEState>
                break;
 800207e:	e028      	b.n	80020d2 <PolicySinkTransitionSink+0x126>
            }
        }
        else
        {
            switch (port->PolicyRxHeader.MessageType)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8002086:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b01      	cmp	r3, #1
 800208e:	d108      	bne.n	80020a2 <PolicySinkTransitionSink+0xf6>
            {
            case DMTSourceCapabilities:
                UpdateCapabilitiesRx(port, TRUE);
 8002090:	2101      	movs	r1, #1
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f001 fb02 	bl	800369c <UpdateCapabilitiesRx>
                SetPEState(port, peSinkEvaluateCaps);
 8002098:	2121      	movs	r1, #33	; 0x21
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f002 fffe 	bl	800509c <SetPEState>
                break;
 80020a0:	e017      	b.n	80020d2 <PolicySinkTransitionSink+0x126>
            default:
                SetPEState(port, peSinkSendHardReset);
 80020a2:	211a      	movs	r1, #26
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f002 fff9 	bl	800509c <SetPEState>
                break;
 80020aa:	e012      	b.n	80020d2 <PolicySinkTransitionSink+0x126>
            }
        }
    }
    else if (TimerExpired(&port->PolicyStateTimer))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80020b2:	4618      	mov	r0, r3
 80020b4:	f004 fba9 	bl	800680a <TimerExpired>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d004      	beq.n	80020c8 <PolicySinkTransitionSink+0x11c>
    {
        SetPEState(port, peSinkSendHardReset);
 80020be:	211a      	movs	r1, #26
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f002 ffeb 	bl	800509c <SetPEState>
    }
    else
    {
        port->PEIdle = TRUE;
    }
}
 80020c6:	e004      	b.n	80020d2 <PolicySinkTransitionSink+0x126>
        port->PEIdle = TRUE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 80020d0:	e7ff      	b.n	80020d2 <PolicySinkTransitionSink+0x126>
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	000ffc00 	.word	0x000ffc00

080020e0 <PolicySinkReady>:

void PolicySinkReady(Port_t *port)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    if (port->ProtocolMsgRx)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 80bb 	beq.w	800226a <PolicySinkReady+0x18a>
    {
        /* Handle a received message */
        port->ProtocolMsgRx = FALSE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
        if (port->PolicyRxHeader.NumDataObjects == 0)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8002102:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d16c      	bne.n	80021e6 <PolicySinkReady+0x106>
        {
            switch (port->PolicyRxHeader.MessageType)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8002112:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002116:	b2db      	uxtb	r3, r3
 8002118:	3b02      	subs	r3, #2
 800211a:	2b13      	cmp	r3, #19
 800211c:	d85e      	bhi.n	80021dc <PolicySinkReady+0xfc>
 800211e:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <PolicySinkReady+0x44>)
 8002120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002124:	08002175 	.word	0x08002175
 8002128:	080021d3 	.word	0x080021d3
 800212c:	080023eb 	.word	0x080023eb
 8002130:	080023eb 	.word	0x080023eb
 8002134:	080021dd 	.word	0x080021dd
 8002138:	08002197 	.word	0x08002197
 800213c:	0800218d 	.word	0x0800218d
 8002140:	080021a1 	.word	0x080021a1
 8002144:	080021ab 	.word	0x080021ab
 8002148:	080021b5 	.word	0x080021b5
 800214c:	080021d3 	.word	0x080021d3
 8002150:	080021bf 	.word	0x080021bf
 8002154:	080021dd 	.word	0x080021dd
 8002158:	080021dd 	.word	0x080021dd
 800215c:	080023eb 	.word	0x080023eb
 8002160:	080021dd 	.word	0x080021dd
 8002164:	080021dd 	.word	0x080021dd
 8002168:	080021dd 	.word	0x080021dd
 800216c:	080021dd 	.word	0x080021dd
 8002170:	080021c9 	.word	0x080021c9
            {
            case CMTGotoMin:
                SetPEState(port, peSinkTransitionSink);
 8002174:	2123      	movs	r1, #35	; 0x23
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f002 ff90 	bl	800509c <SetPEState>
                TimerStart(&port->PolicyStateTimer, tPSTransition);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002182:	499d      	ldr	r1, [pc, #628]	; (80023f8 <PolicySinkReady+0x318>)
 8002184:	4618      	mov	r0, r3
 8002186:	f004 fb05 	bl	8006794 <TimerStart>
                break;
 800218a:	e131      	b.n	80023f0 <PolicySinkReady+0x310>
            case CMTGetSinkCap:
                SetPEState(port, peSinkGiveSinkCap);
 800218c:	2125      	movs	r1, #37	; 0x25
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f002 ff84 	bl	800509c <SetPEState>
                break;
 8002194:	e12c      	b.n	80023f0 <PolicySinkReady+0x310>
            case CMTGetSourceCap:
                SetPEState(port, peSinkGiveSourceCap);
 8002196:	2128      	movs	r1, #40	; 0x28
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f002 ff7f 	bl	800509c <SetPEState>
                break;
 800219e:	e127      	b.n	80023f0 <PolicySinkReady+0x310>
            case CMTDR_Swap:
                SetPEState(port, peSinkEvaluateDRSwap);
 80021a0:	212b      	movs	r1, #43	; 0x2b
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f002 ff7a 	bl	800509c <SetPEState>
                break;
 80021a8:	e122      	b.n	80023f0 <PolicySinkReady+0x310>
            case CMTPR_Swap:
                SetPEState(port, peSinkEvaluatePRSwap);
 80021aa:	2133      	movs	r1, #51	; 0x33
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f002 ff75 	bl	800509c <SetPEState>
                break;
 80021b2:	e11d      	b.n	80023f0 <PolicySinkReady+0x310>
            case CMTVCONN_Swap:
                SetPEState(port, peSinkEvaluateVCONNSwap);
 80021b4:	212f      	movs	r1, #47	; 0x2f
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f002 ff70 	bl	800509c <SetPEState>
                break;
 80021bc:	e118      	b.n	80023f0 <PolicySinkReady+0x310>
            case CMTSoftReset:
                SetPEState(port, peSinkSoftReset);
 80021be:	211b      	movs	r1, #27
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f002 ff6b 	bl	800509c <SetPEState>
                break;
 80021c6:	e113      	b.n	80023f0 <PolicySinkReady+0x310>
#if FSC_HAVE_EXT_MSG /* Not implemented yet */
            case CMTGetCountryCodes:
                SetPEState(port, peGiveCountryCodes);
 80021c8:	2135      	movs	r1, #53	; 0x35
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f002 ff66 	bl	800509c <SetPEState>
                break;
 80021d0:	e10e      	b.n	80023f0 <PolicySinkReady+0x310>
                /* Rx'd Reject/NS are ignored - notify DPM if needed */
                break;
            /* Unexpected messages */
            case CMTAccept:
            case CMTWait:
                SetPEState(port, peSinkSendSoftReset);
 80021d2:	211c      	movs	r1, #28
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f002 ff61 	bl	800509c <SetPEState>
                break;
 80021da:	e109      	b.n	80023f0 <PolicySinkReady+0x310>
            default:
                SetPEState(port, peNotSupported);
 80021dc:	2136      	movs	r1, #54	; 0x36
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f002 ff5c 	bl	800509c <SetPEState>
                break;
 80021e4:	e104      	b.n	80023f0 <PolicySinkReady+0x310>
            }
        }
        else if (port->PolicyRxHeader.Extended == 1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80021ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d009      	beq.n	800220a <PolicySinkReady+0x12a>
        {
            switch(port->PolicyRxHeader.MessageType)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80021fc:	f3c3 0304 	ubfx	r3, r3, #0, #5
                     * supported
                     */
                    port->WaitForNotSupported = TRUE;
                }
#endif
                SetPEState(port, peNotSupported);
 8002200:	2136      	movs	r1, #54	; 0x36
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f002 ff4a 	bl	800509c <SetPEState>
                break;
 8002208:	e0f2      	b.n	80023f0 <PolicySinkReady+0x310>
            }
        }
        else
        {
            switch (port->PolicyRxHeader.MessageType)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8002210:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002214:	b2db      	uxtb	r3, r3
 8002216:	3b01      	subs	r3, #1
 8002218:	2b05      	cmp	r3, #5
 800221a:	d821      	bhi.n	8002260 <PolicySinkReady+0x180>
 800221c:	a201      	add	r2, pc, #4	; (adr r2, 8002224 <PolicySinkReady+0x144>)
 800221e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002222:	bf00      	nop
 8002224:	0800223d 	.word	0x0800223d
 8002228:	08002261 	.word	0x08002261
 800222c:	08002259 	.word	0x08002259
 8002230:	080023ef 	.word	0x080023ef
 8002234:	08002261 	.word	0x08002261
 8002238:	0800224f 	.word	0x0800224f
            {
            case DMTSourceCapabilities:
                UpdateCapabilitiesRx(port, TRUE);
 800223c:	2101      	movs	r1, #1
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f001 fa2c 	bl	800369c <UpdateCapabilitiesRx>
                SetPEState(port, peSinkEvaluateCaps);
 8002244:	2121      	movs	r1, #33	; 0x21
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f002 ff28 	bl	800509c <SetPEState>
                break;
 800224c:	e0d0      	b.n	80023f0 <PolicySinkReady+0x310>
            case DMTSinkCapabilities:
                break;
            case DMTAlert:
                SetPEState(port, peSinkAlertReceived);
 800224e:	212a      	movs	r1, #42	; 0x2a
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f002 ff23 	bl	800509c <SetPEState>
                break;
 8002256:	e0cb      	b.n	80023f0 <PolicySinkReady+0x310>
            case DMTVenderDefined:
                convertAndProcessVdmMessage(port, port->ProtocolMsgRxSop);
                break;
#endif /* FSC_HAVE_VDM */
            case DMTBIST:
                processDMTBIST(port);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f001 fc89 	bl	8003b70 <processDMTBIST>
                break;
 800225e:	e0c7      	b.n	80023f0 <PolicySinkReady+0x310>
            default:
                SetPEState(port, peNotSupported);
 8002260:	2136      	movs	r1, #54	; 0x36
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f002 ff1a 	bl	800509c <SetPEState>
                break;
 8002268:	e0c2      	b.n	80023f0 <PolicySinkReady+0x310>
            }
        }
    }
    else if (port->USBPDTxFlag)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002270:	2b00      	cmp	r3, #0
 8002272:	d06b      	beq.n	800234c <PolicySinkReady+0x26c>
    {
        /* Has the device policy manager requested us to send a message? */
        if (port->PDTransmitHeader.NumDataObjects == 0)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800227a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d145      	bne.n	8002310 <PolicySinkReady+0x230>
        {
            switch (port->PDTransmitHeader.MessageType)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800228a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800228e:	b2db      	uxtb	r3, r3
 8002290:	3b07      	subs	r3, #7
 8002292:	2b0d      	cmp	r3, #13
 8002294:	d852      	bhi.n	800233c <PolicySinkReady+0x25c>
 8002296:	a201      	add	r2, pc, #4	; (adr r2, 800229c <PolicySinkReady+0x1bc>)
 8002298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229c:	080022d5 	.word	0x080022d5
 80022a0:	080022df 	.word	0x080022df
 80022a4:	080022e9 	.word	0x080022e9
 80022a8:	0800233d 	.word	0x0800233d
 80022ac:	080022f3 	.word	0x080022f3
 80022b0:	0800233d 	.word	0x0800233d
 80022b4:	080022fd 	.word	0x080022fd
 80022b8:	0800233d 	.word	0x0800233d
 80022bc:	0800233d 	.word	0x0800233d
 80022c0:	0800233d 	.word	0x0800233d
 80022c4:	0800233d 	.word	0x0800233d
 80022c8:	0800233d 	.word	0x0800233d
 80022cc:	0800233d 	.word	0x0800233d
 80022d0:	08002307 	.word	0x08002307
            {
            case CMTGetSourceCap:
                SetPEState(port, peSinkGetSourceCap);
 80022d4:	2126      	movs	r1, #38	; 0x26
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f002 fee0 	bl	800509c <SetPEState>
                break;
 80022dc:	e031      	b.n	8002342 <PolicySinkReady+0x262>
            case CMTGetSinkCap:
                SetPEState(port, peSinkGetSinkCap);
 80022de:	2127      	movs	r1, #39	; 0x27
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f002 fedb 	bl	800509c <SetPEState>
                break;
 80022e6:	e02c      	b.n	8002342 <PolicySinkReady+0x262>
            case CMTDR_Swap:
                SetPEState(port, peSinkSendDRSwap);
 80022e8:	2129      	movs	r1, #41	; 0x29
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f002 fed6 	bl	800509c <SetPEState>
                break;
 80022f0:	e027      	b.n	8002342 <PolicySinkReady+0x262>
            case CMTVCONN_Swap:
                SetPEState(port, peSinkSendVCONNSwap);
 80022f2:	212e      	movs	r1, #46	; 0x2e
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f002 fed1 	bl	800509c <SetPEState>
                break;
 80022fa:	e022      	b.n	8002342 <PolicySinkReady+0x262>
            case CMTPR_Swap:
                SetPEState(port, peSinkSendPRSwap);
                break;
#endif /* FSC_HAVE_DRP */
            case CMTSoftReset:
                SetPEState(port, peSinkSendSoftReset);
 80022fc:	211c      	movs	r1, #28
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f002 fecc 	bl	800509c <SetPEState>
                break;
 8002304:	e01d      	b.n	8002342 <PolicySinkReady+0x262>
            case CMTGetCountryCodes:
                SetPEState(port, peGetCountryCodes);
                break;
#endif /* 0 */
            case CMTGetPPSStatus:
                SetPEState(port, peGetPPSStatus);
 8002306:	2137      	movs	r1, #55	; 0x37
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f002 fec7 	bl	800509c <SetPEState>
                break;
 800230e:	e018      	b.n	8002342 <PolicySinkReady+0x262>
                break;
            }
        }
        else
        {
            switch (port->PDTransmitHeader.MessageType)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002316:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d002      	beq.n	8002326 <PolicySinkReady+0x246>
 8002320:	2b0f      	cmp	r3, #15
 8002322:	d00d      	beq.n	8002340 <PolicySinkReady+0x260>
            default:
#ifdef FSC_DEBUG
                /* Transmit other messages directly from the GUI/DPM */
                SetPEState(port, peSendGenericData);
#endif /* FSC_DEBUG */
                break;
 8002324:	e00d      	b.n	8002342 <PolicySinkReady+0x262>
                port->SinkRequest.object = port->PDTransmitObjects[0].object;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
                SetPEState(port, peSinkSelectCapability);
 8002332:	2122      	movs	r1, #34	; 0x22
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f002 feb1 	bl	800509c <SetPEState>
                break;
 800233a:	e002      	b.n	8002342 <PolicySinkReady+0x262>
                break;
 800233c:	bf00      	nop
 800233e:	e000      	b.n	8002342 <PolicySinkReady+0x262>
                break;
 8002340:	bf00      	nop
            }
        }
        port->USBPDTxFlag = FALSE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    else
    {
        /* Wait for VBUSOK or HARDRST or GCRCSENT */
        port->PEIdle = TRUE;
    }
}
 800234a:	e051      	b.n	80023f0 <PolicySinkReady+0x310>
    else if ((port->PortConfig.PortType == USBTypeC_DRP) &&
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	791b      	ldrb	r3, [r3, #4]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d110      	bne.n	8002376 <PolicySinkReady+0x296>
             (port->PortConfig.reqPRSwapAsSnk) &&
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	7fdb      	ldrb	r3, [r3, #31]
    else if ((port->PortConfig.PortType == USBTypeC_DRP) &&
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00c      	beq.n	8002376 <PolicySinkReady+0x296>
             (port->PartnerCaps.FPDOSupply.DualRolePower == TRUE))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 8002362:	f003 0320 	and.w	r3, r3, #32
 8002366:	b2db      	uxtb	r3, r3
             (port->PortConfig.reqPRSwapAsSnk) &&
 8002368:	2b00      	cmp	r3, #0
 800236a:	d004      	beq.n	8002376 <PolicySinkReady+0x296>
        SetPEState(port, peSinkSendPRSwap);
 800236c:	2132      	movs	r1, #50	; 0x32
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f002 fe94 	bl	800509c <SetPEState>
 8002374:	e03c      	b.n	80023f0 <PolicySinkReady+0x310>
    else if (port->PortConfig.reqDRSwapToDfpAsSink == TRUE &&
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	7e9b      	ldrb	r3, [r3, #26]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d10c      	bne.n	8002398 <PolicySinkReady+0x2b8>
             port->PolicyIsDFP == FALSE &&
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002384:	2b00      	cmp	r3, #0
 8002386:	d107      	bne.n	8002398 <PolicySinkReady+0x2b8>
        port->PortConfig.reqDRSwapToDfpAsSink = FALSE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	769a      	strb	r2, [r3, #26]
        SetPEState(port, peSinkSendDRSwap);
 800238e:	2129      	movs	r1, #41	; 0x29
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f002 fe83 	bl	800509c <SetPEState>
 8002396:	e02b      	b.n	80023f0 <PolicySinkReady+0x310>
    else if (port->PortConfig.reqVconnSwapToOnAsSink == TRUE &&
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	7f1b      	ldrb	r3, [r3, #28]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d10c      	bne.n	80023ba <PolicySinkReady+0x2da>
             port->IsVCONNSource == FALSE &&
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d107      	bne.n	80023ba <PolicySinkReady+0x2da>
        port->PortConfig.reqVconnSwapToOnAsSink = FALSE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	771a      	strb	r2, [r3, #28]
        SetPEState(port, peSinkSendVCONNSwap);
 80023b0:	212e      	movs	r1, #46	; 0x2e
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f002 fe72 	bl	800509c <SetPEState>
 80023b8:	e01a      	b.n	80023f0 <PolicySinkReady+0x310>
    else if (port->PpsEnabled == TRUE && TimerExpired(&port->PpsTimer))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d10d      	bne.n	80023e0 <PolicySinkReady+0x300>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80023ca:	4618      	mov	r0, r3
 80023cc:	f004 fa1d 	bl	800680a <TimerExpired>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d004      	beq.n	80023e0 <PolicySinkReady+0x300>
        SetPEState(port, peSinkSelectCapability);
 80023d6:	2122      	movs	r1, #34	; 0x22
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f002 fe5f 	bl	800509c <SetPEState>
 80023de:	e007      	b.n	80023f0 <PolicySinkReady+0x310>
        port->PEIdle = TRUE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 80023e8:	e002      	b.n	80023f0 <PolicySinkReady+0x310>
                break;
 80023ea:	bf00      	nop
 80023ec:	e000      	b.n	80023f0 <PolicySinkReady+0x310>
                break;
 80023ee:	bf00      	nop
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	0007a120 	.word	0x0007a120

080023fc <PolicySinkGiveSinkCap>:

void PolicySinkGiveSinkCap(Port_t *port)
{
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b087      	sub	sp, #28
 8002400:	af04      	add	r7, sp, #16
 8002402:	6078      	str	r0, [r7, #4]
    PolicySendData(port, DMTSinkCapabilities,
                   DPM_GetSinkCap(port->dpm, port),
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4618      	mov	r0, r3
 800240c:	f004 fb8f 	bl	8006b2e <DPM_GetSinkCap>
 8002410:	4604      	mov	r4, r0
                   DPM_GetSinkCapHeader(port->dpm, port)->NumDataObjects *
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4618      	mov	r0, r3
 800241a:	f004 fb70 	bl	8006afe <DPM_GetSinkCapHeader>
 800241e:	4603      	mov	r3, r0
 8002420:	785b      	ldrb	r3, [r3, #1]
 8002422:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	009b      	lsls	r3, r3, #2
    PolicySendData(port, DMTSinkCapabilities,
 800242a:	2200      	movs	r2, #0
 800242c:	9203      	str	r2, [sp, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	9202      	str	r2, [sp, #8]
 8002432:	2200      	movs	r2, #0
 8002434:	9201      	str	r2, [sp, #4]
 8002436:	2224      	movs	r2, #36	; 0x24
 8002438:	9200      	str	r2, [sp, #0]
 800243a:	4622      	mov	r2, r4
 800243c:	2104      	movs	r1, #4
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 ff82 	bl	8003348 <PolicySendData>
                    sizeof(doDataObject_t),
                   peSinkReady, 0, SOP_TYPE_SOP, FALSE);
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bd90      	pop	{r4, r7, pc}

0800244c <PolicySinkGetSinkCap>:

void PolicySinkGetSinkCap(Port_t *port)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af02      	add	r7, sp, #8
 8002452:	6078      	str	r0, [r7, #4]
    switch (port->PolicySubIndex)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800245a:	2b00      	cmp	r3, #0
 800245c:	d113      	bne.n	8002486 <PolicySinkGetSinkCap+0x3a>
    {
    case 0:
        if (PolicySendCommand(port, CMTGetSinkCap, peSinkGetSinkCap, 1,
 800245e:	2300      	movs	r3, #0
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2301      	movs	r3, #1
 8002464:	2227      	movs	r2, #39	; 0x27
 8002466:	2108      	movs	r1, #8
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 fe2f 	bl	80030cc <PolicySendCommand>
 800246e:	4603      	mov	r3, r0
 8002470:	2b01      	cmp	r3, #1
 8002472:	d15c      	bne.n	800252e <PolicySinkGetSinkCap+0xe2>
                              SOP_TYPE_SOP) == STAT_SUCCESS)
        {
            TimerStart(&port->PolicyStateTimer, tSenderResponse);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800247a:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 800247e:	4618      	mov	r0, r3
 8002480:	f004 f988 	bl	8006794 <TimerStart>
        }
        break;
 8002484:	e053      	b.n	800252e <PolicySinkGetSinkCap+0xe2>
    default:
        if (port->ProtocolMsgRx)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d03a      	beq.n	8002506 <PolicySinkGetSinkCap+0xba>
        {
            port->ProtocolMsgRx = FALSE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
            if ((port->PolicyRxHeader.NumDataObjects > 0) &&
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800249e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00c      	beq.n	80024c2 <PolicySinkGetSinkCap+0x76>
                (port->PolicyRxHeader.MessageType == DMTSinkCapabilities))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80024ae:	f003 031f 	and.w	r3, r3, #31
 80024b2:	b2db      	uxtb	r3, r3
            if ((port->PolicyRxHeader.NumDataObjects > 0) &&
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d104      	bne.n	80024c2 <PolicySinkGetSinkCap+0x76>
            {
                /* Notify DPM or others of new sink caps */
                SetPEState(port, peSinkReady);
 80024b8:	2124      	movs	r1, #36	; 0x24
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f002 fdee 	bl	800509c <SetPEState>
 80024c0:	e034      	b.n	800252c <PolicySinkGetSinkCap+0xe0>
            }
            else if ((port->PolicyRxHeader.NumDataObjects == 0) &&
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80024c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d114      	bne.n	80024fc <PolicySinkGetSinkCap+0xb0>
                     ((port->PolicyRxHeader.MessageType == CMTReject) ||
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	b2db      	uxtb	r3, r3
            else if ((port->PolicyRxHeader.NumDataObjects == 0) &&
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d007      	beq.n	80024f2 <PolicySinkGetSinkCap+0xa6>
                      (port->PolicyRxHeader.MessageType == CMTNotSupported)))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80024e8:	f003 031f 	and.w	r3, r3, #31
 80024ec:	b2db      	uxtb	r3, r3
                     ((port->PolicyRxHeader.MessageType == CMTReject) ||
 80024ee:	2b10      	cmp	r3, #16
 80024f0:	d104      	bne.n	80024fc <PolicySinkGetSinkCap+0xb0>
            {
                SetPEState(port, peSinkReady);
 80024f2:	2124      	movs	r1, #36	; 0x24
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f002 fdd1 	bl	800509c <SetPEState>
 80024fa:	e017      	b.n	800252c <PolicySinkGetSinkCap+0xe0>
            }
            else
            {
                SetPEState(port, peSinkSendSoftReset);
 80024fc:	211c      	movs	r1, #28
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f002 fdcc 	bl	800509c <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 8002504:	e014      	b.n	8002530 <PolicySinkGetSinkCap+0xe4>
        else if (TimerExpired(&port->PolicyStateTimer))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800250c:	4618      	mov	r0, r3
 800250e:	f004 f97c 	bl	800680a <TimerExpired>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d004      	beq.n	8002522 <PolicySinkGetSinkCap+0xd6>
            SetPEState(port, peSinkReady);
 8002518:	2124      	movs	r1, #36	; 0x24
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f002 fdbe 	bl	800509c <SetPEState>
        break;
 8002520:	e006      	b.n	8002530 <PolicySinkGetSinkCap+0xe4>
            port->PEIdle = TRUE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 800252a:	e001      	b.n	8002530 <PolicySinkGetSinkCap+0xe4>
 800252c:	e000      	b.n	8002530 <PolicySinkGetSinkCap+0xe4>
        break;
 800252e:	bf00      	nop
    }
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <PolicySinkGiveSourceCap>:

void PolicySinkGiveSourceCap(Port_t *port)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
                       SOP_TYPE_SOP, FALSE);
    }
    else
#endif /* FSC_HAVE_DRP */
    {
        SetPEState(port, peNotSupported);
 8002540:	2136      	movs	r1, #54	; 0x36
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f002 fdaa 	bl	800509c <SetPEState>
    }
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <PolicySinkGetSourceCap>:

void PolicySinkGetSourceCap(Port_t *port)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af02      	add	r7, sp, #8
 8002556:	6078      	str	r0, [r7, #4]
    switch (port->PolicySubIndex)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800255e:	2b00      	cmp	r3, #0
 8002560:	d113      	bne.n	800258a <PolicySinkGetSourceCap+0x3a>
    {
    case 0:
        if (PolicySendCommand(port, CMTGetSourceCap, peSinkGetSourceCap, 1,
 8002562:	2300      	movs	r3, #0
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	2301      	movs	r3, #1
 8002568:	2226      	movs	r2, #38	; 0x26
 800256a:	2107      	movs	r1, #7
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 fdad 	bl	80030cc <PolicySendCommand>
 8002572:	4603      	mov	r3, r0
 8002574:	2b01      	cmp	r3, #1
 8002576:	d142      	bne.n	80025fe <PolicySinkGetSourceCap+0xae>
                              SOP_TYPE_SOP) == STAT_SUCCESS)
        {
            TimerStart(&port->PolicyStateTimer, tSenderResponse);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800257e:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 8002582:	4618      	mov	r0, r3
 8002584:	f004 f906 	bl	8006794 <TimerStart>
        }
        break;
 8002588:	e039      	b.n	80025fe <PolicySinkGetSourceCap+0xae>
    default:
        if (port->ProtocolMsgRx)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d021      	beq.n	80025d8 <PolicySinkGetSourceCap+0x88>
        {
            port->ProtocolMsgRx = FALSE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
            if ((port->PolicyRxHeader.NumDataObjects > 0) &&
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80025a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d010      	beq.n	80025ce <PolicySinkGetSourceCap+0x7e>
                (port->PolicyRxHeader.MessageType == DMTSourceCapabilities))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	b2db      	uxtb	r3, r3
            if ((port->PolicyRxHeader.NumDataObjects > 0) &&
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d108      	bne.n	80025ce <PolicySinkGetSourceCap+0x7e>
            {
                /* Notify DPM or others of new source caps */
                UpdateCapabilitiesRx(port, TRUE);
 80025bc:	2101      	movs	r1, #1
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f001 f86c 	bl	800369c <UpdateCapabilitiesRx>
                SetPEState(port, peSinkEvaluateCaps);
 80025c4:	2121      	movs	r1, #33	; 0x21
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f002 fd68 	bl	800509c <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 80025cc:	e018      	b.n	8002600 <PolicySinkGetSourceCap+0xb0>
                SetPEState(port, peSinkSendSoftReset);
 80025ce:	211c      	movs	r1, #28
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f002 fd63 	bl	800509c <SetPEState>
        break;
 80025d6:	e013      	b.n	8002600 <PolicySinkGetSourceCap+0xb0>
        else if (TimerExpired(&port->PolicyStateTimer))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80025de:	4618      	mov	r0, r3
 80025e0:	f004 f913 	bl	800680a <TimerExpired>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d004      	beq.n	80025f4 <PolicySinkGetSourceCap+0xa4>
            SetPEState(port, peSinkReady);
 80025ea:	2124      	movs	r1, #36	; 0x24
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f002 fd55 	bl	800509c <SetPEState>
        break;
 80025f2:	e005      	b.n	8002600 <PolicySinkGetSourceCap+0xb0>
            port->PEIdle = TRUE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 80025fc:	e000      	b.n	8002600 <PolicySinkGetSourceCap+0xb0>
        break;
 80025fe:	bf00      	nop
    }
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <PolicySinkSendDRSwap>:

void PolicySinkSendDRSwap(Port_t *port)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af02      	add	r7, sp, #8
 800260e:	6078      	str	r0, [r7, #4]
    switch (port->PolicySubIndex)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002616:	2b00      	cmp	r3, #0
 8002618:	d114      	bne.n	8002644 <PolicySinkSendDRSwap+0x3c>
    {
    case 0:
        if (PolicySendCommand(port, CMTDR_Swap, peSinkSendDRSwap, 1,
 800261a:	2300      	movs	r3, #0
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	2301      	movs	r3, #1
 8002620:	2229      	movs	r2, #41	; 0x29
 8002622:	2109      	movs	r1, #9
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fd51 	bl	80030cc <PolicySendCommand>
 800262a:	4603      	mov	r3, r0
 800262c:	2b01      	cmp	r3, #1
 800262e:	f040 809a 	bne.w	8002766 <PolicySinkSendDRSwap+0x15e>
                                   SOP_TYPE_SOP) == STAT_SUCCESS)
        {
            TimerStart(&port->PolicyStateTimer, tSenderResponse);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002638:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 800263c:	4618      	mov	r0, r3
 800263e:	f004 f8a9 	bl	8006794 <TimerStart>
        }
        break;
 8002642:	e090      	b.n	8002766 <PolicySinkSendDRSwap+0x15e>
    default:
        if (port->ProtocolMsgRx)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d077      	beq.n	800273e <PolicySinkSendDRSwap+0x136>
        {
            port->ProtocolMsgRx = FALSE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
            if (port->PolicyRxHeader.NumDataObjects == 0)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800265c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d166      	bne.n	8002734 <PolicySinkSendDRSwap+0x12c>
            {
                switch (port->PolicyRxHeader.MessageType)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800266c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b03      	cmp	r3, #3
 8002674:	d002      	beq.n	800267c <PolicySinkSendDRSwap+0x74>
 8002676:	2b04      	cmp	r3, #4
 8002678:	d052      	beq.n	8002720 <PolicySinkSendDRSwap+0x118>
 800267a:	e056      	b.n	800272a <PolicySinkSendDRSwap+0x122>
                {
                case CMTAccept:
                    port->PolicyIsDFP =
                            (port->PolicyIsDFP == TRUE) ? FALSE : TRUE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002682:	2b01      	cmp	r3, #1
 8002684:	bf14      	ite	ne
 8002686:	2301      	movne	r3, #1
 8002688:	2300      	moveq	r3, #0
 800268a:	b2db      	uxtb	r3, r3
 800268c:	461a      	mov	r2, r3
                    port->PolicyIsDFP =
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

                    port->Registers.Switches.DATAROLE = port->PolicyIsDFP;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	b2d9      	uxtb	r1, r3
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 80026a6:	f361 1304 	bfi	r3, r1, #4, #1
 80026aa:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                    DeviceWrite(port->I2cAddr, regSwitches1, 1,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	332b      	adds	r3, #43	; 0x2b
 80026b8:	2201      	movs	r2, #1
 80026ba:	2103      	movs	r1, #3
 80026bc:	f004 f830 	bl	8006720 <DeviceWrite>
                                &port->Registers.Switches.byte[1]);

                    if (port->PdRevSop == USBPDSPECREV2p0)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d12a      	bne.n	8002720 <PolicySinkSendDRSwap+0x118>
                    {
                        /* In PD2.0, DFP controls SOP* coms */
                        if (port->PolicyIsDFP == TRUE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d10e      	bne.n	80026f2 <PolicySinkSendDRSwap+0xea>
                        {
                            port->Registers.Control.ENSOP1 = SOP_P_Capable;
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 80026da:	f36f 0300 	bfc	r3, #0, #1
 80026de:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                            port->Registers.Control.ENSOP2 = SOP_PP_Capable;
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 80026e8:	f36f 0341 	bfc	r3, #1, #1
 80026ec:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
 80026f0:	e00d      	b.n	800270e <PolicySinkSendDRSwap+0x106>
                            port->discoverIdCounter = 0;
#endif /* FSC_HAVE_VDM */
                        }
                        else
                        {
                            port->Registers.Control.ENSOP1 = 0;
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 80026f8:	f36f 0300 	bfc	r3, #0, #1
 80026fc:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                            port->Registers.Control.ENSOP2 = 0;
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8002706:	f36f 0341 	bfc	r3, #1, #1
 800270a:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                        }
                        DeviceWrite(port->I2cAddr, regControl1, 1,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3331      	adds	r3, #49	; 0x31
 8002718:	2201      	movs	r2, #1
 800271a:	2107      	movs	r1, #7
 800271c:	f004 f800 	bl	8006720 <DeviceWrite>
                                    &port->Registers.Control.byte[1]);
                    }
                    /* Fall through */
                case CMTReject:
                    SetPEState(port, peSinkReady);
 8002720:	2124      	movs	r1, #36	; 0x24
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f002 fcba 	bl	800509c <SetPEState>
                    break;
 8002728:	e01c      	b.n	8002764 <PolicySinkSendDRSwap+0x15c>
                default:
                    SetPEState(port, peSinkSendSoftReset);
 800272a:	211c      	movs	r1, #28
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f002 fcb5 	bl	800509c <SetPEState>
                    break;
 8002732:	e017      	b.n	8002764 <PolicySinkSendDRSwap+0x15c>
                }
            }
            else
            {
                SetPEState(port, peSinkSendSoftReset);
 8002734:	211c      	movs	r1, #28
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f002 fcb0 	bl	800509c <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 800273c:	e014      	b.n	8002768 <PolicySinkSendDRSwap+0x160>
        else if (TimerExpired(&port->PolicyStateTimer))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002744:	4618      	mov	r0, r3
 8002746:	f004 f860 	bl	800680a <TimerExpired>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d004      	beq.n	800275a <PolicySinkSendDRSwap+0x152>
            SetPEState(port, peSinkReady);
 8002750:	2124      	movs	r1, #36	; 0x24
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f002 fca2 	bl	800509c <SetPEState>
        break;
 8002758:	e006      	b.n	8002768 <PolicySinkSendDRSwap+0x160>
            port->PEIdle = TRUE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8002762:	e001      	b.n	8002768 <PolicySinkSendDRSwap+0x160>
 8002764:	e000      	b.n	8002768 <PolicySinkSendDRSwap+0x160>
        break;
 8002766:	bf00      	nop
    }
}
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <PolicySinkEvaluateDRSwap>:

void PolicySinkEvaluateDRSwap(Port_t *port)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af02      	add	r7, sp, #8
 8002776:	6078      	str	r0, [r7, #4]
    {
        PolicySendCommand(port, CMTReject, peSinkReady, 0, SOP_TYPE_SOP);
    }
    else
    {
        if (PolicySendCommand(port, CMTAccept, peSinkReady, 0,
 8002778:	2300      	movs	r3, #0
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	2300      	movs	r3, #0
 800277e:	2224      	movs	r2, #36	; 0x24
 8002780:	2103      	movs	r1, #3
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fca2 	bl	80030cc <PolicySendCommand>
 8002788:	4603      	mov	r3, r0
 800278a:	2b01      	cmp	r3, #1
 800278c:	d151      	bne.n	8002832 <PolicySinkEvaluateDRSwap+0xc2>
                                   SOP_TYPE_SOP) == STAT_SUCCESS)
        {
            port->PolicyIsDFP = (port->PolicyIsDFP == TRUE) ? FALSE : TRUE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002794:	2b01      	cmp	r3, #1
 8002796:	bf14      	ite	ne
 8002798:	2301      	movne	r3, #1
 800279a:	2300      	moveq	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            port->Registers.Switches.DATAROLE = port->PolicyIsDFP;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	b2d9      	uxtb	r1, r3
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 80027b8:	f361 1304 	bfi	r3, r1, #4, #1
 80027bc:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
            DeviceWrite(port->I2cAddr, regSwitches1, 1,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	332b      	adds	r3, #43	; 0x2b
 80027ca:	2201      	movs	r2, #1
 80027cc:	2103      	movs	r1, #3
 80027ce:	f003 ffa7 	bl	8006720 <DeviceWrite>
                    &port->Registers.Switches.byte[1]);

            if (port->PdRevSop == USBPDSPECREV2p0)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d12a      	bne.n	8002832 <PolicySinkEvaluateDRSwap+0xc2>
            {
                /* In PD2.0, DFP controls SOP* coms */
                if (port->PolicyIsDFP == TRUE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d10e      	bne.n	8002804 <PolicySinkEvaluateDRSwap+0x94>
                {
                    port->Registers.Control.ENSOP1 = SOP_P_Capable;
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 80027ec:	f36f 0300 	bfc	r3, #0, #1
 80027f0:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                    port->Registers.Control.ENSOP2 = SOP_PP_Capable;
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 80027fa:	f36f 0341 	bfc	r3, #1, #1
 80027fe:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
 8002802:	e00d      	b.n	8002820 <PolicySinkEvaluateDRSwap+0xb0>
                    port->discoverIdCounter = 0;
#endif /* FSC_HAVE_VDM */
                }
                else
                {
                    port->Registers.Control.ENSOP1 = 0;
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 800280a:	f36f 0300 	bfc	r3, #0, #1
 800280e:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                    port->Registers.Control.ENSOP2 = 0;
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8002818:	f36f 0341 	bfc	r3, #1, #1
 800281c:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                }
                DeviceWrite(port->I2cAddr, regControl1, 1,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3331      	adds	r3, #49	; 0x31
 800282a:	2201      	movs	r2, #1
 800282c:	2107      	movs	r1, #7
 800282e:	f003 ff77 	bl	8006720 <DeviceWrite>
                            &port->Registers.Control.byte[1]);
            }
        }
    }
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <PolicySinkSendVCONNSwap>:

void PolicySinkSendVCONNSwap(Port_t *port)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af02      	add	r7, sp, #8
 8002842:	6078      	str	r0, [r7, #4]
    switch (port->PolicySubIndex)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800284a:	2b04      	cmp	r3, #4
 800284c:	f200 816d 	bhi.w	8002b2a <PolicySinkSendVCONNSwap+0x2ee>
 8002850:	a201      	add	r2, pc, #4	; (adr r2, 8002858 <PolicySinkSendVCONNSwap+0x1c>)
 8002852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002856:	bf00      	nop
 8002858:	0800286d 	.word	0x0800286d
 800285c:	08002897 	.word	0x08002897
 8002860:	0800292f 	.word	0x0800292f
 8002864:	08002a09 	.word	0x08002a09
 8002868:	08002afd 	.word	0x08002afd
    {
    case 0:
        if (PolicySendCommand(port, CMTVCONN_Swap, peSinkSendVCONNSwap, 1,
 800286c:	2300      	movs	r3, #0
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	2301      	movs	r3, #1
 8002872:	222e      	movs	r2, #46	; 0x2e
 8002874:	210b      	movs	r1, #11
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fc28 	bl	80030cc <PolicySendCommand>
 800287c:	4603      	mov	r3, r0
 800287e:	2b01      	cmp	r3, #1
 8002880:	f040 815c 	bne.w	8002b3c <PolicySinkSendVCONNSwap+0x300>
                              SOP_TYPE_SOP) == STAT_SUCCESS)
        {
            TimerStart(&port->PolicyStateTimer, tSenderResponse);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800288a:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 800288e:	4618      	mov	r0, r3
 8002890:	f003 ff80 	bl	8006794 <TimerStart>
        }
        break;
 8002894:	e152      	b.n	8002b3c <PolicySinkSendVCONNSwap+0x300>
    case 1:
        if (port->ProtocolMsgRx)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d032      	beq.n	8002906 <PolicySinkSendVCONNSwap+0xca>
        {
            port->ProtocolMsgRx = FALSE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
            if (port->PolicyRxHeader.NumDataObjects == 0)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80028ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d121      	bne.n	80028fc <PolicySinkSendVCONNSwap+0xc0>
            {
                switch (port->PolicyRxHeader.MessageType)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80028be:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b0c      	cmp	r3, #12
 80028c6:	d00f      	beq.n	80028e8 <PolicySinkSendVCONNSwap+0xac>
 80028c8:	2b0c      	cmp	r3, #12
 80028ca:	dc12      	bgt.n	80028f2 <PolicySinkSendVCONNSwap+0xb6>
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d002      	beq.n	80028d6 <PolicySinkSendVCONNSwap+0x9a>
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d009      	beq.n	80028e8 <PolicySinkSendVCONNSwap+0xac>
 80028d4:	e00d      	b.n	80028f2 <PolicySinkSendVCONNSwap+0xb6>
                {
                case CMTAccept:
                    port->PolicySubIndex++;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80028dc:	3301      	adds	r3, #1
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
                    break;
 80028e6:	e021      	b.n	800292c <PolicySinkSendVCONNSwap+0xf0>
                case CMTWait:
                case CMTReject:
                    SetPEState(port, peSinkReady);
 80028e8:	2124      	movs	r1, #36	; 0x24
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f002 fbd6 	bl	800509c <SetPEState>
                    break;
 80028f0:	e01c      	b.n	800292c <PolicySinkSendVCONNSwap+0xf0>
                default:
                    SetPEState(port, peSinkSendSoftReset);
 80028f2:	211c      	movs	r1, #28
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f002 fbd1 	bl	800509c <SetPEState>
                    break;
 80028fa:	e017      	b.n	800292c <PolicySinkSendVCONNSwap+0xf0>
                }
            }
            else
            {
                SetPEState(port, peSinkSendSoftReset);
 80028fc:	211c      	movs	r1, #28
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f002 fbcc 	bl	800509c <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 8002904:	e11b      	b.n	8002b3e <PolicySinkSendVCONNSwap+0x302>
        else if (TimerExpired(&port->PolicyStateTimer))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800290c:	4618      	mov	r0, r3
 800290e:	f003 ff7c 	bl	800680a <TimerExpired>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d004      	beq.n	8002922 <PolicySinkSendVCONNSwap+0xe6>
            SetPEState(port, peSinkReady);
 8002918:	2124      	movs	r1, #36	; 0x24
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f002 fbbe 	bl	800509c <SetPEState>
        break;
 8002920:	e10d      	b.n	8002b3e <PolicySinkSendVCONNSwap+0x302>
            port->PEIdle = TRUE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 800292a:	e108      	b.n	8002b3e <PolicySinkSendVCONNSwap+0x302>
 800292c:	e107      	b.n	8002b3e <PolicySinkSendVCONNSwap+0x302>
    case 2:
        if (port->IsVCONNSource)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00f      	beq.n	8002958 <PolicySinkSendVCONNSwap+0x11c>
        {
            TimerStart(&port->PolicyStateTimer, tVCONNSourceOn);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800293e:	4982      	ldr	r1, [pc, #520]	; (8002b48 <PolicySinkSendVCONNSwap+0x30c>)
 8002940:	4618      	mov	r0, r3
 8002942:	f003 ff27 	bl	8006794 <TimerStart>
            port->PolicySubIndex++;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800294c:	3301      	adds	r3, #1
 800294e:	b2da      	uxtb	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
#endif /* FSC_HAVE_VDM */
            }
            TimerStart(&port->PolicyStateTimer, tVCONNTransition);
            port->PolicySubIndex = 4;
        }
        break;
 8002956:	e0f2      	b.n	8002b3e <PolicySinkSendVCONNSwap+0x302>
                if (port->CCPin == CC1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800295e:	2b01      	cmp	r3, #1
 8002960:	d10e      	bne.n	8002980 <PolicySinkSendVCONNSwap+0x144>
                    port->Registers.Switches.VCONN_CC2 = 1;
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002968:	f043 0320 	orr.w	r3, r3, #32
 800296c:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    port->Registers.Switches.PDWN2 = 0;
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002976:	f36f 0341 	bfc	r3, #1, #1
 800297a:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
 800297e:	e00d      	b.n	800299c <PolicySinkSendVCONNSwap+0x160>
                    port->Registers.Switches.VCONN_CC1 = 1;
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002986:	f043 0310 	orr.w	r3, r3, #16
 800298a:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    port->Registers.Switches.PDWN1 = 0;
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002994:	f36f 0300 	bfc	r3, #0, #1
 8002998:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                DeviceWrite(port->I2cAddr, regSwitches0, 1,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	332a      	adds	r3, #42	; 0x2a
 80029a6:	2201      	movs	r2, #1
 80029a8:	2102      	movs	r1, #2
 80029aa:	f003 feb9 	bl	8006720 <DeviceWrite>
            port->IsVCONNSource = TRUE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            if (port->PdRevSop == USBPDSPECREV3p0)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d116      	bne.n	80029ee <PolicySinkSendVCONNSwap+0x1b2>
                port->Registers.Control.ENSOP1 = SOP_P_Capable;
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 80029c6:	f36f 0300 	bfc	r3, #0, #1
 80029ca:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                port->Registers.Control.ENSOP2 = SOP_PP_Capable;
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 80029d4:	f36f 0341 	bfc	r3, #1, #1
 80029d8:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                DeviceWrite(port->I2cAddr, regControl1, 1,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3331      	adds	r3, #49	; 0x31
 80029e6:	2201      	movs	r2, #1
 80029e8:	2107      	movs	r1, #7
 80029ea:	f003 fe99 	bl	8006720 <DeviceWrite>
            TimerStart(&port->PolicyStateTimer, tVCONNTransition);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80029f4:	f644 6120 	movw	r1, #20000	; 0x4e20
 80029f8:	4618      	mov	r0, r3
 80029fa:	f003 fecb 	bl	8006794 <TimerStart>
            port->PolicySubIndex = 4;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2204      	movs	r2, #4
 8002a02:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        break;
 8002a06:	e09a      	b.n	8002b3e <PolicySinkSendVCONNSwap+0x302>
    case 3:
        if (port->ProtocolMsgRx)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d05d      	beq.n	8002ace <PolicySinkSendVCONNSwap+0x292>
        {
            port->ProtocolMsgRx = FALSE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
            if (port->PolicyRxHeader.NumDataObjects == 0)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8002a20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d164      	bne.n	8002af4 <PolicySinkSendVCONNSwap+0x2b8>
            {
                switch (port->PolicyRxHeader.MessageType)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8002a30:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d15e      	bne.n	8002af8 <PolicySinkSendVCONNSwap+0x2bc>
                {
                case CMTPS_RDY:
                    /* Turn off our VConn */
                    port->Registers.Switches.VCONN_CC1 = 0;
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002a40:	f36f 1304 	bfc	r3, #4, #1
 8002a44:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    port->Registers.Switches.VCONN_CC2 = 0;
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002a4e:	f36f 1345 	bfc	r3, #5, #1
 8002a52:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    port->Registers.Switches.PDWN1 = 1;
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    port->Registers.Switches.PDWN2 = 1;
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002a6a:	f043 0302 	orr.w	r3, r3, #2
 8002a6e:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    DeviceWrite(port->I2cAddr, regSwitches0, 1,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	332a      	adds	r3, #42	; 0x2a
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	2102      	movs	r1, #2
 8002a80:	f003 fe4e 	bl	8006720 <DeviceWrite>
                                &port->Registers.Switches.byte[0]);

                    port->IsVCONNSource = FALSE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

                    if (port->PdRevSop == USBPDSPECREV3p0)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d116      	bne.n	8002ac4 <PolicySinkSendVCONNSwap+0x288>
                    {
                        /* In PD3.0, VConn Source controls SOP* coms */
                        port->Registers.Control.ENSOP1 = 0;
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8002a9c:	f36f 0300 	bfc	r3, #0, #1
 8002aa0:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                        port->Registers.Control.ENSOP2 = 0;
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8002aaa:	f36f 0341 	bfc	r3, #1, #1
 8002aae:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                        DeviceWrite(port->I2cAddr, regControl1, 1,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3331      	adds	r3, #49	; 0x31
 8002abc:	2201      	movs	r2, #1
 8002abe:	2107      	movs	r1, #7
 8002ac0:	f003 fe2e 	bl	8006720 <DeviceWrite>
#ifdef FSC_HAVE_VDM
                        port->discoverIdCounter = 0;
#endif /* FSC_HAVE_VDM */
                    }

                    SetPEState(port, peSinkReady);
 8002ac4:	2124      	movs	r1, #36	; 0x24
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f002 fae8 	bl	800509c <SetPEState>
                    break;
 8002acc:	e015      	b.n	8002afa <PolicySinkSendVCONNSwap+0x2be>
                     * wait for timer expiration */
                    break;
                }
            }
        }
        else if (TimerExpired(&port->PolicyStateTimer))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f003 fe98 	bl	800680a <TimerExpired>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d004      	beq.n	8002aea <PolicySinkSendVCONNSwap+0x2ae>
        {
            SetPEState(port, peSinkSendHardReset);
 8002ae0:	211a      	movs	r1, #26
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f002 fada 	bl	800509c <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 8002ae8:	e029      	b.n	8002b3e <PolicySinkSendVCONNSwap+0x302>
            port->PEIdle = TRUE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8002af2:	e024      	b.n	8002b3e <PolicySinkSendVCONNSwap+0x302>
            }
 8002af4:	bf00      	nop
 8002af6:	e022      	b.n	8002b3e <PolicySinkSendVCONNSwap+0x302>
                    break;
 8002af8:	bf00      	nop
        break;
 8002afa:	e020      	b.n	8002b3e <PolicySinkSendVCONNSwap+0x302>
    case 4:
        if (TimerExpired(&port->PolicyStateTimer) == TRUE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002b02:	4618      	mov	r0, r3
 8002b04:	f003 fe81 	bl	800680a <TimerExpired>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d108      	bne.n	8002b20 <PolicySinkSendVCONNSwap+0x2e4>
        {
            port->PolicySubIndex++;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002b14:	3301      	adds	r3, #1
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8002b1e:	e004      	b.n	8002b2a <PolicySinkSendVCONNSwap+0x2ee>
            /* Fall through to immediately send PS_RDY when timer expires. */
        }
        else
        {
            port->PEIdle = TRUE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            break;
 8002b28:	e009      	b.n	8002b3e <PolicySinkSendVCONNSwap+0x302>
        }
    default:
        PolicySendCommand(port, CMTPS_RDY, peSinkReady, 0, SOP_TYPE_SOP);
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	2224      	movs	r2, #36	; 0x24
 8002b32:	2106      	movs	r1, #6
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fac9 	bl	80030cc <PolicySendCommand>
        break;
 8002b3a:	e000      	b.n	8002b3e <PolicySinkSendVCONNSwap+0x302>
        break;
 8002b3c:	bf00      	nop
    }
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	00015f90 	.word	0x00015f90

08002b4c <PolicySinkEvaluateVCONNSwap>:

void PolicySinkEvaluateVCONNSwap(Port_t *port)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	6078      	str	r0, [r7, #4]
    switch (port->PolicySubIndex)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	f200 8126 	bhi.w	8002dac <PolicySinkEvaluateVCONNSwap+0x260>
 8002b60:	a201      	add	r2, pc, #4	; (adr r2, 8002b68 <PolicySinkEvaluateVCONNSwap+0x1c>)
 8002b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b66:	bf00      	nop
 8002b68:	08002b79 	.word	0x08002b79
 8002b6c:	08002bb1 	.word	0x08002bb1
 8002b70:	08002c8b 	.word	0x08002c8b
 8002b74:	08002d7f 	.word	0x08002d7f
    {
    case 0:
        if ((port->IsVCONNSource && VCONN_Swap_To_Off_Supported) ||
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d104      	bne.n	8002b8c <PolicySinkEvaluateVCONNSwap+0x40>
            (!port->IsVCONNSource && VCONN_Swap_To_On_Supported))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
        if ((port->IsVCONNSource && VCONN_Swap_To_Off_Supported) ||
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d108      	bne.n	8002b9e <PolicySinkEvaluateVCONNSwap+0x52>
        {
            PolicySendCommand(port, CMTAccept, peSinkEvaluateVCONNSwap, 1,
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	2301      	movs	r3, #1
 8002b92:	222f      	movs	r2, #47	; 0x2f
 8002b94:	2103      	movs	r1, #3
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fa98 	bl	80030cc <PolicySendCommand>
        else
        {
            PolicySendCommand(port, CMTReject, peSinkReady, 0,
                    SOP_TYPE_SOP);
        }
        break;
 8002b9c:	e10f      	b.n	8002dbe <PolicySinkEvaluateVCONNSwap+0x272>
            PolicySendCommand(port, CMTReject, peSinkReady, 0,
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	2224      	movs	r2, #36	; 0x24
 8002ba6:	2104      	movs	r1, #4
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fa8f 	bl	80030cc <PolicySendCommand>
        break;
 8002bae:	e106      	b.n	8002dbe <PolicySinkEvaluateVCONNSwap+0x272>
    case 1:
        if (port->IsVCONNSource)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00f      	beq.n	8002bda <PolicySinkEvaluateVCONNSwap+0x8e>
        {
            TimerStart(&port->PolicyStateTimer, tVCONNSourceOn);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002bc0:	4981      	ldr	r1, [pc, #516]	; (8002dc8 <PolicySinkEvaluateVCONNSwap+0x27c>)
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f003 fde6 	bl	8006794 <TimerStart>
            port->PolicySubIndex++;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002bce:	3301      	adds	r3, #1
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
            TimerStart(&port->PolicyStateTimer, tVCONNTransition);

            /* Move on to sending the PS_RDY message after the timer expires */
            port->PolicySubIndex = 3;
        }
        break;
 8002bd8:	e0f1      	b.n	8002dbe <PolicySinkEvaluateVCONNSwap+0x272>
                if (port->CCPin == CC1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d10e      	bne.n	8002c02 <PolicySinkEvaluateVCONNSwap+0xb6>
                    port->Registers.Switches.VCONN_CC2 = 1;
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002bea:	f043 0320 	orr.w	r3, r3, #32
 8002bee:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    port->Registers.Switches.PDWN2 = 0;
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002bf8:	f36f 0341 	bfc	r3, #1, #1
 8002bfc:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
 8002c00:	e00d      	b.n	8002c1e <PolicySinkEvaluateVCONNSwap+0xd2>
                    port->Registers.Switches.VCONN_CC1 = 1;
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002c08:	f043 0310 	orr.w	r3, r3, #16
 8002c0c:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    port->Registers.Switches.PDWN1 = 0;
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002c16:	f36f 0300 	bfc	r3, #0, #1
 8002c1a:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                DeviceWrite(port->I2cAddr, regSwitches0, 1,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	332a      	adds	r3, #42	; 0x2a
 8002c28:	2201      	movs	r2, #1
 8002c2a:	2102      	movs	r1, #2
 8002c2c:	f003 fd78 	bl	8006720 <DeviceWrite>
            port->IsVCONNSource = TRUE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            if (port->PdRevSop == USBPDSPECREV3p0)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d116      	bne.n	8002c70 <PolicySinkEvaluateVCONNSwap+0x124>
                port->Registers.Control.ENSOP1 = SOP_P_Capable;
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8002c48:	f36f 0300 	bfc	r3, #0, #1
 8002c4c:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                port->Registers.Control.ENSOP2 = SOP_PP_Capable;
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8002c56:	f36f 0341 	bfc	r3, #1, #1
 8002c5a:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                DeviceWrite(port->I2cAddr, regControl1, 1,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3331      	adds	r3, #49	; 0x31
 8002c68:	2201      	movs	r2, #1
 8002c6a:	2107      	movs	r1, #7
 8002c6c:	f003 fd58 	bl	8006720 <DeviceWrite>
            TimerStart(&port->PolicyStateTimer, tVCONNTransition);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002c76:	f644 6120 	movw	r1, #20000	; 0x4e20
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f003 fd8a 	bl	8006794 <TimerStart>
            port->PolicySubIndex = 3;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2203      	movs	r2, #3
 8002c84:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        break;
 8002c88:	e099      	b.n	8002dbe <PolicySinkEvaluateVCONNSwap+0x272>
    case 2:
        if (port->ProtocolMsgRx)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d05d      	beq.n	8002d50 <PolicySinkEvaluateVCONNSwap+0x204>
        {
            port->ProtocolMsgRx = FALSE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
            if (port->PolicyRxHeader.NumDataObjects == 0)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8002ca2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d164      	bne.n	8002d76 <PolicySinkEvaluateVCONNSwap+0x22a>
            {
                switch (port->PolicyRxHeader.MessageType)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8002cb2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b06      	cmp	r3, #6
 8002cba:	d15e      	bne.n	8002d7a <PolicySinkEvaluateVCONNSwap+0x22e>
                {
                case CMTPS_RDY:
                    port->Registers.Switches.VCONN_CC1 = 0;
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002cc2:	f36f 1304 	bfc	r3, #4, #1
 8002cc6:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    port->Registers.Switches.VCONN_CC2 = 0;
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002cd0:	f36f 1345 	bfc	r3, #5, #1
 8002cd4:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    port->Registers.Switches.PDWN1 = 1;
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    port->Registers.Switches.PDWN2 = 1;
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002cec:	f043 0302 	orr.w	r3, r3, #2
 8002cf0:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    DeviceWrite(port->I2cAddr, regSwitches0, 1,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	332a      	adds	r3, #42	; 0x2a
 8002cfe:	2201      	movs	r2, #1
 8002d00:	2102      	movs	r1, #2
 8002d02:	f003 fd0d 	bl	8006720 <DeviceWrite>
                                &port->Registers.Switches.byte[0]);

                    port->IsVCONNSource = FALSE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

                    if (port->PdRevSop == USBPDSPECREV3p0)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d116      	bne.n	8002d46 <PolicySinkEvaluateVCONNSwap+0x1fa>
                    {
                        /* In PD3.0, VConn Source controls SOP* coms */
                        port->Registers.Control.ENSOP1 = 0;
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8002d1e:	f36f 0300 	bfc	r3, #0, #1
 8002d22:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                        port->Registers.Control.ENSOP2 = 0;
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8002d2c:	f36f 0341 	bfc	r3, #1, #1
 8002d30:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                        DeviceWrite(port->I2cAddr, regControl1, 1,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3331      	adds	r3, #49	; 0x31
 8002d3e:	2201      	movs	r2, #1
 8002d40:	2107      	movs	r1, #7
 8002d42:	f003 fced 	bl	8006720 <DeviceWrite>
#ifdef FSC_HAVE_VDM
                        port->discoverIdCounter = 0;
#endif /* FSC_HAVE_VDM */
                    }

                    SetPEState(port, peSinkReady);
 8002d46:	2124      	movs	r1, #36	; 0x24
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f002 f9a7 	bl	800509c <SetPEState>
                    break;
 8002d4e:	e015      	b.n	8002d7c <PolicySinkEvaluateVCONNSwap+0x230>
                    /* For all other commands received, simply ignore them*/
                    break;
                }
            }
        }
        else if (TimerExpired(&port->PolicyStateTimer))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002d56:	4618      	mov	r0, r3
 8002d58:	f003 fd57 	bl	800680a <TimerExpired>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d004      	beq.n	8002d6c <PolicySinkEvaluateVCONNSwap+0x220>
        {
            SetPEState(port, peSourceSendHardReset);
 8002d62:	2103      	movs	r1, #3
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f002 f999 	bl	800509c <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 8002d6a:	e028      	b.n	8002dbe <PolicySinkEvaluateVCONNSwap+0x272>
            port->PEIdle = TRUE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8002d74:	e023      	b.n	8002dbe <PolicySinkEvaluateVCONNSwap+0x272>
            }
 8002d76:	bf00      	nop
 8002d78:	e021      	b.n	8002dbe <PolicySinkEvaluateVCONNSwap+0x272>
                    break;
 8002d7a:	bf00      	nop
        break;
 8002d7c:	e01f      	b.n	8002dbe <PolicySinkEvaluateVCONNSwap+0x272>
    case 3:
        if (TimerExpired(&port->PolicyStateTimer) == TRUE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002d84:	4618      	mov	r0, r3
 8002d86:	f003 fd40 	bl	800680a <TimerExpired>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d108      	bne.n	8002da2 <PolicySinkEvaluateVCONNSwap+0x256>
        {
            port->PolicySubIndex++;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002d96:	3301      	adds	r3, #1
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8002da0:	e004      	b.n	8002dac <PolicySinkEvaluateVCONNSwap+0x260>
            /* Fall through if timer expired. Immediately send PS_RDY. */
        }
        else
        {
            port->PEIdle = TRUE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            break;
 8002daa:	e008      	b.n	8002dbe <PolicySinkEvaluateVCONNSwap+0x272>
        }
    default:
        PolicySendCommand(port, CMTPS_RDY, peSinkReady, 0, SOP_TYPE_SOP);
 8002dac:	2300      	movs	r3, #0
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	2300      	movs	r3, #0
 8002db2:	2224      	movs	r2, #36	; 0x24
 8002db4:	2106      	movs	r1, #6
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f988 	bl	80030cc <PolicySendCommand>
        break;
 8002dbc:	bf00      	nop
    }
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	00015f90 	.word	0x00015f90

08002dcc <PolicySinkSendPRSwap>:

void PolicySinkSendPRSwap(Port_t *port)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
    default:
        port->PolicySubIndex = 0;
        break;
    }
#endif /* FSC_HAVE_DRP */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <PolicySinkEvaluatePRSwap>:

void PolicySinkEvaluatePRSwap(Port_t *port)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af02      	add	r7, sp, #8
 8002de4:	6078      	str	r0, [r7, #4]
    default:
        port->PolicySubIndex = 0;
        break;
    }
#else
    PolicySendCommand(port, CMTReject, peSinkReady, 0, port->ProtocolMsgRxSop);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	2300      	movs	r3, #0
 8002df0:	2224      	movs	r2, #36	; 0x24
 8002df2:	2104      	movs	r1, #4
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f969 	bl	80030cc <PolicySendCommand>
#endif /* FSC_HAVE_DRP */
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <PolicySinkAlertReceived>:
#endif /* FSC_HAVE_SNK */

void PolicySinkAlertReceived(Port_t *port)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
    if (port->PolicyRxDataObj[0].ADO.Battery ||
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d11f      	bne.n	8002e5a <PolicySinkAlertReceived+0x58>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d117      	bne.n	8002e5a <PolicySinkAlertReceived+0x58>
        port->PolicyRxDataObj[0].ADO.OCP ||
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10f      	bne.n	8002e5a <PolicySinkAlertReceived+0x58>
        port->PolicyRxDataObj[0].ADO.OTP ||
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d107      	bne.n	8002e5a <PolicySinkAlertReceived+0x58>
        port->PolicyRxDataObj[0].ADO.OpCondition ||
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d009      	beq.n	8002e6e <PolicySinkAlertReceived+0x6c>
        port->PolicyRxDataObj[0].ADO.Input)
    {
        /* Send Get_Status */
        notify_observers(ALERT_EVENT, port->I2cAddr,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
                         &port->PolicyRxDataObj[0].object);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	33b8      	adds	r3, #184	; 0xb8
        notify_observers(ALERT_EVENT, port->I2cAddr,
 8002e64:	461a      	mov	r2, r3
 8002e66:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002e6a:	f003 ff19 	bl	8006ca0 <notify_observers>
    }

    SetPEState(port, peSinkReady);
 8002e6e:	2124      	movs	r1, #36	; 0x24
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f002 f913 	bl	800509c <SetPEState>
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <PolicyInvalidState>:
}

#endif /* FSC_HAVE_VDM */

void PolicyInvalidState(Port_t *port)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
    /* reset if we get to an invalid state */
    if (port->PolicyIsSource)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d004      	beq.n	8002e9a <PolicyInvalidState+0x1c>
    {
        SetPEState(port, peSourceSendHardReset);
 8002e90:	2103      	movs	r1, #3
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f002 f902 	bl	800509c <SetPEState>
    }
    else
    {
        SetPEState(port, peSinkSendHardReset);
    }
}
 8002e98:	e003      	b.n	8002ea2 <PolicyInvalidState+0x24>
        SetPEState(port, peSinkSendHardReset);
 8002e9a:	211a      	movs	r1, #26
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f002 f8fd 	bl	800509c <SetPEState>
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <PolicySendGenericCommand>:

void PolicySendGenericCommand(Port_t *port)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b086      	sub	sp, #24
 8002eae:	af02      	add	r7, sp, #8
 8002eb0:	6078      	str	r0, [r7, #4]
    FSC_U8 status;
    switch (port->PolicySubIndex)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d12b      	bne.n	8002f14 <PolicySendGenericCommand+0x6a>
    {
    case 0:
        status = PolicySendCommand(port, port->PDTransmitHeader.MessageType,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002ec2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	4619      	mov	r1, r3
 8002eca:	2300      	movs	r3, #0
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	2301      	movs	r3, #1
 8002ed0:	227a      	movs	r2, #122	; 0x7a
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f8fa 	bl	80030cc <PolicySendCommand>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	73fb      	strb	r3, [r7, #15]
                peSendGenericCommand, 1, SOP_TYPE_SOP);
        if (status == STAT_SUCCESS)
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d108      	bne.n	8002ef4 <PolicySendGenericCommand+0x4a>
        {
            TimerStart(&port->PolicyStateTimer, tSenderResponse);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002ee8:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f003 fc51 	bl	8006794 <TimerStart>
        else if (status == STAT_ERROR)
        {
            SetPEState(port, port->PolicyIsSource ?
                    peSourceReady : peSinkReady);
        }
        break;
 8002ef2:	e040      	b.n	8002f76 <PolicySendGenericCommand+0xcc>
        else if (status == STAT_ERROR)
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d13d      	bne.n	8002f76 <PolicySendGenericCommand+0xcc>
            SetPEState(port, port->PolicyIsSource ?
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <PolicySendGenericCommand+0x5e>
 8002f04:	230f      	movs	r3, #15
 8002f06:	e000      	b.n	8002f0a <PolicySendGenericCommand+0x60>
 8002f08:	2324      	movs	r3, #36	; 0x24
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f002 f8c5 	bl	800509c <SetPEState>
        break;
 8002f12:	e030      	b.n	8002f76 <PolicySendGenericCommand+0xcc>
    default:
        if (port->ProtocolMsgRx)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d010      	beq.n	8002f40 <PolicySendGenericCommand+0x96>
        {
            port->ProtocolMsgRx = FALSE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3

            /* Check and handle message response */

            SetPEState(port, port->PolicyIsSource ?
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <PolicySendGenericCommand+0x8a>
 8002f30:	230f      	movs	r3, #15
 8002f32:	e000      	b.n	8002f36 <PolicySendGenericCommand+0x8c>
 8002f34:	2324      	movs	r3, #36	; 0x24
 8002f36:	4619      	mov	r1, r3
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f002 f8af 	bl	800509c <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 8002f3e:	e01b      	b.n	8002f78 <PolicySendGenericCommand+0xce>
        else if (TimerExpired(&port->PolicyStateTimer))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002f46:	4618      	mov	r0, r3
 8002f48:	f003 fc5f 	bl	800680a <TimerExpired>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00c      	beq.n	8002f6c <PolicySendGenericCommand+0xc2>
            SetPEState(port, port->PolicyIsSource ?
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <PolicySendGenericCommand+0xb6>
 8002f5c:	230f      	movs	r3, #15
 8002f5e:	e000      	b.n	8002f62 <PolicySendGenericCommand+0xb8>
 8002f60:	2324      	movs	r3, #36	; 0x24
 8002f62:	4619      	mov	r1, r3
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f002 f899 	bl	800509c <SetPEState>
        break;
 8002f6a:	e005      	b.n	8002f78 <PolicySendGenericCommand+0xce>
            port->PEIdle = TRUE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8002f74:	e000      	b.n	8002f78 <PolicySendGenericCommand+0xce>
        break;
 8002f76:	bf00      	nop
    }
}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <PolicySendGenericData>:

void PolicySendGenericData(Port_t *port)
{
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b089      	sub	sp, #36	; 0x24
 8002f84:	af04      	add	r7, sp, #16
 8002f86:	6078      	str	r0, [r7, #4]
    FSC_U8 status;
    switch (port->PolicySubIndex)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d13d      	bne.n	800300e <PolicySendGenericData+0x8e>
    {
    case 0:
        status = PolicySendData(port, port->PDTransmitHeader.MessageType,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002f98:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461c      	mov	r4, r3
                port->PDTransmitObjects,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
                port->PDTransmitHeader.NumDataObjects * sizeof(doDataObject_t),
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002fac:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	0099      	lsls	r1, r3, #2
        status = PolicySendData(port, port->PDTransmitHeader.MessageType,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002fba:	2000      	movs	r0, #0
 8002fbc:	9003      	str	r0, [sp, #12]
 8002fbe:	9302      	str	r3, [sp, #8]
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	9301      	str	r3, [sp, #4]
 8002fc4:	237b      	movs	r3, #123	; 0x7b
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4621      	mov	r1, r4
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f9bb 	bl	8003348 <PolicySendData>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	73fb      	strb	r3, [r7, #15]
                peSendGenericData, 1,
                port->PolicyMsgTxSop, FALSE);
        if (status == STAT_SUCCESS)
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d108      	bne.n	8002fee <PolicySendGenericData+0x6e>
        {
            TimerStart(&port->PolicyStateTimer, tSenderResponse);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002fe2:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f003 fbd4 	bl	8006794 <TimerStart>
        else if (status == STAT_ERROR)
        {
            SetPEState(port, port->PolicyIsSource ?
                    peSourceReady : peSinkReady);
        }
        break;
 8002fec:	e040      	b.n	8003070 <PolicySendGenericData+0xf0>
        else if (status == STAT_ERROR)
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d13d      	bne.n	8003070 <PolicySendGenericData+0xf0>
            SetPEState(port, port->PolicyIsSource ?
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <PolicySendGenericData+0x82>
 8002ffe:	230f      	movs	r3, #15
 8003000:	e000      	b.n	8003004 <PolicySendGenericData+0x84>
 8003002:	2324      	movs	r3, #36	; 0x24
 8003004:	4619      	mov	r1, r3
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f002 f848 	bl	800509c <SetPEState>
        break;
 800300c:	e030      	b.n	8003070 <PolicySendGenericData+0xf0>
    default:
        if (port->ProtocolMsgRx)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d010      	beq.n	800303a <PolicySendGenericData+0xba>
        {
            port->ProtocolMsgRx = FALSE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3

            /* Check and handle message response */

            SetPEState(port, port->PolicyIsSource ?
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <PolicySendGenericData+0xae>
 800302a:	230f      	movs	r3, #15
 800302c:	e000      	b.n	8003030 <PolicySendGenericData+0xb0>
 800302e:	2324      	movs	r3, #36	; 0x24
 8003030:	4619      	mov	r1, r3
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f002 f832 	bl	800509c <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 8003038:	e01b      	b.n	8003072 <PolicySendGenericData+0xf2>
        else if (TimerExpired(&port->PolicyStateTimer))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003040:	4618      	mov	r0, r3
 8003042:	f003 fbe2 	bl	800680a <TimerExpired>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00c      	beq.n	8003066 <PolicySendGenericData+0xe6>
            SetPEState(port, port->PolicyIsSource ?
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <PolicySendGenericData+0xda>
 8003056:	230f      	movs	r3, #15
 8003058:	e000      	b.n	800305c <PolicySendGenericData+0xdc>
 800305a:	2324      	movs	r3, #36	; 0x24
 800305c:	4619      	mov	r1, r3
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f002 f81c 	bl	800509c <SetPEState>
        break;
 8003064:	e005      	b.n	8003072 <PolicySendGenericData+0xf2>
            port->PEIdle = TRUE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 800306e:	e000      	b.n	8003072 <PolicySendGenericData+0xf2>
        break;
 8003070:	bf00      	nop
    }
}
 8003072:	bf00      	nop
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	bd90      	pop	{r4, r7, pc}

0800307a <PolicySendHardReset>:

/* General PD Messaging */
void PolicySendHardReset(Port_t *port)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
    FSC_U8 data;
    if (!port->IsHardReset)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8003088:	2b00      	cmp	r3, #0
 800308a:	d11b      	bne.n	80030c4 <PolicySendHardReset+0x4a>
    {
        port->HardResetCounter++;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8003092:	3301      	adds	r3, #1
 8003094:	b2da      	uxtb	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        port->IsHardReset = TRUE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
        data = port->Registers.Control.byte[3] | 0x40;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80030aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	73fb      	strb	r3, [r7, #15]
        DeviceWrite(port->I2cAddr, regControl3, 1, &data);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80030b8:	f107 030f 	add.w	r3, r7, #15
 80030bc:	2201      	movs	r2, #1
 80030be:	2109      	movs	r1, #9
 80030c0:	f003 fb2e 	bl	8006720 <DeviceWrite>
    }
}
 80030c4:	bf00      	nop
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <PolicySendCommand>:

FSC_U8 PolicySendCommand(Port_t *port, FSC_U8 Command, PolicyState_t nextState,
                         FSC_U8 subIndex, SopType sop)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	4608      	mov	r0, r1
 80030d6:	4611      	mov	r1, r2
 80030d8:	461a      	mov	r2, r3
 80030da:	4603      	mov	r3, r0
 80030dc:	70fb      	strb	r3, [r7, #3]
 80030de:	460b      	mov	r3, r1
 80030e0:	70bb      	strb	r3, [r7, #2]
 80030e2:	4613      	mov	r3, r2
 80030e4:	707b      	strb	r3, [r7, #1]
    FSC_U8 Status = STAT_BUSY;
 80030e6:	2300      	movs	r3, #0
 80030e8:	73fb      	strb	r3, [r7, #15]
    switch (port->PDTxStatus)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	f200 810e 	bhi.w	8003312 <PolicySendCommand+0x246>
 80030f6:	a201      	add	r2, pc, #4	; (adr r2, 80030fc <PolicySendCommand+0x30>)
 80030f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fc:	08003121 	.word	0x08003121
 8003100:	08003313 	.word	0x08003313
 8003104:	080031e9 	.word	0x080031e9
 8003108:	080031e9 	.word	0x080031e9
 800310c:	080031e9 	.word	0x080031e9
 8003110:	08003239 	.word	0x08003239
 8003114:	08003251 	.word	0x08003251
 8003118:	0800329b 	.word	0x0800329b
 800311c:	080032e9 	.word	0x080032e9
    {
    case txIdle:
        port->PolicyTxHeader.word = 0;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
        port->PolicyTxHeader.NumDataObjects = 0;
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 800312e:	f36f 1306 	bfc	r3, #4, #3
 8003132:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
        port->PolicyTxHeader.MessageType = Command;
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	b2d9      	uxtb	r1, r3
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 8003144:	f361 0304 	bfi	r3, r1, #0, #5
 8003148:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
        if (sop == SOP_TYPE_SOP)
 800314c:	7e3b      	ldrb	r3, [r7, #24]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d11a      	bne.n	8003188 <PolicySendCommand+0xbc>
        {
            port->PolicyTxHeader.PortDataRole = port->PolicyIsDFP;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	b2d9      	uxtb	r1, r3
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 8003164:	f361 1345 	bfi	r3, r1, #5, #1
 8003168:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
            port->PolicyTxHeader.PortPowerRole = port->PolicyIsSource;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	b2d9      	uxtb	r1, r3
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 800317e:	f361 0300 	bfi	r3, r1, #0, #1
 8003182:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
 8003186:	e00d      	b.n	80031a4 <PolicySendCommand+0xd8>
        }
        else
        {
            port->PolicyTxHeader.PortDataRole = 0;
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 800318e:	f36f 1345 	bfc	r3, #5, #1
 8003192:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
            /* Cable plug field when SOP' & SOP'', currently not used */
            port->PolicyTxHeader.PortPowerRole = 0;
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 800319c:	f36f 0300 	bfc	r3, #0, #1
 80031a0:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
        }
        port->PolicyTxHeader.SpecRevision = DPM_SpecRev(port, sop);
 80031a4:	7e3b      	ldrb	r3, [r7, #24]
 80031a6:	4619      	mov	r1, r3
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f003 fccc 	bl	8006b46 <DPM_SpecRev>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	b2d9      	uxtb	r1, r3
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 80031bc:	f361 1387 	bfi	r3, r1, #6, #2
 80031c0:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
        port->ProtocolMsgTxSop = sop;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	7e3a      	ldrb	r2, [r7, #24]
 80031c8:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
        port->PDTxStatus = txSend;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2

        /* Shortcut to transmit */
        if (port->ProtocolState == PRLIdle) ProtocolIdle(port);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80031da:	2b01      	cmp	r3, #1
 80031dc:	f040 80ae 	bne.w	800333c <PolicySendCommand+0x270>
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 fdf1 	bl	8003dc8 <ProtocolIdle>
        break;
 80031e6:	e0a9      	b.n	800333c <PolicySendCommand+0x270>
    case txSend:
    case txBusy:
    case txWait:
        /* Waiting for GoodCRC or timeout of the protocol */
        if (TimerExpired(&port->ProtocolTimer))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80031ee:	4618      	mov	r0, r3
 80031f0:	f003 fb0b 	bl	800680a <TimerExpired>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d019      	beq.n	800322e <PolicySendCommand+0x162>
        {
            TimerDisable(&port->ProtocolTimer);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8003200:	4618      	mov	r0, r3
 8003202:	f003 fae2 	bl	80067ca <TimerDisable>
            port->ProtocolState = PRLIdle;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
            port->PDTxStatus = txIdle;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2

            /* Jumping to the next state might not be appropriate error
             * handling for a timeout, but will prevent a hang in case
             * the caller isn't expecting it.
             */
            SetPEState(port, nextState);
 8003216:	78bb      	ldrb	r3, [r7, #2]
 8003218:	4619      	mov	r1, r3
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f001 ff3e 	bl	800509c <SetPEState>
            port->PolicySubIndex = subIndex;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	787a      	ldrb	r2, [r7, #1]
 8003224:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

            Status = STAT_ERROR;
 8003228:	2302      	movs	r3, #2
 800322a:	73fb      	strb	r3, [r7, #15]
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 800322c:	e087      	b.n	800333e <PolicySendCommand+0x272>
            port->PEIdle = TRUE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8003236:	e082      	b.n	800333e <PolicySendCommand+0x272>
    case txSuccess:
        SetPEState(port, nextState);
 8003238:	78bb      	ldrb	r3, [r7, #2]
 800323a:	4619      	mov	r1, r3
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f001 ff2d 	bl	800509c <SetPEState>
        port->PolicySubIndex = subIndex;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	787a      	ldrb	r2, [r7, #1]
 8003246:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        Status = STAT_SUCCESS;
 800324a:	2301      	movs	r3, #1
 800324c:	73fb      	strb	r3, [r7, #15]
        break;
 800324e:	e076      	b.n	800333e <PolicySendCommand+0x272>
    case txError:
        /* Didn't receive a GoodCRC message... */
        if (port->PolicyState == peSourceSendSoftReset)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003256:	2b05      	cmp	r3, #5
 8003258:	d104      	bne.n	8003264 <PolicySendCommand+0x198>
        {
            SetPEState(port, peSourceSendHardReset);
 800325a:	2103      	movs	r1, #3
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f001 ff1d 	bl	800509c <SetPEState>
 8003262:	e017      	b.n	8003294 <PolicySendCommand+0x1c8>
        }
        else if (port->PolicyState == peSinkSendSoftReset)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800326a:	2b1c      	cmp	r3, #28
 800326c:	d104      	bne.n	8003278 <PolicySendCommand+0x1ac>
        {
            SetPEState(port, peSinkSendHardReset);
 800326e:	211a      	movs	r1, #26
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f001 ff13 	bl	800509c <SetPEState>
 8003276:	e00d      	b.n	8003294 <PolicySendCommand+0x1c8>
        }
        else if (port->PolicyIsSource)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800327e:	2b00      	cmp	r3, #0
 8003280:	d004      	beq.n	800328c <PolicySendCommand+0x1c0>
        {
            SetPEState(port, peSourceSendSoftReset);
 8003282:	2105      	movs	r1, #5
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f001 ff09 	bl	800509c <SetPEState>
 800328a:	e003      	b.n	8003294 <PolicySendCommand+0x1c8>
        }
        else
        {
            SetPEState(port, peSinkSendSoftReset);
 800328c:	211c      	movs	r1, #28
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f001 ff04 	bl	800509c <SetPEState>
        }
        Status = STAT_ERROR;
 8003294:	2302      	movs	r3, #2
 8003296:	73fb      	strb	r3, [r7, #15]
        break;
 8003298:	e051      	b.n	800333e <PolicySendCommand+0x272>
    case txCollision:
        port->CollisionCounter++;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 80032a0:	3301      	adds	r3, #1
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
        if (port->CollisionCounter > nRetryCount)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d914      	bls.n	80032de <PolicySendCommand+0x212>
        {
            if (port->PolicyIsSource)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d004      	beq.n	80032c8 <PolicySendCommand+0x1fc>
                SetPEState(port, peSourceSendHardReset);
 80032be:	2103      	movs	r1, #3
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f001 feeb 	bl	800509c <SetPEState>
 80032c6:	e003      	b.n	80032d0 <PolicySendCommand+0x204>
            else
                SetPEState(port, peSinkSendHardReset);
 80032c8:	211a      	movs	r1, #26
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f001 fee6 	bl	800509c <SetPEState>

            port->PDTxStatus = txReset;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
            Status = STAT_ERROR;
 80032d8:	2302      	movs	r3, #2
 80032da:	73fb      	strb	r3, [r7, #15]
        else
        {
            /* Clear the transmitter status for the next operation */
            port->PDTxStatus = txIdle;
        }
        break;
 80032dc:	e02f      	b.n	800333e <PolicySendCommand+0x272>
            port->PDTxStatus = txIdle;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
        break;
 80032e6:	e02a      	b.n	800333e <PolicySendCommand+0x272>
    case txAbort:
        if (port->PolicyIsSource)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d004      	beq.n	80032fc <PolicySendCommand+0x230>
            SetPEState(port, peSourceReady);
 80032f2:	210f      	movs	r1, #15
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f001 fed1 	bl	800509c <SetPEState>
 80032fa:	e003      	b.n	8003304 <PolicySendCommand+0x238>
        else
            SetPEState(port, peSinkReady);
 80032fc:	2124      	movs	r1, #36	; 0x24
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f001 fecc 	bl	800509c <SetPEState>

        Status = STAT_ABORT;
 8003304:	2303      	movs	r3, #3
 8003306:	73fb      	strb	r3, [r7, #15]
        port->PDTxStatus = txIdle;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2

        break;
 8003310:	e015      	b.n	800333e <PolicySendCommand+0x272>
    default:
        if (port->PolicyIsSource)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8003318:	2b00      	cmp	r3, #0
 800331a:	d004      	beq.n	8003326 <PolicySendCommand+0x25a>
            SetPEState(port, peSourceSendHardReset);
 800331c:	2103      	movs	r1, #3
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f001 febc 	bl	800509c <SetPEState>
 8003324:	e003      	b.n	800332e <PolicySendCommand+0x262>
        else
            SetPEState(port, peSinkSendHardReset);
 8003326:	211a      	movs	r1, #26
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f001 feb7 	bl	800509c <SetPEState>

        port->PDTxStatus = txReset;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
        Status = STAT_ERROR;
 8003336:	2302      	movs	r3, #2
 8003338:	73fb      	strb	r3, [r7, #15]
        break;
 800333a:	e000      	b.n	800333e <PolicySendCommand+0x272>
        break;
 800333c:	bf00      	nop
    }
    return Status;
 800333e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <PolicySendData>:

FSC_U8 PolicySendData(Port_t *port, FSC_U8 MessageType, void* data,
                      FSC_U32 len, PolicyState_t nextState,
                      FSC_U8 subIndex, SopType sop, FSC_BOOL extMsg)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	460b      	mov	r3, r1
 8003356:	72fb      	strb	r3, [r7, #11]
    FSC_U8 Status = STAT_BUSY;
 8003358:	2300      	movs	r3, #0
 800335a:	77fb      	strb	r3, [r7, #31]
    FSC_U32 i;
    FSC_U8* pData = (FSC_U8*)data;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	613b      	str	r3, [r7, #16]
    FSC_U8* pOutBuf = (FSC_U8*)port->PolicyTxDataObj;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	33d4      	adds	r3, #212	; 0xd4
 8003364:	617b      	str	r3, [r7, #20]

    switch (port->PDTxStatus)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
 800336c:	2b08      	cmp	r3, #8
 800336e:	f200 817a 	bhi.w	8003666 <PolicySendData+0x31e>
 8003372:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <PolicySendData+0x30>)
 8003374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003378:	0800339d 	.word	0x0800339d
 800337c:	08003667 	.word	0x08003667
 8003380:	0800352b 	.word	0x0800352b
 8003384:	0800352b 	.word	0x0800352b
 8003388:	0800352b 	.word	0x0800352b
 800338c:	080035a5 	.word	0x080035a5
 8003390:	080035f5 	.word	0x080035f5
 8003394:	0800359f 	.word	0x0800359f
 8003398:	0800363d 	.word	0x0800363d
    {
    case txIdle:
    {
        port->PolicyTxHeader.word = 0;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
        port->PolicyTxHeader.NumDataObjects = len / 4;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	089b      	lsrs	r3, r3, #2
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	b2d9      	uxtb	r1, r3
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 80033b4:	f361 1306 	bfi	r3, r1, #4, #3
 80033b8:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
        port->PolicyTxHeader.MessageType = MessageType;
 80033bc:	7afb      	ldrb	r3, [r7, #11]
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	b2d9      	uxtb	r1, r3
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 80033ca:	f361 0304 	bfi	r3, r1, #0, #5
 80033ce:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
        if (sop == SOP_TYPE_SOP)
 80033d2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d11a      	bne.n	8003410 <PolicySendData+0xc8>
        {
            port->PolicyTxHeader.PortDataRole = port->PolicyIsDFP;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	b2d9      	uxtb	r1, r3
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 80033ec:	f361 1345 	bfi	r3, r1, #5, #1
 80033f0:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
            port->PolicyTxHeader.PortPowerRole = port->PolicyIsSource;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	b2d9      	uxtb	r1, r3
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 8003406:	f361 0300 	bfi	r3, r1, #0, #1
 800340a:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
 800340e:	e00d      	b.n	800342c <PolicySendData+0xe4>
        }
        else
        {
            /* Cable plug field when SOP' & SOP'', currently not used */
            port->PolicyTxHeader.PortPowerRole = 0;
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 8003416:	f36f 0300 	bfc	r3, #0, #1
 800341a:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
            port->PolicyTxHeader.PortDataRole = 0;
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 8003424:	f36f 1345 	bfc	r3, #5, #1
 8003428:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
        }
        port->PolicyTxHeader.SpecRevision = DPM_SpecRev(port, sop);
 800342c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003430:	4619      	mov	r1, r3
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f003 fb87 	bl	8006b46 <DPM_SpecRev>
 8003438:	4603      	mov	r3, r0
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	b2d9      	uxtb	r1, r3
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 8003446:	f361 1387 	bfi	r3, r1, #6, #2
 800344a:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae

        if (extMsg == TRUE)
 800344e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003452:	2b01      	cmp	r3, #1
 8003454:	d137      	bne.n	80034c6 <PolicySendData+0x17e>
        {
#ifdef FSC_HAVE_EXT_MSG
            /* Set extended bit */
            port->PolicyTxHeader.Extended = 1;
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 800345c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003460:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
            /* Initialize extended messaging state */
            port->ExtChunkOffset = 0;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
            port->ExtChunkNum = 0;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
            port->ExtTxOrRx = TXing;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
            port->ExtWaitTxRx = FALSE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
            /* Set extended header */
            port->ExtTxHeader.word = 0;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f8a3 22f6 	strh.w	r2, [r3, #758]	; 0x2f6
            len = (len > EXT_MAX_MSG_LEN) ? EXT_MAX_MSG_LEN : len;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003492:	bf28      	it	cs
 8003494:	f44f 7382 	movcs.w	r3, #260	; 0x104
 8003498:	603b      	str	r3, [r7, #0]
            port->ExtTxHeader.Chunked = 1;
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	f892 32f7 	ldrb.w	r3, [r2, #759]	; 0x2f7
 80034a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a4:	f882 32f7 	strb.w	r3, [r2, #759]	; 0x2f7
            port->ExtTxHeader.DataSize = len;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ae:	b299      	uxth	r1, r3
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	f8b2 32f6 	ldrh.w	r3, [r2, #758]	; 0x2f6
 80034b6:	f361 0308 	bfi	r3, r1, #0, #9
 80034ba:	f8a2 32f6 	strh.w	r3, [r2, #758]	; 0x2f6
            /* Set the tx buffer */
            pOutBuf = port->ExtMsgBuffer;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 80034c4:	617b      	str	r3, [r7, #20]
#endif /* FSC_HAVE_EXT_MSG */
        }

        /* Copy message */
        for (i = 0; i < len; i++)
 80034c6:	2300      	movs	r3, #0
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	e00a      	b.n	80034e2 <PolicySendData+0x19a>
        {
            pOutBuf[i] = pData[i];
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	441a      	add	r2, r3
 80034d2:	6979      	ldr	r1, [r7, #20]
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	440b      	add	r3, r1
 80034d8:	7812      	ldrb	r2, [r2, #0]
 80034da:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < len; i++)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	3301      	adds	r3, #1
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d3f0      	bcc.n	80034cc <PolicySendData+0x184>
        }

        if (port->PolicyState == peSourceSendCaps)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80034f0:	2b07      	cmp	r3, #7
 80034f2:	d107      	bne.n	8003504 <PolicySendData+0x1bc>
        {
                port->CapsCounter++;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80034fa:	3301      	adds	r3, #1
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        }
        port->ProtocolMsgTxSop = sop;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800350a:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
        port->PDTxStatus = txSend;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2202      	movs	r2, #2
 8003512:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2

        /* Shortcut to transmit */
        if (port->ProtocolState == PRLIdle) ProtocolIdle(port);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800351c:	2b01      	cmp	r3, #1
 800351e:	f040 80b7 	bne.w	8003690 <PolicySendData+0x348>
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 fc50 	bl	8003dc8 <ProtocolIdle>
        break;
 8003528:	e0b2      	b.n	8003690 <PolicySendData+0x348>
    }
    case txSend:
    case txBusy:
    case txWait:
        /* Waiting for GoodCRC or timeout of the protocol */
        if (TimerExpired(&port->ProtocolTimer))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8003530:	4618      	mov	r0, r3
 8003532:	f003 f96a 	bl	800680a <TimerExpired>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d02b      	beq.n	8003594 <PolicySendData+0x24c>
        {
            TimerDisable(&port->ProtocolTimer);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8003542:	4618      	mov	r0, r3
 8003544:	f003 f941 	bl	80067ca <TimerDisable>
            port->ProtocolState = PRLIdle;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
            port->PDTxStatus = txIdle;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2

            /* Jumping to the next state might not be appropriate error
             * handling for a timeout, but will prevent a hang in case
             * the caller isn't expecting it.
             */
            SetPEState(port, nextState);
 8003558:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800355c:	4619      	mov	r1, r3
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f001 fd9c 	bl	800509c <SetPEState>
            port->PolicySubIndex = subIndex;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800356a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

            Status = STAT_ERROR;
 800356e:	2302      	movs	r3, #2
 8003570:	77fb      	strb	r3, [r7, #31]
#ifdef FSC_HAVE_EXT_MSG
            /* Possible timeout when trying to send a chunked message to
             * a device that doesn't support chunking.
             * TODO - Notify DPM of failure if necessary.
             */
            port->ExtWaitTxRx = FALSE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
            port->ExtChunkNum = 0;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
            port->ExtTxOrRx = NoXfer;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
            port->ExtChunkOffset = 0;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 8003592:	e07e      	b.n	8003692 <PolicySendData+0x34a>
            port->PEIdle = TRUE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 800359c:	e079      	b.n	8003692 <PolicySendData+0x34a>
    case txCollision:
        Status = STAT_ERROR;
 800359e:	2302      	movs	r3, #2
 80035a0:	77fb      	strb	r3, [r7, #31]
        break;
 80035a2:	e076      	b.n	8003692 <PolicySendData+0x34a>
    case txSuccess:
#ifdef FSC_HAVE_EXT_MSG
        if (extMsg == TRUE &&
 80035a4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d10f      	bne.n	80035cc <PolicySendData+0x284>
            port->ExtChunkOffset < port->ExtTxHeader.DataSize)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	f8b2 22f6 	ldrh.w	r2, [r2, #758]	; 0x2f6
 80035b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035bc:	b292      	uxth	r2, r2
        if (extMsg == TRUE &&
 80035be:	4293      	cmp	r3, r2
 80035c0:	d204      	bcs.n	80035cc <PolicySendData+0x284>
        {
            port->PDTxStatus = txBusy;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2203      	movs	r2, #3
 80035c6:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
            break;
 80035ca:	e062      	b.n	8003692 <PolicySendData+0x34a>
        }
#endif /* FSC_HAVE_EXT_MSG */
        SetPEState(port, nextState);
 80035cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80035d0:	4619      	mov	r1, r3
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f001 fd62 	bl	800509c <SetPEState>
        port->PolicySubIndex = subIndex;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80035de:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        TimerDisable(&port->ProtocolTimer);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80035e8:	4618      	mov	r0, r3
 80035ea:	f003 f8ee 	bl	80067ca <TimerDisable>
        Status = STAT_SUCCESS;
 80035ee:	2301      	movs	r3, #1
 80035f0:	77fb      	strb	r3, [r7, #31]
        break;
 80035f2:	e04e      	b.n	8003692 <PolicySendData+0x34a>
    case txError:
        /* Didn't receive a GoodCRC message... */
        if (sop == SOP_TYPE_SOP)
 80035f4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d11c      	bne.n	8003636 <PolicySendData+0x2ee>
        {
            if (port->PolicyState == peSourceSendCaps &&
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003602:	2b07      	cmp	r3, #7
 8003604:	d109      	bne.n	800361a <PolicySendData+0x2d2>
                port->PolicyHasContract == FALSE)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
            if (port->PolicyState == peSourceSendCaps &&
 800360c:	2b00      	cmp	r3, #0
 800360e:	d104      	bne.n	800361a <PolicySendData+0x2d2>
            {
                SetPEState(port, peSourceDiscovery);
 8003610:	2108      	movs	r1, #8
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f001 fd42 	bl	800509c <SetPEState>
 8003618:	e00d      	b.n	8003636 <PolicySendData+0x2ee>
            }
            else if (port->PolicyIsSource)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8003620:	2b00      	cmp	r3, #0
 8003622:	d004      	beq.n	800362e <PolicySendData+0x2e6>
            {
                SetPEState(port, peSourceSendSoftReset);
 8003624:	2105      	movs	r1, #5
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f001 fd38 	bl	800509c <SetPEState>
 800362c:	e003      	b.n	8003636 <PolicySendData+0x2ee>
            }
            else
            {
                SetPEState(port, peSinkSendSoftReset);
 800362e:	211c      	movs	r1, #28
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f001 fd33 	bl	800509c <SetPEState>
            {
                port->cblRstState = CBL_RST_START;
            }
#endif /* FSC_HAVE_VDM */
        }
        Status = STAT_ERROR;
 8003636:	2302      	movs	r3, #2
 8003638:	77fb      	strb	r3, [r7, #31]
        break;
 800363a:	e02a      	b.n	8003692 <PolicySendData+0x34a>
    case txAbort:
        if (port->PolicyIsSource)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8003642:	2b00      	cmp	r3, #0
 8003644:	d004      	beq.n	8003650 <PolicySendData+0x308>
            SetPEState(port, peSourceReady);
 8003646:	210f      	movs	r1, #15
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f001 fd27 	bl	800509c <SetPEState>
 800364e:	e003      	b.n	8003658 <PolicySendData+0x310>
        else
            SetPEState(port, peSinkReady);
 8003650:	2124      	movs	r1, #36	; 0x24
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f001 fd22 	bl	800509c <SetPEState>

        Status = STAT_ABORT;
 8003658:	2303      	movs	r3, #3
 800365a:	77fb      	strb	r3, [r7, #31]
        port->PDTxStatus = txIdle;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2

        break;
 8003664:	e015      	b.n	8003692 <PolicySendData+0x34a>
    default:
        if (port->PolicyIsSource)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800366c:	2b00      	cmp	r3, #0
 800366e:	d004      	beq.n	800367a <PolicySendData+0x332>
            SetPEState(port, peSourceSendHardReset);
 8003670:	2103      	movs	r1, #3
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f001 fd12 	bl	800509c <SetPEState>
 8003678:	e003      	b.n	8003682 <PolicySendData+0x33a>
        else
            SetPEState(port, peSinkSendHardReset);
 800367a:	211a      	movs	r1, #26
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f001 fd0d 	bl	800509c <SetPEState>

        port->PDTxStatus = txReset;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
        Status = STAT_ERROR;
 800368a:	2302      	movs	r3, #2
 800368c:	77fb      	strb	r3, [r7, #31]
        break;
 800368e:	e000      	b.n	8003692 <PolicySendData+0x34a>
        break;
 8003690:	bf00      	nop
    }

    return Status;
 8003692:	7ffb      	ldrb	r3, [r7, #31]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3720      	adds	r7, #32
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <UpdateCapabilitiesRx>:

void UpdateCapabilitiesRx(Port_t *port, FSC_BOOL IsSourceCaps)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	70fb      	strb	r3, [r7, #3]
    FSC_U32 i;
    sopMainHeader_t *capsHeaderRecieved;
    doDataObject_t *capsReceived;

    if (IsSourceCaps == TRUE)
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d107      	bne.n	80036be <UpdateCapabilitiesRx+0x22>
    {
        capsHeaderRecieved = &port->SrcCapsHeaderReceived;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	33b2      	adds	r3, #178	; 0xb2
 80036b2:	613b      	str	r3, [r7, #16]
        capsReceived = port->SrcCapsReceived;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	e006      	b.n	80036cc <UpdateCapabilitiesRx+0x30>
    }
    else
    {
        capsHeaderRecieved = &port->SnkCapsHeaderReceived;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	33b4      	adds	r3, #180	; 0xb4
 80036c2:	613b      	str	r3, [r7, #16]
        capsReceived = port->SnkCapsReceived;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80036ca:	60fb      	str	r3, [r7, #12]
    }

    capsHeaderRecieved->word = port->PolicyRxHeader.word;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	801a      	strh	r2, [r3, #0]

    for (i = 0; i < capsHeaderRecieved->NumDataObjects; i++)
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	e00c      	b.n	80036f6 <UpdateCapabilitiesRx+0x5a>
        capsReceived[i].object = port->PolicyRxDataObj[i].object;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6979      	ldr	r1, [r7, #20]
 80036e8:	312e      	adds	r1, #46	; 0x2e
 80036ea:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80036ee:	601a      	str	r2, [r3, #0]
    for (i = 0; i < capsHeaderRecieved->NumDataObjects; i++)
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	3301      	adds	r3, #1
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	785b      	ldrb	r3, [r3, #1]
 80036fa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	4293      	cmp	r3, r2
 8003706:	d3e9      	bcc.n	80036dc <UpdateCapabilitiesRx+0x40>

    for (i = capsHeaderRecieved->NumDataObjects; i < 7; i++)
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	785b      	ldrb	r3, [r3, #1]
 800370c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003710:	b2db      	uxtb	r3, r3
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	e008      	b.n	8003728 <UpdateCapabilitiesRx+0x8c>
        capsReceived[i].object = 0;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4413      	add	r3, r2
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
    for (i = capsHeaderRecieved->NumDataObjects; i < 7; i++)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	3301      	adds	r3, #1
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2b06      	cmp	r3, #6
 800372c:	d9f3      	bls.n	8003716 <UpdateCapabilitiesRx+0x7a>

    port->PartnerCaps.object = capsReceived[0].object;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

#ifdef FSC_DEBUG
    /* Set the flag to indicate that the received capabilities are valid */
    port->SourceCapsUpdated = IsSourceCaps;
#endif /* FSC_DEBUG */
}
 8003738:	bf00      	nop
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr
	...

08003744 <PolicyGiveCountryCodes>:

#ifdef FSC_HAVE_EXT_MSG
void PolicyGiveCountryCodes(Port_t *port)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af04      	add	r7, sp, #16
 800374a:	6078      	str	r0, [r7, #4]
    FSC_U32 noCodes = gCountry_codes[0] | gCountry_codes[1] << 8;
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <PolicyGiveCountryCodes+0x50>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	4b10      	ldr	r3, [pc, #64]	; (8003794 <PolicyGiveCountryCodes+0x50>)
 8003754:	785b      	ldrb	r3, [r3, #1]
 8003756:	021b      	lsls	r3, r3, #8
 8003758:	4313      	orrs	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]

    PolicySendData(port, EXTCountryCodes, gCountry_codes, noCodes*2+2,
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	3301      	adds	r3, #1
 8003760:	005a      	lsls	r2, r3, #1
                   port->PolicyIsSource ? peSourceReady : peSinkReady, 0,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
    PolicySendData(port, EXTCountryCodes, gCountry_codes, noCodes*2+2,
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <PolicyGiveCountryCodes+0x2c>
 800376c:	230f      	movs	r3, #15
 800376e:	e000      	b.n	8003772 <PolicyGiveCountryCodes+0x2e>
 8003770:	2324      	movs	r3, #36	; 0x24
 8003772:	2101      	movs	r1, #1
 8003774:	9103      	str	r1, [sp, #12]
 8003776:	2100      	movs	r1, #0
 8003778:	9102      	str	r1, [sp, #8]
 800377a:	2100      	movs	r1, #0
 800377c:	9101      	str	r1, [sp, #4]
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	4613      	mov	r3, r2
 8003782:	4a04      	ldr	r2, [pc, #16]	; (8003794 <PolicyGiveCountryCodes+0x50>)
 8003784:	210e      	movs	r1, #14
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff fdde 	bl	8003348 <PolicySendData>
                   SOP_TYPE_SOP, TRUE);
}
 800378c:	bf00      	nop
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20000004 	.word	0x20000004

08003798 <PolicyGetCountryCodes>:

void PolicyGetCountryCodes(Port_t *port)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af02      	add	r7, sp, #8
 800379e:	6078      	str	r0, [r7, #4]
     PolicySendCommand(port, CMTGetCountryCodes,
                      port->PolicyIsSource ? peSourceReady : peSinkReady, 0,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
     PolicySendCommand(port, CMTGetCountryCodes,
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <PolicyGetCountryCodes+0x16>
 80037aa:	220f      	movs	r2, #15
 80037ac:	e000      	b.n	80037b0 <PolicyGetCountryCodes+0x18>
 80037ae:	2224      	movs	r2, #36	; 0x24
 80037b0:	2300      	movs	r3, #0
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	2300      	movs	r3, #0
 80037b6:	2115      	movs	r1, #21
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff fc87 	bl	80030cc <PolicySendCommand>
                      SOP_TYPE_SOP);
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <PolicyGiveCountryInfo>:

void PolicyGiveCountryInfo(Port_t *port)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b08a      	sub	sp, #40	; 0x28
 80037ca:	af04      	add	r7, sp, #16
 80037cc:	6078      	str	r0, [r7, #4]
    /* Allocate 4-byte buffer so we don't need a full 260 byte data */
    FSC_U8 buf[4] = {0};
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
    CountryInfoReq *req = (CountryInfoReq*)(port->PolicyRxDataObj);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	33b8      	adds	r3, #184	; 0xb8
 80037d6:	617b      	str	r3, [r7, #20]
    /* Echo the first to bytes of country code */
    CountryInfoResp *resp = (CountryInfoResp*)buf;
 80037d8:	f107 030c 	add.w	r3, r7, #12
 80037dc:	613b      	str	r3, [r7, #16]
    resp->CountryCode[1] = req->CountryCode[0];
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	789a      	ldrb	r2, [r3, #2]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	705a      	strb	r2, [r3, #1]
    resp->CountryCode[0] = req->CountryCode[1];
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	78da      	ldrb	r2, [r3, #3]
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	701a      	strb	r2, [r3, #0]
    resp->Reserved[0] = resp->Reserved[1] = 0;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2200      	movs	r2, #0
 80037f2:	70da      	strb	r2, [r3, #3]
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	78da      	ldrb	r2, [r3, #3]
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	709a      	strb	r2, [r3, #2]
    PolicySendData(port, EXTCountryInfo, resp, 4,
                   (port->PolicyIsSource == TRUE) ? peSourceReady : peSinkReady,
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
    PolicySendData(port, EXTCountryInfo, resp, 4,
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <PolicyGiveCountryInfo+0x44>
 8003806:	230f      	movs	r3, #15
 8003808:	e000      	b.n	800380c <PolicyGiveCountryInfo+0x46>
 800380a:	2324      	movs	r3, #36	; 0x24
 800380c:	2201      	movs	r2, #1
 800380e:	9203      	str	r2, [sp, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	9202      	str	r2, [sp, #8]
 8003814:	2200      	movs	r2, #0
 8003816:	9201      	str	r2, [sp, #4]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	2304      	movs	r3, #4
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	210d      	movs	r1, #13
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff fd91 	bl	8003348 <PolicySendData>
                   0, SOP_TYPE_SOP, TRUE);
}
 8003826:	bf00      	nop
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <PolicyGetPPSStatus>:
#endif /* FSC_HAVE_EXT_MSG */

#ifdef FSC_HAVE_EXT_MSG
void PolicyGetPPSStatus(Port_t *port)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af02      	add	r7, sp, #8
 8003834:	6078      	str	r0, [r7, #4]
    switch (port->PolicySubIndex)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800383c:	2b00      	cmp	r3, #0
 800383e:	d113      	bne.n	8003868 <PolicyGetPPSStatus+0x3a>
    {
    case 0:
        if (PolicySendCommand(port, CMTGetPPSStatus, peGetPPSStatus, 1,
 8003840:	2300      	movs	r3, #0
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	2301      	movs	r3, #1
 8003846:	2237      	movs	r2, #55	; 0x37
 8003848:	2114      	movs	r1, #20
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff fc3e 	bl	80030cc <PolicySendCommand>
 8003850:	4603      	mov	r3, r0
 8003852:	2b01      	cmp	r3, #1
 8003854:	d156      	bne.n	8003904 <PolicyGetPPSStatus+0xd6>
                              SOP_TYPE_SOP) == STAT_SUCCESS)
        {
            TimerStart(&port->PolicyStateTimer, tSenderResponse);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800385c:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 8003860:	4618      	mov	r0, r3
 8003862:	f002 ff97 	bl	8006794 <TimerStart>
        }
        break;
 8003866:	e04d      	b.n	8003904 <PolicyGetPPSStatus+0xd6>
    default:
        if (port->ProtocolMsgRx)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d02d      	beq.n	80038ce <PolicyGetPPSStatus+0xa0>
        {
            port->ProtocolMsgRx = FALSE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
            if ((port->PolicyRxHeader.NumDataObjects > 0) &&
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8003880:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d014      	beq.n	80038b4 <PolicyGetPPSStatus+0x86>
                (port->PolicyRxHeader.MessageType == EXTPPSStatus))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8003890:	f003 031f 	and.w	r3, r3, #31
 8003894:	b2db      	uxtb	r3, r3
            if ((port->PolicyRxHeader.NumDataObjects > 0) &&
 8003896:	2b0c      	cmp	r3, #12
 8003898:	d10c      	bne.n	80038b4 <PolicyGetPPSStatus+0x86>
            {
                SetPEState(port,
                           port->PolicyIsSource ? peSourceReady : peSinkReady);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
                SetPEState(port,
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <PolicyGetPPSStatus+0x7a>
 80038a4:	230f      	movs	r3, #15
 80038a6:	e000      	b.n	80038aa <PolicyGetPPSStatus+0x7c>
 80038a8:	2324      	movs	r3, #36	; 0x24
 80038aa:	4619      	mov	r1, r3
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f001 fbf5 	bl	800509c <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 80038b2:	e028      	b.n	8003906 <PolicyGetPPSStatus+0xd8>
                SetPEState(port, port->PolicyIsSource ?
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <PolicyGetPPSStatus+0x94>
 80038be:	2303      	movs	r3, #3
 80038c0:	e000      	b.n	80038c4 <PolicyGetPPSStatus+0x96>
 80038c2:	231a      	movs	r3, #26
 80038c4:	4619      	mov	r1, r3
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f001 fbe8 	bl	800509c <SetPEState>
        break;
 80038cc:	e01b      	b.n	8003906 <PolicyGetPPSStatus+0xd8>
        else if (TimerExpired(&port->PolicyStateTimer))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80038d4:	4618      	mov	r0, r3
 80038d6:	f002 ff98 	bl	800680a <TimerExpired>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00c      	beq.n	80038fa <PolicyGetPPSStatus+0xcc>
                       port->PolicyIsSource ? peSourceReady : peSinkReady);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
            SetPEState(port,
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <PolicyGetPPSStatus+0xc0>
 80038ea:	230f      	movs	r3, #15
 80038ec:	e000      	b.n	80038f0 <PolicyGetPPSStatus+0xc2>
 80038ee:	2324      	movs	r3, #36	; 0x24
 80038f0:	4619      	mov	r1, r3
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f001 fbd2 	bl	800509c <SetPEState>
        break;
 80038f8:	e005      	b.n	8003906 <PolicyGetPPSStatus+0xd8>
            port->PEIdle = TRUE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8003902:	e000      	b.n	8003906 <PolicyGetPPSStatus+0xd8>
        break;
 8003904:	bf00      	nop
    }
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <PolicyGivePPSStatus>:

void PolicyGivePPSStatus(Port_t *port)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b088      	sub	sp, #32
 8003914:	af04      	add	r7, sp, #16
 8003916:	6078      	str	r0, [r7, #4]
    PPSStatus_t ppsstatus;

    switch (port->PolicySubIndex)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <PolicyGivePPSStatus+0x18>
 8003922:	2b01      	cmp	r3, #1
 8003924:	d01a      	beq.n	800395c <PolicyGivePPSStatus+0x4c>
        PolicySendData(port, EXTPPSStatus, ppsstatus.byte, 4,
                       port->PolicyIsSource ? peSourceReady : peSinkReady, 0,
                       SOP_TYPE_SOP, TRUE);
        break;
    default:
        break;
 8003926:	e030      	b.n	800398a <PolicyGivePPSStatus+0x7a>
        ppsstatus.OutputVoltage = platform_get_pps_voltage(port->PortID) / 20;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800392e:	4618      	mov	r0, r3
 8003930:	f7fc fece 	bl	80006d0 <platform_get_pps_voltage>
 8003934:	4603      	mov	r3, r0
 8003936:	461a      	mov	r2, r3
 8003938:	4b16      	ldr	r3, [pc, #88]	; (8003994 <PolicyGivePPSStatus+0x84>)
 800393a:	fba3 2302 	umull	r2, r3, r3, r2
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	b29b      	uxth	r3, r3
 8003942:	81bb      	strh	r3, [r7, #12]
        ppsstatus.OutputCurrent = 0xFF; /* Not supported field for now */
 8003944:	23ff      	movs	r3, #255	; 0xff
 8003946:	73bb      	strb	r3, [r7, #14]
        ppsstatus.byte[3] = 0x00;
 8003948:	2300      	movs	r3, #0
 800394a:	73fb      	strb	r3, [r7, #15]
        port->PolicySubIndex++;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8003952:	3301      	adds	r3, #1
 8003954:	b2da      	uxtb	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
                       port->PolicyIsSource ? peSourceReady : peSinkReady, 0,
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
        PolicySendData(port, EXTPPSStatus, ppsstatus.byte, 4,
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <PolicyGivePPSStatus+0x5a>
 8003966:	230f      	movs	r3, #15
 8003968:	e000      	b.n	800396c <PolicyGivePPSStatus+0x5c>
 800396a:	2324      	movs	r3, #36	; 0x24
 800396c:	f107 020c 	add.w	r2, r7, #12
 8003970:	2101      	movs	r1, #1
 8003972:	9103      	str	r1, [sp, #12]
 8003974:	2100      	movs	r1, #0
 8003976:	9102      	str	r1, [sp, #8]
 8003978:	2100      	movs	r1, #0
 800397a:	9101      	str	r1, [sp, #4]
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	2304      	movs	r3, #4
 8003980:	210c      	movs	r1, #12
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff fce0 	bl	8003348 <PolicySendData>
        break;
 8003988:	bf00      	nop
    }
}
 800398a:	bf00      	nop
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	cccccccd 	.word	0xcccccccd

08003998 <policyBISTReceiveMode>:
#endif /* FSC_HAVE_EXT */

/* BIST Receive Mode */
void policyBISTReceiveMode(Port_t *port)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
    /* Tell protocol layer to go to BIST Receive Mode
     * Go to BIST_Frame_Received if a test frame is received
     * Transition to SRC_Transition_to_Default, SNK_Transition_to_Default,
     * or CBL_Ready when Hard_Reset received
     */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr

080039aa <policyBISTFrameReceived>:

void policyBISTFrameReceived(Port_t *port)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
    /* Consume BIST Transmit Test Frame if received
     * Transition back to BIST_Frame_Received when a BIST Test Frame
     * has been received. Transition to SRC_Transition_to_Default,
     * SNK_Transition_to_Default, or CBL_Ready when Hard_Reset received
     */
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr

080039bc <policyBISTCarrierMode2>:

/* BIST Carrier Mode and Eye Pattern */
void policyBISTCarrierMode2(Port_t *port)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
    switch (port->PolicySubIndex)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d035      	beq.n	8003a3a <policyBISTCarrierMode2+0x7e>
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d062      	beq.n	8003a98 <policyBISTCarrierMode2+0xdc>
    {
    default:
    case 0:
        /* Tell protocol layer to go to BIST_Carrier_Mode_2 */
        port->Registers.Control.BIST_MODE2 = 1;
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 80039d8:	f043 0310 	orr.w	r3, r3, #16
 80039dc:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
        DeviceWrite(port->I2cAddr, regControl1, 1,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3331      	adds	r3, #49	; 0x31
 80039ea:	2201      	movs	r2, #1
 80039ec:	2107      	movs	r1, #7
 80039ee:	f002 fe97 	bl	8006720 <DeviceWrite>
                    &port->Registers.Control.byte[1]);

        /* Set the bit to enable the transmitter */
        port->Registers.Control.TX_START = 1;
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        DeviceWrite(port->I2cAddr, regControl0, 1,
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3330      	adds	r3, #48	; 0x30
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	2106      	movs	r1, #6
 8003a0e:	f002 fe87 	bl	8006720 <DeviceWrite>
                    &port->Registers.Control.byte[0]);
        port->Registers.Control.TX_START = 0;
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8003a18:	f36f 0300 	bfc	r3, #0, #1
 8003a1c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30

        TimerStart(&port->PolicyStateTimer, tBISTContMode);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003a26:	f24c 3150 	movw	r1, #50000	; 0xc350
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f002 feb2 	bl	8006794 <TimerStart>

        port->PolicySubIndex = 1;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        break;
 8003a38:	e049      	b.n	8003ace <policyBISTCarrierMode2+0x112>
    case 1:
        /* Disable and wait on GoodCRC */
        if (TimerExpired(&port->PolicyStateTimer))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003a40:	4618      	mov	r0, r3
 8003a42:	f002 fee2 	bl	800680a <TimerExpired>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d020      	beq.n	8003a8e <policyBISTCarrierMode2+0xd2>
        {
            /* Disable BIST_Carrier_Mode_2 (PD_RESET does not do this) */
            port->Registers.Control.BIST_MODE2 = 0;
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8003a52:	f36f 1304 	bfc	r3, #4, #1
 8003a56:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
            DeviceWrite(port->I2cAddr, regControl1, 1,
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3331      	adds	r3, #49	; 0x31
 8003a64:	2201      	movs	r2, #1
 8003a66:	2107      	movs	r1, #7
 8003a68:	f002 fe5a 	bl	8006720 <DeviceWrite>
                        &port->Registers.Control.byte[1]);

            /* Delay to allow preamble to finish */
            TimerStart(&port->PolicyStateTimer, tGoodCRCDelay);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003a72:	f241 3188 	movw	r1, #5000	; 0x1388
 8003a76:	4618      	mov	r0, r3
 8003a78:	f002 fe8c 	bl	8006794 <TimerStart>

            port->PolicySubIndex++;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8003a82:	3301      	adds	r3, #1
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 8003a8c:	e01f      	b.n	8003ace <policyBISTCarrierMode2+0x112>
            port->PEIdle = TRUE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8003a96:	e01a      	b.n	8003ace <policyBISTCarrierMode2+0x112>
    case 2:
        /* Transition to SRC_Transition_to_Default, SNK_Transition_to_Default,
         * or CBL_Ready when BISTContModeTimer times out
         */
        if (TimerExpired(&port->PolicyStateTimer))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f002 feb3 	bl	800680a <TimerExpired>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00c      	beq.n	8003ac4 <policyBISTCarrierMode2+0x108>
        {
            ProtocolFlushTxFIFO(port);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f001 f9ca 	bl	8004e44 <ProtocolFlushTxFIFO>

            if (port->PolicyIsSource)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d108      	bne.n	8003acc <policyBISTCarrierMode2+0x110>
#endif /* FSC_HAVE_SRC || (FSC_HAVE_SNK && FSC_HAVE_ACCMODE) */
            }
            else
            {
#ifdef FSC_HAVE_SNK
                SetPEState(port, peSinkSendHardReset);
 8003aba:	211a      	movs	r1, #26
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f001 faed 	bl	800509c <SetPEState>
        }
        else
        {
            port->PEIdle = TRUE;
        }
        break;
 8003ac2:	e003      	b.n	8003acc <policyBISTCarrierMode2+0x110>
            port->PEIdle = TRUE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8003acc:	bf00      	nop
    }

}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <policyBISTTestData>:

void policyBISTTestData(Port_t *port)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
    if (port->Registers.DeviceID.VERSION_ID == VERSION_302A)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ae4:	f023 030f 	bic.w	r3, r3, #15
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b80      	cmp	r3, #128	; 0x80
 8003aec:	d108      	bne.n	8003b00 <policyBISTTestData+0x2a>
    {
        /* Set the bit for RX_FLUSH when the state machine is woken up here */
        DeviceWrite(port->I2cAddr, regControl1, 1,
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3331      	adds	r3, #49	; 0x31
 8003af8:	2201      	movs	r2, #1
 8003afa:	2107      	movs	r1, #7
 8003afc:	f002 fe10 	bl	8006720 <DeviceWrite>
                    &port->Registers.Control.byte[1]);
    }

    /* Waiting for HR */
    port->PEIdle = TRUE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <TokenToSopType>:

#endif /* FSC_HAVE_VDM */

/* This function is FUSB302 specific */
SopType TokenToSopType(FSC_U8 data)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	71fb      	strb	r3, [r7, #7]
    SopType ret;
    FSC_U8 maskedSop = data & 0xE0;
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	f023 031f 	bic.w	r3, r3, #31
 8003b20:	73bb      	strb	r3, [r7, #14]

    if (maskedSop == SOP_CODE_SOP)              ret = SOP_TYPE_SOP;
 8003b22:	7bbb      	ldrb	r3, [r7, #14]
 8003b24:	2be0      	cmp	r3, #224	; 0xe0
 8003b26:	d102      	bne.n	8003b2e <TokenToSopType+0x1e>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	73fb      	strb	r3, [r7, #15]
 8003b2c:	e019      	b.n	8003b62 <TokenToSopType+0x52>
    else if (maskedSop == SOP_CODE_SOP1)        ret = SOP_TYPE_SOP1;
 8003b2e:	7bbb      	ldrb	r3, [r7, #14]
 8003b30:	2bc0      	cmp	r3, #192	; 0xc0
 8003b32:	d102      	bne.n	8003b3a <TokenToSopType+0x2a>
 8003b34:	2301      	movs	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
 8003b38:	e013      	b.n	8003b62 <TokenToSopType+0x52>
    else if (maskedSop == SOP_CODE_SOP2)        ret = SOP_TYPE_SOP2;
 8003b3a:	7bbb      	ldrb	r3, [r7, #14]
 8003b3c:	2ba0      	cmp	r3, #160	; 0xa0
 8003b3e:	d102      	bne.n	8003b46 <TokenToSopType+0x36>
 8003b40:	2302      	movs	r3, #2
 8003b42:	73fb      	strb	r3, [r7, #15]
 8003b44:	e00d      	b.n	8003b62 <TokenToSopType+0x52>
    else if (maskedSop == SOP_CODE_SOP1_DEBUG)  ret = SOP_TYPE_SOP2_DEBUG;
 8003b46:	7bbb      	ldrb	r3, [r7, #14]
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	d102      	bne.n	8003b52 <TokenToSopType+0x42>
 8003b4c:	2304      	movs	r3, #4
 8003b4e:	73fb      	strb	r3, [r7, #15]
 8003b50:	e007      	b.n	8003b62 <TokenToSopType+0x52>
    else if (maskedSop == SOP_CODE_SOP2_DEBUG)  ret = SOP_TYPE_SOP2_DEBUG;
 8003b52:	7bbb      	ldrb	r3, [r7, #14]
 8003b54:	2b60      	cmp	r3, #96	; 0x60
 8003b56:	d102      	bne.n	8003b5e <TokenToSopType+0x4e>
 8003b58:	2304      	movs	r3, #4
 8003b5a:	73fb      	strb	r3, [r7, #15]
 8003b5c:	e001      	b.n	8003b62 <TokenToSopType+0x52>
    else                                        ret = SOP_TYPE_ERROR;
 8003b5e:	23ff      	movs	r3, #255	; 0xff
 8003b60:	73fb      	strb	r3, [r7, #15]

    return ret;
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr
	...

08003b70 <processDMTBIST>:

void processDMTBIST(Port_t *port)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
    FSC_U8 bdo = port->PolicyRxDataObj[0].byte[3] >> 4;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8003b7e:	091b      	lsrs	r3, r3, #4
 8003b80:	73fb      	strb	r3, [r7, #15]

    notify_observers(BIST_ENABLED, port->I2cAddr, 0);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b88:	2200      	movs	r2, #0
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003b90:	f003 f886 	bl	8006ca0 <notify_observers>

    switch (bdo)
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	2b05      	cmp	r3, #5
 8003b98:	d121      	bne.n	8003bde <processDMTBIST+0x6e>
    {
    case BDO_BIST_Carrier_Mode_2:
        /* Only enter BIST for 5V contract */
        if (DPM_GetSourceCap(port->dpm, port)[
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f002 ffb8 	bl	8006b16 <DPM_GetSourceCap>
 8003ba6:	4602      	mov	r2, r0
                port->USBPDContract.FVRDO.ObjectPosition - 1].FPDOSupply.Voltage
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003bae:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003bb2:	b2db      	uxtb	r3, r3
        if (DPM_GetSourceCap(port->dpm, port)[
 8003bb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
                == 100)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	4b4b      	ldr	r3, [pc, #300]	; (8003cf0 <processDMTBIST+0x180>)
 8003bc2:	4013      	ands	r3, r2
        if (DPM_GetSourceCap(port->dpm, port)[
 8003bc4:	f5b3 3fc8 	cmp.w	r3, #102400	; 0x19000
 8003bc8:	f040 808d 	bne.w	8003ce6 <processDMTBIST+0x176>
        {
            SetPEState(port, PE_BIST_Carrier_Mode_2);
 8003bcc:	2175      	movs	r1, #117	; 0x75
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f001 fa64 	bl	800509c <SetPEState>
            port->ProtocolState = PRLIdle;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        }

        /* Don't idle here - mode setup in next state */
        break;
 8003bdc:	e083      	b.n	8003ce6 <processDMTBIST+0x176>
    case BDO_BIST_Test_Data:
    default:
        /* Only enter BIST for 5V contract */
        if (DPM_GetSourceCap(port->dpm, port)[
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f002 ff96 	bl	8006b16 <DPM_GetSourceCap>
 8003bea:	4602      	mov	r2, r0
                port->USBPDContract.FVRDO.ObjectPosition - 1].FPDOSupply.Voltage
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003bf2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003bf6:	b2db      	uxtb	r3, r3
        if (DPM_GetSourceCap(port->dpm, port)[
 8003bf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
                == 100)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4b3a      	ldr	r3, [pc, #232]	; (8003cf0 <processDMTBIST+0x180>)
 8003c06:	4013      	ands	r3, r2
        if (DPM_GetSourceCap(port->dpm, port)[
 8003c08:	f5b3 3fc8 	cmp.w	r3, #102400	; 0x19000
 8003c0c:	d166      	bne.n	8003cdc <processDMTBIST+0x16c>
        {
            if (port->Registers.DeviceID.VERSION_ID == VERSION_302A)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c14:	f023 030f 	bic.w	r3, r3, #15
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b80      	cmp	r3, #128	; 0x80
 8003c1c:	d146      	bne.n	8003cac <processDMTBIST+0x13c>
            {
                /* Mask for VBUS and Hard Reset */
                port->Registers.Mask.byte = 0xFF;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	22ff      	movs	r2, #255	; 0xff
 8003c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                port->Registers.Mask.M_VBUSOK = 0;
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8003c2c:	f36f 13c7 	bfc	r3, #7, #1
 8003c30:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                port->Registers.Mask.M_COMP_CHNG = 0;
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8003c3a:	f36f 1345 	bfc	r3, #5, #1
 8003c3e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                DeviceWrite(port->I2cAddr, regMask, 1,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3334      	adds	r3, #52	; 0x34
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	210a      	movs	r1, #10
 8003c50:	f002 fd66 	bl	8006720 <DeviceWrite>
                            &port->Registers.Mask.byte);
                port->Registers.MaskAdv.byte[0] = 0xFF;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	22ff      	movs	r2, #255	; 0xff
 8003c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                port->Registers.MaskAdv.M_HARDRST = 0;
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8003c62:	f36f 0300 	bfc	r3, #0, #1
 8003c66:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
                DeviceWrite(port->I2cAddr, regMaska, 1,
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3338      	adds	r3, #56	; 0x38
 8003c74:	2201      	movs	r2, #1
 8003c76:	210e      	movs	r1, #14
 8003c78:	f002 fd52 	bl	8006720 <DeviceWrite>
                            &port->Registers.MaskAdv.byte[0]);
                port->Registers.MaskAdv.M_GCRCSENT = 1;
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
                DeviceWrite(port->I2cAddr, regMaskb, 1,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3339      	adds	r3, #57	; 0x39
 8003c94:	2201      	movs	r2, #1
 8003c96:	210f      	movs	r1, #15
 8003c98:	f002 fd42 	bl	8006720 <DeviceWrite>
                            &port->Registers.MaskAdv.byte[1]);

                /* Enable RxFIFO flushing */
                port->Registers.Control.RX_FLUSH = 1;
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8003ca2:	f043 0304 	orr.w	r3, r3, #4
 8003ca6:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
 8003caa:	e00f      	b.n	8003ccc <processDMTBIST+0x15c>
                /* TODO - Does this need a write? */
            }
            else
            {
                /* Auto-flush RxFIFO */
                port->Registers.Control.BIST_TMODE = 1;
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8003cb2:	f043 0320 	orr.w	r3, r3, #32
 8003cb6:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                DeviceWrite(port->I2cAddr, regControl3, 1,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3333      	adds	r3, #51	; 0x33
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	2109      	movs	r1, #9
 8003cc8:	f002 fd2a 	bl	8006720 <DeviceWrite>
                            &port->Registers.Control.byte[3]);
            }

            SetPEState(port, PE_BIST_Test_Data);
 8003ccc:	2176      	movs	r1, #118	; 0x76
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f001 f9e4 	bl	800509c <SetPEState>

            /* Disable Protocol layer so we don't read FIFO */
            port->ProtocolState = PRLDisabled;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        }

        port->PEIdle = TRUE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        break;
 8003ce4:	e000      	b.n	8003ce8 <processDMTBIST+0x178>
        break;
 8003ce6:	bf00      	nop
    }
}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	000ffc00 	.word	0x000ffc00

08003cf4 <USBPDProtocol>:
#include "bitfield_translators.h"
#endif /* FSC_HAVE_VDM */

/* USB PD Protocol Layer Routines */
void USBPDProtocol(Port_t *port)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
    if ((port->Registers.Status.I_HARDRST ||
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d107      	bne.n	8003d1c <USBPDProtocol+0x28>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d01a      	beq.n	8003d52 <USBPDProtocol+0x5e>
        port->Registers.Status.I_HARDSENT))
    {
        ResetProtocolLayer(port, TRUE);
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f001 f8a8 	bl	8004e74 <ResetProtocolLayer>
        if (port->PolicyIsSource)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00c      	beq.n	8003d48 <USBPDProtocol+0x54>
        {
            TimerStart(&port->PolicyStateTimer, tPSHardReset);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003d34:	f247 5130 	movw	r1, #30000	; 0x7530
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f002 fd2b 	bl	8006794 <TimerStart>
            SetPEState(port, peSourceTransitionDefault);
 8003d3e:	210a      	movs	r1, #10
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f001 f9ab 	bl	800509c <SetPEState>
        if (port->PolicyIsSource)
 8003d46:	e03a      	b.n	8003dbe <USBPDProtocol+0xca>
        }
        else
        {
          SetPEState(port, peSinkTransitionDefault);
 8003d48:	211d      	movs	r1, #29
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f001 f9a6 	bl	800509c <SetPEState>
        if (port->PolicyIsSource)
 8003d50:	e035      	b.n	8003dbe <USBPDProtocol+0xca>
            StoreUSBPDToken(port, FALSE, pdtHardResetRxd);
#endif /* FSC_DEBUG */
    }
    else
    {
        switch (port->ProtocolState)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8003d58:	2b07      	cmp	r3, #7
 8003d5a:	d82f      	bhi.n	8003dbc <USBPDProtocol+0xc8>
 8003d5c:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <USBPDProtocol+0x70>)
 8003d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d62:	bf00      	nop
 8003d64:	08003dbd 	.word	0x08003dbd
 8003d68:	08003da5 	.word	0x08003da5
 8003d6c:	08003d85 	.word	0x08003d85
 8003d70:	08003d9d 	.word	0x08003d9d
 8003d74:	08003dbd 	.word	0x08003dbd
 8003d78:	08003dad 	.word	0x08003dad
 8003d7c:	08003dbd 	.word	0x08003dbd
 8003d80:	08003db5 	.word	0x08003db5
        {
        case PRLReset:
            /* Sending a hard reset. */
            ProtocolSendHardReset(port);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f001 f823 	bl	8004dd0 <ProtocolSendHardReset>
            port->PDTxStatus = txWait;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2204      	movs	r2, #4
 8003d8e:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
            port->ProtocolState = PRLResetWait;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2203      	movs	r2, #3
 8003d96:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
            break;
 8003d9a:	e010      	b.n	8003dbe <USBPDProtocol+0xca>
        case PRLResetWait:
            /* Wait on hard reset signaling */
            ProtocolResetWait(port);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f87b 	bl	8003e98 <ProtocolResetWait>
            break;
 8003da2:	e00c      	b.n	8003dbe <USBPDProtocol+0xca>
        case PRLIdle:
            /* Wait on Tx/Rx */
            ProtocolIdle(port);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f80f 	bl	8003dc8 <ProtocolIdle>
            break;
 8003daa:	e008      	b.n	8003dbe <USBPDProtocol+0xca>
        case PRLTxSendingMessage:
            /* Wait on Tx to finish */
            ProtocolSendingMessage(port);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fda6 	bl	80048fe <ProtocolSendingMessage>
            break;
 8003db2:	e004      	b.n	8003dbe <USBPDProtocol+0xca>
        case PRLTxVerifyGoodCRC:
            /* Verify returned GoodCRC */
            ProtocolVerifyGoodCRC(port);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fe1f 	bl	80049f8 <ProtocolVerifyGoodCRC>
            break;
 8003dba:	e000      	b.n	8003dbe <USBPDProtocol+0xca>
        case PRLDisabled:
            break;
        default:
            break;
 8003dbc:	bf00      	nop
        }
    }
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop

08003dc8 <ProtocolIdle>:
    StoreUSBPDToken(port, TRUE, pdtCableReset);
#endif /* FSC_DEBUG */
}

void ProtocolIdle(Port_t *port)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
    if (port->PDTxStatus == txReset)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d104      	bne.n	8003de4 <ProtocolIdle+0x1c>
    {
        /* Need to send a reset? */
        port->ProtocolState = PRLReset;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    else if (port->ExtTxOrRx != NoXfer && port->ExtWaitTxRx == FALSE)
    {
        port->PDTxStatus = txSend;
    }
#endif /* FSC_HAVE_EXT_MSG */
}
 8003de2:	e055      	b.n	8003e90 <ProtocolIdle+0xc8>
    else if (port->Registers.Status.I_CRC_CHK || port->ProtocolMsgRxPending)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d104      	bne.n	8003dfe <ProtocolIdle+0x36>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 31c4 	ldrb.w	r3, [r3, #452]	; 0x1c4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d021      	beq.n	8003e42 <ProtocolIdle+0x7a>
        if (port->DoTxFlush)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3250 	ldrb.w	r3, [r3, #592]	; 0x250
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d006      	beq.n	8003e16 <ProtocolIdle+0x4e>
            ProtocolFlushTxFIFO(port);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f001 f81b 	bl	8004e44 <ProtocolFlushTxFIFO>
            port->DoTxFlush = FALSE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
        if (!port->ProtocolMsgRx)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d104      	bne.n	8003e2a <ProtocolIdle+0x62>
            ProtocolGetRxPacket(port, FALSE);
 8003e20:	2100      	movs	r1, #0
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f851 	bl	8003eca <ProtocolGetRxPacket>
 8003e28:	e003      	b.n	8003e32 <ProtocolIdle+0x6a>
            port->ProtocolMsgRxPending = TRUE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
        port->Registers.Status.I_CRC_CHK = 0;
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 8003e38:	f36f 1304 	bfc	r3, #4, #1
 8003e3c:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
 8003e40:	e026      	b.n	8003e90 <ProtocolIdle+0xc8>
    else if (port->PDTxStatus == txSend)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d112      	bne.n	8003e72 <ProtocolIdle+0xaa>
        if (port->ProtocolMsgRx || port->ProtocolMsgRxPending)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d104      	bne.n	8003e60 <ProtocolIdle+0x98>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 31c4 	ldrb.w	r3, [r3, #452]	; 0x1c4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d004      	beq.n	8003e6a <ProtocolIdle+0xa2>
            port->PDTxStatus = txAbort;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2208      	movs	r2, #8
 8003e64:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
 8003e68:	e012      	b.n	8003e90 <ProtocolIdle+0xc8>
            ProtocolTransmitMessage(port);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fb21 	bl	80044b2 <ProtocolTransmitMessage>
}
 8003e70:	e00e      	b.n	8003e90 <ProtocolIdle+0xc8>
    else if (port->ExtTxOrRx != NoXfer && port->ExtWaitTxRx == FALSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d009      	beq.n	8003e90 <ProtocolIdle+0xc8>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 32fa 	ldrb.w	r3, [r3, #762]	; 0x2fa
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d104      	bne.n	8003e90 <ProtocolIdle+0xc8>
        port->PDTxStatus = txSend;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2202      	movs	r2, #2
 8003e8a:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
}
 8003e8e:	e7ff      	b.n	8003e90 <ProtocolIdle+0xc8>
 8003e90:	bf00      	nop
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <ProtocolResetWait>:

void ProtocolResetWait(Port_t *port)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
    if (port->Registers.Status.I_HARDSENT)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <ProtocolResetWait+0x28>
    {
        port->ProtocolState = PRLIdle;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        port->PDTxStatus = txSuccess;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2205      	movs	r2, #5
 8003ebc:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
    }
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc80      	pop	{r7}
 8003ec8:	4770      	bx	lr

08003eca <ProtocolGetRxPacket>:

void ProtocolGetRxPacket(Port_t *port, FSC_BOOL HeaderReceived)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b086      	sub	sp, #24
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	70fb      	strb	r3, [r7, #3]
#ifdef FSC_DEBUG
    sopMainHeader_t logHeader;
#endif /* FSC_DEBUG */
    FSC_U32 i = 0, j = 0;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	2300      	movs	r3, #0
 8003edc:	613b      	str	r3, [r7, #16]
    FSC_U8 data[4];

    port->ProtocolMsgRxPending = FALSE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4

    TimerDisable(&port->ProtocolTimer);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8003eec:	4618      	mov	r0, r3
 8003eee:	f002 fc6c 	bl	80067ca <TimerDisable>

    /* Update to make sure GetRxPacket can see a valid RxEmpty value */
    DeviceRead(port->I2cAddr, regStatus1, 1,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3341      	adds	r3, #65	; 0x41
 8003efc:	2201      	movs	r2, #1
 8003efe:	2141      	movs	r1, #65	; 0x41
 8003f00:	f002 fc2b 	bl	800675a <DeviceRead>
               &port->Registers.Status.byte[5]);

    if (port->Registers.Status.RX_EMPTY == 1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f040 82c8 	bne.w	80044a6 <ProtocolGetRxPacket+0x5dc>
    {
        /* Nothing to see here... */
        return;
    }

    if (HeaderReceived == FALSE)
 8003f16:	78fb      	ldrb	r3, [r7, #3]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d119      	bne.n	8003f50 <ProtocolGetRxPacket+0x86>
    {
        /* Read the Rx token and two header bytes */
        DeviceRead(port->I2cAddr, regFIFO, 3, &data[0]);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8003f22:	f107 030c 	add.w	r3, r7, #12
 8003f26:	2203      	movs	r2, #3
 8003f28:	2143      	movs	r1, #67	; 0x43
 8003f2a:	f002 fc16 	bl	800675a <DeviceRead>
        port->PolicyRxHeader.byte[0] = data[1];
 8003f2e:	7b7a      	ldrb	r2, [r7, #13]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
        port->PolicyRxHeader.byte[1] = data[2];
 8003f36:	7bba      	ldrb	r2, [r7, #14]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad

        /* Figure out what SOP* the data came in on */
        port->ProtocolMsgRxSop = TokenToSopType(data[0]);
 8003f3e:	7b3b      	ldrb	r3, [r7, #12]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff fde5 	bl	8003b10 <TokenToSopType>
 8003f46:	4603      	mov	r3, r0
 8003f48:	461a      	mov	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
    /* The FUSB302B doesn't send an automatic GoodCRC for this message,
     * so this fix tries to send a fast manual GoodCRC.  Depending on how fast
     * this code is run, it might be a bit late or it might occur after
     * a retry of the GSCE message.
     */
    if (port->PolicyRxHeader.NumDataObjects == 0 &&
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8003f56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d164      	bne.n	800402a <ProtocolGetRxPacket+0x160>
        port->PolicyRxHeader.MessageType == CMTGetSourceCapExt)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8003f66:	f003 031f 	and.w	r3, r3, #31
 8003f6a:	b2db      	uxtb	r3, r3
    if (port->PolicyRxHeader.NumDataObjects == 0 &&
 8003f6c:	2b11      	cmp	r3, #17
 8003f6e:	d15c      	bne.n	800402a <ProtocolGetRxPacket+0x160>
    {
        /* Pre-load manual GoodCRC */
        port->PolicyTxHeader.word = 0;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
        port->PolicyTxHeader.MessageType = CMTGoodCRC;
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 8003f7e:	2101      	movs	r1, #1
 8003f80:	f361 0304 	bfi	r3, r1, #0, #5
 8003f84:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
        port->PolicyTxHeader.PortDataRole = port->PolicyIsDFP;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	b2d9      	uxtb	r1, r3
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 8003f9a:	f361 1345 	bfi	r3, r1, #5, #1
 8003f9e:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
        port->PolicyTxHeader.PortPowerRole = port->PolicyIsSource;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	b2d9      	uxtb	r1, r3
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 8003fb4:	f361 0300 	bfi	r3, r1, #0, #1
 8003fb8:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
        port->PolicyTxHeader.SpecRevision = USBPDSPECREV2p0;
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	f361 1387 	bfi	r3, r1, #6, #2
 8003fc8:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
        port->PolicyTxHeader.MessageID = port->PolicyRxHeader.MessageID;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8003fd2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8003fd6:	b2d9      	uxtb	r1, r3
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 8003fde:	f361 0343 	bfi	r3, r1, #1, #3
 8003fe2:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
        ProtocolSendGoodCRC(port, SOP_TYPE_SOP);
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 fdb2 	bl	8004b52 <ProtocolSendGoodCRC>

        /* Transmit pre-loaded GoodCRC msg */
        port->Registers.Control.TX_START = 1;
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        DeviceWrite(port->I2cAddr, regControl0, 1,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3330      	adds	r3, #48	; 0x30
 8004006:	2201      	movs	r2, #1
 8004008:	2106      	movs	r1, #6
 800400a:	f002 fb89 	bl	8006720 <DeviceWrite>
                    &port->Registers.Control.byte[0]);
        port->Registers.Control.TX_START = 0;
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8004014:	f36f 0300 	bfc	r3, #0, #1
 8004018:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30

        /* Brief delay to allow the GoodCRC to transmit */
        platform_delay_10us(50);
 800401c:	2032      	movs	r0, #50	; 0x32
 800401e:	f7fc fbed 	bl	80007fc <platform_delay_10us>

        /* Flush any retries that may have made it into the buffer */
        ProtocolFlushRxFIFO(port);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fef6 	bl	8004e14 <ProtocolFlushRxFIFO>
 8004028:	e002      	b.n	8004030 <ProtocolGetRxPacket+0x166>
         * be no longer than 700us later
         */
        /* I_GCRCSENT can be missed (rare), so this is a simple delay
         * instead of a re-read of the interrupt register.
         */
        platform_delay_10us(70); /* 700us */
 800402a:	2046      	movs	r0, #70	; 0x46
 800402c:	f7fc fbe6 	bl	80007fc <platform_delay_10us>
    logHeader.PortPowerRole = port->PolicyIsSource;
    logHeader.SpecRevision = DPM_SpecRev(port, port->ProtocolMsgRxSop);
    logHeader.MessageID = port->PolicyRxHeader.MessageID;
#endif /* FSC_DEBUG */

    if (port->ProtocolMsgRxSop == SOP_TYPE_ERROR)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 8004036:	2bff      	cmp	r3, #255	; 0xff
 8004038:	f000 8237 	beq.w	80044aa <ProtocolGetRxPacket+0x5e0>
         * TODO - Flush?
         */
        return;
    }

    if ((port->PolicyRxHeader.NumDataObjects == 0) &&
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8004042:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d11e      	bne.n	800408a <ProtocolGetRxPacket+0x1c0>
        (port->PolicyRxHeader.MessageType == CMTSoftReset))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8004052:	f003 031f 	and.w	r3, r3, #31
 8004056:	b2db      	uxtb	r3, r3
    if ((port->PolicyRxHeader.NumDataObjects == 0) &&
 8004058:	2b0d      	cmp	r3, #13
 800405a:	d116      	bne.n	800408a <ProtocolGetRxPacket+0x1c0>
    {
        /* For a soft reset, reset ID's, etc. */
        port->MessageIDCounter[port->ProtocolMsgRxSop] = 0;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 8004062:	461a      	mov	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4413      	add	r3, r2
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
        port->MessageID[port->ProtocolMsgRxSop] = 0xFF;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 8004074:	461a      	mov	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4413      	add	r3, r2
 800407a:	22ff      	movs	r2, #255	; 0xff
 800407c:	f883 224b 	strb.w	r2, [r3, #587]	; 0x24b
        port->ProtocolMsgRx = TRUE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
 8004088:	e023      	b.n	80040d2 <ProtocolGetRxPacket+0x208>
#ifdef FSC_DEBUG
        port->SourceCapsUpdated = TRUE;
#endif /* FSC_DEBUG */
    }
    else if (port->PolicyRxHeader.MessageID !=
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8004090:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004094:	b2db      	uxtb	r3, r3
 8004096:	461a      	mov	r2, r3
             port->MessageID[port->ProtocolMsgRxSop])
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 800409e:	4619      	mov	r1, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	440b      	add	r3, r1
 80040a4:	f893 324b 	ldrb.w	r3, [r3, #587]	; 0x24b
    else if (port->PolicyRxHeader.MessageID !=
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d012      	beq.n	80040d2 <ProtocolGetRxPacket+0x208>
    {
        port->MessageID[port->ProtocolMsgRxSop] =
            port->PolicyRxHeader.MessageID;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80040b2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80040b6:	b2d9      	uxtb	r1, r3
        port->MessageID[port->ProtocolMsgRxSop] =
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 80040be:	461a      	mov	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4413      	add	r3, r2
 80040c4:	460a      	mov	r2, r1
 80040c6:	f883 224b 	strb.w	r2, [r3, #587]	; 0x24b
        port->ProtocolMsgRx = TRUE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
    }

    if ((port->PolicyRxHeader.NumDataObjects == 0) &&
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80040d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d121      	bne.n	8004126 <ProtocolGetRxPacket+0x25c>
        (port->PolicyRxHeader.MessageType == CMTGoodCRC))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80040e8:	f003 031f 	and.w	r3, r3, #31
 80040ec:	b2db      	uxtb	r3, r3
    if ((port->PolicyRxHeader.NumDataObjects == 0) &&
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d119      	bne.n	8004126 <ProtocolGetRxPacket+0x25c>
        /* Rare cases may result in the next GoodCRC being processed before
         * the expected current message.  Handle and continue on to next msg.
         */

        /* Read out the 4 CRC bytes to move the address to the next packet */
        DeviceRead(port->I2cAddr, regFIFO, 4, data);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80040f8:	f107 030c 	add.w	r3, r7, #12
 80040fc:	2204      	movs	r2, #4
 80040fe:	2143      	movs	r1, #67	; 0x43
 8004100:	f002 fb2b 	bl	800675a <DeviceRead>

        port->ProtocolState = PRLIdle;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        port->PDTxStatus = txSuccess;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2205      	movs	r2, #5
 8004110:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
        port->ProtocolMsgRx = FALSE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3

        ProtocolGetRxPacket(port, FALSE);
 800411c:	2100      	movs	r1, #0
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff fed3 	bl	8003eca <ProtocolGetRxPacket>

        return;
 8004124:	e1c2      	b.n	80044ac <ProtocolGetRxPacket+0x5e2>
    }
    else if (port->PolicyRxHeader.NumDataObjects > 0)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800412c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 812b 	beq.w	800438e <ProtocolGetRxPacket+0x4c4>
    {
        /* Data message - Grab the data from the FIFO, including 4 byte CRC */
        DeviceRead(port->I2cAddr, regFIFO,
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
                   ((port->PolicyRxHeader.NumDataObjects << 2) + 4),
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8004144:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004148:	b2db      	uxtb	r3, r3
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	b2db      	uxtb	r3, r3
        DeviceRead(port->I2cAddr, regFIFO,
 800414e:	3304      	adds	r3, #4
 8004150:	b2da      	uxtb	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f203 2306 	addw	r3, r3, #518	; 0x206
 8004158:	2143      	movs	r1, #67	; 0x43
 800415a:	f002 fafe 	bl	800675a <DeviceRead>
                   &port->ProtocolRxBuffer[0]);

#ifdef FSC_HAVE_EXT_MSG
        if (port->PolicyRxHeader.Extended == 1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8004164:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d066      	beq.n	800423c <ProtocolGetRxPacket+0x372>
        {
            /* Copy ext header first */
            port->ExtRxHeader.byte[0] = port->ProtocolRxBuffer[0];
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 2206 	ldrb.w	r2, [r3, #518]	; 0x206
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
            port->ExtRxHeader.byte[1] = port->ProtocolRxBuffer[1];
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 2207 	ldrb.w	r2, [r3, #519]	; 0x207
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

            if (port->ExtRxHeader.ReqChunk == 1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d028      	beq.n	80041e8 <ProtocolGetRxPacket+0x31e>
            {
                /* Received request for another chunk. Continue sending....*/
                port->ExtWaitTxRx = FALSE;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
                if (port->ExtRxHeader.ChunkNum < port->ExtChunkNum)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80041a4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	461a      	mov	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80041b2:	429a      	cmp	r2, r3
 80041b4:	da42      	bge.n	800423c <ProtocolGetRxPacket+0x372>
                {
                    /* Resend the previous chunk */
                    port->ExtChunkNum = port->ExtRxHeader.ChunkNum;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80041bc:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	461a      	mov	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
                    port->ExtChunkOffset =
                        port->ExtChunkNum * EXT_MAX_MSG_LEGACY_LEN;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
                    port->ExtChunkOffset =
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	461a      	mov	r2, r3
 80041d4:	0052      	lsls	r2, r2, #1
 80041d6:	441a      	add	r2, r3
 80041d8:	0092      	lsls	r2, r2, #2
 80041da:	4413      	add	r3, r2
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
 80041e6:	e029      	b.n	800423c <ProtocolGetRxPacket+0x372>
                }
            }
            else
            {
                if (port->ExtRxHeader.DataSize > EXT_MAX_MSG_LEGACY_LEN)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 80041ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b1a      	cmp	r3, #26
 80041f6:	d921      	bls.n	800423c <ProtocolGetRxPacket+0x372>
                {
                    if (port->ExtRxHeader.DataSize > 260)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 80041fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004202:	b29b      	uxth	r3, r3
 8004204:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004208:	d908      	bls.n	800421c <ProtocolGetRxPacket+0x352>
                    {
                        port->ExtRxHeader.DataSize = 260;
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	f8b2 32f8 	ldrh.w	r3, [r2, #760]	; 0x2f8
 8004210:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004214:	f361 0308 	bfi	r3, r1, #0, #9
 8004218:	f8a2 32f8 	strh.w	r3, [r2, #760]	; 0x2f8
                    }
                    if (port->ExtRxHeader.ChunkNum == 0)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004222:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d107      	bne.n	800423c <ProtocolGetRxPacket+0x372>
                    {
                        port->ExtChunkOffset = 0;   /* First message */
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
                        port->ExtChunkNum = 1;      /* Next chunk number */
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
                    }
                }
            }
        }
#endif /* FSC_HAVE_EXT_MSG */
        for (i = 0; i < port->PolicyRxHeader.NumDataObjects; i++)
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	e04d      	b.n	80042de <ProtocolGetRxPacket+0x414>
        {
            for (j = 0; j < 4; j++)
 8004242:	2300      	movs	r3, #0
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	e044      	b.n	80042d2 <ProtocolGetRxPacket+0x408>
            {
#ifdef FSC_HAVE_EXT_MSG
                if (port->PolicyRxHeader.Extended == 1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800424e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d026      	beq.n	80042a6 <ProtocolGetRxPacket+0x3dc>
                {
                    /* Skip ext header */
                    if (i == 0 && (j == 0 || j == 1)){continue;}
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d105      	bne.n	800426a <ProtocolGetRxPacket+0x3a0>
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d032      	beq.n	80042ca <ProtocolGetRxPacket+0x400>
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d02f      	beq.n	80042ca <ProtocolGetRxPacket+0x400>

                    if (port->ExtRxHeader.ReqChunk == 0)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d128      	bne.n	80042cc <ProtocolGetRxPacket+0x402>
                    {
                        port->ExtMsgBuffer[port->ExtChunkOffset++] =
                                port->ProtocolRxBuffer[j + (i << 2)];
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	009a      	lsls	r2, r3, #2
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	441a      	add	r2, r3
                        port->ExtMsgBuffer[port->ExtChunkOffset++] =
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 8004288:	1c59      	adds	r1, r3, #1
 800428a:	b288      	uxth	r0, r1
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	f8a1 02fc 	strh.w	r0, [r1, #764]	; 0x2fc
 8004292:	4619      	mov	r1, r3
                                port->ProtocolRxBuffer[j + (i << 2)];
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4413      	add	r3, r2
 8004298:	f893 2206 	ldrb.w	r2, [r3, #518]	; 0x206
                        port->ExtMsgBuffer[port->ExtChunkOffset++] =
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	440b      	add	r3, r1
 80042a0:	f883 22fe 	strb.w	r2, [r3, #766]	; 0x2fe
 80042a4:	e012      	b.n	80042cc <ProtocolGetRxPacket+0x402>
                }
                else
#endif /* FSC_HAVE_EXT_MSG */
                {
                    port->PolicyRxDataObj[i].byte[j] =
                            port->ProtocolRxBuffer[j + (i << 2)];
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	009a      	lsls	r2, r3, #2
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	4413      	add	r3, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	4413      	add	r3, r2
 80042b2:	f893 1206 	ldrb.w	r1, [r3, #518]	; 0x206
                    port->PolicyRxDataObj[i].byte[j] =
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	441a      	add	r2, r3
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	4413      	add	r3, r2
 80042c2:	33b8      	adds	r3, #184	; 0xb8
 80042c4:	460a      	mov	r2, r1
 80042c6:	701a      	strb	r2, [r3, #0]
 80042c8:	e000      	b.n	80042cc <ProtocolGetRxPacket+0x402>
                    if (i == 0 && (j == 0 || j == 1)){continue;}
 80042ca:	bf00      	nop
            for (j = 0; j < 4; j++)
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	3301      	adds	r3, #1
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b03      	cmp	r3, #3
 80042d6:	d9b7      	bls.n	8004248 <ProtocolGetRxPacket+0x37e>
        for (i = 0; i < port->PolicyRxHeader.NumDataObjects; i++)
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	3301      	adds	r3, #1
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80042e4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	461a      	mov	r2, r3
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d3a7      	bcc.n	8004242 <ProtocolGetRxPacket+0x378>
                }
            }
       }

#ifdef FSC_HAVE_EXT_MSG
        if (port->PolicyRxHeader.Extended == 1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80042f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d04e      	beq.n	80043a0 <ProtocolGetRxPacket+0x4d6>
        {
            if (port->ExtRxHeader.ReqChunk == 0)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d120      	bne.n	8004354 <ProtocolGetRxPacket+0x48a>
            {
                if (port->ExtChunkOffset < port->ExtRxHeader.DataSize)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	f8b2 22f8 	ldrh.w	r2, [r2, #760]	; 0x2f8
 800431e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004322:	b292      	uxth	r2, r2
 8004324:	4293      	cmp	r3, r2
 8004326:	d20c      	bcs.n	8004342 <ProtocolGetRxPacket+0x478>
                {
                    /* more message left. continue receiving */
                    port->ExtTxOrRx = RXing;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
                    port->ProtocolMsgRx = FALSE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
                    port->ExtWaitTxRx = FALSE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
 8004340:	e02e      	b.n	80043a0 <ProtocolGetRxPacket+0x4d6>
                }
                else
                {
                    port->ExtTxOrRx = NoXfer;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
                    port->ProtocolMsgRx = TRUE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
 8004352:	e025      	b.n	80043a0 <ProtocolGetRxPacket+0x4d6>
                }
            }
            else if (port->ExtRxHeader.ReqChunk == 1 &&
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00f      	beq.n	8004384 <ProtocolGetRxPacket+0x4ba>
                     port->ExtChunkOffset < port->ExtTxHeader.DataSize)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	f8b2 22f6 	ldrh.w	r2, [r2, #758]	; 0x2f6
 8004370:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004374:	b292      	uxth	r2, r2
            else if (port->ExtRxHeader.ReqChunk == 1 &&
 8004376:	4293      	cmp	r3, r2
 8004378:	d204      	bcs.n	8004384 <ProtocolGetRxPacket+0x4ba>
            {
                port->ExtWaitTxRx = FALSE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
 8004382:	e00d      	b.n	80043a0 <ProtocolGetRxPacket+0x4d6>
            }
            else
            {
                /* Last message received */
                port->ExtTxOrRx = NoXfer;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
 800438c:	e008      	b.n	80043a0 <ProtocolGetRxPacket+0x4d6>
    }
    else
    {
        /* Command message */
        /* Read out the 4 CRC bytes to move the address to the next packet */
        DeviceRead(port->I2cAddr, regFIFO, 4, data);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004394:	f107 030c 	add.w	r3, r7, #12
 8004398:	2204      	movs	r2, #4
 800439a:	2143      	movs	r1, #67	; 0x43
 800439c:	f002 f9dd 	bl	800675a <DeviceRead>
     */
    WriteStateLog(&port->PDStateLog, dbgGetRxPacket, platform_get_log_time());
#endif /* FSC_DEBUG */

    /* Special VDM use case where a second message appears too quickly */
    if ((port->PolicyRxHeader.NumDataObjects != 0) &&
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80043a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d030      	beq.n	8004412 <ProtocolGetRxPacket+0x548>
        (port->PolicyRxHeader.MessageType == DMTVenderDefined) &&
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80043b6:	f003 031f 	and.w	r3, r3, #31
 80043ba:	b2db      	uxtb	r3, r3
    if ((port->PolicyRxHeader.NumDataObjects != 0) &&
 80043bc:	2b0f      	cmp	r3, #15
 80043be:	d128      	bne.n	8004412 <ProtocolGetRxPacket+0x548>
        (port->PolicyRxDataObj[0].SVDM.CommandType == 0)) /* Initiator */
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80043c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043ca:	b2db      	uxtb	r3, r3
        (port->PolicyRxHeader.MessageType == DMTVenderDefined) &&
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d120      	bne.n	8004412 <ProtocolGetRxPacket+0x548>
    {
        /* Delay and check if a new mesage has been received */
        /* Note: May need to increase this delay (2-3ms) or find alternate
         * method for some slow systems - e.g. Android.
         */
        platform_delay_10us(100); /* 1ms */
 80043d0:	2064      	movs	r0, #100	; 0x64
 80043d2:	f7fc fa13 	bl	80007fc <platform_delay_10us>

        DeviceRead(port->I2cAddr, regInterruptb, 3,
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	333f      	adds	r3, #63	; 0x3f
 80043e0:	2203      	movs	r2, #3
 80043e2:	213f      	movs	r1, #63	; 0x3f
 80043e4:	f002 f9b9 	bl	800675a <DeviceRead>
                   &port->Registers.Status.byte[3]);

        if (port->Registers.Status.I_GCRCSENT &&
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d046      	beq.n	8004486 <ProtocolGetRxPacket+0x5bc>
            !port->Registers.Status.RX_EMPTY)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043fe:	f003 0320 	and.w	r3, r3, #32
 8004402:	b2db      	uxtb	r3, r3
        if (port->Registers.Status.I_GCRCSENT &&
 8004404:	2b00      	cmp	r3, #0
 8004406:	d13e      	bne.n	8004486 <ProtocolGetRxPacket+0x5bc>
        {
            /* Get the next message - overwriting the current message */
            ProtocolGetRxPacket(port, FALSE);
 8004408:	2100      	movs	r1, #0
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff fd5d 	bl	8003eca <ProtocolGetRxPacket>
        if (port->Registers.Status.I_GCRCSENT &&
 8004410:	e039      	b.n	8004486 <ProtocolGetRxPacket+0x5bc>
    else
    {
        /* A quickly sent second message can be received
         * into the buffer without triggering an (additional) interrupt.
         */
        DeviceRead(port->I2cAddr, regStatus0, 2,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3340      	adds	r3, #64	; 0x40
 800441c:	2202      	movs	r2, #2
 800441e:	2140      	movs	r1, #64	; 0x40
 8004420:	f002 f99b 	bl	800675a <DeviceRead>
            &port->Registers.Status.byte[4]);

        if (!port->Registers.Status.ACTIVITY &&
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800442a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d129      	bne.n	8004488 <ProtocolGetRxPacket+0x5be>
            !port->Registers.Status.RX_EMPTY)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800443a:	f003 0320 	and.w	r3, r3, #32
 800443e:	b2db      	uxtb	r3, r3
        if (!port->Registers.Status.ACTIVITY &&
 8004440:	2b00      	cmp	r3, #0
 8004442:	d121      	bne.n	8004488 <ProtocolGetRxPacket+0x5be>
        {
            platform_delay_10us(50);
 8004444:	2032      	movs	r0, #50	; 0x32
 8004446:	f7fc f9d9 	bl	80007fc <platform_delay_10us>
            DeviceRead(port->I2cAddr, regStatus0, 2,
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3340      	adds	r3, #64	; 0x40
 8004454:	2202      	movs	r2, #2
 8004456:	2140      	movs	r1, #64	; 0x40
 8004458:	f002 f97f 	bl	800675a <DeviceRead>
                        &port->Registers.Status.byte[4]);

            if (!port->Registers.Status.ACTIVITY &&
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10d      	bne.n	8004488 <ProtocolGetRxPacket+0x5be>
                !port->Registers.Status.RX_EMPTY)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004472:	f003 0320 	and.w	r3, r3, #32
 8004476:	b2db      	uxtb	r3, r3
            if (!port->Registers.Status.ACTIVITY &&
 8004478:	2b00      	cmp	r3, #0
 800447a:	d105      	bne.n	8004488 <ProtocolGetRxPacket+0x5be>
            {
                port->ProtocolMsgRxPending = TRUE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
 8004484:	e000      	b.n	8004488 <ProtocolGetRxPacket+0x5be>
        if (port->Registers.Status.I_GCRCSENT &&
 8004486:	bf00      	nop
    }

    /* If a message has been received during an attempt to transmit,
     * abort and handle the received message before trying again.
     */
    if (port->ProtocolMsgRx && (port->PDTxStatus == txSend))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00c      	beq.n	80044ac <ProtocolGetRxPacket+0x5e2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
 8004498:	2b02      	cmp	r3, #2
 800449a:	d107      	bne.n	80044ac <ProtocolGetRxPacket+0x5e2>
    {
        port->PDTxStatus = txAbort;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2208      	movs	r2, #8
 80044a0:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
 80044a4:	e002      	b.n	80044ac <ProtocolGetRxPacket+0x5e2>
        return;
 80044a6:	bf00      	nop
 80044a8:	e000      	b.n	80044ac <ProtocolGetRxPacket+0x5e2>
        return;
 80044aa:	bf00      	nop
    }
}
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <ProtocolTransmitMessage>:

void ProtocolTransmitMessage(Port_t *port)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b086      	sub	sp, #24
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
    FSC_U32 i, j;
    sopMainHeader_t temp_PolicyTxHeader = { 0 };
 80044ba:	2300      	movs	r3, #0
 80044bc:	81bb      	strh	r3, [r7, #12]

    port->DoTxFlush = FALSE;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250

    /* Note: Power needs to be set a bit before we write TX_START to update */
    ProtocolLoadSOP(port, port->ProtocolMsgTxSop);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 31c1 	ldrb.w	r3, [r3, #449]	; 0x1c1
 80044cc:	4619      	mov	r1, r3
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fb8b 	bl	8004bea <ProtocolLoadSOP>

#ifdef FSC_HAVE_EXT_MSG
    if (port->ExtTxOrRx == RXing)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d118      	bne.n	8004510 <ProtocolTransmitMessage+0x5e>
    {
        /* Set up chunk request */
        temp_PolicyTxHeader.word = port->PolicyRxHeader.word;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80044e4:	81bb      	strh	r3, [r7, #12]
        temp_PolicyTxHeader.PortPowerRole = port->PolicyIsSource;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	7b7b      	ldrb	r3, [r7, #13]
 80044f4:	f362 0300 	bfi	r3, r2, #0, #1
 80044f8:	737b      	strb	r3, [r7, #13]
        temp_PolicyTxHeader.PortDataRole = port->PolicyIsDFP;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	b2da      	uxtb	r2, r3
 8004506:	7b3b      	ldrb	r3, [r7, #12]
 8004508:	f362 1345 	bfi	r3, r2, #5, #1
 800450c:	733b      	strb	r3, [r7, #12]
 800450e:	e003      	b.n	8004518 <ProtocolTransmitMessage+0x66>
    }
    else
#endif /* FSC_HAVE_EXT_MSG */
    {
        temp_PolicyTxHeader.word = port->PolicyTxHeader.word;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8004516:	81bb      	strh	r3, [r7, #12]
    }

    if ((temp_PolicyTxHeader.NumDataObjects == 0) &&
 8004518:	7b7b      	ldrb	r3, [r7, #13]
 800451a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d117      	bne.n	8004554 <ProtocolTransmitMessage+0xa2>
        (temp_PolicyTxHeader.MessageType == CMTSoftReset))
 8004524:	7b3b      	ldrb	r3, [r7, #12]
 8004526:	f003 031f 	and.w	r3, r3, #31
 800452a:	b2db      	uxtb	r3, r3
    if ((temp_PolicyTxHeader.NumDataObjects == 0) &&
 800452c:	2b0d      	cmp	r3, #13
 800452e:	d111      	bne.n	8004554 <ProtocolTransmitMessage+0xa2>
    {
        port->MessageIDCounter[port->ProtocolMsgTxSop] = 0;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 31c1 	ldrb.w	r3, [r3, #449]	; 0x1c1
 8004536:	461a      	mov	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4413      	add	r3, r2
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
        port->MessageID[port->ProtocolMsgTxSop] = 0xFF;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 31c1 	ldrb.w	r3, [r3, #449]	; 0x1c1
 8004548:	461a      	mov	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4413      	add	r3, r2
 800454e:	22ff      	movs	r2, #255	; 0xff
 8004550:	f883 224b 	strb.w	r2, [r3, #587]	; 0x24b
        port->SourceCapsUpdated = TRUE;
#endif /* FSC_DEBUG */
    }

#ifdef FSC_HAVE_EXT_MSG
    if (temp_PolicyTxHeader.Extended == 1)
 8004554:	7b7b      	ldrb	r3, [r7, #13]
 8004556:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d049      	beq.n	80045f4 <ProtocolTransmitMessage+0x142>
    {
        if (port->ExtTxOrRx == TXing)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
 8004566:	2b01      	cmp	r3, #1
 8004568:	d136      	bne.n	80045d8 <ProtocolTransmitMessage+0x126>
        {
            /* Remaining bytes */
            i = port->ExtTxHeader.DataSize - port->ExtChunkOffset;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8b3 32f6 	ldrh.w	r3, [r3, #758]	; 0x2f6
 8004570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004574:	b29b      	uxth	r3, r3
 8004576:	461a      	mov	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	617b      	str	r3, [r7, #20]

            if (i > EXT_MAX_MSG_LEGACY_LEN)
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b1a      	cmp	r3, #26
 8004586:	d904      	bls.n	8004592 <ProtocolTransmitMessage+0xe0>
            {
                temp_PolicyTxHeader.NumDataObjects = 7;
 8004588:	7b7b      	ldrb	r3, [r7, #13]
 800458a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800458e:	737b      	strb	r3, [r7, #13]
 8004590:	e009      	b.n	80045a6 <ProtocolTransmitMessage+0xf4>
            else
            {
                /* Round up to 4 byte boundary.
                 * Two extra byte is for the extended header.
                 */
                temp_PolicyTxHeader.NumDataObjects = (i + 4) / 4;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	3304      	adds	r3, #4
 8004596:	089b      	lsrs	r3, r3, #2
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	b2da      	uxtb	r2, r3
 800459e:	7b7b      	ldrb	r3, [r7, #13]
 80045a0:	f362 1306 	bfi	r3, r2, #4, #3
 80045a4:	737b      	strb	r3, [r7, #13]
            }
            port->PolicyTxHeader.NumDataObjects =
                    temp_PolicyTxHeader.NumDataObjects;
 80045a6:	7b7b      	ldrb	r3, [r7, #13]
 80045a8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80045ac:	b2d9      	uxtb	r1, r3
            port->PolicyTxHeader.NumDataObjects =
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 80045b4:	f361 1306 	bfi	r3, r1, #4, #3
 80045b8:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
            port->ExtTxHeader.ChunkNum = port->ExtChunkNum;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	b2d9      	uxtb	r1, r3
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	f892 32f7 	ldrb.w	r3, [r2, #759]	; 0x2f7
 80045ce:	f361 03c6 	bfi	r3, r1, #3, #4
 80045d2:	f882 32f7 	strb.w	r3, [r2, #759]	; 0x2f7
 80045d6:	e009      	b.n	80045ec <ProtocolTransmitMessage+0x13a>
        }
        else if (port->ExtTxOrRx == RXing)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d104      	bne.n	80045ec <ProtocolTransmitMessage+0x13a>
        {
            temp_PolicyTxHeader.NumDataObjects = 1;
 80045e2:	7b7b      	ldrb	r3, [r7, #13]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f362 1306 	bfi	r3, r2, #4, #3
 80045ea:	737b      	strb	r3, [r7, #13]
        }
        port->ExtWaitTxRx = TRUE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
    }
#endif /* FSC_HAVE_EXT_MSG */

    temp_PolicyTxHeader.MessageID =
            port->MessageIDCounter[port->ProtocolMsgTxSop];
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 31c1 	ldrb.w	r3, [r3, #449]	; 0x1c1
 80045fa:	461a      	mov	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4413      	add	r3, r2
 8004600:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	b2da      	uxtb	r2, r3
    temp_PolicyTxHeader.MessageID =
 800460a:	7b7b      	ldrb	r3, [r7, #13]
 800460c:	f362 0343 	bfi	r3, r2, #1, #3
 8004610:	737b      	strb	r3, [r7, #13]
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
            PACKSYM | (2 + (temp_PolicyTxHeader.NumDataObjects << 2));
 8004612:	7b7b      	ldrb	r3, [r7, #13]
 8004614:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004618:	b2db      	uxtb	r3, r3
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	b2db      	uxtb	r3, r3
 800461e:	3302      	adds	r3, #2
 8004620:	b2db      	uxtb	r3, r3
 8004622:	b25b      	sxtb	r3, r3
 8004624:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004628:	b258      	sxtb	r0, r3
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	b2d1      	uxtb	r1, r2
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 800463a:	4619      	mov	r1, r3
            PACKSYM | (2 + (temp_PolicyTxHeader.NumDataObjects << 2));
 800463c:	b2c2      	uxtb	r2, r0
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	440b      	add	r3, r1
 8004642:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	b2d1      	uxtb	r1, r2
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004656:	4619      	mov	r1, r3
            temp_PolicyTxHeader.byte[0];
 8004658:	7b3a      	ldrb	r2, [r7, #12]
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	440b      	add	r3, r1
 800465e:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	b2d1      	uxtb	r1, r2
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004672:	4619      	mov	r1, r3
            temp_PolicyTxHeader.byte[1];
 8004674:	7b7a      	ldrb	r2, [r7, #13]
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	440b      	add	r3, r1
 800467a:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6

    /* If this is a data object... */
    if (temp_PolicyTxHeader.NumDataObjects > 0)
 800467e:	7b7b      	ldrb	r3, [r7, #13]
 8004680:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 80d2 	beq.w	8004830 <ProtocolTransmitMessage+0x37e>
    {
#ifdef FSC_HAVE_EXT_MSG
        if (temp_PolicyTxHeader.Extended == 1)
 800468c:	7b7b      	ldrb	r3, [r7, #13]
 800468e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d059      	beq.n	800474c <ProtocolTransmitMessage+0x29a>
        {
            if (port->ExtTxOrRx == RXing)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d122      	bne.n	80046e8 <ProtocolTransmitMessage+0x236>
            {
                port->ExtTxHeader.ChunkNum = port->ExtChunkNum;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	b2d9      	uxtb	r1, r3
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	f892 32f7 	ldrb.w	r3, [r2, #759]	; 0x2f7
 80046b4:	f361 03c6 	bfi	r3, r1, #3, #4
 80046b8:	f882 32f7 	strb.w	r3, [r2, #759]	; 0x2f7
                port->ExtTxHeader.DataSize = 0;
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	f8b2 32f6 	ldrh.w	r3, [r2, #758]	; 0x2f6
 80046c2:	f36f 0308 	bfc	r3, #0, #9
 80046c6:	f8a2 32f6 	strh.w	r3, [r2, #758]	; 0x2f6
                port->ExtTxHeader.Chunked = 1;
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	f892 32f7 	ldrb.w	r3, [r2, #759]	; 0x2f7
 80046d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d4:	f882 32f7 	strb.w	r3, [r2, #759]	; 0x2f7
                port->ExtTxHeader.ReqChunk = 1;
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	f892 32f7 	ldrb.w	r3, [r2, #759]	; 0x2f7
 80046de:	f043 0304 	orr.w	r3, r3, #4
 80046e2:	f882 32f7 	strb.w	r3, [r2, #759]	; 0x2f7
 80046e6:	e011      	b.n	800470c <ProtocolTransmitMessage+0x25a>
            }
            else if (port->ExtTxOrRx == TXing)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d10c      	bne.n	800470c <ProtocolTransmitMessage+0x25a>
            {
                port->ExtTxHeader.ChunkNum = port->ExtChunkNum;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	b2d9      	uxtb	r1, r3
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	f892 32f7 	ldrb.w	r3, [r2, #759]	; 0x2f7
 8004704:	f361 03c6 	bfi	r3, r1, #3, #4
 8004708:	f882 32f7 	strb.w	r3, [r2, #759]	; 0x2f7
            }

            /* Copy the two byte extended header. */
            port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	b2d1      	uxtb	r1, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 800471c:	4619      	mov	r1, r3
                    port->ExtTxHeader.byte[0];
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 22f6 	ldrb.w	r2, [r3, #758]	; 0x2f6
            port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	440b      	add	r3, r1
 8004728:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
            port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	b2d1      	uxtb	r1, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 800473c:	4619      	mov	r1, r3
                    port->ExtTxHeader.byte[1];
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 22f7 	ldrb.w	r2, [r3, #759]	; 0x2f7
            port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	440b      	add	r3, r1
 8004748:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        }
#endif /* FSC_HAVE_EXT_MSG */
        for (i = 0; i < temp_PolicyTxHeader.NumDataObjects; i++)
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e066      	b.n	8004820 <ProtocolTransmitMessage+0x36e>
        {
            for (j = 0; j < 4; j++)
 8004752:	2300      	movs	r3, #0
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	e05d      	b.n	8004814 <ProtocolTransmitMessage+0x362>
            {
#ifdef FSC_HAVE_EXT_MSG
                if (temp_PolicyTxHeader.Extended == 1)
 8004758:	7b7b      	ldrb	r3, [r7, #13]
 800475a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d03d      	beq.n	80047e0 <ProtocolTransmitMessage+0x32e>
                {
                    /* Skip extended header */
                    if (i == 0 && (j == 0 || j == 1)) { continue; }
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d105      	bne.n	8004776 <ProtocolTransmitMessage+0x2c4>
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d04d      	beq.n	800480c <ProtocolTransmitMessage+0x35a>
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d04a      	beq.n	800480c <ProtocolTransmitMessage+0x35a>

                    if (port->ExtChunkOffset < port->ExtTxHeader.DataSize)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	f8b2 22f6 	ldrh.w	r2, [r2, #758]	; 0x2f6
 8004782:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004786:	b292      	uxth	r2, r2
 8004788:	4293      	cmp	r3, r2
 800478a:	d21a      	bcs.n	80047c2 <ProtocolTransmitMessage+0x310>
                    {
                        port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
                                port->ExtMsgBuffer[port->ExtChunkOffset++];
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	b291      	uxth	r1, r2
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	f8a2 12fc 	strh.w	r1, [r2, #764]	; 0x2fc
 800479c:	4618      	mov	r0, r3
                        port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	b2d1      	uxtb	r1, r2
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 80047ae:	4619      	mov	r1, r3
                                port->ExtMsgBuffer[port->ExtChunkOffset++];
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4403      	add	r3, r0
 80047b4:	f893 22fe 	ldrb.w	r2, [r3, #766]	; 0x2fe
                        port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	440b      	add	r3, r1
 80047bc:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
 80047c0:	e025      	b.n	800480e <ProtocolTransmitMessage+0x35c>
                    }
                    else
                    {
                        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = 0;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	b2d1      	uxtb	r1, r2
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 80047d2:	461a      	mov	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4413      	add	r3, r2
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
 80047de:	e016      	b.n	800480e <ProtocolTransmitMessage+0x35c>
                }
                else
#endif /* FSC_HAVE_EXT_MSG */
                {
                    /* Load the actual bytes */
                    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	b2d1      	uxtb	r1, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 80047f0:	4619      	mov	r1, r3
                            port->PolicyTxDataObj[i].byte[j];
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	441a      	add	r2, r3
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	4413      	add	r3, r2
 80047fe:	33d4      	adds	r3, #212	; 0xd4
 8004800:	781a      	ldrb	r2, [r3, #0]
                    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	440b      	add	r3, r1
 8004806:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
 800480a:	e000      	b.n	800480e <ProtocolTransmitMessage+0x35c>
                    if (i == 0 && (j == 0 || j == 1)) { continue; }
 800480c:	bf00      	nop
            for (j = 0; j < 4; j++)
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	3301      	adds	r3, #1
 8004812:	613b      	str	r3, [r7, #16]
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	2b03      	cmp	r3, #3
 8004818:	d99e      	bls.n	8004758 <ProtocolTransmitMessage+0x2a6>
        for (i = 0; i < temp_PolicyTxHeader.NumDataObjects; i++)
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	3301      	adds	r3, #1
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	7b7b      	ldrb	r3, [r7, #13]
 8004822:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004826:	b2db      	uxtb	r3, r3
 8004828:	461a      	mov	r2, r3
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	4293      	cmp	r3, r2
 800482e:	d390      	bcc.n	8004752 <ProtocolTransmitMessage+0x2a0>
            }
        }
    }

    /* Load the CRC, EOP and stop sequence */
    ProtocolLoadEOP(port);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 fa9a 	bl	8004d6a <ProtocolLoadEOP>

    /* Commit the FIFO to the device */
    if (DeviceWrite(port->I2cAddr, regFIFO, port->ProtocolTxBytes,
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8004848:	2143      	movs	r1, #67	; 0x43
 800484a:	f001 ff69 	bl	8006720 <DeviceWrite>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d108      	bne.n	8004866 <ProtocolTransmitMessage+0x3b4>
                    &port->ProtocolTxBuffer[0]) == FALSE)
    {
        /* If a FIFO write happens while a GoodCRC is being transmitted,
         * the transaction will NAK and will need to be discarded.
         */
        port->DoTxFlush = TRUE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
        port->PDTxStatus = txAbort;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2208      	movs	r2, #8
 8004860:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
 8004864:	e048      	b.n	80048f8 <ProtocolTransmitMessage+0x446>
        return;
    }

    port->Registers.Control.N_RETRIES =
            DPM_Retries(port, port->ProtocolMsgTxSop);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 31c1 	ldrb.w	r3, [r3, #449]	; 0x1c1
 800486c:	4619      	mov	r1, r3
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f002 f9be 	bl	8006bf0 <DPM_Retries>
 8004874:	4603      	mov	r3, r0
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	b2d9      	uxtb	r1, r3
    port->Registers.Control.N_RETRIES =
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8004882:	f361 0342 	bfi	r3, r1, #1, #2
 8004886:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
    port->Registers.Control.AUTO_RETRY = 1;
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8004890:	f043 0301 	orr.w	r3, r3, #1
 8004894:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33

    DeviceWrite(port->I2cAddr, regControl3, 1,&port->Registers.Control.byte[3]);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3333      	adds	r3, #51	; 0x33
 80048a2:	2201      	movs	r2, #1
 80048a4:	2109      	movs	r1, #9
 80048a6:	f001 ff3b 	bl	8006720 <DeviceWrite>
    port->Registers.Control.TX_START = 1;
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80048b0:	f043 0301 	orr.w	r3, r3, #1
 80048b4:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    DeviceWrite(port->I2cAddr, regControl0, 1,&port->Registers.Control.byte[0]);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3330      	adds	r3, #48	; 0x30
 80048c2:	2201      	movs	r2, #1
 80048c4:	2106      	movs	r1, #6
 80048c6:	f001 ff2b 	bl	8006720 <DeviceWrite>
    port->Registers.Control.TX_START = 0;
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80048d0:	f36f 0300 	bfc	r3, #0, #1
 80048d4:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30

    /* Set the transmitter status to busy */
    port->PDTxStatus = txBusy;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2203      	movs	r2, #3
 80048dc:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
    port->ProtocolState = PRLTxSendingMessage;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2205      	movs	r2, #5
 80048e4:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

    /* Timeout specifically for chunked messages, but used with each transmit
     * to prevent a theoretical protocol hang.
     */
    TimerStart(&port->ProtocolTimer, tChunkSenderRequest);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80048ee:	f247 5130 	movw	r1, #30000	; 0x7530
 80048f2:	4618      	mov	r0, r3
 80048f4:	f001 ff4e 	bl	8006794 <TimerStart>
    StoreUSBPDMessage(port, temp_PolicyTxHeader,
                      (doDataObject_t*)&port->ProtocolTxBuffer[7],
                      TRUE, port->ProtocolMsgTxSop);
    WriteStateLog(&port->PDStateLog, dbgSendTxPacket, platform_get_log_time());
#endif /* FSC_DEBUG */
}
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <ProtocolSendingMessage>:

void ProtocolSendingMessage(Port_t *port)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b082      	sub	sp, #8
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]

    /* Waiting on result/status of transmission */
    if (port->Registers.Status.I_TXSENT || port->Registers.Status.I_CRC_CHK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d107      	bne.n	8004926 <ProtocolSendingMessage+0x28>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800491c:	f003 0310 	and.w	r3, r3, #16
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d011      	beq.n	800494a <ProtocolSendingMessage+0x4c>
    {
        port->Registers.Status.I_TXSENT = 0;
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 800492c:	f36f 0382 	bfc	r3, #2, #1
 8004930:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
        port->Registers.Status.I_CRC_CHK = 0;
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800493a:	f36f 1304 	bfc	r3, #4, #1
 800493e:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
        ProtocolVerifyGoodCRC(port);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f858 	bl	80049f8 <ProtocolVerifyGoodCRC>
 8004948:	e04a      	b.n	80049e0 <ProtocolSendingMessage+0xe2>
    }
    else if (port->Registers.Status.I_COLLISION)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00f      	beq.n	800497a <ProtocolSendingMessage+0x7c>
    {
        port->Registers.Status.I_COLLISION = 0;
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 8004960:	f36f 0341 	bfc	r3, #1, #1
 8004964:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
        port->PDTxStatus = txCollision;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2207      	movs	r2, #7
 800496c:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
        port->ProtocolState = PRLIdle;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 8004978:	e032      	b.n	80049e0 <ProtocolSendingMessage+0xe2>
    }
    else if (port->Registers.Status.I_RETRYFAIL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004980:	f003 0310 	and.w	r3, r3, #16
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00f      	beq.n	80049aa <ProtocolSendingMessage+0xac>
    {
        port->Registers.Status.I_RETRYFAIL = 0;
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8004990:	f36f 1304 	bfc	r3, #4, #1
 8004994:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
        port->PDTxStatus = txError;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2206      	movs	r2, #6
 800499c:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
        port->ProtocolState = PRLIdle;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 80049a8:	e01a      	b.n	80049e0 <ProtocolSendingMessage+0xe2>
    }
    else if (port->Registers.Status.I_GCRCSENT)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d012      	beq.n	80049e0 <ProtocolSendingMessage+0xe2>
    {
        /* Interruption */
        port->PDTxStatus = txError;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2206      	movs	r2, #6
 80049be:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
        port->ProtocolState = PRLIdle;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        port->ProtocolMsgRxPending = TRUE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
        port->Registers.Status.I_GCRCSENT = 0;
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 80049d8:	f36f 0300 	bfc	r3, #0, #1
 80049dc:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
    }

    /* Make an additional check for missed/pending message data */
    if (port->ProtocolState == PRLIdle)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d102      	bne.n	80049f0 <ProtocolSendingMessage+0xf2>
    {
        ProtocolIdle(port);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff f9ec 	bl	8003dc8 <ProtocolIdle>
    }
}
 80049f0:	bf00      	nop
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <ProtocolVerifyGoodCRC>:

void ProtocolVerifyGoodCRC(Port_t *port)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
    FSC_U8 data[4];
    sopMainHeader_t header;
    SopType sop;

    /* Read the Rx token and two header bytes */
    DeviceRead(port->I2cAddr, regFIFO, 3, &data[0]);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004a06:	f107 0310 	add.w	r3, r7, #16
 8004a0a:	2203      	movs	r2, #3
 8004a0c:	2143      	movs	r1, #67	; 0x43
 8004a0e:	f001 fea4 	bl	800675a <DeviceRead>
    header.byte[0] = data[1];
 8004a12:	7c7b      	ldrb	r3, [r7, #17]
 8004a14:	733b      	strb	r3, [r7, #12]
    header.byte[1] = data[2];
 8004a16:	7cbb      	ldrb	r3, [r7, #18]
 8004a18:	737b      	strb	r3, [r7, #13]

    /* Figure out what SOP* the data came in on */
    sop = TokenToSopType(data[0]);
 8004a1a:	7c3b      	ldrb	r3, [r7, #16]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff f877 	bl	8003b10 <TokenToSopType>
 8004a22:	4603      	mov	r3, r0
 8004a24:	75bb      	strb	r3, [r7, #22]

    if ((header.NumDataObjects == 0) &&
 8004a26:	7b7b      	ldrb	r3, [r7, #13]
 8004a28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d176      	bne.n	8004b20 <ProtocolVerifyGoodCRC+0x128>
        (header.MessageType == CMTGoodCRC))
 8004a32:	7b3b      	ldrb	r3, [r7, #12]
 8004a34:	f003 031f 	and.w	r3, r3, #31
 8004a38:	b2db      	uxtb	r3, r3
    if ((header.NumDataObjects == 0) &&
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d170      	bne.n	8004b20 <ProtocolVerifyGoodCRC+0x128>
    {
        FSC_U8 MIDcompare;
        if (sop == SOP_TYPE_ERROR)
 8004a3e:	7dbb      	ldrb	r3, [r7, #22]
 8004a40:	2bff      	cmp	r3, #255	; 0xff
 8004a42:	d102      	bne.n	8004a4a <ProtocolVerifyGoodCRC+0x52>
            MIDcompare = 0xFF;
 8004a44:	23ff      	movs	r3, #255	; 0xff
 8004a46:	75fb      	strb	r3, [r7, #23]
 8004a48:	e005      	b.n	8004a56 <ProtocolVerifyGoodCRC+0x5e>
        else
            MIDcompare = port->MessageIDCounter[sop];
 8004a4a:	7dbb      	ldrb	r3, [r7, #22]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 8004a54:	75fb      	strb	r3, [r7, #23]
        /* Store the received PD message for the DPM (GUI) */
        StoreUSBPDMessage(port, header, &port->PolicyRxDataObj[0],
                          FALSE, sop);
#endif /* FSC_DEBUG */

        if (header.MessageID != MIDcompare)
 8004a56:	7b7b      	ldrb	r3, [r7, #13]
 8004a58:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	461a      	mov	r2, r3
 8004a60:	7dfb      	ldrb	r3, [r7, #23]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d011      	beq.n	8004a8a <ProtocolVerifyGoodCRC+0x92>
        {
            /* Read out the 4 CRC bytes to move the addr to the next packet */
            DeviceRead(port->I2cAddr, regFIFO, 4, data);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004a6c:	f107 0310 	add.w	r3, r7, #16
 8004a70:	2204      	movs	r2, #4
 8004a72:	2143      	movs	r1, #67	; 0x43
 8004a74:	f001 fe71 	bl	800675a <DeviceRead>
#ifdef FSC_DEBUG
            /* Store that there was a bad message ID received in the buffer */
            StoreUSBPDToken(port, FALSE, pdtBadMessageID);
#endif /* FSC_DEBUG */
            port->PDTxStatus = txError;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2206      	movs	r2, #6
 8004a7c:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
            port->ProtocolState = PRLIdle;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    {
 8004a88:	e05f      	b.n	8004b4a <ProtocolVerifyGoodCRC+0x152>
        }
        else
        {
            if (sop != SOP_TYPE_ERROR)
 8004a8a:	7dbb      	ldrb	r3, [r7, #22]
 8004a8c:	2bff      	cmp	r3, #255	; 0xff
 8004a8e:	d035      	beq.n	8004afc <ProtocolVerifyGoodCRC+0x104>
            {
                /* Increment and roll over */
                port->MessageIDCounter[sop]++;
 8004a90:	7dbb      	ldrb	r3, [r7, #22]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	441a      	add	r2, r3
 8004a96:	f892 2246 	ldrb.w	r2, [r2, #582]	; 0x246
 8004a9a:	3201      	adds	r2, #1
 8004a9c:	b2d1      	uxtb	r1, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	460a      	mov	r2, r1
 8004aa4:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
                port->MessageIDCounter[sop] &= 0x07;
 8004aa8:	7dbb      	ldrb	r3, [r7, #22]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	4413      	add	r3, r2
 8004aae:	f893 2246 	ldrb.w	r2, [r3, #582]	; 0x246
 8004ab2:	7dbb      	ldrb	r3, [r7, #22]
 8004ab4:	f002 0207 	and.w	r2, r2, #7
 8004ab8:	b2d1      	uxtb	r1, r2
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	4413      	add	r3, r2
 8004abe:	460a      	mov	r2, r1
 8004ac0:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
#ifdef FSC_HAVE_EXT_MSG
                if (port->ExtTxOrRx != NoXfer)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d016      	beq.n	8004afc <ProtocolVerifyGoodCRC+0x104>
                {
                    if (port->ExtChunkOffset >= port->ExtTxHeader.DataSize)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	f8b2 22f6 	ldrh.w	r2, [r2, #758]	; 0x2f6
 8004ada:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ade:	b292      	uxth	r2, r2
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d303      	bcc.n	8004aec <ProtocolVerifyGoodCRC+0xf4>
                    {
                        /* All data has been sent */
                        port->ExtTxOrRx = NoXfer;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
                    }
                    port->ExtChunkNum++;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8004af2:	3301      	adds	r3, #1
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
                }
#endif /* FSC_HAVE_EXT_MSG */
            }
            port->ProtocolState = PRLIdle;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
            port->PDTxStatus = txSuccess;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2205      	movs	r2, #5
 8004b08:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2

            /* Read out the 4 CRC bytes to move the addr to the next packet */
            DeviceRead(port->I2cAddr, regFIFO, 4, data);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004b12:	f107 0310 	add.w	r3, r7, #16
 8004b16:	2204      	movs	r2, #4
 8004b18:	2143      	movs	r1, #67	; 0x43
 8004b1a:	f001 fe1e 	bl	800675a <DeviceRead>
    {
 8004b1e:	e014      	b.n	8004b4a <ProtocolVerifyGoodCRC+0x152>
        }
    }
    else
    {
        port->ProtocolState = PRLIdle;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        port->PDTxStatus = txError;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2206      	movs	r2, #6
 8004b2c:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2

        /* Pass header and SOP* on to GetRxPacket */
        port->PolicyRxHeader.word = header.word;
 8004b30:	89ba      	ldrh	r2, [r7, #12]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        port->ProtocolMsgRxSop = sop;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	7dba      	ldrb	r2, [r7, #22]
 8004b3c:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0

        /* Rare case, next received message preempts GoodCRC */
        ProtocolGetRxPacket(port, TRUE);
 8004b40:	2101      	movs	r1, #1
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7ff f9c1 	bl	8003eca <ProtocolGetRxPacket>
    }
}
 8004b48:	bf00      	nop
 8004b4a:	bf00      	nop
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <ProtocolSendGoodCRC>:
    else
        return SOP_TYPE_SOP;
}

void ProtocolSendGoodCRC(Port_t *port, SopType sop)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	70fb      	strb	r3, [r7, #3]
    ProtocolLoadSOP(port, sop);
 8004b5e:	78fb      	ldrb	r3, [r7, #3]
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f841 	bl	8004bea <ProtocolLoadSOP>

    port->ProtocolTxBuffer[port->ProtocolTxBytes++] = PACKSYM | 0x02;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	b2d1      	uxtb	r1, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004b78:	461a      	mov	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	2282      	movs	r2, #130	; 0x82
 8004b80:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	b2d1      	uxtb	r1, r2
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004b94:	4619      	mov	r1, r3
            port->PolicyTxHeader.byte[0];
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	440b      	add	r3, r1
 8004ba0:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	b2d1      	uxtb	r1, r2
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004bb4:	4619      	mov	r1, r3
            port->PolicyTxHeader.byte[1];
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] =
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	440b      	add	r3, r1
 8004bc0:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
    ProtocolLoadEOP(port);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f8d0 	bl	8004d6a <ProtocolLoadEOP>
    DeviceWrite(port->I2cAddr, regFIFO, port->ProtocolTxBytes,
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8004bdc:	2143      	movs	r1, #67	; 0x43
 8004bde:	f001 fd9f 	bl	8006720 <DeviceWrite>
                &port->ProtocolTxBuffer[0]);
}
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <ProtocolLoadSOP>:

void ProtocolLoadSOP(Port_t *port, SopType sop)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	70fb      	strb	r3, [r7, #3]
    /* Clear the Tx byte counter */
    port->ProtocolTxBytes = 0;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 21c5 	strb.w	r2, [r3, #453]	; 0x1c5

    switch (sop)
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d002      	beq.n	8004c0a <ProtocolLoadSOP+0x20>
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d039      	beq.n	8004c7c <ProtocolLoadSOP+0x92>
 8004c08:	e071      	b.n	8004cee <ProtocolLoadSOP+0x104>
    {
    case SOP_TYPE_SOP1:
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC1_TOKEN;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	b2d1      	uxtb	r1, r2
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4413      	add	r3, r2
 8004c20:	2212      	movs	r2, #18
 8004c22:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC1_TOKEN;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	b2d1      	uxtb	r1, r2
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004c36:	461a      	mov	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	2212      	movs	r2, #18
 8004c3e:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC3_TOKEN;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	b2d1      	uxtb	r1, r2
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004c52:	461a      	mov	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4413      	add	r3, r2
 8004c58:	221b      	movs	r2, #27
 8004c5a:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC3_TOKEN;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	b2d1      	uxtb	r1, r2
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004c6e:	461a      	mov	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4413      	add	r3, r2
 8004c74:	221b      	movs	r2, #27
 8004c76:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        break;
 8004c7a:	e071      	b.n	8004d60 <ProtocolLoadSOP+0x176>
    case SOP_TYPE_SOP2:
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC1_TOKEN;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	b2d1      	uxtb	r1, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4413      	add	r3, r2
 8004c92:	2212      	movs	r2, #18
 8004c94:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC3_TOKEN;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	b2d1      	uxtb	r1, r2
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004ca8:	461a      	mov	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4413      	add	r3, r2
 8004cae:	221b      	movs	r2, #27
 8004cb0:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC1_TOKEN;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	b2d1      	uxtb	r1, r2
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4413      	add	r3, r2
 8004cca:	2212      	movs	r2, #18
 8004ccc:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC3_TOKEN;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	b2d1      	uxtb	r1, r2
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	221b      	movs	r2, #27
 8004ce8:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        break;
 8004cec:	e038      	b.n	8004d60 <ProtocolLoadSOP+0x176>
    case SOP_TYPE_SOP:
    default:
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC1_TOKEN;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	b2d1      	uxtb	r1, r2
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004cfe:	461a      	mov	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4413      	add	r3, r2
 8004d04:	2212      	movs	r2, #18
 8004d06:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC1_TOKEN;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	b2d1      	uxtb	r1, r2
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4413      	add	r3, r2
 8004d20:	2212      	movs	r2, #18
 8004d22:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC1_TOKEN;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	b2d1      	uxtb	r1, r2
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004d36:	461a      	mov	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	2212      	movs	r2, #18
 8004d3e:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        port->ProtocolTxBuffer[port->ProtocolTxBytes++] = SYNC2_TOKEN;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	b2d1      	uxtb	r1, r2
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004d52:	461a      	mov	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4413      	add	r3, r2
 8004d58:	2213      	movs	r2, #19
 8004d5a:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
        break;
 8004d5e:	bf00      	nop
    }
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bc80      	pop	{r7}
 8004d68:	4770      	bx	lr

08004d6a <ProtocolLoadEOP>:

void ProtocolLoadEOP(Port_t *port)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] = JAM_CRC;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	b2d1      	uxtb	r1, r2
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004d82:	461a      	mov	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4413      	add	r3, r2
 8004d88:	22ff      	movs	r2, #255	; 0xff
 8004d8a:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] = EOP;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	b2d1      	uxtb	r1, r2
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004d9e:	461a      	mov	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4413      	add	r3, r2
 8004da4:	2214      	movs	r2, #20
 8004da6:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
    port->ProtocolTxBuffer[port->ProtocolTxBytes++] = TXOFF;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	b2d1      	uxtb	r1, r2
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	f882 11c5 	strb.w	r1, [r2, #453]	; 0x1c5
 8004dba:	461a      	mov	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	22fe      	movs	r2, #254	; 0xfe
 8004dc2:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <ProtocolSendHardReset>:

void ProtocolSendHardReset(Port_t *port)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
    FSC_U8 data = port->Registers.Control.byte[3] | 0x40;  /* Hard Reset bit */
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	73fb      	strb	r3, [r7, #15]

    /* If the shortcut flag is set, we've already sent the HR command */
    if (port->WaitingOnHR)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d004      	beq.n	8004dfa <ProtocolSendHardReset+0x2a>
    {
        port->WaitingOnHR = FALSE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    }
    else
    {
        DeviceWrite(port->I2cAddr, regControl3, 1, &data);
    }
}
 8004df8:	e008      	b.n	8004e0c <ProtocolSendHardReset+0x3c>
        DeviceWrite(port->I2cAddr, regControl3, 1, &data);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004e00:	f107 030f 	add.w	r3, r7, #15
 8004e04:	2201      	movs	r2, #1
 8004e06:	2109      	movs	r1, #9
 8004e08:	f001 fc8a 	bl	8006720 <DeviceWrite>
}
 8004e0c:	bf00      	nop
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <ProtocolFlushRxFIFO>:

void ProtocolFlushRxFIFO(Port_t *port)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
    FSC_U8 data = port->Registers.Control.byte[1] | 0x04;  /* RX_FLUSH bit */
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e22:	f043 0304 	orr.w	r3, r3, #4
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	73fb      	strb	r3, [r7, #15]
    DeviceWrite(port->I2cAddr, regControl1, 1, &data);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004e30:	f107 030f 	add.w	r3, r7, #15
 8004e34:	2201      	movs	r2, #1
 8004e36:	2107      	movs	r1, #7
 8004e38:	f001 fc72 	bl	8006720 <DeviceWrite>
}
 8004e3c:	bf00      	nop
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <ProtocolFlushTxFIFO>:

void ProtocolFlushTxFIFO(Port_t *port)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
    FSC_U8 data = port->Registers.Control.byte[0] | 0x40;  /* TX_FLUSH bit */
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	73fb      	strb	r3, [r7, #15]
    DeviceWrite(port->I2cAddr, regControl0, 1, &data);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004e60:	f107 030f 	add.w	r3, r7, #15
 8004e64:	2201      	movs	r2, #1
 8004e66:	2106      	movs	r1, #6
 8004e68:	f001 fc5a 	bl	8006720 <DeviceWrite>
}
 8004e6c:	bf00      	nop
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <ResetProtocolLayer>:

void ResetProtocolLayer(Port_t *port, FSC_BOOL ResetPDLogic)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	70fb      	strb	r3, [r7, #3]
    FSC_U32 i;
    FSC_U8 data = 0x02; /* PD_RESET bit */
 8004e80:	2302      	movs	r3, #2
 8004e82:	72fb      	strb	r3, [r7, #11]

    if (ResetPDLogic)
 8004e84:	78fb      	ldrb	r3, [r7, #3]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d008      	beq.n	8004e9c <ResetProtocolLayer+0x28>
    {
        DeviceWrite(port->I2cAddr, regReset, 1, &data);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8004e90:	f107 030b 	add.w	r3, r7, #11
 8004e94:	2201      	movs	r2, #1
 8004e96:	210c      	movs	r1, #12
 8004e98:	f001 fc42 	bl	8006720 <DeviceWrite>
    }

    port->ProtocolState = PRLIdle;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    port->PDTxStatus = txIdle;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2

    port->WaitingOnHR = FALSE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
#ifdef FSC_HAVE_VDM
    TimerDisable(&port->VdmTimer);
    port->VdmTimerStarted = FALSE;
#endif /* FSC_HAVE_VDM */

    port->ProtocolTxBytes = 0;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 21c5 	strb.w	r2, [r3, #453]	; 0x1c5

    for (i = 0; i < SOP_TYPE_NUM; i++)
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	e010      	b.n	8004ee4 <ResetProtocolLayer+0x70>
    {
        port->MessageIDCounter[i] = 0;
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f203 2346 	addw	r3, r3, #582	; 0x246
 8004ecc:	2200      	movs	r2, #0
 8004ece:	701a      	strb	r2, [r3, #0]
        port->MessageID[i] = 0xFF;
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f203 234b 	addw	r3, r3, #587	; 0x24b
 8004eda:	22ff      	movs	r2, #255	; 0xff
 8004edc:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < SOP_TYPE_NUM; i++)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d9eb      	bls.n	8004ec2 <ResetProtocolLayer+0x4e>
    }

    port->ProtocolMsgRx = FALSE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
    port->ProtocolMsgRxSop = SOP_TYPE_SOP;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
    port->ProtocolMsgRxPending = FALSE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
    port->USBPDTxFlag = FALSE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    port->PolicyHasContract = FALSE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    port->USBPDContract.object = 0;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

#ifdef FSC_DEBUG
    port->SourceCapsUpdated = TRUE;
#endif // FSC_DEBUG

    port->SrcCapsHeaderReceived.word = 0;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
    port->SnkCapsHeaderReceived.word = 0;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
    for (i = 0; i < 7; i++)
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	e00f      	b.n	8004f50 <ResetProtocolLayer+0xdc>
    {
        port->SrcCapsReceived[i].object = 0;
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3342      	adds	r3, #66	; 0x42
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	605a      	str	r2, [r3, #4]
        port->SnkCapsReceived[i].object = 0;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	324a      	adds	r2, #74	; 0x4a
 8004f44:	2100      	movs	r1, #0
 8004f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 7; i++)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b06      	cmp	r3, #6
 8004f54:	d9ec      	bls.n	8004f30 <ResetProtocolLayer+0xbc>
    }

#ifdef FSC_HAVE_EXT_MSG
    port->ExtWaitTxRx = FALSE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
    port->ExtChunkNum = 0;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
    port->ExtTxOrRx = NoXfer;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
    port->ExtChunkOffset = 0;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
#endif /* FSC_HAVE_EXT_MSG */
}
 8004f76:	bf00      	nop
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <PortInit>:
void InitializeTypeCVariables(Port_t *port);
void InitializePDProtocolVariables(Port_t *port);
void InitializePDPolicyVariables(Port_t *port);

void PortInit(Port_t *port, FSC_U8 i2cAddr)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	460b      	mov	r3, r1
 8004f88:	70fb      	strb	r3, [r7, #3]
    FSC_U8 i;

    port->I2cAddr = i2cAddr;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	78fa      	ldrb	r2, [r7, #3]
 8004f8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    port->PortConfig.PdRevPreferred = PD_Specification_Revision;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    port->PdRevSop = port->PortConfig.PdRevPreferred;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    port->PdRevCable = port->PortConfig.PdRevPreferred;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
    SetPortDefaultConfiguration(port);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f898 	bl	80050e8 <SetPortDefaultConfiguration>
    InitializeRegisters(port);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f8c5 	bl	8005148 <InitializeRegisters>
    InitializeTypeCVariables(port);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f99b 	bl	80052fa <InitializeTypeCVariables>
    InitializePDProtocolVariables(port);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 fa1a 	bl	80053fe <InitializePDProtocolVariables>
    InitializePDPolicyVariables(port);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fa24 	bl	8005418 <InitializePDPolicyVariables>

    /* Add timer objects to list to make timeout checking easier */
    port->Timers[0] = &port->PDDebounceTimer;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f503 7215 	add.w	r2, r3, #596	; 0x254
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
    port->Timers[1] = &port->CCDebounceTimer;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
    port->Timers[2] = &port->StateTimer;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f503 721b 	add.w	r2, r3, #620	; 0x26c
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
    port->Timers[3] = &port->LoopCountTimer;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
    port->Timers[4] = &port->PolicyStateTimer;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
    port->Timers[5] = &port->ProtocolTimer;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f503 7224 	add.w	r2, r3, #656	; 0x290
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
    port->Timers[6] = &port->SwapSourceStartTimer;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
    port->Timers[7] = &port->PpsTimer;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f503 722a 	add.w	r2, r3, #680	; 0x2a8
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
    port->Timers[8] = &port->VBusPollTimer;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f503 722d 	add.w	r2, r3, #692	; 0x2b4
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
    port->Timers[9] = &port->VdmTimer;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f503 7230 	add.w	r2, r3, #704	; 0x2c0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0

    for (i = 0; i < FSC_NUM_TIMERS; ++i)
 8005048:	2300      	movs	r3, #0
 800504a:	73fb      	strb	r3, [r7, #15]
 800504c:	e00b      	b.n	8005066 <PortInit+0xe8>
    {
      TimerDisable(port->Timers[i]);
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	33b2      	adds	r3, #178	; 0xb2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	4618      	mov	r0, r3
 800505c:	f001 fbb5 	bl	80067ca <TimerDisable>
    for (i = 0; i < FSC_NUM_TIMERS; ++i)
 8005060:	7bfb      	ldrb	r3, [r7, #15]
 8005062:	3301      	adds	r3, #1
 8005064:	73fb      	strb	r3, [r7, #15]
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	2b09      	cmp	r3, #9
 800506a:	d9f0      	bls.n	800504e <PortInit+0xd0>
    }
}
 800506c:	bf00      	nop
 800506e:	bf00      	nop
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <SetTypeCState>:

void SetTypeCState(Port_t *port, ConnectionState state)
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	460b      	mov	r3, r1
 8005080:	70fb      	strb	r3, [r7, #3]
    port->ConnState = state;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	78fa      	ldrb	r2, [r7, #3]
 8005086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    port->TypeCSubState = 0;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

#ifdef FSC_DEBUG
    WriteStateLog(&port->TypeCStateLog, port->ConnState,
                  platform_get_log_time());
#endif /* FSC_DEBUG */
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr

0800509c <SetPEState>:

void SetPEState(Port_t *port, PolicyState_t state)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	70fb      	strb	r3, [r7, #3]
    port->PolicyState = state;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	78fa      	ldrb	r2, [r7, #3]
 80050ac:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    port->PolicySubIndex = 0;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

    port->PDTxStatus = txIdle;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
    port->WaitingOnHR = FALSE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    port->WaitInSReady = FALSE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
    notify_observers(PD_STATE_CHANGED, port->I2cAddr, 0);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80050d6:	2200      	movs	r2, #0
 80050d8:	4619      	mov	r1, r3
 80050da:	2020      	movs	r0, #32
 80050dc:	f001 fde0 	bl	8006ca0 <notify_observers>
#ifdef FSC_DEBUG
    WriteStateLog(&port->PDStateLog, port->PolicyState,
                  platform_get_log_time());
#endif /* FSC_DEBUG */
}
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <SetPortDefaultConfiguration>:
/**
 * Initalize port policy variables to default. These are changed later by
 * policy manager.
 */
static void SetPortDefaultConfiguration(Port_t *port)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
#ifdef FSC_HAVE_SNK
    port->PortConfig.SinkRequestMaxVoltage   = 0;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	60da      	str	r2, [r3, #12]
    port->PortConfig.SinkRequestMaxPower     = PD_Power_as_Sink;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f646 1278 	movw	r2, #27000	; 0x6978
 80050fc:	611a      	str	r2, [r3, #16]
    port->PortConfig.SinkRequestOpPower      = PD_Power_as_Sink;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f646 1278 	movw	r2, #27000	; 0x6978
 8005104:	615a      	str	r2, [r3, #20]
    port->PortConfig.SinkGotoMinCompatible   = FALSE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	71da      	strb	r2, [r3, #7]
    port->PortConfig.SinkUSBSuspendOperation = No_USB_Suspend_May_Be_Set;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	721a      	strb	r2, [r3, #8]
    port->PortConfig.SinkUSBCommCapable      = USB_Comms_Capable;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	725a      	strb	r2, [r3, #9]
#ifdef FSC_HAVE_ACCMODE
    port->PortConfig.audioAccSupport   =Type_C_Supports_Audio_Accessory;
    port->PortConfig.poweredAccSupport =Type_C_Supports_Vconn_Powered_Accessory;
#endif /* FSC_HAVE_ACCMODE */

    port->PortConfig.RpVal = utccDefault;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2020 	strb.w	r2, [r3, #32]

    if ((Rp_Value + 1) > utccNone && (Rp_Value + 1) < utccInvalid)
        port->PortConfig.RpVal = Rp_Value + 1;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2203      	movs	r2, #3
 8005124:	f883 2020 	strb.w	r2, [r3, #32]

    switch (PD_Port_Type)
    {
    case 0:
        /* Consumer Only */
        port->PortConfig.PortType = USBTypeC_Sink;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	711a      	strb	r2, [r3, #4]
        break;
 800512e:	bf00      	nop
        port->PortConfig.PortType = USBTypeC_UNDEFINED;
        break;
    }

    /* Avoid undefined port type */
    if (port->PortConfig.PortType == USBTypeC_UNDEFINED)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	791b      	ldrb	r3, [r3, #4]
 8005134:	2b63      	cmp	r3, #99	; 0x63
 8005136:	d102      	bne.n	800513e <SetPortDefaultConfiguration+0x56>
    {
        port->PortConfig.PortType = USBTypeC_DRP;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	711a      	strb	r2, [r3, #4]
    {
        port->PortConfig.SrcPreferred = FALSE;
        port->PortConfig.SnkPreferred = FALSE;
    }
#endif /* FSC_HAVE_DRP */
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	bc80      	pop	{r7}
 8005146:	4770      	bx	lr

08005148 <InitializeRegisters>:

void InitializeRegisters(Port_t *port)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
    FSC_U8 reset = 0x01;
 8005150:	2301      	movs	r3, #1
 8005152:	73fb      	strb	r3, [r7, #15]
    DeviceWrite(port->I2cAddr, regReset, 1, &reset);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800515a:	f107 030f 	add.w	r3, r7, #15
 800515e:	2201      	movs	r2, #1
 8005160:	210c      	movs	r1, #12
 8005162:	f001 fadd 	bl	8006720 <DeviceWrite>

    DeviceRead(port->I2cAddr, regDeviceID, 1, &port->Registers.DeviceID.byte);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3328      	adds	r3, #40	; 0x28
 8005170:	2201      	movs	r2, #1
 8005172:	2101      	movs	r1, #1
 8005174:	f001 faf1 	bl	800675a <DeviceRead>
    DeviceRead(port->I2cAddr, regSwitches0,1,&port->Registers.Switches.byte[0]);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	332a      	adds	r3, #42	; 0x2a
 8005182:	2201      	movs	r2, #1
 8005184:	2102      	movs	r1, #2
 8005186:	f001 fae8 	bl	800675a <DeviceRead>
    DeviceRead(port->I2cAddr, regSwitches1,1,&port->Registers.Switches.byte[1]);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	332b      	adds	r3, #43	; 0x2b
 8005194:	2201      	movs	r2, #1
 8005196:	2103      	movs	r1, #3
 8005198:	f001 fadf 	bl	800675a <DeviceRead>
    DeviceRead(port->I2cAddr, regMeasure, 1, &port->Registers.Measure.byte);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	332c      	adds	r3, #44	; 0x2c
 80051a6:	2201      	movs	r2, #1
 80051a8:	2104      	movs	r1, #4
 80051aa:	f001 fad6 	bl	800675a <DeviceRead>
    DeviceRead(port->I2cAddr, regSlice, 1, &port->Registers.Slice.byte);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	332d      	adds	r3, #45	; 0x2d
 80051b8:	2201      	movs	r2, #1
 80051ba:	2105      	movs	r1, #5
 80051bc:	f001 facd 	bl	800675a <DeviceRead>
    DeviceRead(port->I2cAddr, regControl0, 1, &port->Registers.Control.byte[0]);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	3330      	adds	r3, #48	; 0x30
 80051ca:	2201      	movs	r2, #1
 80051cc:	2106      	movs	r1, #6
 80051ce:	f001 fac4 	bl	800675a <DeviceRead>
    DeviceRead(port->I2cAddr, regControl1, 1, &port->Registers.Control.byte[1]);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3331      	adds	r3, #49	; 0x31
 80051dc:	2201      	movs	r2, #1
 80051de:	2107      	movs	r1, #7
 80051e0:	f001 fabb 	bl	800675a <DeviceRead>
    DeviceRead(port->I2cAddr, regControl2, 1, &port->Registers.Control.byte[2]);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3332      	adds	r3, #50	; 0x32
 80051ee:	2201      	movs	r2, #1
 80051f0:	2108      	movs	r1, #8
 80051f2:	f001 fab2 	bl	800675a <DeviceRead>
    DeviceRead(port->I2cAddr, regControl3, 1, &port->Registers.Control.byte[3]);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3333      	adds	r3, #51	; 0x33
 8005200:	2201      	movs	r2, #1
 8005202:	2109      	movs	r1, #9
 8005204:	f001 faa9 	bl	800675a <DeviceRead>
    DeviceRead(port->I2cAddr, regMask, 1, &port->Registers.Mask.byte);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	3334      	adds	r3, #52	; 0x34
 8005212:	2201      	movs	r2, #1
 8005214:	210a      	movs	r1, #10
 8005216:	f001 faa0 	bl	800675a <DeviceRead>
    DeviceRead(port->I2cAddr, regPower, 1, &port->Registers.Power.byte);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3335      	adds	r3, #53	; 0x35
 8005224:	2201      	movs	r2, #1
 8005226:	210b      	movs	r1, #11
 8005228:	f001 fa97 	bl	800675a <DeviceRead>
    DeviceRead(port->I2cAddr, regReset, 1, &port->Registers.Reset.byte);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	3336      	adds	r3, #54	; 0x36
 8005236:	2201      	movs	r2, #1
 8005238:	210c      	movs	r1, #12
 800523a:	f001 fa8e 	bl	800675a <DeviceRead>
    DeviceRead(port->I2cAddr, regOCPreg, 1, &port->Registers.OCPreg.byte);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3337      	adds	r3, #55	; 0x37
 8005248:	2201      	movs	r2, #1
 800524a:	210d      	movs	r1, #13
 800524c:	f001 fa85 	bl	800675a <DeviceRead>
    DeviceRead(port->I2cAddr, regMaska, 1, &port->Registers.MaskAdv.byte[0]);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3338      	adds	r3, #56	; 0x38
 800525a:	2201      	movs	r2, #1
 800525c:	210e      	movs	r1, #14
 800525e:	f001 fa7c 	bl	800675a <DeviceRead>
    DeviceRead(port->I2cAddr, regMaskb, 1, &port->Registers.MaskAdv.byte[1]);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3339      	adds	r3, #57	; 0x39
 800526c:	2201      	movs	r2, #1
 800526e:	210f      	movs	r1, #15
 8005270:	f001 fa73 	bl	800675a <DeviceRead>
    DeviceRead(port->I2cAddr, regStatus0a, 1, &port->Registers.Status.byte[0]);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	333c      	adds	r3, #60	; 0x3c
 800527e:	2201      	movs	r2, #1
 8005280:	213c      	movs	r1, #60	; 0x3c
 8005282:	f001 fa6a 	bl	800675a <DeviceRead>
    DeviceRead(port->I2cAddr, regStatus1a, 1, &port->Registers.Status.byte[1]);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	333d      	adds	r3, #61	; 0x3d
 8005290:	2201      	movs	r2, #1
 8005292:	213d      	movs	r1, #61	; 0x3d
 8005294:	f001 fa61 	bl	800675a <DeviceRead>
    DeviceRead(port->I2cAddr, regInterrupta, 1,&port->Registers.Status.byte[2]);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	333e      	adds	r3, #62	; 0x3e
 80052a2:	2201      	movs	r2, #1
 80052a4:	213e      	movs	r1, #62	; 0x3e
 80052a6:	f001 fa58 	bl	800675a <DeviceRead>
    DeviceRead(port->I2cAddr, regInterruptb, 1,&port->Registers.Status.byte[3]);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	333f      	adds	r3, #63	; 0x3f
 80052b4:	2201      	movs	r2, #1
 80052b6:	213f      	movs	r1, #63	; 0x3f
 80052b8:	f001 fa4f 	bl	800675a <DeviceRead>
    DeviceRead(port->I2cAddr, regStatus0, 1, &port->Registers.Status.byte[4]);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3340      	adds	r3, #64	; 0x40
 80052c6:	2201      	movs	r2, #1
 80052c8:	2140      	movs	r1, #64	; 0x40
 80052ca:	f001 fa46 	bl	800675a <DeviceRead>
    DeviceRead(port->I2cAddr, regStatus1, 1, &port->Registers.Status.byte[5]);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3341      	adds	r3, #65	; 0x41
 80052d8:	2201      	movs	r2, #1
 80052da:	2141      	movs	r1, #65	; 0x41
 80052dc:	f001 fa3d 	bl	800675a <DeviceRead>
    DeviceRead(port->I2cAddr, regInterrupt, 1, &port->Registers.Status.byte[6]);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3342      	adds	r3, #66	; 0x42
 80052ea:	2201      	movs	r2, #1
 80052ec:	2142      	movs	r1, #66	; 0x42
 80052ee:	f001 fa34 	bl	800675a <DeviceRead>
}
 80052f2:	bf00      	nop
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <InitializeTypeCVariables>:

void InitializeTypeCVariables(Port_t *port)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
    port->Registers.Mask.byte = 0xFF;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	22ff      	movs	r2, #255	; 0xff
 8005306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    DeviceWrite(port->I2cAddr, regMask, 1, &port->Registers.Mask.byte);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3334      	adds	r3, #52	; 0x34
 8005314:	2201      	movs	r2, #1
 8005316:	210a      	movs	r1, #10
 8005318:	f001 fa02 	bl	8006720 <DeviceWrite>
    port->Registers.MaskAdv.byte[0] = 0xFF;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	22ff      	movs	r2, #255	; 0xff
 8005320:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    DeviceWrite(port->I2cAddr, regMaska, 1, &port->Registers.MaskAdv.byte[0]);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3338      	adds	r3, #56	; 0x38
 800532e:	2201      	movs	r2, #1
 8005330:	210e      	movs	r1, #14
 8005332:	f001 f9f5 	bl	8006720 <DeviceWrite>
    port->Registers.MaskAdv.M_GCRCSENT = 1;
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
    DeviceWrite(port->I2cAddr, regMaskb, 1, &port->Registers.MaskAdv.byte[1]);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3339      	adds	r3, #57	; 0x39
 800534e:	2201      	movs	r2, #1
 8005350:	210f      	movs	r1, #15
 8005352:	f001 f9e5 	bl	8006720 <DeviceWrite>

    /* Enable interrupt Pin */
    port->Registers.Control.INT_MASK = 0;
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800535c:	f36f 1345 	bfc	r3, #5, #1
 8005360:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    DeviceWrite(port->I2cAddr, regControl0, 1,&port->Registers.Control.byte[0]);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	3330      	adds	r3, #48	; 0x30
 800536e:	2201      	movs	r2, #1
 8005370:	2106      	movs	r1, #6
 8005372:	f001 f9d5 	bl	8006720 <DeviceWrite>

    /* These two control values allow detection of Ra-Ra or Ra-Open.
     * Enabling them will allow some corner case devices to connect where
     * they might not otherwise.
     */
    port->Registers.Control.TOG_RD_ONLY = 0;
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 800537c:	f36f 1345 	bfc	r3, #5, #1
 8005380:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
    DeviceWrite(port->I2cAddr, regControl2, 1,&port->Registers.Control.byte[2]);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	3332      	adds	r3, #50	; 0x32
 800538e:	2201      	movs	r2, #1
 8005390:	2108      	movs	r1, #8
 8005392:	f001 f9c5 	bl	8006720 <DeviceWrite>
    port->Registers.Control4.TOG_USRC_EXIT = 0;
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 800539c:	f36f 0300 	bfc	r3, #0, #1
 80053a0:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
    DeviceWrite(port->I2cAddr, regControl4, 1, &port->Registers.Control4.byte);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	333a      	adds	r3, #58	; 0x3a
 80053ae:	2201      	movs	r2, #1
 80053b0:	2110      	movs	r1, #16
 80053b2:	f001 f9b5 	bl	8006720 <DeviceWrite>

    port->TCIdle = TRUE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    port->SMEnabled = FALSE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f

    SetTypeCState(port, Disabled);
 80053c6:	2100      	movs	r1, #0
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff fe54 	bl	8005076 <SetTypeCState>

    port->DetachThreshold = VBUS_MV_VSAFE5V_DISC;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f640 6256 	movw	r2, #3670	; 0xe56
 80053d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    port->CCPin = CCNone;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    port->C2ACable = FALSE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

    resetDebounceVariables(port);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fe1a 	bl	8006022 <resetDebounceVariables>

#ifdef FSC_HAVE_SNK
    /* Clear the current advertisement initially */
    port->SinkCurrent = utccNone;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
#endif /* FSC_HAVE_SNK */

#ifdef FSC_DEBUG
    InitializeStateLog(&port->TypeCStateLog);
#endif /* FSC_DEBUG */
}
 80053f6:	bf00      	nop
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <InitializePDProtocolVariables>:

void InitializePDProtocolVariables(Port_t *port)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
    port->DoTxFlush = FALSE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	bc80      	pop	{r7}
 8005416:	4770      	bx	lr

08005418 <InitializePDPolicyVariables>:

void InitializePDPolicyVariables(Port_t *port)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
    port->isContractValid = FALSE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

    port->IsHardReset = FALSE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
    port->IsPRSwap = FALSE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    port->WaitingOnHR = FALSE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

    port->PEIdle = TRUE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    port->USBPDActive = FALSE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    port->USBPDEnabled = TRUE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
#ifdef FSC_DEBUG
    port->SourceCapsUpdated = FALSE;
#endif /* FSC_DEBUG */

    /* Source Caps & Header */
    port->src_cap_header.word = 0;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    port->src_cap_header.NumDataObjects = NUMBER_OF_SRC_PDOS_ENABLED;
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	f892 3067 	ldrb.w	r3, [r2, #103]	; 0x67
 8005466:	2101      	movs	r1, #1
 8005468:	f361 1306 	bfi	r3, r1, #4, #3
 800546c:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
    port->src_cap_header.MessageType    = DMTSourceCapabilities;
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8005476:	2101      	movs	r1, #1
 8005478:	f361 0304 	bfi	r3, r1, #0, #5
 800547c:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
    port->src_cap_header.SpecRevision   = port->PortConfig.PdRevPreferred;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	b2d9      	uxtb	r1, r3
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8005492:	f361 1387 	bfi	r3, r1, #6, #2
 8005496:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66

    VIF_InitializeSrcCaps(port->src_caps);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	336c      	adds	r3, #108	; 0x6c
 800549e:	4618      	mov	r0, r3
 80054a0:	f001 fa05 	bl	80068ae <VIF_InitializeSrcCaps>

    /* Sink Caps & Header */
    port->snk_cap_header.word = 0;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    port->snk_cap_header.NumDataObjects = NUMBER_OF_SNK_PDOS_ENABLED;
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	f892 3069 	ldrb.w	r3, [r2, #105]	; 0x69
 80054b2:	2104      	movs	r1, #4
 80054b4:	f361 1306 	bfi	r3, r1, #4, #3
 80054b8:	f882 3069 	strb.w	r3, [r2, #105]	; 0x69
    port->snk_cap_header.MessageType    = DMTSinkCapabilities;
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 80054c2:	2104      	movs	r1, #4
 80054c4:	f361 0304 	bfi	r3, r1, #0, #5
 80054c8:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
    port->snk_cap_header.SpecRevision   = port->PortConfig.PdRevPreferred;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	b2d9      	uxtb	r1, r3
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 80054de:	f361 1387 	bfi	r3, r1, #6, #2
 80054e2:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68

    VIF_InitializeSnkCaps(port->snk_caps);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3388      	adds	r3, #136	; 0x88
 80054ea:	4618      	mov	r0, r3
 80054ec:	f001 fa40 	bl	8006970 <VIF_InitializeSnkCaps>
#endif /* FSC_HAVE_VDM */

#ifdef FSC_DEBUG
    InitializeStateLog(&port->PDStateLog);
#endif /* FSC_DEBUG */
}
 80054f0:	bf00      	nop
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <SetConfiguredCurrent>:

void SetConfiguredCurrent(Port_t *port)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
    switch (port->PortConfig.RpVal)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005506:	2b03      	cmp	r3, #3
 8005508:	d010      	beq.n	800552c <SetConfiguredCurrent+0x34>
 800550a:	2b03      	cmp	r3, #3
 800550c:	dc13      	bgt.n	8005536 <SetConfiguredCurrent+0x3e>
 800550e:	2b01      	cmp	r3, #1
 8005510:	d002      	beq.n	8005518 <SetConfiguredCurrent+0x20>
 8005512:	2b02      	cmp	r3, #2
 8005514:	d005      	beq.n	8005522 <SetConfiguredCurrent+0x2a>
 8005516:	e00e      	b.n	8005536 <SetConfiguredCurrent+0x3e>
    {
    case 1:
        port->SourceCurrent = utccDefault;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        break;
 8005520:	e00e      	b.n	8005540 <SetConfiguredCurrent+0x48>
    case 2:
        port->SourceCurrent = utcc1p5A;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2202      	movs	r2, #2
 8005526:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        break;
 800552a:	e009      	b.n	8005540 <SetConfiguredCurrent+0x48>
    case 3:
        port->SourceCurrent = utcc3p0A;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2203      	movs	r2, #3
 8005530:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        break;
 8005534:	e004      	b.n	8005540 <SetConfiguredCurrent+0x48>
    default:
        port->SourceCurrent = utccNone;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        break;
 800553e:	bf00      	nop
    }
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr
	...

0800554c <StateMachineTypeC>:
#ifdef FSC_DEBUG
#include "Log.h"
#endif /* FSC_DEBUG */

void StateMachineTypeC(Port_t *port)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
    do
    {

    if (!port->SMEnabled)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 80a2 	beq.w	80056a4 <StateMachineTypeC+0x158>
    {
        return;
    }

    port->TCIdle = FALSE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    if (platform_get_device_irq_state(port->PortID))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800556e:	4618      	mov	r0, r3
 8005570:	f7fb f8d4 	bl	800071c <platform_get_device_irq_state>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00e      	beq.n	8005598 <StateMachineTypeC+0x4c>
    {
        /* Read the interrupta, interruptb, status0, status1 and
         * interrupt registers.
         */
    	FSC_BOOL result = DeviceRead(port->I2cAddr, regInterrupta, 5,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	333e      	adds	r3, #62	; 0x3e
 8005584:	2205      	movs	r2, #5
 8005586:	213e      	movs	r1, #62	; 0x3e
 8005588:	f001 f8e7 	bl	800675a <DeviceRead>
 800558c:	4603      	mov	r3, r0
 800558e:	73fb      	strb	r3, [r7, #15]
                   &port->Registers.Status.byte[2]);
    	if(result !=  TRUE)  {
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	2b01      	cmp	r3, #1
 8005594:	f040 8088 	bne.w	80056a8 <StateMachineTypeC+0x15c>
    		break;
    	}
    }

    if (port->USBPDActive)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d012      	beq.n	80055c8 <StateMachineTypeC+0x7c>
    {
        port->PEIdle = FALSE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        
        /* Protocol operations */
        USBPDProtocol(port);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fe fba2 	bl	8003cf4 <USBPDProtocol>

        /* Policy Engine operations */
        USBPDPolicyEngine(port);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7fb fcd1 	bl	8000f58 <USBPDPolicyEngine>

#ifdef FSC_HAVE_EXT_MSG
        /* Extended messaging may require additional chunk handling
         * before idling.
         */
        if (port->ExtTxOrRx != NoXfer)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <StateMachineTypeC+0x7c>
        {
            /* Don't allow system to idle */
            port->PEIdle = FALSE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
#endif /* FSC_HAVE_EXT_MSG */
    }

    switch (port->ConnState)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055ce:	2b1a      	cmp	r3, #26
 80055d0:	d850      	bhi.n	8005674 <StateMachineTypeC+0x128>
 80055d2:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <StateMachineTypeC+0x8c>)
 80055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d8:	08005645 	.word	0x08005645
 80055dc:	0800564d 	.word	0x0800564d
 80055e0:	08005655 	.word	0x08005655
 80055e4:	0800565d 	.word	0x0800565d
 80055e8:	08005665 	.word	0x08005665
 80055ec:	08005675 	.word	0x08005675
 80055f0:	08005675 	.word	0x08005675
 80055f4:	08005675 	.word	0x08005675
 80055f8:	08005675 	.word	0x08005675
 80055fc:	08005675 	.word	0x08005675
 8005600:	08005675 	.word	0x08005675
 8005604:	08005675 	.word	0x08005675
 8005608:	08005675 	.word	0x08005675
 800560c:	08005675 	.word	0x08005675
 8005610:	08005675 	.word	0x08005675
 8005614:	08005675 	.word	0x08005675
 8005618:	08005675 	.word	0x08005675
 800561c:	08005675 	.word	0x08005675
 8005620:	08005675 	.word	0x08005675
 8005624:	08005675 	.word	0x08005675
 8005628:	08005675 	.word	0x08005675
 800562c:	08005675 	.word	0x08005675
 8005630:	08005675 	.word	0x08005675
 8005634:	08005675 	.word	0x08005675
 8005638:	08005675 	.word	0x08005675
 800563c:	08005675 	.word	0x08005675
 8005640:	0800566d 	.word	0x0800566d
    {
    case Disabled:
        StateMachineDisabled(port);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f833 	bl	80056b0 <StateMachineDisabled>
        break;
 800564a:	e017      	b.n	800567c <StateMachineTypeC+0x130>
    case ErrorRecovery:
        StateMachineErrorRecovery(port);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f838 	bl	80056c2 <StateMachineErrorRecovery>
        break;
 8005652:	e013      	b.n	800567c <StateMachineTypeC+0x130>
    case Unattached:
        StateMachineUnattached(port);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f848 	bl	80056ea <StateMachineUnattached>
        break;
 800565a:	e00f      	b.n	800567c <StateMachineTypeC+0x130>
#ifdef FSC_HAVE_SNK
    case AttachWaitSink:
        StateMachineAttachWaitSink(port);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f8ba 	bl	80057d6 <StateMachineAttachWaitSink>
        break;
 8005662:	e00b      	b.n	800567c <StateMachineTypeC+0x130>
    case AttachedSink:
        StateMachineAttachedSink(port);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f929 	bl	80058bc <StateMachineAttachedSink>
        break;
 800566a:	e007      	b.n	800567c <StateMachineTypeC+0x130>
    case PoweredAccessory:
        StateMachinePoweredAccessory(port);
        break;
#endif /* FSC_HAVE_SNK && FSC_HAVE_ACCMODE */
    case IllegalCable:
        StateMachineIllegalCable(port);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 ff90 	bl	8006592 <StateMachineIllegalCable>
        break;
 8005672:	e003      	b.n	800567c <StateMachineTypeC+0x130>
    default:
        SetStateUnattached(port);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f991 	bl	800599c <SetStateUnattached>
        break;
 800567a:	bf00      	nop
    }

    /* Clear the interrupt registers after processing the state machines */
    port->Registers.Status.Interrupt1 = 0;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    port->Registers.Status.InterruptAdv = 0;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	87da      	strh	r2, [r3, #62]	; 0x3e

    } while (port->TCIdle == FALSE || port->PEIdle == FALSE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005690:	2b00      	cmp	r3, #0
 8005692:	f43f af5f 	beq.w	8005554 <StateMachineTypeC+0x8>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800569c:	2b00      	cmp	r3, #0
 800569e:	f43f af59 	beq.w	8005554 <StateMachineTypeC+0x8>
 80056a2:	e002      	b.n	80056aa <StateMachineTypeC+0x15e>
        return;
 80056a4:	bf00      	nop
 80056a6:	e000      	b.n	80056aa <StateMachineTypeC+0x15e>
    		break;
 80056a8:	bf00      	nop
}
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <StateMachineDisabled>:

void StateMachineDisabled(Port_t *port)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
    /* Do nothing until directed to go to some other state... */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	bc80      	pop	{r7}
 80056c0:	4770      	bx	lr

080056c2 <StateMachineErrorRecovery>:

void StateMachineErrorRecovery(Port_t *port)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b082      	sub	sp, #8
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
    if (TimerExpired(&port->StateTimer))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 80056d0:	4618      	mov	r0, r3
 80056d2:	f001 f89a 	bl	800680a <TimerExpired>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <StateMachineErrorRecovery+0x20>
    {
        SetStateUnattached(port);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f95d 	bl	800599c <SetStateUnattached>
    }
}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <StateMachineUnattached>:

void StateMachineUnattached(Port_t *port)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b082      	sub	sp, #8
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
    port->TCIdle = TRUE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    if (TimerExpired(&port->LoopCountTimer))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005700:	4618      	mov	r0, r3
 8005702:	f001 f882 	bl	800680a <TimerExpired>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d009      	beq.n	8005720 <StateMachineUnattached+0x36>
    {
        /* Detached for ~100ms - safe to clear the loop counter */
        TimerDisable(&port->LoopCountTimer);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005712:	4618      	mov	r0, r3
 8005714:	f001 f859 	bl	80067ca <TimerDisable>
        port->loopCounter = 0;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    if (port->Registers.Status.I_TOGDONE)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d04d      	beq.n	80057cc <StateMachineUnattached+0xe2>
    {
        TimerDisable(&port->LoopCountTimer);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005736:	4618      	mov	r0, r3
 8005738:	f001 f847 	bl	80067ca <TimerDisable>
        
        DeviceRead(port->I2cAddr, regStatus1a, 1,
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	333d      	adds	r3, #61	; 0x3d
 8005746:	2201      	movs	r2, #1
 8005748:	213d      	movs	r1, #61	; 0x3d
 800574a:	f001 f806 	bl	800675a <DeviceRead>
                   &port->Registers.Status.byte[1]);

        switch (port->Registers.Status.TOGSS)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005754:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b05      	cmp	r3, #5
 800575c:	d002      	beq.n	8005764 <StateMachineUnattached+0x7a>
 800575e:	2b06      	cmp	r3, #6
 8005760:	d008      	beq.n	8005774 <StateMachineUnattached+0x8a>
 8005762:	e00f      	b.n	8005784 <StateMachineUnattached+0x9a>
        {
#ifdef FSC_HAVE_SNK
        case 0x5: /* Rp detected on CC1 */
            port->CCPin = CC1;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            SetStateAttachWaitSink(port);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f9b5 	bl	8005adc <SetStateAttachWaitSink>
            break;
 8005772:	e02c      	b.n	80057ce <StateMachineUnattached+0xe4>
        case 0x6: /* Rp detected on CC2 */
            port->CCPin = CC2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            SetStateAttachWaitSink(port);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f9ad 	bl	8005adc <SetStateAttachWaitSink>
            break;
 8005782:	e024      	b.n	80057ce <StateMachineUnattached+0xe4>
#endif /* FSC_HAVE_SRC */
            break;
#endif /* FSC_HAVE_SRC || (FSC_HAVE_SNK && FSC_HAVE_ACCMODE) */
        default:
            /* Shouldn't get here, but just in case reset everything... */
            port->Registers.Control.TOGGLE = 0;
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 800578a:	f36f 0300 	bfc	r3, #0, #1
 800578e:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
            DeviceWrite(port->I2cAddr, regControl2, 1,
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3332      	adds	r3, #50	; 0x32
 800579c:	2201      	movs	r2, #1
 800579e:	2108      	movs	r1, #8
 80057a0:	f000 ffbe 	bl	8006720 <DeviceWrite>
                        &port->Registers.Control.byte[2]);

            platform_delay_10us(1);
 80057a4:	2001      	movs	r0, #1
 80057a6:	f7fb f829 	bl	80007fc <platform_delay_10us>

            /* Re-enable the toggle state machine... (allows us to get
             * another I_TOGDONE interrupt)
             */
            port->Registers.Control.TOGGLE = 1;
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 80057b0:	f043 0301 	orr.w	r3, r3, #1
 80057b4:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
            DeviceWrite(port->I2cAddr, regControl2, 1,
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3332      	adds	r3, #50	; 0x32
 80057c2:	2201      	movs	r2, #1
 80057c4:	2108      	movs	r1, #8
 80057c6:	f000 ffab 	bl	8006720 <DeviceWrite>
                        &port->Registers.Control.byte[2]);
            break;
 80057ca:	e000      	b.n	80057ce <StateMachineUnattached+0xe4>
        }
    }
 80057cc:	bf00      	nop
}
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <StateMachineAttachWaitSink>:

#ifdef FSC_HAVE_SNK
void StateMachineAttachWaitSink(Port_t *port)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
    port->TCIdle = TRUE;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    debounceCC(port);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fc38 	bl	800605c <debounceCC>

    if(port->Registers.Status.ACTIVITY == 1)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d15b      	bne.n	80058b4 <StateMachineAttachWaitSink+0xde>
        /* PD Traffic will prevent correct use of BC_LVL during debouncing */
        return;
    }

    /* Look for an open termination for > tPDDebounce. */
    if(port->CCTermPDDebounce == CCTypeOpen)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005802:	2b00      	cmp	r3, #0
 8005804:	d128      	bne.n	8005858 <StateMachineAttachWaitSink+0x82>
    {
        /* PDDebounce Expired means the selected pin is open. Check other CC. */
        ToggleMeasure(port);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fa92 	bl	8005d30 <ToggleMeasure>
        port->CCPin = (port->CCPin == CC1) ? CC2 : CC1;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005812:	2b01      	cmp	r3, #1
 8005814:	d101      	bne.n	800581a <StateMachineAttachWaitSink+0x44>
 8005816:	2202      	movs	r2, #2
 8005818:	e000      	b.n	800581c <StateMachineAttachWaitSink+0x46>
 800581a:	2201      	movs	r2, #1
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        port->CCTerm = DecodeCCTerminationSink(port);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fad5 	bl	8005dd2 <DecodeCCTerminationSink>
 8005828:	4603      	mov	r3, r0
 800582a:	461a      	mov	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

        if(port->CCTerm == CCTypeOpen)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005838:	2b00      	cmp	r3, #0
 800583a:	d103      	bne.n	8005844 <StateMachineAttachWaitSink+0x6e>
                return;
            }
            else
#endif // FSC_HAVE_DRP
            {
                SetStateUnattached(port);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f8ad 	bl	800599c <SetStateUnattached>
                return;
 8005842:	e038      	b.n	80058b6 <StateMachineAttachWaitSink+0xe0>
            }
        }
        else
        {
            /* Other pin is attached.  Continue debouncing other pin. */
            TimerDisable(&port->PDDebounceTimer);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800584a:	4618      	mov	r0, r3
 800584c:	f000 ffbd 	bl	80067ca <TimerDisable>
            port->CCTermPDDebounce = CCTypeUndefined;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2205      	movs	r2, #5
 8005854:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        }
    }

    /* CC Debounce the selected CC pin. */
    if (port->CCTermCCDebounce == CCTypeRdUSB)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800585e:	2b02      	cmp	r3, #2
 8005860:	d129      	bne.n	80058b6 <StateMachineAttachWaitSink+0xe0>
    {
        updateVCONNSink(port);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fd08 	bl	8006278 <updateVCONNSink>

        if (isVSafe5V(port))
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 fb1f 	bl	8005eac <isVSafe5V>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d016      	beq.n	80058a2 <StateMachineAttachWaitSink+0xcc>
        {
            if((port->VCONNTerm >= CCTypeRdUSB) &&
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800587a:	2b01      	cmp	r3, #1
 800587c:	d908      	bls.n	8005890 <StateMachineAttachWaitSink+0xba>
               (port->VCONNTerm < CCTypeUndefined))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
            if((port->VCONNTerm >= CCTypeRdUSB) &&
 8005884:	2b04      	cmp	r3, #4
 8005886:	d803      	bhi.n	8005890 <StateMachineAttachWaitSink+0xba>
            {
                /* Rp-Rp */
                if(Type_C_Is_Debug_Target_SNK)
                {
                    SetStateDebugAccessorySink(port);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f985 	bl	8005b98 <SetStateDebugAccessorySink>
                if(Type_C_Is_Debug_Target_SNK)
 800588e:	e012      	b.n	80058b6 <StateMachineAttachWaitSink+0xe0>
                }
            }
            else if(port->VCONNTerm == CCTypeOpen)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10d      	bne.n	80058b6 <StateMachineAttachWaitSink+0xe0>
                    SetStateTrySource(port);
                }
                else
#endif // FSC_HAVE_DRP
                {
                    SetStateAttachedSink(port);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f9c4 	bl	8005c28 <SetStateAttachedSink>
 80058a0:	e009      	b.n	80058b6 <StateMachineAttachWaitSink+0xe0>
                }
            }
        }
        else
        {
            TimerStart(&port->VBusPollTimer, tVBusPollShort);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80058a8:	f242 7110 	movw	r1, #10000	; 0x2710
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 ff71 	bl	8006794 <TimerStart>
 80058b2:	e000      	b.n	80058b6 <StateMachineAttachWaitSink+0xe0>
        return;
 80058b4:	bf00      	nop
        }
    }
}
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <StateMachineAttachedSink>:
}
#endif /* FSC_HAVE_SRC */

#ifdef FSC_HAVE_SNK
void StateMachineAttachedSink(Port_t *port)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
    port->TCIdle = TRUE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Monitor for VBus drop to detach
     * Round up detach threshold to help check slow discharge or noise on VBus
     */
    if (port->Registers.Status.I_COMP_CHNG == 1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01a      	beq.n	8005912 <StateMachineAttachedSink+0x56>
    {
        if (!port->IsPRSwap && !port->IsHardReset &&
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d115      	bne.n	8005912 <StateMachineAttachedSink+0x56>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d110      	bne.n	8005912 <StateMachineAttachedSink+0x56>
            !isVBUSOverVoltage(port, port->DetachThreshold + MDAC_MV_LSB))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058f6:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	4619      	mov	r1, r3
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fae2 	bl	8005ec8 <isVBUSOverVoltage>
 8005904:	4603      	mov	r3, r0
        if (!port->IsPRSwap && !port->IsHardReset &&
 8005906:	2b00      	cmp	r3, #0
 8005908:	d103      	bne.n	8005912 <StateMachineAttachedSink+0x56>
        {
            SetStateUnattached(port);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f846 	bl	800599c <SetStateUnattached>
            return;
 8005910:	e026      	b.n	8005960 <StateMachineAttachedSink+0xa4>
        }
    }

    if (!port->IsPRSwap)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005918:	2b00      	cmp	r3, #0
 800591a:	d102      	bne.n	8005922 <StateMachineAttachedSink+0x66>
    {
        debounceCC(port);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fb9d 	bl	800605c <debounceCC>
    }

    /* If using PD, sink can monitor CC as well as VBUS to allow detach
     * during a hard reset
     */
    if (port->USBPDActive && !port->IsPRSwap &&
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00d      	beq.n	8005948 <StateMachineAttachedSink+0x8c>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005932:	2b00      	cmp	r3, #0
 8005934:	d108      	bne.n	8005948 <StateMachineAttachedSink+0x8c>
        port->CCTermPDDebounce == CCTypeOpen)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    if (port->USBPDActive && !port->IsPRSwap &&
 800593c:	2b00      	cmp	r3, #0
 800593e:	d103      	bne.n	8005948 <StateMachineAttachedSink+0x8c>
    {
        SetStateUnattached(port);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f82b 	bl	800599c <SetStateUnattached>
        return;
 8005946:	e00b      	b.n	8005960 <StateMachineAttachedSink+0xa4>
    }

    /* Update the advertised current */
    if (port->CCTermPDDebounce != CCTypeUndefined)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800594e:	2b05      	cmp	r3, #5
 8005950:	d006      	beq.n	8005960 <StateMachineAttachedSink+0xa4>
    {
        UpdateSinkCurrent(port, port->CCTermPDDebounce);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005958:	4619      	mov	r1, r3
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fa69 	bl	8005e32 <UpdateSinkCurrent>
    }
}
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <SetStateErrorRecovery>:

    clearState(port);
}

void SetStateErrorRecovery(Port_t *port)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
    port->TCIdle = TRUE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    SetTypeCState(port, ErrorRecovery);
 8005976:	2101      	movs	r1, #1
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7ff fb7c 	bl	8005076 <SetTypeCState>
    TimerStart(&port->StateTimer, tErrorRecovery);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8005984:	f247 5130 	movw	r1, #30000	; 0x7530
 8005988:	4618      	mov	r0, r3
 800598a:	f000 ff03 	bl	8006794 <TimerStart>

    clearState(port);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fc88 	bl	80062a4 <clearState>
}
 8005994:	bf00      	nop
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <SetStateUnattached>:

void SetStateUnattached(Port_t *port)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
    port->TCIdle = TRUE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    SetTypeCState(port, Unattached);
 80059ac:	2102      	movs	r1, #2
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff fb61 	bl	8005076 <SetTypeCState>

    clearState(port);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 fc75 	bl	80062a4 <clearState>

    port->Registers.Control.TOGGLE = 0;
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 80059c0:	f36f 0300 	bfc	r3, #0, #1
 80059c4:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
    DeviceWrite(port->I2cAddr, regControl2, 1,&port->Registers.Control.byte[2]);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3332      	adds	r3, #50	; 0x32
 80059d2:	2201      	movs	r2, #1
 80059d4:	2108      	movs	r1, #8
 80059d6:	f000 fea3 	bl	8006720 <DeviceWrite>

    port->Registers.Measure.MEAS_VBUS = 0;
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80059e0:	f36f 1386 	bfc	r3, #6, #1
 80059e4:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
    DeviceWrite(port->I2cAddr, regMeasure, 1, &port->Registers.Measure.byte);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	332c      	adds	r3, #44	; 0x2c
 80059f2:	2201      	movs	r2, #1
 80059f4:	2104      	movs	r1, #4
 80059f6:	f000 fe93 	bl	8006720 <DeviceWrite>

    port->Registers.MaskAdv.M_TOGDONE = 0;
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8005a00:	f36f 1386 	bfc	r3, #6, #1
 8005a04:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
    DeviceWrite(port->I2cAddr, regMaska, 1, &port->Registers.MaskAdv.byte[0]);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	3338      	adds	r3, #56	; 0x38
 8005a12:	2201      	movs	r2, #1
 8005a14:	210e      	movs	r1, #14
 8005a16:	f000 fe83 	bl	8006720 <DeviceWrite>

    /* Host current must be set to default for Toggle Functionality */
    if (port->Registers.Control.HOST_CUR != 0x1)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a20:	f003 030c 	and.w	r3, r3, #12
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	d010      	beq.n	8005a4c <SetStateUnattached+0xb0>
    {
        port->Registers.Control.HOST_CUR = 0x1;
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005a30:	2101      	movs	r1, #1
 8005a32:	f361 0383 	bfi	r3, r1, #2, #2
 8005a36:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        DeviceWrite(port->I2cAddr, regControl0, 1,
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3330      	adds	r3, #48	; 0x30
 8005a44:	2201      	movs	r2, #1
 8005a46:	2106      	movs	r1, #6
 8005a48:	f000 fe6a 	bl	8006720 <DeviceWrite>
                    &port->Registers.Control.byte[0]);
    }

    if (port->PortConfig.PortType == USBTypeC_DRP)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	791b      	ldrb	r3, [r3, #4]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d108      	bne.n	8005a66 <SetStateUnattached+0xca>
    {
        /* DRP - Configure Rp/Rd toggling */
        port->Registers.Control.MODE = 0x1;
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	f361 0342 	bfi	r3, r1, #1, #2
 8005a60:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
 8005a64:	e013      	b.n	8005a8e <SetStateUnattached+0xf2>
    {
        /* Sink + Acc - Configure Rp/Rd toggling */
        port->Registers.Control.MODE = 0x1;
    }
#endif /* FSC_HAVE_ACCMODE */
    else if (port->PortConfig.PortType == USBTypeC_Source)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	791b      	ldrb	r3, [r3, #4]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d107      	bne.n	8005a7e <SetStateUnattached+0xe2>
    {
        /* Source - Look for Rd */
        port->Registers.Control.MODE = 0x3;
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8005a74:	f043 0306 	orr.w	r3, r3, #6
 8005a78:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
 8005a7c:	e007      	b.n	8005a8e <SetStateUnattached+0xf2>
    }
    else
    {
        /* Sink - Look for Rp */
        port->Registers.Control.MODE = 0x2;
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8005a84:	2102      	movs	r1, #2
 8005a86:	f361 0342 	bfi	r3, r1, #1, #2
 8005a8a:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
    }

    /* Delay before re-enabling toggle */
    platform_delay_10us(25);
 8005a8e:	2019      	movs	r0, #25
 8005a90:	f7fa feb4 	bl	80007fc <platform_delay_10us>
    port->Registers.Control.TOGGLE = 1;
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8005a9a:	f043 0301 	orr.w	r3, r3, #1
 8005a9e:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
    DeviceWrite(port->I2cAddr, regControl0, 3,&port->Registers.Control.byte[0]);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3330      	adds	r3, #48	; 0x30
 8005aac:	2203      	movs	r2, #3
 8005aae:	2106      	movs	r1, #6
 8005ab0:	f000 fe36 	bl	8006720 <DeviceWrite>

    TimerDisable(&port->StateTimer);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fe85 	bl	80067ca <TimerDisable>

    /* Wait to clear the connect loop counter till detached for > ~100ms. */
    TimerStart(&port->LoopCountTimer, tLoopReset);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ac6:	4904      	ldr	r1, [pc, #16]	; (8005ad8 <SetStateUnattached+0x13c>)
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f000 fe63 	bl	8006794 <TimerStart>
}
 8005ace:	bf00      	nop
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	000186a0 	.word	0x000186a0

08005adc <SetStateAttachWaitSink>:

#ifdef FSC_HAVE_SNK
void SetStateAttachWaitSink(Port_t *port)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
    port->TCIdle = FALSE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    SetTypeCState(port, AttachWaitSink);
 8005aec:	2103      	movs	r1, #3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff fac1 	bl	8005076 <SetTypeCState>

    /* Swap toggle state machine current if looping */
    if (port->loopCounter++ > MAX_CABLE_LOOP)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005afa:	1c5a      	adds	r2, r3, #1
 8005afc:	b2d1      	uxtb	r1, r2
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
 8005b04:	2b14      	cmp	r3, #20
 8005b06:	d903      	bls.n	8005b10 <SetStateAttachWaitSink+0x34>
    {
        SetStateIllegalCable(port);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fc5c 	bl	80063c6 <SetStateIllegalCable>
        return;
 8005b0e:	e040      	b.n	8005b92 <SetStateAttachWaitSink+0xb6>
    }

    setStateSink(port);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fb19 	bl	8006148 <setStateSink>

    /* Disable the Toggle functionality */
    port->Registers.Control.TOGGLE = 0;
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8005b1c:	f36f 0300 	bfc	r3, #0, #1
 8005b20:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
    DeviceWrite(port->I2cAddr, regControl2, 1,&port->Registers.Control.byte[2]);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3332      	adds	r3, #50	; 0x32
 8005b2e:	2201      	movs	r2, #1
 8005b30:	2108      	movs	r1, #8
 8005b32:	f000 fdf5 	bl	8006720 <DeviceWrite>

    /* Enable interrupts */
    port->Registers.Mask.M_ACTIVITY = 0;
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8005b3c:	f36f 1386 	bfc	r3, #6, #1
 8005b40:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    DeviceWrite(port->I2cAddr, regMask, 1, &port->Registers.Mask.byte);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3334      	adds	r3, #52	; 0x34
 8005b4e:	2201      	movs	r2, #1
 8005b50:	210a      	movs	r1, #10
 8005b52:	f000 fde5 	bl	8006720 <DeviceWrite>

    /* Check for a possible C-to-A cable situation */
    if (isVSafe5V(port))
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f9a8 	bl	8005eac <isVSafe5V>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <SetStateAttachWaitSink+0x8e>
    {
        port->C2ACable = TRUE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
    }

    /* Check for detach before continuing - FUSB302-210*/
    DeviceRead(port->I2cAddr, regStatus0, 1, &port->Registers.Status.byte[4]);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3340      	adds	r3, #64	; 0x40
 8005b74:	2201      	movs	r2, #1
 8005b76:	2140      	movs	r1, #64	; 0x40
 8005b78:	f000 fdef 	bl	800675a <DeviceRead>
    if (port->Registers.Status.BC_LVL == 0)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b82:	f003 0303 	and.w	r3, r3, #3
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d102      	bne.n	8005b92 <SetStateAttachWaitSink+0xb6>
    {
        SetStateUnattached(port);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7ff ff05 	bl	800599c <SetStateUnattached>
    }
}
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <SetStateDebugAccessorySink>:

void SetStateDebugAccessorySink(Port_t *port)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
    port->TCIdle = TRUE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    port->loopCounter = 0;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    SetTypeCState(port, DebugAccessorySink);
 8005bb0:	2112      	movs	r1, #18
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7ff fa5f 	bl	8005076 <SetTypeCState>
    setStateSink(port);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fac5 	bl	8006148 <setStateSink>

    port->Registers.Measure.MEAS_VBUS = 1;
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bc8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
    port->Registers.Measure.MDAC = (port->DetachThreshold / MDAC_MV_LSB) - 1;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bd2:	089b      	lsrs	r3, r3, #2
 8005bd4:	4a12      	ldr	r2, [pc, #72]	; (8005c20 <SetStateDebugAccessorySink+0x88>)
 8005bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005be8:	b2d9      	uxtb	r1, r3
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005bf0:	f361 0305 	bfi	r3, r1, #0, #6
 8005bf4:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
    DeviceWrite(port->I2cAddr, regMeasure, 1, &port->Registers.Measure.byte);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	332c      	adds	r3, #44	; 0x2c
 8005c02:	2201      	movs	r2, #1
 8005c04:	2104      	movs	r1, #4
 8005c06:	f000 fd8b 	bl	8006720 <DeviceWrite>

    /* TODO RICK platform_double_56k_cable()? */

    TimerStart(&port->StateTimer, tOrientedDebug);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8005c10:	4904      	ldr	r1, [pc, #16]	; (8005c24 <SetStateDebugAccessorySink+0x8c>)
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 fdbe 	bl	8006794 <TimerStart>
}
 8005c18:	bf00      	nop
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	4e04e04f 	.word	0x4e04e04f
 8005c24:	000186a0 	.word	0x000186a0

08005c28 <SetStateAttachedSink>:
}
#endif /* FSC_HAVE_SRC */

#ifdef FSC_HAVE_SNK
void SetStateAttachedSink(Port_t *port)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
    port->TCIdle = TRUE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Default to 5V detach threshold */
    port->DetachThreshold = VBUS_MV_VSAFE5V_DISC;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f640 6256 	movw	r2, #3670	; 0xe56
 8005c3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    port->loopCounter = 0;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    SetTypeCState(port, AttachedSink);
 8005c4a:	2104      	movs	r1, #4
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7ff fa12 	bl	8005076 <SetTypeCState>

    setStateSink(port);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fa78 	bl	8006148 <setStateSink>

    notify_observers((port->CCPin == CC1) ? CC1_ORIENT : CC2_ORIENT,
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <SetStateAttachedSink+0x3e>
 8005c62:	2001      	movs	r0, #1
 8005c64:	e000      	b.n	8005c68 <SetStateAttachedSink+0x40>
 8005c66:	2002      	movs	r0, #2
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c6e:	2200      	movs	r2, #0
 8005c70:	4619      	mov	r1, r3
 8005c72:	f001 f815 	bl	8006ca0 <notify_observers>
                     port->I2cAddr, 0);

    port->CCTerm = DecodeCCTerminationSink(port);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f8ab 	bl	8005dd2 <DecodeCCTerminationSink>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	461a      	mov	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    UpdateSinkCurrent(port, port->CCTerm);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f8cf 	bl	8005e32 <UpdateSinkCurrent>

    USBPDEnable(port, TRUE, SINK);
 8005c94:	2200      	movs	r2, #0
 8005c96:	2101      	movs	r1, #1
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7fa ff4e 	bl	8000b3a <USBPDEnable>
    TimerDisable(&port->StateTimer);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fd90 	bl	80067ca <TimerDisable>
}
 8005caa:	bf00      	nop
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <updateSourceCurrent>:
}
#endif /* FSC_HAVE_DRP */

/* Type C Support Routines */
void updateSourceCurrent(Port_t *port)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
    switch (port->SourceCurrent)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d018      	beq.n	8005cf6 <updateSourceCurrent+0x44>
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	dc1e      	bgt.n	8005d06 <updateSourceCurrent+0x54>
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d002      	beq.n	8005cd2 <updateSourceCurrent+0x20>
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d009      	beq.n	8005ce4 <updateSourceCurrent+0x32>
 8005cd0:	e019      	b.n	8005d06 <updateSourceCurrent+0x54>
    {
    case utccDefault:
        /* Set the host current to reflect the default USB power */
        port->Registers.Control.HOST_CUR = 0x1;
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005cd8:	2101      	movs	r1, #1
 8005cda:	f361 0383 	bfi	r3, r1, #2, #2
 8005cde:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        break;
 8005ce2:	e018      	b.n	8005d16 <updateSourceCurrent+0x64>
    case utcc1p5A:
        /* Set the host current to reflect 1.5A */
        port->Registers.Control.HOST_CUR = 0x2;
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005cea:	2102      	movs	r1, #2
 8005cec:	f361 0383 	bfi	r3, r1, #2, #2
 8005cf0:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        break;
 8005cf4:	e00f      	b.n	8005d16 <updateSourceCurrent+0x64>
    case utcc3p0A:
        /* Set the host current to reflect 3.0A */
        port->Registers.Control.HOST_CUR = 0x3;
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005cfc:	f043 030c 	orr.w	r3, r3, #12
 8005d00:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        break;
 8005d04:	e007      	b.n	8005d16 <updateSourceCurrent+0x64>
    default:
        /* This assumes that there is no current being advertised */
        /* Set the host current to disabled */
        port->Registers.Control.HOST_CUR = 0x0;
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005d0c:	f36f 0383 	bfc	r3, #2, #2
 8005d10:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        break;
 8005d14:	bf00      	nop
    }
    DeviceWrite(port->I2cAddr, regControl0, 1,
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3330      	adds	r3, #48	; 0x30
 8005d20:	2201      	movs	r2, #1
 8005d22:	2106      	movs	r1, #6
 8005d24:	f000 fcfc 	bl	8006720 <DeviceWrite>
                &port->Registers.Control.byte[0]);
}
 8005d28:	bf00      	nop
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <ToggleMeasure>:
    }
    DeviceWrite(port->I2cAddr, regMeasure, 1, &port->Registers.Measure.byte);
}

void ToggleMeasure(Port_t *port)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
    /* Toggle measure block between CC pins */
    if (port->Registers.Switches.MEAS_CC2 == 1)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005d3e:	f003 0308 	and.w	r3, r3, #8
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00e      	beq.n	8005d66 <ToggleMeasure+0x36>
    {
        port->Registers.Switches.MEAS_CC1 = 1;
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8005d4e:	f043 0304 	orr.w	r3, r3, #4
 8005d52:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
        port->Registers.Switches.MEAS_CC2 = 0;
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8005d5c:	f36f 03c3 	bfc	r3, #3, #1
 8005d60:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
 8005d64:	e015      	b.n	8005d92 <ToggleMeasure+0x62>
    }
    else if (port->Registers.Switches.MEAS_CC1 == 1)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00d      	beq.n	8005d92 <ToggleMeasure+0x62>
    {
        port->Registers.Switches.MEAS_CC1 = 0;
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8005d7c:	f36f 0382 	bfc	r3, #2, #1
 8005d80:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
        port->Registers.Switches.MEAS_CC2 = 1;
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8005d8a:	f043 0308 	orr.w	r3, r3, #8
 8005d8e:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
    }

    DeviceWrite(port->I2cAddr, regSwitches0, 1,
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	332a      	adds	r3, #42	; 0x2a
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	2102      	movs	r1, #2
 8005da0:	f000 fcbe 	bl	8006720 <DeviceWrite>
                &port->Registers.Switches.byte[0]);
}
 8005da4:	bf00      	nop
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <DecodeCCTermination>:

CCTermType DecodeCCTermination(Port_t *port)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
    switch (port->sourceOrSink)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d104      	bne.n	8005dc8 <DecodeCCTermination+0x1c>
    case SOURCE:
        return DecodeCCTerminationSource(port);
#endif /* FSC_HAVE_SRC || (FSC_HAVE_SNK && FSC_HAVE_ACCMODE) */
#ifdef FSC_HAVE_SNK
    case SINK:
        return DecodeCCTerminationSink(port);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f807 	bl	8005dd2 <DecodeCCTerminationSink>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	e000      	b.n	8005dca <DecodeCCTermination+0x1e>
#endif /* FSC_HAVE_SNK */
    default:
        return CCTypeUndefined;
 8005dc8:	2305      	movs	r3, #5
    }
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <DecodeCCTerminationSink>:
}
#endif /* FSC_HAVE_SRC || (FSC_HAVE_SNK && FSC_HAVE_ACCMODE) */

#ifdef FSC_HAVE_SNK
CCTermType DecodeCCTerminationSink(Port_t *port)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
    CCTermType Termination;

    /* Delay to allow measurement to settle */
    platform_delay_10us(25);//Pankaj
 8005dda:	2019      	movs	r0, #25
 8005ddc:	f7fa fd0e 	bl	80007fc <platform_delay_10us>
    DeviceRead(port->I2cAddr, regStatus0, 1, &port->Registers.Status.byte[4]);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	3340      	adds	r3, #64	; 0x40
 8005dea:	2201      	movs	r2, #1
 8005dec:	2140      	movs	r1, #64	; 0x40
 8005dee:	f000 fcb4 	bl	800675a <DeviceRead>

    /* Determine which level */
    switch (port->Registers.Status.BC_LVL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005df8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d00c      	beq.n	8005e1c <DecodeCCTerminationSink+0x4a>
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	dc0d      	bgt.n	8005e22 <DecodeCCTerminationSink+0x50>
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <DecodeCCTerminationSink+0x3e>
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d003      	beq.n	8005e16 <DecodeCCTerminationSink+0x44>
 8005e0e:	e008      	b.n	8005e22 <DecodeCCTerminationSink+0x50>
    {
    case 0x0:
        /* If BC_LVL is lowest it's open */
        Termination = CCTypeOpen;
 8005e10:	2300      	movs	r3, #0
 8005e12:	73fb      	strb	r3, [r7, #15]
        break;
 8005e14:	e008      	b.n	8005e28 <DecodeCCTerminationSink+0x56>
    case 0x1:
        /* If BC_LVL is 1, it's default */
        Termination = CCTypeRdUSB;
 8005e16:	2302      	movs	r3, #2
 8005e18:	73fb      	strb	r3, [r7, #15]
        break;
 8005e1a:	e005      	b.n	8005e28 <DecodeCCTerminationSink+0x56>
    case 0x2:
        /* If BC_LVL is 2, it's vRd1p5 */
        Termination = CCTypeRd1p5;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	73fb      	strb	r3, [r7, #15]
        break;
 8005e20:	e002      	b.n	8005e28 <DecodeCCTerminationSink+0x56>
    default:
        /* Otherwise it's vRd3p0 */
        Termination = CCTypeRd3p0;
 8005e22:	2304      	movs	r3, #4
 8005e24:	73fb      	strb	r3, [r7, #15]
        break;
 8005e26:	bf00      	nop
    }

    return Termination;
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <UpdateSinkCurrent>:
#endif /* FSC_HAVE_SNK */

#ifdef FSC_HAVE_SNK
void UpdateSinkCurrent(Port_t *port, CCTermType term)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b083      	sub	sp, #12
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	70fb      	strb	r3, [r7, #3]
    switch (term)
 8005e3e:	78fb      	ldrb	r3, [r7, #3]
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d010      	beq.n	8005e66 <UpdateSinkCurrent+0x34>
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	dc13      	bgt.n	8005e70 <UpdateSinkCurrent+0x3e>
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d002      	beq.n	8005e52 <UpdateSinkCurrent+0x20>
 8005e4c:	2b03      	cmp	r3, #3
 8005e4e:	d005      	beq.n	8005e5c <UpdateSinkCurrent+0x2a>
 8005e50:	e00e      	b.n	8005e70 <UpdateSinkCurrent+0x3e>
    {
    case CCTypeRdUSB:
        /* If we detect the default... */
        port->SinkCurrent = utccDefault;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        break;
 8005e5a:	e00e      	b.n	8005e7a <UpdateSinkCurrent+0x48>
    case CCTypeRd1p5:
        /* If we detect 1.5A */
        port->SinkCurrent = utcc1p5A;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        break;
 8005e64:	e009      	b.n	8005e7a <UpdateSinkCurrent+0x48>
    case CCTypeRd3p0:
        /* If we detect 3.0A */
        port->SinkCurrent = utcc3p0A;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2203      	movs	r2, #3
 8005e6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        break;
 8005e6e:	e004      	b.n	8005e7a <UpdateSinkCurrent+0x48>
    default:
        port->SinkCurrent = utccNone;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        break;
 8005e78:	bf00      	nop
    }
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bc80      	pop	{r7}
 8005e82:	4770      	bx	lr

08005e84 <UpdateCurrentAdvert>:
#endif /* FSC_HAVE_SNK */

void UpdateCurrentAdvert(Port_t *port, USBTypeCCurrent Current)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	70fb      	strb	r3, [r7, #3]
    /* SourceCurrent value is of type USBTypeCCurrent */
    if (Current < utccInvalid)
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d806      	bhi.n	8005ea4 <UpdateCurrentAdvert+0x20>
    {
        port->SourceCurrent = Current;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	78fa      	ldrb	r2, [r7, #3]
 8005e9a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        updateSourceCurrent(port);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7ff ff07 	bl	8005cb2 <updateSourceCurrent>
    }
}
 8005ea4:	bf00      	nop
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <isVSafe5V>:
{
    return (!isVBUSOverVoltage(port, VBUS_MV_VSAFE0V)) ? TRUE : FALSE;
}

FSC_BOOL isVSafe5V(Port_t *port)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
    return isVBUSOverVoltage(port, VBUS_MV_VSAFE5V_L);
 8005eb4:	f241 218e 	movw	r1, #4750	; 0x128e
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f805 	bl	8005ec8 <isVBUSOverVoltage>
 8005ebe:	4603      	mov	r3, r0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <isVBUSOverVoltage>:

FSC_BOOL isVBUSOverVoltage(Port_t *port, FSC_U16 vbus_mv)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	807b      	strh	r3, [r7, #2]
#else
    regMeasure_t measure;

    FSC_U8 val;
    FSC_BOOL ret;
    FSC_BOOL mdacUpdated = FALSE;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	73fb      	strb	r3, [r7, #15]

    /* Setup for VBUS measurement */
    measure.byte = 0;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	733b      	strb	r3, [r7, #12]
    measure.MEAS_VBUS = 1;
 8005edc:	7b3b      	ldrb	r3, [r7, #12]
 8005ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ee2:	733b      	strb	r3, [r7, #12]
    measure.MDAC = vbus_mv / MDAC_MV_LSB;
 8005ee4:	887b      	ldrh	r3, [r7, #2]
 8005ee6:	089b      	lsrs	r3, r3, #2
 8005ee8:	4a2c      	ldr	r2, [pc, #176]	; (8005f9c <isVBUSOverVoltage+0xd4>)
 8005eea:	fba2 2303 	umull	r2, r3, r2, r3
 8005eee:	095b      	lsrs	r3, r3, #5
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	7b3b      	ldrb	r3, [r7, #12]
 8005efa:	f362 0305 	bfi	r3, r2, #0, #6
 8005efe:	733b      	strb	r3, [r7, #12]

    /* The actual value of MDAC is less by 1 */
    if (measure.MDAC > 0)
 8005f00:	7b3b      	ldrb	r3, [r7, #12]
 8005f02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00c      	beq.n	8005f26 <isVBUSOverVoltage+0x5e>
    {
        measure.MDAC -= 1;
 8005f0c:	7b3b      	ldrb	r3, [r7, #12]
 8005f0e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	7b3b      	ldrb	r3, [r7, #12]
 8005f20:	f362 0305 	bfi	r3, r2, #0, #6
 8005f24:	733b      	strb	r3, [r7, #12]
    }

    if (port->Registers.Measure.byte != measure.byte)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005f2c:	7b3b      	ldrb	r3, [r7, #12]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d00d      	beq.n	8005f4e <isVBUSOverVoltage+0x86>
    {
        /* Update only if required */
        DeviceWrite(port->I2cAddr, regMeasure, 1, &measure.byte);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005f38:	f107 030c 	add.w	r3, r7, #12
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	2104      	movs	r1, #4
 8005f40:	f000 fbee 	bl	8006720 <DeviceWrite>
        mdacUpdated = TRUE;
 8005f44:	2301      	movs	r3, #1
 8005f46:	73fb      	strb	r3, [r7, #15]
        /* Delay to allow measurement to settle */
        platform_delay_10us(35);
 8005f48:	2023      	movs	r0, #35	; 0x23
 8005f4a:	f7fa fc57 	bl	80007fc <platform_delay_10us>
    }

    DeviceRead(port->I2cAddr, regStatus0, 1, &val);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005f54:	f107 030b 	add.w	r3, r7, #11
 8005f58:	2201      	movs	r2, #1
 8005f5a:	2140      	movs	r1, #64	; 0x40
 8005f5c:	f000 fbfd 	bl	800675a <DeviceRead>
    /* COMP = bit 5 of status0 (Device specific?) */
    val &= 0x20;
 8005f60:	7afb      	ldrb	r3, [r7, #11]
 8005f62:	f003 0320 	and.w	r3, r3, #32
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	72fb      	strb	r3, [r7, #11]

    /* Determine return value based on COMP */
    ret = (val) ? TRUE : FALSE;
 8005f6a:	7afb      	ldrb	r3, [r7, #11]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bf14      	ite	ne
 8005f70:	2301      	movne	r3, #1
 8005f72:	2300      	moveq	r3, #0
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	73bb      	strb	r3, [r7, #14]

    if (mdacUpdated == TRUE)
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d108      	bne.n	8005f90 <isVBUSOverVoltage+0xc8>
    {
        /* Restore register values */
        DeviceWrite(port->I2cAddr, regMeasure, 1, &port->Registers.Measure.byte);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	332c      	adds	r3, #44	; 0x2c
 8005f88:	2201      	movs	r2, #1
 8005f8a:	2104      	movs	r1, #4
 8005f8c:	f000 fbc8 	bl	8006720 <DeviceWrite>
    }

    return TRUE;//Pankaj - fix to update register with CC* pins to zero
 8005f90:	2301      	movs	r3, #1
#endif /* PLATFORM_PIC32_ADC */
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	4e04e04f 	.word	0x4e04e04f

08005fa0 <DetectCCPinSink>:
     */
    port->CCPin = CC1IsRa ? CC1 : (CCTerm == CCTypeRa) ? CC2 : CCNone;
}

void DetectCCPinSink(Port_t *port)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
    CCTermType CCTerm;

    port->Registers.Switches.byte[0] = 0x07;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2207      	movs	r2, #7
 8005fac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    DeviceWrite(port->I2cAddr, regSwitches0, 1,
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	332a      	adds	r3, #42	; 0x2a
 8005fba:	2201      	movs	r2, #1
 8005fbc:	2102      	movs	r1, #2
 8005fbe:	f000 fbaf 	bl	8006720 <DeviceWrite>
                &(port->Registers.Switches.byte[0]));

    CCTerm = DecodeCCTermination(port);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7ff fef2 	bl	8005dac <DecodeCCTermination>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	73fb      	strb	r3, [r7, #15]

    if ((CCTerm > CCTypeRa) && (CCTerm < CCTypeUndefined))
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d907      	bls.n	8005fe2 <DetectCCPinSink+0x42>
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
 8005fd4:	2b04      	cmp	r3, #4
 8005fd6:	d804      	bhi.n	8005fe2 <DetectCCPinSink+0x42>
    {
        port->CCPin = CC1;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        return;
 8005fe0:	e01c      	b.n	800601c <DetectCCPinSink+0x7c>
    }

    port->Registers.Switches.byte[0] = 0x0B;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	220b      	movs	r2, #11
 8005fe6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    DeviceWrite(port->I2cAddr, regSwitches0, 1,
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	332a      	adds	r3, #42	; 0x2a
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	2102      	movs	r1, #2
 8005ff8:	f000 fb92 	bl	8006720 <DeviceWrite>
                &(port->Registers.Switches.byte[0]));

    CCTerm = DecodeCCTermination(port);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff fed5 	bl	8005dac <DecodeCCTermination>
 8006002:	4603      	mov	r3, r0
 8006004:	73fb      	strb	r3, [r7, #15]

    if ((CCTerm > CCTypeRa) && (CCTerm < CCTypeUndefined))
 8006006:	7bfb      	ldrb	r3, [r7, #15]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d907      	bls.n	800601c <DetectCCPinSink+0x7c>
 800600c:	7bfb      	ldrb	r3, [r7, #15]
 800600e:	2b04      	cmp	r3, #4
 8006010:	d804      	bhi.n	800601c <DetectCCPinSink+0x7c>
    {

        port->CCPin = CC2;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2202      	movs	r2, #2
 8006016:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        return;
 800601a:	bf00      	nop
    }
}
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <resetDebounceVariables>:

void resetDebounceVariables(Port_t *port)
{
 8006022:	b480      	push	{r7}
 8006024:	b083      	sub	sp, #12
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
    port->CCTerm = CCTypeUndefined;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2205      	movs	r2, #5
 800602e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    port->CCTermCCDebounce = CCTypeUndefined;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2205      	movs	r2, #5
 8006036:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    port->CCTermPDDebounce = CCTypeUndefined;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2205      	movs	r2, #5
 800603e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    port->CCTermPDDebouncePrevious = CCTypeUndefined;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2205      	movs	r2, #5
 8006046:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    port->VCONNTerm = CCTypeUndefined;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2205      	movs	r2, #5
 800604e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	bc80      	pop	{r7}
 800605a:	4770      	bx	lr

0800605c <debounceCC>:
    return TRUE;
}
#endif /* FSC_DEBUG */

void debounceCC(Port_t *port)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
    /* The functionality here should work correctly using the Idle mode.
     * Will idling, a CC change or timer interrupt will
     * generate an appropriate update to the debounce state.
     */
    /* Grab the latest CC termination value */
    CCTermType CCTermCurrent = DecodeCCTermination(port);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff fea1 	bl	8005dac <DecodeCCTermination>
 800606a:	4603      	mov	r3, r0
 800606c:	73fb      	strb	r3, [r7, #15]

    /* While debouncing to connect as a Sink, only care about one value for Rp.
     * When in AttachedSink state, debounce for sink sub-state. */
    if (port->sourceOrSink == SINK && port->ConnState != AttachedSink &&
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10c      	bne.n	8006092 <debounceCC+0x36>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800607e:	2b04      	cmp	r3, #4
 8006080:	d007      	beq.n	8006092 <debounceCC+0x36>
 8006082:	7bfb      	ldrb	r3, [r7, #15]
 8006084:	2b03      	cmp	r3, #3
 8006086:	d002      	beq.n	800608e <debounceCC+0x32>
        (CCTermCurrent == CCTypeRd1p5 || CCTermCurrent == CCTypeRd3p0))
 8006088:	7bfb      	ldrb	r3, [r7, #15]
 800608a:	2b04      	cmp	r3, #4
 800608c:	d101      	bne.n	8006092 <debounceCC+0x36>
    {
        CCTermCurrent = CCTypeRdUSB;
 800608e:	2302      	movs	r3, #2
 8006090:	73fb      	strb	r3, [r7, #15]
    }

    /* Check to see if the value has changed... */
    if (port->CCTerm != CCTermCurrent)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006098:	7bfa      	ldrb	r2, [r7, #15]
 800609a:	429a      	cmp	r2, r3
 800609c:	d00b      	beq.n	80060b6 <debounceCC+0x5a>
    {
        /* If it has, update the value */
        port->CCTerm = CCTermCurrent;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	7bfa      	ldrb	r2, [r7, #15]
 80060a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

        /* Restart the debounce timer (wait 10ms before detach) */
        TimerStart(&port->PDDebounceTimer, tPDDebounce);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80060ac:	f643 2198 	movw	r1, #15000	; 0x3a98
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 fb6f 	bl	8006794 <TimerStart>
    }

    /* Check to see if our debounce timer has expired... */
    if (TimerExpired(&port->PDDebounceTimer))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 fba4 	bl	800680a <TimerExpired>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00b      	beq.n	80060e0 <debounceCC+0x84>
    {
        /* Update the CC debounced values */
        port->CCTermPDDebounce = port->CCTerm;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        TimerDisable(&port->PDDebounceTimer);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 fb75 	bl	80067ca <TimerDisable>
    }

    /* CC debounce */
    if (port->CCTermPDDebouncePrevious != port->CCTermPDDebounce)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d010      	beq.n	8006112 <debounceCC+0xb6>
    {
        /* If the PDDebounce values have changed */
        /* Update the previous value */
        port->CCTermPDDebouncePrevious = port->CCTermPDDebounce;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Reset the tCCDebounce timers */
        TimerStart(&port->CCDebounceTimer, tCCDebounce - tPDDebounce);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006102:	4910      	ldr	r1, [pc, #64]	; (8006144 <debounceCC+0xe8>)
 8006104:	4618      	mov	r0, r3
 8006106:	f000 fb45 	bl	8006794 <TimerStart>

        /* Set CC debounce values to undefined while it is being debounced */
        port->CCTermCCDebounce = CCTypeUndefined;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2205      	movs	r2, #5
 800610e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    }

    if (TimerExpired(&port->CCDebounceTimer))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006118:	4618      	mov	r0, r3
 800611a:	f000 fb76 	bl	800680a <TimerExpired>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00b      	beq.n	800613c <debounceCC+0xe0>
    {
        /* Update the CC debounced values */
        port->CCTermCCDebounce = port->CCTermPDDebouncePrevious;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        TimerDisable(&port->CCDebounceTimer);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fb47 	bl	80067ca <TimerDisable>
    }
}
 800613c:	bf00      	nop
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	00019a28 	.word	0x00019a28

08006148 <setStateSink>:
}
#endif /* FSC_HAVE_SRC || (FSC_HAVE_SNK && FSC_HAVE_ACCMODE)) */

#ifdef FSC_HAVE_SNK
void setStateSink(Port_t *port)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
    /* Disable the vbus outputs */
    platform_set_vbus_lvl_enable(port->PortID, VBUS_LVL_ALL, FALSE, FALSE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 8006156:	2300      	movs	r3, #0
 8006158:	2200      	movs	r2, #0
 800615a:	2102      	movs	r1, #2
 800615c:	f7fa fa66 	bl	800062c <platform_set_vbus_lvl_enable>

    port->sourceOrSink = SINK;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    resetDebounceVariables(port);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7ff ff5a 	bl	8006022 <resetDebounceVariables>

    /* Enable everything except internal oscillator */
    port->Registers.Power.POWER = 0x7;
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8006174:	2107      	movs	r1, #7
 8006176:	f361 0303 	bfi	r3, r1, #0, #4
 800617a:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
    DeviceWrite(port->I2cAddr, regPower, 1, &port->Registers.Power.byte);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	3335      	adds	r3, #53	; 0x35
 8006188:	2201      	movs	r2, #1
 800618a:	210b      	movs	r1, #11
 800618c:	f000 fac8 	bl	8006720 <DeviceWrite>

    /* For automated testing */
    if (port->CCPin == CCNone)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006196:	2b00      	cmp	r3, #0
 8006198:	d102      	bne.n	80061a0 <setStateSink+0x58>
    {
        DetectCCPinSink(port);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff ff00 	bl	8005fa0 <DetectCCPinSink>
    }

    if (port->CCPin == CC1)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d104      	bne.n	80061b4 <setStateSink+0x6c>
    {
        /* If we detected CC1 as an Rp, enable PD's on CC1 */
        port->Registers.Switches.byte[0] = 0x07;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2207      	movs	r2, #7
 80061ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80061b2:	e003      	b.n	80061bc <setStateSink+0x74>
    }
    else
    {
        /* If we detected CC2 as an Rp, enable PD's on CC2 */
        port->Registers.Switches.byte[0] = 0x0B;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	220b      	movs	r2, #11
 80061b8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    }
    DeviceWrite(port->I2cAddr, regSwitches0, 1,
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	332a      	adds	r3, #42	; 0x2a
 80061c6:	2201      	movs	r2, #1
 80061c8:	2102      	movs	r1, #2
 80061ca:	f000 faa9 	bl	8006720 <DeviceWrite>
                &port->Registers.Switches.byte[0]);


    /* Set up VBus measure interrupt to watch for detach */
    port->Registers.Measure.MEAS_VBUS = 1;
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80061d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061d8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
    port->Registers.Measure.MDAC = (port->DetachThreshold / MDAC_MV_LSB) - 1;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061e2:	089b      	lsrs	r3, r3, #2
 80061e4:	4a22      	ldr	r2, [pc, #136]	; (8006270 <setStateSink+0x128>)
 80061e6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ea:	095b      	lsrs	r3, r3, #5
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	3b01      	subs	r3, #1
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061f8:	b2d9      	uxtb	r1, r3
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006200:	f361 0305 	bfi	r3, r1, #0, #6
 8006204:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
    port->Registers.Mask.M_COMP_CHNG = 0;
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 800620e:	f36f 1345 	bfc	r3, #5, #1
 8006212:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    port->Registers.Mask.M_BC_LVL = 0;
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 800621c:	f36f 0300 	bfc	r3, #0, #1
 8006220:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    DeviceWrite(port->I2cAddr, regMeasure, 1, &port->Registers.Measure.byte);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	332c      	adds	r3, #44	; 0x2c
 800622e:	2201      	movs	r2, #1
 8006230:	2104      	movs	r1, #4
 8006232:	f000 fa75 	bl	8006720 <DeviceWrite>
    DeviceWrite(port->I2cAddr, regMask, 1, &port->Registers.Mask.byte);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3334      	adds	r3, #52	; 0x34
 8006240:	2201      	movs	r2, #1
 8006242:	210a      	movs	r1, #10
 8006244:	f000 fa6c 	bl	8006720 <DeviceWrite>

    updateVCONNSink(port);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f815 	bl	8006278 <updateVCONNSink>

    TimerDisable(&port->PDDebounceTimer);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fab8 	bl	80067ca <TimerDisable>
    TimerStart(&port->CCDebounceTimer, tCCDebounce);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006260:	4904      	ldr	r1, [pc, #16]	; (8006274 <setStateSink+0x12c>)
 8006262:	4618      	mov	r0, r3
 8006264:	f000 fa96 	bl	8006794 <TimerStart>
}
 8006268:	bf00      	nop
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	4e04e04f 	.word	0x4e04e04f
 8006274:	0001d4c0 	.word	0x0001d4c0

08006278 <updateVCONNSink>:

void updateVCONNSink(Port_t *port)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
    /* Assumes Rd has been set */
    ToggleMeasure(port);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7ff fd55 	bl	8005d30 <ToggleMeasure>

    port->VCONNTerm = DecodeCCTermination(port);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff fd90 	bl	8005dac <DecodeCCTermination>
 800628c:	4603      	mov	r3, r0
 800628e:	461a      	mov	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

    ToggleMeasure(port);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7ff fd4a 	bl	8005d30 <ToggleMeasure>
}
 800629c:	bf00      	nop
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <clearState>:

#endif /* FSC_HAVE_SNK */

void clearState(Port_t *port)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
    /* Disable the vbus outputs */
    platform_set_vbus_lvl_enable(port->PortID, VBUS_LVL_ALL, FALSE, FALSE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 80062b2:	2300      	movs	r3, #0
 80062b4:	2200      	movs	r2, #0
 80062b6:	2102      	movs	r1, #2
 80062b8:	f7fa f9b8 	bl	800062c <platform_set_vbus_lvl_enable>

#ifdef FSC_HAVE_PPS_SOURCE
    platform_set_pps_voltage(port->PortID, 0);
#endif /* FSC_HAVE_PPS_SOURCE */

    USBPDDisable(port, TRUE);
 80062bc:	2101      	movs	r1, #1
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7fa fd68 	bl	8000d94 <USBPDDisable>

    /* Mask/disable interrupts */
    port->Registers.Mask.byte = 0xFF;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	22ff      	movs	r2, #255	; 0xff
 80062c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    DeviceWrite(port->I2cAddr, regMask, 1, &port->Registers.Mask.byte);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	3334      	adds	r3, #52	; 0x34
 80062d6:	2201      	movs	r2, #1
 80062d8:	210a      	movs	r1, #10
 80062da:	f000 fa21 	bl	8006720 <DeviceWrite>
    port->Registers.MaskAdv.byte[0] = 0xFF;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	22ff      	movs	r2, #255	; 0xff
 80062e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    DeviceWrite(port->I2cAddr, regMaska, 1, &port->Registers.MaskAdv.byte[0]);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3338      	adds	r3, #56	; 0x38
 80062f0:	2201      	movs	r2, #1
 80062f2:	210e      	movs	r1, #14
 80062f4:	f000 fa14 	bl	8006720 <DeviceWrite>
    port->Registers.MaskAdv.M_GCRCSENT = 1;
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 80062fe:	f043 0301 	orr.w	r3, r3, #1
 8006302:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
    DeviceWrite(port->I2cAddr, regMaskb, 1, &port->Registers.MaskAdv.byte[1]);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	3339      	adds	r3, #57	; 0x39
 8006310:	2201      	movs	r2, #1
 8006312:	210f      	movs	r1, #15
 8006314:	f000 fa04 	bl	8006720 <DeviceWrite>

    port->Registers.Control.TOGGLE = 0;         /* Disable toggling */
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 800631e:	f36f 0300 	bfc	r3, #0, #1
 8006322:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
    port->Registers.Control.HOST_CUR = 0x0;     /* Clear PU advertisement */
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800632c:	f36f 0383 	bfc	r3, #2, #2
 8006330:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    DeviceWrite(port->I2cAddr, regControl0, 3,
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	3330      	adds	r3, #48	; 0x30
 800633e:	2203      	movs	r2, #3
 8006340:	2106      	movs	r1, #6
 8006342:	f000 f9ed 	bl	8006720 <DeviceWrite>
                &port->Registers.Control.byte[0]);

    port->Registers.Switches.byte[0] = 0x00;    /* Disable PU, PD, etc. */
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    DeviceWrite(port->I2cAddr, regSwitches0, 1,
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	332a      	adds	r3, #42	; 0x2a
 8006358:	2201      	movs	r2, #1
 800635a:	2102      	movs	r1, #2
 800635c:	f000 f9e0 	bl	8006720 <DeviceWrite>
                &port->Registers.Switches.byte[0]);

    SetConfiguredCurrent(port);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7ff f8c9 	bl	80054f8 <SetConfiguredCurrent>
    resetDebounceVariables(port);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7ff fe5b 	bl	8006022 <resetDebounceVariables>
    port->CCPin = CCNone;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

    TimerDisable(&port->PDDebounceTimer);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fa25 	bl	80067ca <TimerDisable>
    TimerDisable(&port->CCDebounceTimer);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fa1f 	bl	80067ca <TimerDisable>

    notify_observers(CC_NO_ORIENT, port->I2cAddr, 0);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006392:	2200      	movs	r2, #0
 8006394:	4619      	mov	r1, r3
 8006396:	2004      	movs	r0, #4
 8006398:	f000 fc82 	bl	8006ca0 <notify_observers>

    port->Registers.Power.POWER = 0x1;
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80063a2:	2101      	movs	r1, #1
 80063a4:	f361 0303 	bfi	r3, r1, #0, #4
 80063a8:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
    DeviceWrite(port->I2cAddr, regPower, 1, &port->Registers.Power.byte);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	3335      	adds	r3, #53	; 0x35
 80063b6:	2201      	movs	r2, #1
 80063b8:	210b      	movs	r1, #11
 80063ba:	f000 f9b1 	bl	8006720 <DeviceWrite>
}
 80063be:	bf00      	nop
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <SetStateIllegalCable>:

void SetStateIllegalCable(Port_t *port)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b082      	sub	sp, #8
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
    port->TCIdle = TRUE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    port->loopCounter = 0;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    platform_set_vbus_lvl_enable(port->PortID, VBUS_LVL_ALL, FALSE, FALSE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 80063e4:	2300      	movs	r3, #0
 80063e6:	2200      	movs	r2, #0
 80063e8:	2102      	movs	r1, #2
 80063ea:	f7fa f91f 	bl	800062c <platform_set_vbus_lvl_enable>
    platform_set_vbus_discharge(port->PortID, TRUE);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80063f4:	2101      	movs	r1, #1
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fa f976 	bl	80006e8 <platform_set_vbus_discharge>

    /* Disable toggle */
    port->Registers.Control.TOGGLE = 0;
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8006402:	f36f 0300 	bfc	r3, #0, #1
 8006406:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
    DeviceWrite(port->I2cAddr, regControl2, 1,&port->Registers.Control.byte[2]);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	3332      	adds	r3, #50	; 0x32
 8006414:	2201      	movs	r2, #1
 8006416:	2108      	movs	r1, #8
 8006418:	f000 f982 	bl	8006720 <DeviceWrite>

    SetTypeCState(port, IllegalCable);
 800641c:	211a      	movs	r1, #26
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7fe fe29 	bl	8005076 <SetTypeCState>

    UpdateCurrentAdvert(port, utcc3p0A);
 8006424:	2103      	movs	r1, #3
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7ff fd2c 	bl	8005e84 <UpdateCurrentAdvert>

    /* This level (MDAC == 0x24) seems to be appropriate for 3.0A PU's */
    port->Registers.Measure.MDAC = MDAC_1P596V - 1;
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006432:	2124      	movs	r1, #36	; 0x24
 8006434:	f361 0305 	bfi	r3, r1, #0, #6
 8006438:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
    port->Registers.Measure.MEAS_VBUS = 0;
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006442:	f36f 1386 	bfc	r3, #6, #1
 8006446:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
    DeviceWrite(port->I2cAddr, regMeasure, 1, &port->Registers.Measure.byte);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	332c      	adds	r3, #44	; 0x2c
 8006454:	2201      	movs	r2, #1
 8006456:	2104      	movs	r1, #4
 8006458:	f000 f962 	bl	8006720 <DeviceWrite>

    port->sourceOrSink = SOURCE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

    /* Enable everything except internal oscillator */
    port->Registers.Power.POWER = 0x7;
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 800646a:	2107      	movs	r1, #7
 800646c:	f361 0303 	bfi	r3, r1, #0, #4
 8006470:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
    DeviceWrite(port->I2cAddr, regPower, 1, &port->Registers.Power.byte);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	3335      	adds	r3, #53	; 0x35
 800647e:	2201      	movs	r2, #1
 8006480:	210b      	movs	r1, #11
 8006482:	f000 f94d 	bl	8006720 <DeviceWrite>

    /* Determine Orientation.
     * NOTE: This code enables both pullups and pulldowns in order to provide
     * a somewhat accurate reading with an illegal cable.
     */
    if (port->Registers.DeviceID.VERSION_ID == VERSION_302A)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800648c:	f023 030f 	bic.w	r3, r3, #15
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b80      	cmp	r3, #128	; 0x80
 8006494:	d104      	bne.n	80064a0 <SetStateIllegalCable+0xda>
    {
        /* Enable CC1 pull-up and pull-downs and measure */
        port->Registers.Switches.byte[0] = 0x47;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2247      	movs	r2, #71	; 0x47
 800649a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800649e:	e003      	b.n	80064a8 <SetStateIllegalCable+0xe2>
    }
    else
    {
        /* Enable CC pull-ups and pull-downs and CC1 measure */
        port->Registers.Switches.byte[0] = 0xC7;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	22c7      	movs	r2, #199	; 0xc7
 80064a4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    }
    DeviceWrite(port->I2cAddr, regSwitches0, 1,
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	332a      	adds	r3, #42	; 0x2a
 80064b2:	2201      	movs	r2, #1
 80064b4:	2102      	movs	r1, #2
 80064b6:	f000 f933 	bl	8006720 <DeviceWrite>
                &(port->Registers.Switches.byte[0]));

    port->CCPin = CC1;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    port->CCTerm = DecodeCCTermination(port);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff fc72 	bl	8005dac <DecodeCCTermination>
 80064c8:	4603      	mov	r3, r0
 80064ca:	461a      	mov	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

    if ((port->CCTerm >= CCTypeRdUSB) && (port->CCTerm < CCTypeUndefined))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d904      	bls.n	80064e6 <SetStateIllegalCable+0x120>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	d925      	bls.n	8006532 <SetStateIllegalCable+0x16c>
    {
    }
    else
    {
        port->CCPin = CC2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2202      	movs	r2, #2
 80064ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (port->Registers.DeviceID.VERSION_ID == VERSION_302A)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064f4:	f023 030f 	bic.w	r3, r3, #15
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b80      	cmp	r3, #128	; 0x80
 80064fc:	d104      	bne.n	8006508 <SetStateIllegalCable+0x142>
        {
            /* Enable CC2 pull-up and pull-downs and measure */
            port->Registers.Switches.byte[0] = 0x8B;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	228b      	movs	r2, #139	; 0x8b
 8006502:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8006506:	e003      	b.n	8006510 <SetStateIllegalCable+0x14a>
        }
        else
        {
            /* Enable CC pull-ups and pull-downs and CC2 measure */
            port->Registers.Switches.byte[0] = 0xCB;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	22cb      	movs	r2, #203	; 0xcb
 800650c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        }

        DeviceWrite(port->I2cAddr, regSwitches0, 1,
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	332a      	adds	r3, #42	; 0x2a
 800651a:	2201      	movs	r2, #1
 800651c:	2102      	movs	r1, #2
 800651e:	f000 f8ff 	bl	8006720 <DeviceWrite>
                    &(port->Registers.Switches.byte[0]));

        port->CCTerm = DecodeCCTermination(port);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7ff fc42 	bl	8005dac <DecodeCCTermination>
 8006528:	4603      	mov	r3, r0
 800652a:	461a      	mov	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    }

    if ((port->CCTerm >= CCTypeRdUSB) && (port->CCTerm < CCTypeUndefined))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006538:	2b01      	cmp	r3, #1
 800653a:	d922      	bls.n	8006582 <SetStateIllegalCable+0x1bc>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006542:	2b04      	cmp	r3, #4
 8006544:	d81d      	bhi.n	8006582 <SetStateIllegalCable+0x1bc>
    {
        port->Registers.Mask.M_COMP_CHNG = 0;
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 800654c:	f36f 1345 	bfc	r3, #5, #1
 8006550:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        port->Registers.Mask.M_BC_LVL = 0;
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 800655a:	f36f 0300 	bfc	r3, #0, #1
 800655e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        DeviceWrite(port->I2cAddr, regMask, 1, &port->Registers.Mask.byte);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3334      	adds	r3, #52	; 0x34
 800656c:	2201      	movs	r2, #1
 800656e:	210a      	movs	r1, #10
 8006570:	f000 f8d6 	bl	8006720 <DeviceWrite>

        TimerDisable(&port->StateTimer);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800657a:	4618      	mov	r0, r3
 800657c:	f000 f925 	bl	80067ca <TimerDisable>
 8006580:	e003      	b.n	800658a <SetStateIllegalCable+0x1c4>
    }
    else
    {
        /* Couldn't find an appropriate termination - detach and try again */
        SetStateUnattached(port);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7ff fa0a 	bl	800599c <SetStateUnattached>
    }
}
 8006588:	bf00      	nop
 800658a:	bf00      	nop
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <StateMachineIllegalCable>:

void StateMachineIllegalCable(Port_t *port)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b082      	sub	sp, #8
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
     * cycle of attach-detach that could continue ad infinitum or until the
     * cable or travel adapter is plugged in.  This state breaks the loop and
     * waits for a change in termination.
     * NOTE: In most cases this requires VBUS bleed resistor (~7kohm)
     */
    port->TCIdle = TRUE;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    if (port->Registers.Status.I_COMP_CHNG == 1)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065a8:	f003 0320 	and.w	r3, r3, #32
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d016      	beq.n	80065e0 <StateMachineIllegalCable+0x4e>
    {
        port->CCTerm = DecodeCCTermination(port);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7ff fbfa 	bl	8005dac <DecodeCCTermination>
 80065b8:	4603      	mov	r3, r0
 80065ba:	461a      	mov	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

        if (port->CCTerm == CCTypeOpen)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d109      	bne.n	80065e0 <StateMachineIllegalCable+0x4e>
        {
            platform_set_vbus_discharge(port->PortID, FALSE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065d2:	2100      	movs	r1, #0
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fa f887 	bl	80006e8 <platform_set_vbus_discharge>

            SetStateUnattached(port);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7ff f9de 	bl	800599c <SetStateUnattached>
        }
    }
}
 80065e0:	bf00      	nop
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <core_initialize>:
#include "version.h"
/*
 * Call this function to initialize the core.
 */
void core_initialize(Port_t *port, FSC_U8 i2cAddr)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	460b      	mov	r3, r1
 80065f2:	70fb      	strb	r3, [r7, #3]
    PortInit(port, i2cAddr);
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7fe fcc0 	bl	8004f7e <PortInit>
    core_enable_typec(port, TRUE);
 80065fe:	2101      	movs	r1, #1
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f80b 	bl	800661c <core_enable_typec>
    core_enable_pd(port,  TRUE);
 8006606:	2101      	movs	r1, #1
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 f816 	bl	800663a <core_enable_pd>
    core_set_state_unattached(port);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f87b 	bl	800670a <core_set_state_unattached>
}
 8006614:	bf00      	nop
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <core_enable_typec>:

/*
 * Call this function to enable or disable the core Type-C state machine.
 */
void core_enable_typec(Port_t *port, FSC_BOOL enable)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	70fb      	strb	r3, [r7, #3]
    port->SMEnabled = enable;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	78fa      	ldrb	r2, [r7, #3]
 800662c:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	bc80      	pop	{r7}
 8006638:	4770      	bx	lr

0800663a <core_enable_pd>:

/*
 * Call this function to enable or disable the core PD state machines.
 */
void core_enable_pd(Port_t *port, FSC_BOOL enable)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	460b      	mov	r3, r1
 8006644:	70fb      	strb	r3, [r7, #3]
    port->USBPDEnabled = enable;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	78fa      	ldrb	r2, [r7, #3]
 800664a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
}
 800664e:	bf00      	nop
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	bc80      	pop	{r7}
 8006656:	4770      	bx	lr

08006658 <core_state_machine>:

/*
 * Call this function to run the state machines.
 */
void core_state_machine(Port_t *port)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
    FSC_U8 data = port->Registers.Control.byte[3] | 0x40;  /* Hard Reset bit */
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800666a:	b2db      	uxtb	r3, r3
 800666c:	73fb      	strb	r3, [r7, #15]

    /* Check on HardReset timeout (shortcut for SenderResponse timeout) */
    if ((port->WaitingOnHR == TRUE) &&
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8006674:	2b01      	cmp	r3, #1
 8006676:	d111      	bne.n	800669c <core_state_machine+0x44>
        TimerExpired(&port->PolicyStateTimer))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800667e:	4618      	mov	r0, r3
 8006680:	f000 f8c3 	bl	800680a <TimerExpired>
 8006684:	4603      	mov	r3, r0
    if ((port->WaitingOnHR == TRUE) &&
 8006686:	2b00      	cmp	r3, #0
 8006688:	d008      	beq.n	800669c <core_state_machine+0x44>
    {
        DeviceWrite(port->I2cAddr, regControl3, 1, &data);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8006690:	f107 030f 	add.w	r3, r7, #15
 8006694:	2201      	movs	r2, #1
 8006696:	2109      	movs	r1, #9
 8006698:	f000 f842 	bl	8006720 <DeviceWrite>
    }

    /* Update the current port being used and process the port */
    /* The Protocol and Policy functions are called from within this call */
    StateMachineTypeC(port);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7fe ff55 	bl	800554c <StateMachineTypeC>
}
 80066a2:	bf00      	nop
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <core_get_next_timeout>:

/*
 * Check for the next required timeout to support timer interrupt functionality
 */
FSC_U32 core_get_next_timeout(Port_t *port)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b086      	sub	sp, #24
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  FSC_U32 time = 0;
 80066b2:	2300      	movs	r3, #0
 80066b4:	60fb      	str	r3, [r7, #12]
  FSC_U32 nexttime = 0xFFFFFFFF;
 80066b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066ba:	617b      	str	r3, [r7, #20]
  FSC_U8 i;

  for (i = 0; i < FSC_NUM_TIMERS; ++i)
 80066bc:	2300      	movs	r3, #0
 80066be:	74fb      	strb	r3, [r7, #19]
 80066c0:	e015      	b.n	80066ee <core_get_next_timeout+0x44>
  {
    time = TimerRemaining(port->Timers[i]);
 80066c2:	7cfb      	ldrb	r3, [r7, #19]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	33b2      	adds	r3, #178	; 0xb2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 f8cb 	bl	800686a <TimerRemaining>
 80066d4:	60f8      	str	r0, [r7, #12]
    if (time > 0 && time < nexttime) nexttime = time;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <core_get_next_timeout+0x3e>
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d201      	bcs.n	80066e8 <core_get_next_timeout+0x3e>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	617b      	str	r3, [r7, #20]
  for (i = 0; i < FSC_NUM_TIMERS; ++i)
 80066e8:	7cfb      	ldrb	r3, [r7, #19]
 80066ea:	3301      	adds	r3, #1
 80066ec:	74fb      	strb	r3, [r7, #19]
 80066ee:	7cfb      	ldrb	r3, [r7, #19]
 80066f0:	2b09      	cmp	r3, #9
 80066f2:	d9e6      	bls.n	80066c2 <core_get_next_timeout+0x18>
  }

  if (nexttime == 0xFFFFFFFF) nexttime = 0;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066fa:	d101      	bne.n	8006700 <core_get_next_timeout+0x56>
 80066fc:	2300      	movs	r3, #0
 80066fe:	617b      	str	r3, [r7, #20]

  return nexttime;
 8006700:	697b      	ldr	r3, [r7, #20]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3718      	adds	r7, #24
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <core_set_state_unattached>:
    SendUSBPDHardReset(port);
#endif
}

void core_set_state_unattached(Port_t *port)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b082      	sub	sp, #8
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
    SetStateUnattached(port);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7ff f942 	bl	800599c <SetStateUnattached>
}
 8006718:	bf00      	nop
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <DeviceWrite>:

#include "platform.h"

FSC_BOOL DeviceWrite(FSC_U8 i2cAddr, FSC_U8 regAddr,
                     FSC_U8 length, FSC_U8* data)
{
 8006720:	b590      	push	{r4, r7, lr}
 8006722:	b087      	sub	sp, #28
 8006724:	af04      	add	r7, sp, #16
 8006726:	603b      	str	r3, [r7, #0]
 8006728:	4603      	mov	r3, r0
 800672a:	71fb      	strb	r3, [r7, #7]
 800672c:	460b      	mov	r3, r1
 800672e:	71bb      	strb	r3, [r7, #6]
 8006730:	4613      	mov	r3, r2
 8006732:	717b      	strb	r3, [r7, #5]
    return platform_i2c_write(i2cAddr, FUSB300AddrLength, length,
 8006734:	79bb      	ldrb	r3, [r7, #6]
 8006736:	797c      	ldrb	r4, [r7, #5]
 8006738:	7979      	ldrb	r1, [r7, #5]
 800673a:	79f8      	ldrb	r0, [r7, #7]
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	9202      	str	r2, [sp, #8]
 8006740:	9301      	str	r3, [sp, #4]
 8006742:	2301      	movs	r3, #1
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	4623      	mov	r3, r4
 8006748:	460a      	mov	r2, r1
 800674a:	2101      	movs	r1, #1
 800674c:	f7f9 fff2 	bl	8000734 <platform_i2c_write>
 8006750:	4603      	mov	r3, r0
                              length, FUSB300IncSize, regAddr, data);
}
 8006752:	4618      	mov	r0, r3
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	bd90      	pop	{r4, r7, pc}

0800675a <DeviceRead>:

FSC_BOOL DeviceRead(FSC_U8 i2cAddr, FSC_U8 regAddr,
                    FSC_U8 length, FSC_U8* data)
{
 800675a:	b590      	push	{r4, r7, lr}
 800675c:	b087      	sub	sp, #28
 800675e:	af04      	add	r7, sp, #16
 8006760:	603b      	str	r3, [r7, #0]
 8006762:	4603      	mov	r3, r0
 8006764:	71fb      	strb	r3, [r7, #7]
 8006766:	460b      	mov	r3, r1
 8006768:	71bb      	strb	r3, [r7, #6]
 800676a:	4613      	mov	r3, r2
 800676c:	717b      	strb	r3, [r7, #5]
    return platform_i2c_read(i2cAddr, FUSB300AddrLength, length,
 800676e:	79bb      	ldrb	r3, [r7, #6]
 8006770:	797c      	ldrb	r4, [r7, #5]
 8006772:	7979      	ldrb	r1, [r7, #5]
 8006774:	79f8      	ldrb	r0, [r7, #7]
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	9202      	str	r2, [sp, #8]
 800677a:	9301      	str	r3, [sp, #4]
 800677c:	2301      	movs	r3, #1
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	4623      	mov	r3, r4
 8006782:	460a      	mov	r2, r1
 8006784:	2101      	movs	r1, #1
 8006786:	f7fa f807 	bl	8000798 <platform_i2c_read>
 800678a:	4603      	mov	r3, r0
                             length, FUSB300IncSize, regAddr, data);
}
 800678c:	4618      	mov	r0, r3
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	bd90      	pop	{r4, r7, pc}

08006794 <TimerStart>:
 ******************************************************************************/
#include "timer.h"

#include "platform.h"

void TimerStart(struct TimerObj *obj, FSC_U32 time) {
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  /* Grab the current time stamp and store the wait period. */
  /* Time must be > 0 */
  obj->starttime_ = platform_get_system_time();
 800679e:	f7fa f854 	bl	800084a <platform_get_system_time>
 80067a2:	4602      	mov	r2, r0
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	601a      	str	r2, [r3, #0]
  obj->period_ = time;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	605a      	str	r2, [r3, #4]

  obj->disablecount_ = TIMER_DISABLE_COUNT;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2204      	movs	r2, #4
 80067b2:	721a      	strb	r2, [r3, #8]

  if (obj->period_ == 0) obj->period_ = 1;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d102      	bne.n	80067c2 <TimerStart+0x2e>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	605a      	str	r2, [r3, #4]
}
 80067c2:	bf00      	nop
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <TimerDisable>:
void TimerRestart(struct TimerObj *obj) {
  /* Grab the current time stamp for the next period. */
  obj->starttime_ = platform_get_system_time();
}

void TimerDisable(struct TimerObj *obj) {
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  /* Zero means disabled */
  obj->starttime_ = obj->period_ = 0;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	605a      	str	r2, [r3, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	601a      	str	r2, [r3, #0]
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bc80      	pop	{r7}
 80067e8:	4770      	bx	lr

080067ea <TimerDisabled>:

FSC_BOOL TimerDisabled(struct TimerObj *obj) {
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  /* Zero means disabled */
  return (obj->period_ == 0) ? TRUE : FALSE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	bf0c      	ite	eq
 80067fa:	2301      	moveq	r3, #1
 80067fc:	2300      	movne	r3, #0
 80067fe:	b2db      	uxtb	r3, r3
}
 8006800:	4618      	mov	r0, r3
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	bc80      	pop	{r7}
 8006808:	4770      	bx	lr

0800680a <TimerExpired>:

FSC_BOOL TimerExpired(struct TimerObj *obj) {
 800680a:	b580      	push	{r7, lr}
 800680c:	b084      	sub	sp, #16
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  FSC_BOOL result = FALSE;
 8006812:	2300      	movs	r3, #0
 8006814:	73fb      	strb	r3, [r7, #15]

  if (TimerDisabled(obj)) {
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff ffe7 	bl	80067ea <TimerDisabled>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d002      	beq.n	8006828 <TimerExpired+0x1e>
      /* Disabled */
      /* TODO - possible cases where this return value might case issue? */
      result = FALSE;
 8006822:	2300      	movs	r3, #0
 8006824:	73fb      	strb	r3, [r7, #15]
 8006826:	e00d      	b.n	8006844 <TimerExpired+0x3a>
  }
  else {
      /* Elapsed time >= period? */
      result = ((FSC_U32)(platform_get_system_time() - obj->starttime_) >=
 8006828:	f7fa f80f 	bl	800084a <platform_get_system_time>
 800682c:	4602      	mov	r2, r0
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	1ad2      	subs	r2, r2, r3
               obj->period_) ? TRUE : FALSE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	429a      	cmp	r2, r3
 800683a:	bf2c      	ite	cs
 800683c:	2301      	movcs	r3, #1
 800683e:	2300      	movcc	r3, #0
 8006840:	b2db      	uxtb	r3, r3
      result = ((FSC_U32)(platform_get_system_time() - obj->starttime_) >=
 8006842:	73fb      	strb	r3, [r7, #15]
  }

  /* Check for auto-disable if expired and not explicitly disabled */
  if (result) {
 8006844:	7bfb      	ldrb	r3, [r7, #15]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <TimerExpired+0x56>
    if (obj->disablecount_-- == 0) {
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	7a1b      	ldrb	r3, [r3, #8]
 800684e:	1e5a      	subs	r2, r3, #1
 8006850:	b2d1      	uxtb	r1, r2
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	7211      	strb	r1, [r2, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d102      	bne.n	8006860 <TimerExpired+0x56>
      TimerDisable(obj);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7ff ffb5 	bl	80067ca <TimerDisable>
    }
  }

  return result;
 8006860:	7bfb      	ldrb	r3, [r7, #15]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <TimerRemaining>:

FSC_U32 TimerRemaining(struct TimerObj *obj)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b084      	sub	sp, #16
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  FSC_U32 currenttime = platform_get_system_time();
 8006872:	f7f9 ffea 	bl	800084a <platform_get_system_time>
 8006876:	60f8      	str	r0, [r7, #12]

  if (TimerDisabled(obj)) {
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f7ff ffb6 	bl	80067ea <TimerDisabled>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <TimerRemaining+0x1e>
    return 0;
 8006884:	2300      	movs	r3, #0
 8006886:	e00e      	b.n	80068a6 <TimerRemaining+0x3c>
  }

  /* If expired before it could be handled, return a minimum delay. */
  if (TimerExpired(obj)) {
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff ffbe 	bl	800680a <TimerExpired>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <TimerRemaining+0x2e>
    return 1;
 8006894:	2301      	movs	r3, #1
 8006896:	e006      	b.n	80068a6 <TimerRemaining+0x3c>
  }

  /* Timer hasn't expired, so this should return a valid time left. */
  return (FSC_U32)(obj->starttime_ + obj->period_ - currenttime);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	441a      	add	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	1ad3      	subs	r3, r2, r3
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <VIF_InitializeSrcCaps>:
#include "vendor_info.h"

#include "PD_Types.h"

void VIF_InitializeSrcCaps(doDataObject_t *src_caps)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b08b      	sub	sp, #44	; 0x2c
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
    FSC_U8 i;
    doDataObject_t gSrc_caps[7] =
 80068b6:	f107 0308 	add.w	r3, r7, #8
 80068ba:	2200      	movs	r2, #0
 80068bc:	601a      	str	r2, [r3, #0]
 80068be:	605a      	str	r2, [r3, #4]
 80068c0:	609a      	str	r2, [r3, #8]
 80068c2:	60da      	str	r2, [r3, #12]
 80068c4:	611a      	str	r2, [r3, #16]
 80068c6:	615a      	str	r2, [r3, #20]
 80068c8:	619a      	str	r2, [r3, #24]
 80068ca:	893b      	ldrh	r3, [r7, #8]
 80068cc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80068d0:	f362 0309 	bfi	r3, r2, #0, #10
 80068d4:	813b      	strh	r3, [r7, #8]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2264      	movs	r2, #100	; 0x64
 80068da:	f362 2393 	bfi	r3, r2, #10, #10
 80068de:	60bb      	str	r3, [r7, #8]
 80068e0:	7afb      	ldrb	r3, [r7, #11]
 80068e2:	f043 0302 	orr.w	r3, r3, #2
 80068e6:	72fb      	strb	r3, [r7, #11]
 80068e8:	7afb      	ldrb	r3, [r7, #11]
 80068ea:	f043 0308 	orr.w	r3, r3, #8
 80068ee:	72fb      	strb	r3, [r7, #11]
 80068f0:	7afb      	ldrb	r3, [r7, #11]
 80068f2:	f043 0320 	orr.w	r3, r3, #32
 80068f6:	72fb      	strb	r3, [r7, #11]
 80068f8:	89bb      	ldrh	r3, [r7, #12]
 80068fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80068fe:	f362 0309 	bfi	r3, r2, #0, #10
 8006902:	81bb      	strh	r3, [r7, #12]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	22b4      	movs	r2, #180	; 0xb4
 8006908:	f362 2393 	bfi	r3, r2, #10, #10
 800690c:	60fb      	str	r3, [r7, #12]
 800690e:	7c3b      	ldrb	r3, [r7, #16]
 8006910:	223c      	movs	r2, #60	; 0x3c
 8006912:	f362 0306 	bfi	r3, r2, #0, #7
 8006916:	743b      	strb	r3, [r7, #16]
 8006918:	231e      	movs	r3, #30
 800691a:	747b      	strb	r3, [r7, #17]
 800691c:	8a7b      	ldrh	r3, [r7, #18]
 800691e:	226e      	movs	r2, #110	; 0x6e
 8006920:	f362 0348 	bfi	r3, r2, #1, #8
 8006924:	827b      	strh	r3, [r7, #18]
 8006926:	7cfb      	ldrb	r3, [r7, #19]
 8006928:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800692c:	74fb      	strb	r3, [r7, #19]
        CREATE_SUPPLY_PDO(5, Src_PDO_Supply_Type5),
        CREATE_SUPPLY_PDO(6, Src_PDO_Supply_Type6),
        CREATE_SUPPLY_PDO(7, Src_PDO_Supply_Type7),
    };

    for(i = 0; i < 7; ++i) {src_caps[i].object = gSrc_caps[i].object;}
 800692e:	2300      	movs	r3, #0
 8006930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006934:	e012      	b.n	800695c <VIF_InitializeSrcCaps+0xae>
 8006936:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800693a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800693e:	0092      	lsls	r2, r2, #2
 8006940:	6879      	ldr	r1, [r7, #4]
 8006942:	440a      	add	r2, r1
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800694a:	440b      	add	r3, r1
 800694c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006956:	3301      	adds	r3, #1
 8006958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800695c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006960:	2b06      	cmp	r3, #6
 8006962:	d9e8      	bls.n	8006936 <VIF_InitializeSrcCaps+0x88>
}
 8006964:	bf00      	nop
 8006966:	bf00      	nop
 8006968:	372c      	adds	r7, #44	; 0x2c
 800696a:	46bd      	mov	sp, r7
 800696c:	bc80      	pop	{r7}
 800696e:	4770      	bx	lr

08006970 <VIF_InitializeSnkCaps>:
void VIF_InitializeSnkCaps(doDataObject_t *snk_caps)
{
 8006970:	b480      	push	{r7}
 8006972:	b08b      	sub	sp, #44	; 0x2c
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
    FSC_U8 i;
    doDataObject_t gSnk_caps[7] =
 8006978:	f107 0308 	add.w	r3, r7, #8
 800697c:	2200      	movs	r2, #0
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	605a      	str	r2, [r3, #4]
 8006982:	609a      	str	r2, [r3, #8]
 8006984:	60da      	str	r2, [r3, #12]
 8006986:	611a      	str	r2, [r3, #16]
 8006988:	615a      	str	r2, [r3, #20]
 800698a:	619a      	str	r2, [r3, #24]
 800698c:	893b      	ldrh	r3, [r7, #8]
 800698e:	220a      	movs	r2, #10
 8006990:	f362 0309 	bfi	r3, r2, #0, #10
 8006994:	813b      	strh	r3, [r7, #8]
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2264      	movs	r2, #100	; 0x64
 800699a:	f362 2393 	bfi	r3, r2, #10, #10
 800699e:	60bb      	str	r3, [r7, #8]
 80069a0:	7afb      	ldrb	r3, [r7, #11]
 80069a2:	f043 0302 	orr.w	r3, r3, #2
 80069a6:	72fb      	strb	r3, [r7, #11]
 80069a8:	7afb      	ldrb	r3, [r7, #11]
 80069aa:	f043 0308 	orr.w	r3, r3, #8
 80069ae:	72fb      	strb	r3, [r7, #11]
 80069b0:	7afb      	ldrb	r3, [r7, #11]
 80069b2:	f043 0320 	orr.w	r3, r3, #32
 80069b6:	72fb      	strb	r3, [r7, #11]
 80069b8:	89bb      	ldrh	r3, [r7, #12]
 80069ba:	220a      	movs	r2, #10
 80069bc:	f362 0309 	bfi	r3, r2, #0, #10
 80069c0:	81bb      	strh	r3, [r7, #12]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	22b4      	movs	r2, #180	; 0xb4
 80069c6:	f362 2393 	bfi	r3, r2, #10, #10
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	f043 0302 	orr.w	r3, r3, #2
 80069d2:	73fb      	strb	r3, [r7, #15]
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
 80069d6:	f043 0308 	orr.w	r3, r3, #8
 80069da:	73fb      	strb	r3, [r7, #15]
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	f043 0320 	orr.w	r3, r3, #32
 80069e2:	73fb      	strb	r3, [r7, #15]
 80069e4:	7cfb      	ldrb	r3, [r7, #19]
 80069e6:	f043 0302 	orr.w	r3, r3, #2
 80069ea:	74fb      	strb	r3, [r7, #19]
 80069ec:	7cfb      	ldrb	r3, [r7, #19]
 80069ee:	f043 0308 	orr.w	r3, r3, #8
 80069f2:	74fb      	strb	r3, [r7, #19]
 80069f4:	7cfb      	ldrb	r3, [r7, #19]
 80069f6:	f043 0320 	orr.w	r3, r3, #32
 80069fa:	74fb      	strb	r3, [r7, #19]
 80069fc:	7dfb      	ldrb	r3, [r7, #23]
 80069fe:	f043 0302 	orr.w	r3, r3, #2
 8006a02:	75fb      	strb	r3, [r7, #23]
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
 8006a06:	f043 0308 	orr.w	r3, r3, #8
 8006a0a:	75fb      	strb	r3, [r7, #23]
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
 8006a0e:	f043 0320 	orr.w	r3, r3, #32
 8006a12:	75fb      	strb	r3, [r7, #23]
 8006a14:	7efb      	ldrb	r3, [r7, #27]
 8006a16:	f043 0302 	orr.w	r3, r3, #2
 8006a1a:	76fb      	strb	r3, [r7, #27]
 8006a1c:	7efb      	ldrb	r3, [r7, #27]
 8006a1e:	f043 0308 	orr.w	r3, r3, #8
 8006a22:	76fb      	strb	r3, [r7, #27]
 8006a24:	7efb      	ldrb	r3, [r7, #27]
 8006a26:	f043 0320 	orr.w	r3, r3, #32
 8006a2a:	76fb      	strb	r3, [r7, #27]
 8006a2c:	7ffb      	ldrb	r3, [r7, #31]
 8006a2e:	f043 0302 	orr.w	r3, r3, #2
 8006a32:	77fb      	strb	r3, [r7, #31]
 8006a34:	7ffb      	ldrb	r3, [r7, #31]
 8006a36:	f043 0308 	orr.w	r3, r3, #8
 8006a3a:	77fb      	strb	r3, [r7, #31]
 8006a3c:	7ffb      	ldrb	r3, [r7, #31]
 8006a3e:	f043 0320 	orr.w	r3, r3, #32
 8006a42:	77fb      	strb	r3, [r7, #31]
 8006a44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a48:	f043 0302 	orr.w	r3, r3, #2
 8006a4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a54:	f043 0308 	orr.w	r3, r3, #8
 8006a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a60:	f043 0320 	orr.w	r3, r3, #32
 8006a64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        CREATE_SINK_PDO(5, Snk_PDO_Supply_Type5),
        CREATE_SINK_PDO(6, Snk_PDO_Supply_Type6),
        CREATE_SINK_PDO(7, Snk_PDO_Supply_Type7),
    };

    for(i = 0; i < 7; ++i) {snk_caps[i].object = gSnk_caps[i].object;}
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a6e:	e012      	b.n	8006a96 <VIF_InitializeSnkCaps+0x126>
 8006a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a74:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006a78:	0092      	lsls	r2, r2, #2
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	440a      	add	r2, r1
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006a84:	440b      	add	r3, r1
 8006a86:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006a8a:	6013      	str	r3, [r2, #0]
 8006a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a90:	3301      	adds	r3, #1
 8006a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a9a:	2b06      	cmp	r3, #6
 8006a9c:	d9e8      	bls.n	8006a70 <VIF_InitializeSnkCaps+0x100>

}
 8006a9e:	bf00      	nop
 8006aa0:	bf00      	nop
 8006aa2:	372c      	adds	r7, #44	; 0x2c
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bc80      	pop	{r7}
 8006aa8:	4770      	bx	lr
	...

08006aac <DPM_Init>:
};

static DevicePolicy_t devicePolicyMgr;

void DPM_Init(DevicePolicy_t **dpm)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
    devicePolicyMgr.num_ports = 0;
 8006ab4:	4b06      	ldr	r3, [pc, #24]	; (8006ad0 <DPM_Init+0x24>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	711a      	strb	r2, [r3, #4]
    devicePolicyMgr.dpm_state = dpmIdle;
 8006aba:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <DPM_Init+0x24>)
 8006abc:	2201      	movs	r2, #1
 8006abe:	715a      	strb	r2, [r3, #5]

    *dpm = &devicePolicyMgr;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a03      	ldr	r2, [pc, #12]	; (8006ad0 <DPM_Init+0x24>)
 8006ac4:	601a      	str	r2, [r3, #0]
}
 8006ac6:	bf00      	nop
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bc80      	pop	{r7}
 8006ace:	4770      	bx	lr
 8006ad0:	2000043c 	.word	0x2000043c

08006ad4 <DPM_AddPort>:

void DPM_AddPort(DevicePolicy_t *dpm, Port_t *port)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
    dpm->ports[dpm->num_ports++] = port;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	791b      	ldrb	r3, [r3, #4]
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	b2d1      	uxtb	r1, r2
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	7111      	strb	r1, [r2, #4]
 8006aea:	4619      	mov	r1, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr

08006afe <DPM_GetSinkCapHeader>:
     */
    return &(port->src_cap_header);
}

sopMainHeader_t* DPM_GetSinkCapHeader(DevicePolicy_t *dpm, Port_t *port)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b083      	sub	sp, #12
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	6039      	str	r1, [r7, #0]
    /* The DPM has access to all ports.  If needed, update this port here based
     * on the status of other ports - e.g. power sharing, etc.
     */
    return &(port->snk_cap_header);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	3368      	adds	r3, #104	; 0x68
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bc80      	pop	{r7}
 8006b14:	4770      	bx	lr

08006b16 <DPM_GetSourceCap>:

doDataObject_t* DPM_GetSourceCap(DevicePolicy_t *dpm, Port_t *port)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b083      	sub	sp, #12
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	6039      	str	r1, [r7, #0]
    /* The DPM has access to all ports.  If needed, update this port here based
     * on the status of other ports - e.g. power sharing, etc.
     */
    return port->src_caps;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	336c      	adds	r3, #108	; 0x6c
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bc80      	pop	{r7}
 8006b2c:	4770      	bx	lr

08006b2e <DPM_GetSinkCap>:

doDataObject_t* DPM_GetSinkCap(DevicePolicy_t *dpm, Port_t *port)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b083      	sub	sp, #12
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
 8006b36:	6039      	str	r1, [r7, #0]
    /* The DPM has access to all ports.  If needed, update this port here based
     * on the status of other ports - e.g. power sharing, etc.
     */
    return port->snk_caps;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	3388      	adds	r3, #136	; 0x88
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bc80      	pop	{r7}
 8006b44:	4770      	bx	lr

08006b46 <DPM_SpecRev>:

    return status;
}

SpecRev DPM_SpecRev(Port_t *port, SopType sop)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	70fb      	strb	r3, [r7, #3]
    if (sop == SOP_TYPE_SOP)
 8006b52:	78fb      	ldrb	r3, [r7, #3]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d103      	bne.n	8006b60 <DPM_SpecRev+0x1a>
    {
        /* Port Partner */
        return port->PdRevSop;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8006b5e:	e00a      	b.n	8006b76 <DPM_SpecRev+0x30>
    }
    else if (sop == SOP_TYPE_SOP1 || sop == SOP_TYPE_SOP2)
 8006b60:	78fb      	ldrb	r3, [r7, #3]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d002      	beq.n	8006b6c <DPM_SpecRev+0x26>
 8006b66:	78fb      	ldrb	r3, [r7, #3]
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d103      	bne.n	8006b74 <DPM_SpecRev+0x2e>
    {
        /* Cable marker */
        return port->PdRevCable;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006b72:	e000      	b.n	8006b76 <DPM_SpecRev+0x30>
    }
    else
    {
        /* Debug, default, etc. Handle as needed. */
        return USBPDSPECREV2p0;
 8006b74:	2301      	movs	r3, #1
    }
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bc80      	pop	{r7}
 8006b7e:	4770      	bx	lr

08006b80 <DPM_SetSpecRev>:

void DPM_SetSpecRev(Port_t *port, SopType sop, SpecRev rev)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	70fb      	strb	r3, [r7, #3]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	70bb      	strb	r3, [r7, #2]
    if (rev >= USBPDSPECREVMAX)
 8006b90:	78bb      	ldrb	r3, [r7, #2]
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d901      	bls.n	8006b9a <DPM_SetSpecRev+0x1a>
    {
        /* Compliance test tries invalid revision value */
        rev = USBPDSPECREVMAX - 1;
 8006b96:	2302      	movs	r3, #2
 8006b98:	70bb      	strb	r3, [r7, #2]
    }

    if (sop == SOP_TYPE_SOP && port->PdRevSop > rev)
 8006b9a:	78fb      	ldrb	r3, [r7, #3]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10a      	bne.n	8006bb6 <DPM_SetSpecRev+0x36>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8006ba6:	78ba      	ldrb	r2, [r7, #2]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d204      	bcs.n	8006bb6 <DPM_SetSpecRev+0x36>
    {
        port->PdRevSop = rev;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	78ba      	ldrb	r2, [r7, #2]
 8006bb0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 8006bb4:	e009      	b.n	8006bca <DPM_SetSpecRev+0x4a>
    }
    else if (sop == SOP_TYPE_SOP1 || sop == SOP_TYPE_SOP2)
 8006bb6:	78fb      	ldrb	r3, [r7, #3]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d002      	beq.n	8006bc2 <DPM_SetSpecRev+0x42>
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d103      	bne.n	8006bca <DPM_SetSpecRev+0x4a>
    {
        port->PdRevCable = rev;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	78ba      	ldrb	r2, [r7, #2]
 8006bc6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
    }

    /* Adjust according to compatibility table */
    if (port->PdRevSop == USBPDSPECREV2p0 &&
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d108      	bne.n	8006be6 <DPM_SetSpecRev+0x66>
        port->PdRevCable == USBPDSPECREV3p0)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
    if (port->PdRevSop == USBPDSPECREV2p0 &&
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d103      	bne.n	8006be6 <DPM_SetSpecRev+0x66>
    {
        port->PdRevCable = USBPDSPECREV2p0;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
    }
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bc80      	pop	{r7}
 8006bee:	4770      	bx	lr

08006bf0 <DPM_Retries>:
    return (DPM_SpecRev(port, sop) == USBPDSPECREV2p0) ? V1P0 : V2P0;
}
#endif /* FSC_HAVE_VDM */

FSC_U8 DPM_Retries(Port_t *port, SopType sop)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	70fb      	strb	r3, [r7, #3]
    SpecRev rev = DPM_SpecRev(port, sop);
 8006bfc:	78fb      	ldrb	r3, [r7, #3]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7ff ffa0 	bl	8006b46 <DPM_SpecRev>
 8006c06:	4603      	mov	r3, r0
 8006c08:	73fb      	strb	r3, [r7, #15]

    return (rev == USBPDSPECREV3p0) ? 2 : 3;
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d101      	bne.n	8006c14 <DPM_Retries+0x24>
 8006c10:	2302      	movs	r3, #2
 8006c12:	e000      	b.n	8006c16 <DPM_Retries+0x26>
 8006c14:	2303      	movs	r3, #3
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <register_observer>:
} ObserversList_t;

static ObserversList_t observers = {0};

FSC_BOOL register_observer(FSC_U32 event, EventHandler handler, void *context)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
    FSC_BOOL status = FALSE;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	75fb      	strb	r3, [r7, #23]
    if (observers.obs_count < MAX_OBSERVERS)
 8006c30:	4b1a      	ldr	r3, [pc, #104]	; (8006c9c <register_observer+0x7c>)
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b09      	cmp	r3, #9
 8006c36:	d82b      	bhi.n	8006c90 <register_observer+0x70>
    {
        observers.list[observers.obs_count].event = event;
 8006c38:	4b18      	ldr	r3, [pc, #96]	; (8006c9c <register_observer+0x7c>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4a17      	ldr	r2, [pc, #92]	; (8006c9c <register_observer+0x7c>)
 8006c40:	460b      	mov	r3, r1
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	440b      	add	r3, r1
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	601a      	str	r2, [r3, #0]
        observers.list[observers.obs_count].event_handler = handler;
 8006c50:	4b12      	ldr	r3, [pc, #72]	; (8006c9c <register_observer+0x7c>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	4619      	mov	r1, r3
 8006c56:	4a11      	ldr	r2, [pc, #68]	; (8006c9c <register_observer+0x7c>)
 8006c58:	460b      	mov	r3, r1
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	440b      	add	r3, r1
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	3308      	adds	r3, #8
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	601a      	str	r2, [r3, #0]
        observers.list[observers.obs_count].context = context;
 8006c68:	4b0c      	ldr	r3, [pc, #48]	; (8006c9c <register_observer+0x7c>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4a0b      	ldr	r2, [pc, #44]	; (8006c9c <register_observer+0x7c>)
 8006c70:	460b      	mov	r3, r1
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	440b      	add	r3, r1
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	330c      	adds	r3, #12
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	601a      	str	r2, [r3, #0]
        observers.obs_count++;
 8006c80:	4b06      	ldr	r3, [pc, #24]	; (8006c9c <register_observer+0x7c>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	3301      	adds	r3, #1
 8006c86:	b2da      	uxtb	r2, r3
 8006c88:	4b04      	ldr	r3, [pc, #16]	; (8006c9c <register_observer+0x7c>)
 8006c8a:	701a      	strb	r2, [r3, #0]
        status = TRUE;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	75fb      	strb	r3, [r7, #23]
    }
    return status;
 8006c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	371c      	adds	r7, #28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bc80      	pop	{r7}
 8006c9a:	4770      	bx	lr
 8006c9c:	20000444 	.word	0x20000444

08006ca0 <notify_observers>:
        observers.obs_count--;
    }
}

void notify_observers(FSC_U32 event, FSC_U8 portId, void *app_ctx)
{
 8006ca0:	b590      	push	{r4, r7, lr}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	72fb      	strb	r3, [r7, #11]
    FSC_U32 i;
    for (i = 0; i < observers.obs_count; i++)
 8006cae:	2300      	movs	r3, #0
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	e025      	b.n	8006d00 <notify_observers+0x60>
    {
        if (observers.list[i].event & event)
 8006cb4:	4918      	ldr	r1, [pc, #96]	; (8006d18 <notify_observers+0x78>)
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	4013      	ands	r3, r2
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d015      	beq.n	8006cfa <notify_observers+0x5a>
        {
            observers.list[i].event_handler(event, portId,
 8006cce:	4912      	ldr	r1, [pc, #72]	; (8006d18 <notify_observers+0x78>)
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	4413      	add	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	440b      	add	r3, r1
 8006cdc:	3308      	adds	r3, #8
 8006cde:	681c      	ldr	r4, [r3, #0]
 8006ce0:	490d      	ldr	r1, [pc, #52]	; (8006d18 <notify_observers+0x78>)
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	4413      	add	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	440b      	add	r3, r1
 8006cee:	330c      	adds	r3, #12
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	7af9      	ldrb	r1, [r7, #11]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	47a0      	blx	r4
    for (i = 0; i < observers.obs_count; i++)
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	4b05      	ldr	r3, [pc, #20]	; (8006d18 <notify_observers+0x78>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	461a      	mov	r2, r3
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d3d3      	bcc.n	8006cb4 <notify_observers+0x14>
                                            observers.list[i].context, app_ctx);
        }
    }
}
 8006d0c:	bf00      	nop
 8006d0e:	bf00      	nop
 8006d10:	371c      	adds	r7, #28
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd90      	pop	{r4, r7, pc}
 8006d16:	bf00      	nop
 8006d18:	20000444 	.word	0x20000444

08006d1c <InitializeTickTimer>:
#include "stm32f1xx_hal.h"

#include "../../FUSB_CORE/core.h"

void InitializeTickTimer(void)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	af00      	add	r7, sp, #0
    /* Disable */
    TIM2->CR1 = 0x00000000;
 8006d20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]

    /*SystemCoreClock is 48MHz. Prescaler - 48 gives 1us resolution */
    TIM2->PSC = 48;
 8006d28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d2c:	2230      	movs	r2, #48	; 0x30
 8006d2e:	629a      	str	r2, [r3, #40]	; 0x28

    /*
     * Start the count at the end.  Certain registers (PSC,ARR,...) are
     * "shadowed" and only get updated on a rollover or other event.
     */
    TIM2->CNT = 0xFFFFFFFF;
 8006d30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d38:	625a      	str	r2, [r3, #36]	; 0x24

    /*
     * Period/Reload - a long period give a free-running time-stamp-mode timer
     */
    TIM2->ARR = 0xFFFFFFFF;
 8006d3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable! */
    EnableTickTimer(TRUE);
 8006d44:	2001      	movs	r0, #1
 8006d46:	f000 f80e 	bl	8006d66 <EnableTickTimer>

    /* Enable and set TIM2 Interrupt */
    TIM2->SR = 0;
 8006d4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d4e:	2200      	movs	r2, #0
 8006d50:	611a      	str	r2, [r3, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8006d52:	2200      	movs	r2, #0
 8006d54:	2101      	movs	r1, #1
 8006d56:	201c      	movs	r0, #28
 8006d58:	f000 f9dd 	bl	8007116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006d5c:	201c      	movs	r0, #28
 8006d5e:	f000 f9f6 	bl	800714e <HAL_NVIC_EnableIRQ>
}
 8006d62:	bf00      	nop
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <EnableTickTimer>:

void EnableTickTimer(FSC_BOOL enable)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	71fb      	strb	r3, [r7, #7]
    if (enable)
 8006d70:	79fb      	ldrb	r3, [r7, #7]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d008      	beq.n	8006d88 <EnableTickTimer+0x22>
    {
        TIM2->CR1 |= TIM_CR1_CEN;
 8006d76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006d80:	f043 0301 	orr.w	r3, r3, #1
 8006d84:	6013      	str	r3, [r2, #0]
    }
    else
    {
        TIM2->CR1 &= ~TIM_CR1_CEN;
    }
}
 8006d86:	e007      	b.n	8006d98 <EnableTickTimer+0x32>
        TIM2->CR1 &= ~TIM_CR1_CEN;
 8006d88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006d92:	f023 0301 	bic.w	r3, r3, #1
 8006d96:	6013      	str	r3, [r2, #0]
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bc80      	pop	{r7}
 8006da0:	4770      	bx	lr

08006da2 <SetTimeInterrupt>:


void SetTimeInterrupt(FSC_U32 microseconds)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  /* Set the offset for the next interrupt request */
  TIM2->CCR1 = TIM2->CNT + microseconds;
 8006daa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006db0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4413      	add	r3, r2
 8006db8:	634b      	str	r3, [r1, #52]	; 0x34

  /* Clear the previous and enable the next CC1 Interrupt */
  TIM2->SR = 0;
 8006dba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	611a      	str	r2, [r3, #16]
  TIM2->DIER |= TIM_DIER_CC1IE;
 8006dc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006dcc:	f043 0302 	orr.w	r3, r3, #2
 8006dd0:	60d3      	str	r3, [r2, #12]
}
 8006dd2:	bf00      	nop
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr

08006ddc <ClearTimeInterrupt>:

void ClearTimeInterrupt(void)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
    /* Disable the interrupt enable bit */
    TIM2->DIER &= ~TIM_DIER_CC1IE;
 8006de0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006dea:	f023 0302 	bic.w	r3, r3, #2
 8006dee:	60d3      	str	r3, [r2, #12]
}
 8006df0:	bf00      	nop
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bc80      	pop	{r7}
 8006df6:	4770      	bx	lr

08006df8 <InitializeTSTimer>:


void InitializeTSTimer(void)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
    /* Use Timer1 to count at 0.1ms resolution up to one second. */
    /* Use Timer3, triggered by Timer16, to count seconds. */

    /* SystemCoreClock is 48MHz. */
    TIM1->PSC = 4800; /* A prescaler of 4800 gives 0.1ms res */
 8006dfc:	4b15      	ldr	r3, [pc, #84]	; (8006e54 <InitializeTSTimer+0x5c>)
 8006dfe:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8006e02:	629a      	str	r2, [r3, #40]	; 0x28
    TIM1->ARR = 10000; /* A period of 10000 gives 1sec intervals */
 8006e04:	4b13      	ldr	r3, [pc, #76]	; (8006e54 <InitializeTSTimer+0x5c>)
 8006e06:	f242 7210 	movw	r2, #10000	; 0x2710
 8006e0a:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM1->CR2 |= TIM_CR2_MMS_1; /* MMS = 0b010 generates TRGO */
 8006e0c:	4b11      	ldr	r3, [pc, #68]	; (8006e54 <InitializeTSTimer+0x5c>)
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	4a10      	ldr	r2, [pc, #64]	; (8006e54 <InitializeTSTimer+0x5c>)
 8006e12:	f043 0320 	orr.w	r3, r3, #32
 8006e16:	6053      	str	r3, [r2, #4]

    /* Start the count at the end.  Certain registers (PSC,ARR,...) are */
    /* "shadowed" and only get updated on a rollover or other event. */
    TIM1->CNT = 0xFFFFFFFF;
 8006e18:	4b0e      	ldr	r3, [pc, #56]	; (8006e54 <InitializeTSTimer+0x5c>)
 8006e1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Timer3 up as a slave to Timer1.  Timer3 will count in seconds. */
    TIM3->SMCR |= TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0;
 8006e20:	4b0d      	ldr	r3, [pc, #52]	; (8006e58 <InitializeTSTimer+0x60>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	4a0c      	ldr	r2, [pc, #48]	; (8006e58 <InitializeTSTimer+0x60>)
 8006e26:	f043 0307 	orr.w	r3, r3, #7
 8006e2a:	6093      	str	r3, [r2, #8]
    TIM3->CNT = 0;
 8006e2c:	4b0a      	ldr	r3, [pc, #40]	; (8006e58 <InitializeTSTimer+0x60>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enable both. */
    TIM1->CR1 |= TIM_CR1_CEN;
 8006e32:	4b08      	ldr	r3, [pc, #32]	; (8006e54 <InitializeTSTimer+0x5c>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a07      	ldr	r2, [pc, #28]	; (8006e54 <InitializeTSTimer+0x5c>)
 8006e38:	f043 0301 	orr.w	r3, r3, #1
 8006e3c:	6013      	str	r3, [r2, #0]
    TIM3->CR1 |= TIM_CR1_CEN;
 8006e3e:	4b06      	ldr	r3, [pc, #24]	; (8006e58 <InitializeTSTimer+0x60>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a05      	ldr	r2, [pc, #20]	; (8006e58 <InitializeTSTimer+0x60>)
 8006e44:	f043 0301 	orr.w	r3, r3, #1
 8006e48:	6013      	str	r3, [r2, #0]
}
 8006e4a:	bf00      	nop
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bc80      	pop	{r7}
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	40012c00 	.word	0x40012c00
 8006e58:	40000400 	.word	0x40000400

08006e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006e60:	4b08      	ldr	r3, [pc, #32]	; (8006e84 <HAL_Init+0x28>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a07      	ldr	r2, [pc, #28]	; (8006e84 <HAL_Init+0x28>)
 8006e66:	f043 0310 	orr.w	r3, r3, #16
 8006e6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e6c:	2003      	movs	r0, #3
 8006e6e:	f000 f947 	bl	8007100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006e72:	200f      	movs	r0, #15
 8006e74:	f000 f808 	bl	8006e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006e78:	f7f9 fcf0 	bl	800085c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	40022000 	.word	0x40022000

08006e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006e90:	4b12      	ldr	r3, [pc, #72]	; (8006edc <HAL_InitTick+0x54>)
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	4b12      	ldr	r3, [pc, #72]	; (8006ee0 <HAL_InitTick+0x58>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	4619      	mov	r1, r3
 8006e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 f95f 	bl	800716a <HAL_SYSTICK_Config>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e00e      	b.n	8006ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2b0f      	cmp	r3, #15
 8006eba:	d80a      	bhi.n	8006ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	6879      	ldr	r1, [r7, #4]
 8006ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ec4:	f000 f927 	bl	8007116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006ec8:	4a06      	ldr	r2, [pc, #24]	; (8006ee4 <HAL_InitTick+0x5c>)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	e000      	b.n	8006ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	20000000 	.word	0x20000000
 8006ee0:	20000010 	.word	0x20000010
 8006ee4:	2000000c 	.word	0x2000000c

08006ee8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006eec:	4b05      	ldr	r3, [pc, #20]	; (8006f04 <HAL_IncTick+0x1c>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	4b05      	ldr	r3, [pc, #20]	; (8006f08 <HAL_IncTick+0x20>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	4a03      	ldr	r2, [pc, #12]	; (8006f08 <HAL_IncTick+0x20>)
 8006efa:	6013      	str	r3, [r2, #0]
}
 8006efc:	bf00      	nop
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bc80      	pop	{r7}
 8006f02:	4770      	bx	lr
 8006f04:	20000010 	.word	0x20000010
 8006f08:	20000674 	.word	0x20000674

08006f0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8006f10:	4b02      	ldr	r3, [pc, #8]	; (8006f1c <HAL_GetTick+0x10>)
 8006f12:	681b      	ldr	r3, [r3, #0]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bc80      	pop	{r7}
 8006f1a:	4770      	bx	lr
 8006f1c:	20000674 	.word	0x20000674

08006f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f28:	f7ff fff0 	bl	8006f0c <HAL_GetTick>
 8006f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f38:	d005      	beq.n	8006f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f3a:	4b0a      	ldr	r3, [pc, #40]	; (8006f64 <HAL_Delay+0x44>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006f46:	bf00      	nop
 8006f48:	f7ff ffe0 	bl	8006f0c <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d8f7      	bhi.n	8006f48 <HAL_Delay+0x28>
  {
  }
}
 8006f58:	bf00      	nop
 8006f5a:	bf00      	nop
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	20000010 	.word	0x20000010

08006f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f003 0307 	and.w	r3, r3, #7
 8006f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f78:	4b0c      	ldr	r3, [pc, #48]	; (8006fac <__NVIC_SetPriorityGrouping+0x44>)
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006f84:	4013      	ands	r3, r2
 8006f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f9a:	4a04      	ldr	r2, [pc, #16]	; (8006fac <__NVIC_SetPriorityGrouping+0x44>)
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	60d3      	str	r3, [r2, #12]
}
 8006fa0:	bf00      	nop
 8006fa2:	3714      	adds	r7, #20
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bc80      	pop	{r7}
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	e000ed00 	.word	0xe000ed00

08006fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006fb4:	4b04      	ldr	r3, [pc, #16]	; (8006fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	0a1b      	lsrs	r3, r3, #8
 8006fba:	f003 0307 	and.w	r3, r3, #7
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc80      	pop	{r7}
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	e000ed00 	.word	0xe000ed00

08006fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	db0b      	blt.n	8006ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fde:	79fb      	ldrb	r3, [r7, #7]
 8006fe0:	f003 021f 	and.w	r2, r3, #31
 8006fe4:	4906      	ldr	r1, [pc, #24]	; (8007000 <__NVIC_EnableIRQ+0x34>)
 8006fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fea:	095b      	lsrs	r3, r3, #5
 8006fec:	2001      	movs	r0, #1
 8006fee:	fa00 f202 	lsl.w	r2, r0, r2
 8006ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bc80      	pop	{r7}
 8006ffe:	4770      	bx	lr
 8007000:	e000e100 	.word	0xe000e100

08007004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	4603      	mov	r3, r0
 800700c:	6039      	str	r1, [r7, #0]
 800700e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007014:	2b00      	cmp	r3, #0
 8007016:	db0a      	blt.n	800702e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	b2da      	uxtb	r2, r3
 800701c:	490c      	ldr	r1, [pc, #48]	; (8007050 <__NVIC_SetPriority+0x4c>)
 800701e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007022:	0112      	lsls	r2, r2, #4
 8007024:	b2d2      	uxtb	r2, r2
 8007026:	440b      	add	r3, r1
 8007028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800702c:	e00a      	b.n	8007044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	b2da      	uxtb	r2, r3
 8007032:	4908      	ldr	r1, [pc, #32]	; (8007054 <__NVIC_SetPriority+0x50>)
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	f003 030f 	and.w	r3, r3, #15
 800703a:	3b04      	subs	r3, #4
 800703c:	0112      	lsls	r2, r2, #4
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	440b      	add	r3, r1
 8007042:	761a      	strb	r2, [r3, #24]
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	bc80      	pop	{r7}
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	e000e100 	.word	0xe000e100
 8007054:	e000ed00 	.word	0xe000ed00

08007058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007058:	b480      	push	{r7}
 800705a:	b089      	sub	sp, #36	; 0x24
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f003 0307 	and.w	r3, r3, #7
 800706a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	f1c3 0307 	rsb	r3, r3, #7
 8007072:	2b04      	cmp	r3, #4
 8007074:	bf28      	it	cs
 8007076:	2304      	movcs	r3, #4
 8007078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	3304      	adds	r3, #4
 800707e:	2b06      	cmp	r3, #6
 8007080:	d902      	bls.n	8007088 <NVIC_EncodePriority+0x30>
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	3b03      	subs	r3, #3
 8007086:	e000      	b.n	800708a <NVIC_EncodePriority+0x32>
 8007088:	2300      	movs	r3, #0
 800708a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800708c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	fa02 f303 	lsl.w	r3, r2, r3
 8007096:	43da      	mvns	r2, r3
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	401a      	ands	r2, r3
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	fa01 f303 	lsl.w	r3, r1, r3
 80070aa:	43d9      	mvns	r1, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070b0:	4313      	orrs	r3, r2
         );
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3724      	adds	r7, #36	; 0x24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bc80      	pop	{r7}
 80070ba:	4770      	bx	lr

080070bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	3b01      	subs	r3, #1
 80070c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070cc:	d301      	bcc.n	80070d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80070ce:	2301      	movs	r3, #1
 80070d0:	e00f      	b.n	80070f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80070d2:	4a0a      	ldr	r2, [pc, #40]	; (80070fc <SysTick_Config+0x40>)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80070da:	210f      	movs	r1, #15
 80070dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070e0:	f7ff ff90 	bl	8007004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80070e4:	4b05      	ldr	r3, [pc, #20]	; (80070fc <SysTick_Config+0x40>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80070ea:	4b04      	ldr	r3, [pc, #16]	; (80070fc <SysTick_Config+0x40>)
 80070ec:	2207      	movs	r2, #7
 80070ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	e000e010 	.word	0xe000e010

08007100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff ff2d 	bl	8006f68 <__NVIC_SetPriorityGrouping>
}
 800710e:	bf00      	nop
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007116:	b580      	push	{r7, lr}
 8007118:	b086      	sub	sp, #24
 800711a:	af00      	add	r7, sp, #0
 800711c:	4603      	mov	r3, r0
 800711e:	60b9      	str	r1, [r7, #8]
 8007120:	607a      	str	r2, [r7, #4]
 8007122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007124:	2300      	movs	r3, #0
 8007126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007128:	f7ff ff42 	bl	8006fb0 <__NVIC_GetPriorityGrouping>
 800712c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	68b9      	ldr	r1, [r7, #8]
 8007132:	6978      	ldr	r0, [r7, #20]
 8007134:	f7ff ff90 	bl	8007058 <NVIC_EncodePriority>
 8007138:	4602      	mov	r2, r0
 800713a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800713e:	4611      	mov	r1, r2
 8007140:	4618      	mov	r0, r3
 8007142:	f7ff ff5f 	bl	8007004 <__NVIC_SetPriority>
}
 8007146:	bf00      	nop
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	4603      	mov	r3, r0
 8007156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800715c:	4618      	mov	r0, r3
 800715e:	f7ff ff35 	bl	8006fcc <__NVIC_EnableIRQ>
}
 8007162:	bf00      	nop
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b082      	sub	sp, #8
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7ff ffa2 	bl	80070bc <SysTick_Config>
 8007178:	4603      	mov	r3, r0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e043      	b.n	8007222 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	4b22      	ldr	r3, [pc, #136]	; (800722c <HAL_DMA_Init+0xa8>)
 80071a2:	4413      	add	r3, r2
 80071a4:	4a22      	ldr	r2, [pc, #136]	; (8007230 <HAL_DMA_Init+0xac>)
 80071a6:	fba2 2303 	umull	r2, r3, r2, r3
 80071aa:	091b      	lsrs	r3, r3, #4
 80071ac:	009a      	lsls	r2, r3, #2
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a1f      	ldr	r2, [pc, #124]	; (8007234 <HAL_DMA_Init+0xb0>)
 80071b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2202      	movs	r2, #2
 80071bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80071ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80071d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80071dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	4313      	orrs	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	bc80      	pop	{r7}
 800722a:	4770      	bx	lr
 800722c:	bffdfff8 	.word	0xbffdfff8
 8007230:	cccccccd 	.word	0xcccccccd
 8007234:	40020000 	.word	0x40020000

08007238 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007254:	2204      	movs	r2, #4
 8007256:	409a      	lsls	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	4013      	ands	r3, r2
 800725c:	2b00      	cmp	r3, #0
 800725e:	d04f      	beq.n	8007300 <HAL_DMA_IRQHandler+0xc8>
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	f003 0304 	and.w	r3, r3, #4
 8007266:	2b00      	cmp	r3, #0
 8007268:	d04a      	beq.n	8007300 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0320 	and.w	r3, r3, #32
 8007274:	2b00      	cmp	r3, #0
 8007276:	d107      	bne.n	8007288 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 0204 	bic.w	r2, r2, #4
 8007286:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a66      	ldr	r2, [pc, #408]	; (8007428 <HAL_DMA_IRQHandler+0x1f0>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d029      	beq.n	80072e6 <HAL_DMA_IRQHandler+0xae>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a65      	ldr	r2, [pc, #404]	; (800742c <HAL_DMA_IRQHandler+0x1f4>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d022      	beq.n	80072e2 <HAL_DMA_IRQHandler+0xaa>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a63      	ldr	r2, [pc, #396]	; (8007430 <HAL_DMA_IRQHandler+0x1f8>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d01a      	beq.n	80072dc <HAL_DMA_IRQHandler+0xa4>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a62      	ldr	r2, [pc, #392]	; (8007434 <HAL_DMA_IRQHandler+0x1fc>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d012      	beq.n	80072d6 <HAL_DMA_IRQHandler+0x9e>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a60      	ldr	r2, [pc, #384]	; (8007438 <HAL_DMA_IRQHandler+0x200>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d00a      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x98>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a5f      	ldr	r2, [pc, #380]	; (800743c <HAL_DMA_IRQHandler+0x204>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d102      	bne.n	80072ca <HAL_DMA_IRQHandler+0x92>
 80072c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80072c8:	e00e      	b.n	80072e8 <HAL_DMA_IRQHandler+0xb0>
 80072ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80072ce:	e00b      	b.n	80072e8 <HAL_DMA_IRQHandler+0xb0>
 80072d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80072d4:	e008      	b.n	80072e8 <HAL_DMA_IRQHandler+0xb0>
 80072d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80072da:	e005      	b.n	80072e8 <HAL_DMA_IRQHandler+0xb0>
 80072dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072e0:	e002      	b.n	80072e8 <HAL_DMA_IRQHandler+0xb0>
 80072e2:	2340      	movs	r3, #64	; 0x40
 80072e4:	e000      	b.n	80072e8 <HAL_DMA_IRQHandler+0xb0>
 80072e6:	2304      	movs	r3, #4
 80072e8:	4a55      	ldr	r2, [pc, #340]	; (8007440 <HAL_DMA_IRQHandler+0x208>)
 80072ea:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 8094 	beq.w	800741e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80072fe:	e08e      	b.n	800741e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007304:	2202      	movs	r2, #2
 8007306:	409a      	lsls	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4013      	ands	r3, r2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d056      	beq.n	80073be <HAL_DMA_IRQHandler+0x186>
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f003 0302 	and.w	r3, r3, #2
 8007316:	2b00      	cmp	r3, #0
 8007318:	d051      	beq.n	80073be <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0320 	and.w	r3, r3, #32
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10b      	bne.n	8007340 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 020a 	bic.w	r2, r2, #10
 8007336:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a38      	ldr	r2, [pc, #224]	; (8007428 <HAL_DMA_IRQHandler+0x1f0>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d029      	beq.n	800739e <HAL_DMA_IRQHandler+0x166>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a37      	ldr	r2, [pc, #220]	; (800742c <HAL_DMA_IRQHandler+0x1f4>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d022      	beq.n	800739a <HAL_DMA_IRQHandler+0x162>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a35      	ldr	r2, [pc, #212]	; (8007430 <HAL_DMA_IRQHandler+0x1f8>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d01a      	beq.n	8007394 <HAL_DMA_IRQHandler+0x15c>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a34      	ldr	r2, [pc, #208]	; (8007434 <HAL_DMA_IRQHandler+0x1fc>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d012      	beq.n	800738e <HAL_DMA_IRQHandler+0x156>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a32      	ldr	r2, [pc, #200]	; (8007438 <HAL_DMA_IRQHandler+0x200>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d00a      	beq.n	8007388 <HAL_DMA_IRQHandler+0x150>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a31      	ldr	r2, [pc, #196]	; (800743c <HAL_DMA_IRQHandler+0x204>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d102      	bne.n	8007382 <HAL_DMA_IRQHandler+0x14a>
 800737c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007380:	e00e      	b.n	80073a0 <HAL_DMA_IRQHandler+0x168>
 8007382:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007386:	e00b      	b.n	80073a0 <HAL_DMA_IRQHandler+0x168>
 8007388:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800738c:	e008      	b.n	80073a0 <HAL_DMA_IRQHandler+0x168>
 800738e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007392:	e005      	b.n	80073a0 <HAL_DMA_IRQHandler+0x168>
 8007394:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007398:	e002      	b.n	80073a0 <HAL_DMA_IRQHandler+0x168>
 800739a:	2320      	movs	r3, #32
 800739c:	e000      	b.n	80073a0 <HAL_DMA_IRQHandler+0x168>
 800739e:	2302      	movs	r3, #2
 80073a0:	4a27      	ldr	r2, [pc, #156]	; (8007440 <HAL_DMA_IRQHandler+0x208>)
 80073a2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d034      	beq.n	800741e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80073bc:	e02f      	b.n	800741e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c2:	2208      	movs	r2, #8
 80073c4:	409a      	lsls	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	4013      	ands	r3, r2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d028      	beq.n	8007420 <HAL_DMA_IRQHandler+0x1e8>
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	f003 0308 	and.w	r3, r3, #8
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d023      	beq.n	8007420 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f022 020e 	bic.w	r2, r2, #14
 80073e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f0:	2101      	movs	r1, #1
 80073f2:	fa01 f202 	lsl.w	r2, r1, r2
 80073f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007412:	2b00      	cmp	r3, #0
 8007414:	d004      	beq.n	8007420 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	4798      	blx	r3
    }
  }
  return;
 800741e:	bf00      	nop
 8007420:	bf00      	nop
}
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	40020008 	.word	0x40020008
 800742c:	4002001c 	.word	0x4002001c
 8007430:	40020030 	.word	0x40020030
 8007434:	40020044 	.word	0x40020044
 8007438:	40020058 	.word	0x40020058
 800743c:	4002006c 	.word	0x4002006c
 8007440:	40020000 	.word	0x40020000

08007444 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007444:	b480      	push	{r7}
 8007446:	b08b      	sub	sp, #44	; 0x2c
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800744e:	2300      	movs	r3, #0
 8007450:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007452:	2300      	movs	r3, #0
 8007454:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007456:	e169      	b.n	800772c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007458:	2201      	movs	r2, #1
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	fa02 f303 	lsl.w	r3, r2, r3
 8007460:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	69fa      	ldr	r2, [r7, #28]
 8007468:	4013      	ands	r3, r2
 800746a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	429a      	cmp	r2, r3
 8007472:	f040 8158 	bne.w	8007726 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	4a9a      	ldr	r2, [pc, #616]	; (80076e4 <HAL_GPIO_Init+0x2a0>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d05e      	beq.n	800753e <HAL_GPIO_Init+0xfa>
 8007480:	4a98      	ldr	r2, [pc, #608]	; (80076e4 <HAL_GPIO_Init+0x2a0>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d875      	bhi.n	8007572 <HAL_GPIO_Init+0x12e>
 8007486:	4a98      	ldr	r2, [pc, #608]	; (80076e8 <HAL_GPIO_Init+0x2a4>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d058      	beq.n	800753e <HAL_GPIO_Init+0xfa>
 800748c:	4a96      	ldr	r2, [pc, #600]	; (80076e8 <HAL_GPIO_Init+0x2a4>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d86f      	bhi.n	8007572 <HAL_GPIO_Init+0x12e>
 8007492:	4a96      	ldr	r2, [pc, #600]	; (80076ec <HAL_GPIO_Init+0x2a8>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d052      	beq.n	800753e <HAL_GPIO_Init+0xfa>
 8007498:	4a94      	ldr	r2, [pc, #592]	; (80076ec <HAL_GPIO_Init+0x2a8>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d869      	bhi.n	8007572 <HAL_GPIO_Init+0x12e>
 800749e:	4a94      	ldr	r2, [pc, #592]	; (80076f0 <HAL_GPIO_Init+0x2ac>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d04c      	beq.n	800753e <HAL_GPIO_Init+0xfa>
 80074a4:	4a92      	ldr	r2, [pc, #584]	; (80076f0 <HAL_GPIO_Init+0x2ac>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d863      	bhi.n	8007572 <HAL_GPIO_Init+0x12e>
 80074aa:	4a92      	ldr	r2, [pc, #584]	; (80076f4 <HAL_GPIO_Init+0x2b0>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d046      	beq.n	800753e <HAL_GPIO_Init+0xfa>
 80074b0:	4a90      	ldr	r2, [pc, #576]	; (80076f4 <HAL_GPIO_Init+0x2b0>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d85d      	bhi.n	8007572 <HAL_GPIO_Init+0x12e>
 80074b6:	2b12      	cmp	r3, #18
 80074b8:	d82a      	bhi.n	8007510 <HAL_GPIO_Init+0xcc>
 80074ba:	2b12      	cmp	r3, #18
 80074bc:	d859      	bhi.n	8007572 <HAL_GPIO_Init+0x12e>
 80074be:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <HAL_GPIO_Init+0x80>)
 80074c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c4:	0800753f 	.word	0x0800753f
 80074c8:	08007519 	.word	0x08007519
 80074cc:	0800752b 	.word	0x0800752b
 80074d0:	0800756d 	.word	0x0800756d
 80074d4:	08007573 	.word	0x08007573
 80074d8:	08007573 	.word	0x08007573
 80074dc:	08007573 	.word	0x08007573
 80074e0:	08007573 	.word	0x08007573
 80074e4:	08007573 	.word	0x08007573
 80074e8:	08007573 	.word	0x08007573
 80074ec:	08007573 	.word	0x08007573
 80074f0:	08007573 	.word	0x08007573
 80074f4:	08007573 	.word	0x08007573
 80074f8:	08007573 	.word	0x08007573
 80074fc:	08007573 	.word	0x08007573
 8007500:	08007573 	.word	0x08007573
 8007504:	08007573 	.word	0x08007573
 8007508:	08007521 	.word	0x08007521
 800750c:	08007535 	.word	0x08007535
 8007510:	4a79      	ldr	r2, [pc, #484]	; (80076f8 <HAL_GPIO_Init+0x2b4>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d013      	beq.n	800753e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007516:	e02c      	b.n	8007572 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	623b      	str	r3, [r7, #32]
          break;
 800751e:	e029      	b.n	8007574 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	3304      	adds	r3, #4
 8007526:	623b      	str	r3, [r7, #32]
          break;
 8007528:	e024      	b.n	8007574 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	3308      	adds	r3, #8
 8007530:	623b      	str	r3, [r7, #32]
          break;
 8007532:	e01f      	b.n	8007574 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	330c      	adds	r3, #12
 800753a:	623b      	str	r3, [r7, #32]
          break;
 800753c:	e01a      	b.n	8007574 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d102      	bne.n	800754c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007546:	2304      	movs	r3, #4
 8007548:	623b      	str	r3, [r7, #32]
          break;
 800754a:	e013      	b.n	8007574 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d105      	bne.n	8007560 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007554:	2308      	movs	r3, #8
 8007556:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	69fa      	ldr	r2, [r7, #28]
 800755c:	611a      	str	r2, [r3, #16]
          break;
 800755e:	e009      	b.n	8007574 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007560:	2308      	movs	r3, #8
 8007562:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	69fa      	ldr	r2, [r7, #28]
 8007568:	615a      	str	r2, [r3, #20]
          break;
 800756a:	e003      	b.n	8007574 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800756c:	2300      	movs	r3, #0
 800756e:	623b      	str	r3, [r7, #32]
          break;
 8007570:	e000      	b.n	8007574 <HAL_GPIO_Init+0x130>
          break;
 8007572:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	2bff      	cmp	r3, #255	; 0xff
 8007578:	d801      	bhi.n	800757e <HAL_GPIO_Init+0x13a>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	e001      	b.n	8007582 <HAL_GPIO_Init+0x13e>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	3304      	adds	r3, #4
 8007582:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	2bff      	cmp	r3, #255	; 0xff
 8007588:	d802      	bhi.n	8007590 <HAL_GPIO_Init+0x14c>
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	e002      	b.n	8007596 <HAL_GPIO_Init+0x152>
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	3b08      	subs	r3, #8
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	210f      	movs	r1, #15
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	fa01 f303 	lsl.w	r3, r1, r3
 80075a4:	43db      	mvns	r3, r3
 80075a6:	401a      	ands	r2, r3
 80075a8:	6a39      	ldr	r1, [r7, #32]
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	fa01 f303 	lsl.w	r3, r1, r3
 80075b0:	431a      	orrs	r2, r3
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f000 80b1 	beq.w	8007726 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80075c4:	4b4d      	ldr	r3, [pc, #308]	; (80076fc <HAL_GPIO_Init+0x2b8>)
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	4a4c      	ldr	r2, [pc, #304]	; (80076fc <HAL_GPIO_Init+0x2b8>)
 80075ca:	f043 0301 	orr.w	r3, r3, #1
 80075ce:	6193      	str	r3, [r2, #24]
 80075d0:	4b4a      	ldr	r3, [pc, #296]	; (80076fc <HAL_GPIO_Init+0x2b8>)
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	60bb      	str	r3, [r7, #8]
 80075da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80075dc:	4a48      	ldr	r2, [pc, #288]	; (8007700 <HAL_GPIO_Init+0x2bc>)
 80075de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e0:	089b      	lsrs	r3, r3, #2
 80075e2:	3302      	adds	r3, #2
 80075e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	f003 0303 	and.w	r3, r3, #3
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	220f      	movs	r2, #15
 80075f4:	fa02 f303 	lsl.w	r3, r2, r3
 80075f8:	43db      	mvns	r3, r3
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	4013      	ands	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a40      	ldr	r2, [pc, #256]	; (8007704 <HAL_GPIO_Init+0x2c0>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d013      	beq.n	8007630 <HAL_GPIO_Init+0x1ec>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a3f      	ldr	r2, [pc, #252]	; (8007708 <HAL_GPIO_Init+0x2c4>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d00d      	beq.n	800762c <HAL_GPIO_Init+0x1e8>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a3e      	ldr	r2, [pc, #248]	; (800770c <HAL_GPIO_Init+0x2c8>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d007      	beq.n	8007628 <HAL_GPIO_Init+0x1e4>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a3d      	ldr	r2, [pc, #244]	; (8007710 <HAL_GPIO_Init+0x2cc>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d101      	bne.n	8007624 <HAL_GPIO_Init+0x1e0>
 8007620:	2303      	movs	r3, #3
 8007622:	e006      	b.n	8007632 <HAL_GPIO_Init+0x1ee>
 8007624:	2304      	movs	r3, #4
 8007626:	e004      	b.n	8007632 <HAL_GPIO_Init+0x1ee>
 8007628:	2302      	movs	r3, #2
 800762a:	e002      	b.n	8007632 <HAL_GPIO_Init+0x1ee>
 800762c:	2301      	movs	r3, #1
 800762e:	e000      	b.n	8007632 <HAL_GPIO_Init+0x1ee>
 8007630:	2300      	movs	r3, #0
 8007632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007634:	f002 0203 	and.w	r2, r2, #3
 8007638:	0092      	lsls	r2, r2, #2
 800763a:	4093      	lsls	r3, r2
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007642:	492f      	ldr	r1, [pc, #188]	; (8007700 <HAL_GPIO_Init+0x2bc>)
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	089b      	lsrs	r3, r3, #2
 8007648:	3302      	adds	r3, #2
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d006      	beq.n	800766a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800765c:	4b2d      	ldr	r3, [pc, #180]	; (8007714 <HAL_GPIO_Init+0x2d0>)
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	492c      	ldr	r1, [pc, #176]	; (8007714 <HAL_GPIO_Init+0x2d0>)
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	4313      	orrs	r3, r2
 8007666:	600b      	str	r3, [r1, #0]
 8007668:	e006      	b.n	8007678 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800766a:	4b2a      	ldr	r3, [pc, #168]	; (8007714 <HAL_GPIO_Init+0x2d0>)
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	43db      	mvns	r3, r3
 8007672:	4928      	ldr	r1, [pc, #160]	; (8007714 <HAL_GPIO_Init+0x2d0>)
 8007674:	4013      	ands	r3, r2
 8007676:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d006      	beq.n	8007692 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007684:	4b23      	ldr	r3, [pc, #140]	; (8007714 <HAL_GPIO_Init+0x2d0>)
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	4922      	ldr	r1, [pc, #136]	; (8007714 <HAL_GPIO_Init+0x2d0>)
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	4313      	orrs	r3, r2
 800768e:	604b      	str	r3, [r1, #4]
 8007690:	e006      	b.n	80076a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007692:	4b20      	ldr	r3, [pc, #128]	; (8007714 <HAL_GPIO_Init+0x2d0>)
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	43db      	mvns	r3, r3
 800769a:	491e      	ldr	r1, [pc, #120]	; (8007714 <HAL_GPIO_Init+0x2d0>)
 800769c:	4013      	ands	r3, r2
 800769e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d006      	beq.n	80076ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80076ac:	4b19      	ldr	r3, [pc, #100]	; (8007714 <HAL_GPIO_Init+0x2d0>)
 80076ae:	689a      	ldr	r2, [r3, #8]
 80076b0:	4918      	ldr	r1, [pc, #96]	; (8007714 <HAL_GPIO_Init+0x2d0>)
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	608b      	str	r3, [r1, #8]
 80076b8:	e006      	b.n	80076c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80076ba:	4b16      	ldr	r3, [pc, #88]	; (8007714 <HAL_GPIO_Init+0x2d0>)
 80076bc:	689a      	ldr	r2, [r3, #8]
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	43db      	mvns	r3, r3
 80076c2:	4914      	ldr	r1, [pc, #80]	; (8007714 <HAL_GPIO_Init+0x2d0>)
 80076c4:	4013      	ands	r3, r2
 80076c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d021      	beq.n	8007718 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80076d4:	4b0f      	ldr	r3, [pc, #60]	; (8007714 <HAL_GPIO_Init+0x2d0>)
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	490e      	ldr	r1, [pc, #56]	; (8007714 <HAL_GPIO_Init+0x2d0>)
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	4313      	orrs	r3, r2
 80076de:	60cb      	str	r3, [r1, #12]
 80076e0:	e021      	b.n	8007726 <HAL_GPIO_Init+0x2e2>
 80076e2:	bf00      	nop
 80076e4:	10320000 	.word	0x10320000
 80076e8:	10310000 	.word	0x10310000
 80076ec:	10220000 	.word	0x10220000
 80076f0:	10210000 	.word	0x10210000
 80076f4:	10120000 	.word	0x10120000
 80076f8:	10110000 	.word	0x10110000
 80076fc:	40021000 	.word	0x40021000
 8007700:	40010000 	.word	0x40010000
 8007704:	40010800 	.word	0x40010800
 8007708:	40010c00 	.word	0x40010c00
 800770c:	40011000 	.word	0x40011000
 8007710:	40011400 	.word	0x40011400
 8007714:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007718:	4b0b      	ldr	r3, [pc, #44]	; (8007748 <HAL_GPIO_Init+0x304>)
 800771a:	68da      	ldr	r2, [r3, #12]
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	43db      	mvns	r3, r3
 8007720:	4909      	ldr	r1, [pc, #36]	; (8007748 <HAL_GPIO_Init+0x304>)
 8007722:	4013      	ands	r3, r2
 8007724:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	3301      	adds	r3, #1
 800772a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	fa22 f303 	lsr.w	r3, r2, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	f47f ae8e 	bne.w	8007458 <HAL_GPIO_Init+0x14>
  }
}
 800773c:	bf00      	nop
 800773e:	bf00      	nop
 8007740:	372c      	adds	r7, #44	; 0x2c
 8007742:	46bd      	mov	sp, r7
 8007744:	bc80      	pop	{r7}
 8007746:	4770      	bx	lr
 8007748:	40010400 	.word	0x40010400

0800774c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	460b      	mov	r3, r1
 8007756:	807b      	strh	r3, [r7, #2]
 8007758:	4613      	mov	r3, r2
 800775a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800775c:	787b      	ldrb	r3, [r7, #1]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007762:	887a      	ldrh	r2, [r7, #2]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007768:	e003      	b.n	8007772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800776a:	887b      	ldrh	r3, [r7, #2]
 800776c:	041a      	lsls	r2, r3, #16
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	611a      	str	r2, [r3, #16]
}
 8007772:	bf00      	nop
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	bc80      	pop	{r7}
 800777a:	4770      	bx	lr

0800777c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e12b      	b.n	80079e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d106      	bne.n	80077a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7f9 f88c 	bl	80008c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2224      	movs	r2, #36	; 0x24
 80077ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f022 0201 	bic.w	r2, r2, #1
 80077be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80077e0:	f002 f84e 	bl	8009880 <HAL_RCC_GetPCLK1Freq>
 80077e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	4a81      	ldr	r2, [pc, #516]	; (80079f0 <HAL_I2C_Init+0x274>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d807      	bhi.n	8007800 <HAL_I2C_Init+0x84>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4a80      	ldr	r2, [pc, #512]	; (80079f4 <HAL_I2C_Init+0x278>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	bf94      	ite	ls
 80077f8:	2301      	movls	r3, #1
 80077fa:	2300      	movhi	r3, #0
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	e006      	b.n	800780e <HAL_I2C_Init+0x92>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	4a7d      	ldr	r2, [pc, #500]	; (80079f8 <HAL_I2C_Init+0x27c>)
 8007804:	4293      	cmp	r3, r2
 8007806:	bf94      	ite	ls
 8007808:	2301      	movls	r3, #1
 800780a:	2300      	movhi	r3, #0
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d001      	beq.n	8007816 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e0e7      	b.n	80079e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	4a78      	ldr	r2, [pc, #480]	; (80079fc <HAL_I2C_Init+0x280>)
 800781a:	fba2 2303 	umull	r2, r3, r2, r3
 800781e:	0c9b      	lsrs	r3, r3, #18
 8007820:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	430a      	orrs	r2, r1
 8007834:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6a1b      	ldr	r3, [r3, #32]
 800783c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	4a6a      	ldr	r2, [pc, #424]	; (80079f0 <HAL_I2C_Init+0x274>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d802      	bhi.n	8007850 <HAL_I2C_Init+0xd4>
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	3301      	adds	r3, #1
 800784e:	e009      	b.n	8007864 <HAL_I2C_Init+0xe8>
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007856:	fb02 f303 	mul.w	r3, r2, r3
 800785a:	4a69      	ldr	r2, [pc, #420]	; (8007a00 <HAL_I2C_Init+0x284>)
 800785c:	fba2 2303 	umull	r2, r3, r2, r3
 8007860:	099b      	lsrs	r3, r3, #6
 8007862:	3301      	adds	r3, #1
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	6812      	ldr	r2, [r2, #0]
 8007868:	430b      	orrs	r3, r1
 800786a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007876:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	495c      	ldr	r1, [pc, #368]	; (80079f0 <HAL_I2C_Init+0x274>)
 8007880:	428b      	cmp	r3, r1
 8007882:	d819      	bhi.n	80078b8 <HAL_I2C_Init+0x13c>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	1e59      	subs	r1, r3, #1
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007892:	1c59      	adds	r1, r3, #1
 8007894:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007898:	400b      	ands	r3, r1
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00a      	beq.n	80078b4 <HAL_I2C_Init+0x138>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	1e59      	subs	r1, r3, #1
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	005b      	lsls	r3, r3, #1
 80078a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80078ac:	3301      	adds	r3, #1
 80078ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078b2:	e051      	b.n	8007958 <HAL_I2C_Init+0x1dc>
 80078b4:	2304      	movs	r3, #4
 80078b6:	e04f      	b.n	8007958 <HAL_I2C_Init+0x1dc>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d111      	bne.n	80078e4 <HAL_I2C_Init+0x168>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	1e58      	subs	r0, r3, #1
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6859      	ldr	r1, [r3, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	005b      	lsls	r3, r3, #1
 80078cc:	440b      	add	r3, r1
 80078ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80078d2:	3301      	adds	r3, #1
 80078d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078d8:	2b00      	cmp	r3, #0
 80078da:	bf0c      	ite	eq
 80078dc:	2301      	moveq	r3, #1
 80078de:	2300      	movne	r3, #0
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	e012      	b.n	800790a <HAL_I2C_Init+0x18e>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	1e58      	subs	r0, r3, #1
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6859      	ldr	r1, [r3, #4]
 80078ec:	460b      	mov	r3, r1
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	440b      	add	r3, r1
 80078f2:	0099      	lsls	r1, r3, #2
 80078f4:	440b      	add	r3, r1
 80078f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80078fa:	3301      	adds	r3, #1
 80078fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007900:	2b00      	cmp	r3, #0
 8007902:	bf0c      	ite	eq
 8007904:	2301      	moveq	r3, #1
 8007906:	2300      	movne	r3, #0
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <HAL_I2C_Init+0x196>
 800790e:	2301      	movs	r3, #1
 8007910:	e022      	b.n	8007958 <HAL_I2C_Init+0x1dc>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10e      	bne.n	8007938 <HAL_I2C_Init+0x1bc>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	1e58      	subs	r0, r3, #1
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6859      	ldr	r1, [r3, #4]
 8007922:	460b      	mov	r3, r1
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	440b      	add	r3, r1
 8007928:	fbb0 f3f3 	udiv	r3, r0, r3
 800792c:	3301      	adds	r3, #1
 800792e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007936:	e00f      	b.n	8007958 <HAL_I2C_Init+0x1dc>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	1e58      	subs	r0, r3, #1
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6859      	ldr	r1, [r3, #4]
 8007940:	460b      	mov	r3, r1
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	440b      	add	r3, r1
 8007946:	0099      	lsls	r1, r3, #2
 8007948:	440b      	add	r3, r1
 800794a:	fbb0 f3f3 	udiv	r3, r0, r3
 800794e:	3301      	adds	r3, #1
 8007950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007954:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007958:	6879      	ldr	r1, [r7, #4]
 800795a:	6809      	ldr	r1, [r1, #0]
 800795c:	4313      	orrs	r3, r2
 800795e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	69da      	ldr	r2, [r3, #28]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	431a      	orrs	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	430a      	orrs	r2, r1
 800797a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007986:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	6911      	ldr	r1, [r2, #16]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	68d2      	ldr	r2, [r2, #12]
 8007992:	4311      	orrs	r1, r2
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	6812      	ldr	r2, [r2, #0]
 8007998:	430b      	orrs	r3, r1
 800799a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	695a      	ldr	r2, [r3, #20]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	431a      	orrs	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	430a      	orrs	r2, r1
 80079b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f042 0201 	orr.w	r2, r2, #1
 80079c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2220      	movs	r2, #32
 80079d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	000186a0 	.word	0x000186a0
 80079f4:	001e847f 	.word	0x001e847f
 80079f8:	003d08ff 	.word	0x003d08ff
 80079fc:	431bde83 	.word	0x431bde83
 8007a00:	10624dd3 	.word	0x10624dd3

08007a04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b088      	sub	sp, #32
 8007a08:	af02      	add	r7, sp, #8
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	607a      	str	r2, [r7, #4]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	460b      	mov	r3, r1
 8007a12:	817b      	strh	r3, [r7, #10]
 8007a14:	4613      	mov	r3, r2
 8007a16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007a18:	f7ff fa78 	bl	8006f0c <HAL_GetTick>
 8007a1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b20      	cmp	r3, #32
 8007a28:	f040 80e0 	bne.w	8007bec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	2319      	movs	r3, #25
 8007a32:	2201      	movs	r2, #1
 8007a34:	4970      	ldr	r1, [pc, #448]	; (8007bf8 <HAL_I2C_Master_Transmit+0x1f4>)
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f001 f972 	bl	8008d20 <I2C_WaitOnFlagUntilTimeout>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007a42:	2302      	movs	r3, #2
 8007a44:	e0d3      	b.n	8007bee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d101      	bne.n	8007a54 <HAL_I2C_Master_Transmit+0x50>
 8007a50:	2302      	movs	r3, #2
 8007a52:	e0cc      	b.n	8007bee <HAL_I2C_Master_Transmit+0x1ea>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d007      	beq.n	8007a7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f042 0201 	orr.w	r2, r2, #1
 8007a78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2221      	movs	r2, #33	; 0x21
 8007a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2210      	movs	r2, #16
 8007a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	893a      	ldrh	r2, [r7, #8]
 8007aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	4a50      	ldr	r2, [pc, #320]	; (8007bfc <HAL_I2C_Master_Transmit+0x1f8>)
 8007aba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007abc:	8979      	ldrh	r1, [r7, #10]
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	6a3a      	ldr	r2, [r7, #32]
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f000 fe5e 	bl	8008784 <I2C_MasterRequestWrite>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e08d      	b.n	8007bee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	613b      	str	r3, [r7, #16]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	613b      	str	r3, [r7, #16]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	613b      	str	r3, [r7, #16]
 8007ae6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007ae8:	e066      	b.n	8007bb8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	6a39      	ldr	r1, [r7, #32]
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f001 f9ec 	bl	8008ecc <I2C_WaitOnTXEFlagUntilTimeout>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00d      	beq.n	8007b16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afe:	2b04      	cmp	r3, #4
 8007b00:	d107      	bne.n	8007b12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e06b      	b.n	8007bee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1a:	781a      	ldrb	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3b01      	subs	r3, #1
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	f003 0304 	and.w	r3, r3, #4
 8007b50:	2b04      	cmp	r3, #4
 8007b52:	d11b      	bne.n	8007b8c <HAL_I2C_Master_Transmit+0x188>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d017      	beq.n	8007b8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b60:	781a      	ldrb	r2, [r3, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	1c5a      	adds	r2, r3, #1
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b84:	3b01      	subs	r3, #1
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	6a39      	ldr	r1, [r7, #32]
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f001 f9dc 	bl	8008f4e <I2C_WaitOnBTFFlagUntilTimeout>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00d      	beq.n	8007bb8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba0:	2b04      	cmp	r3, #4
 8007ba2:	d107      	bne.n	8007bb4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bb2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e01a      	b.n	8007bee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d194      	bne.n	8007aea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	e000      	b.n	8007bee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007bec:	2302      	movs	r3, #2
  }
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3718      	adds	r7, #24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	00100002 	.word	0x00100002
 8007bfc:	ffff0000 	.word	0xffff0000

08007c00 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b08c      	sub	sp, #48	; 0x30
 8007c04:	af02      	add	r7, sp, #8
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	607a      	str	r2, [r7, #4]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	817b      	strh	r3, [r7, #10]
 8007c10:	4613      	mov	r3, r2
 8007c12:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8007c14:	2300      	movs	r3, #0
 8007c16:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007c18:	f7ff f978 	bl	8006f0c <HAL_GetTick>
 8007c1c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b20      	cmp	r3, #32
 8007c28:	f040 823f 	bne.w	80080aa <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	2319      	movs	r3, #25
 8007c32:	2201      	movs	r2, #1
 8007c34:	497f      	ldr	r1, [pc, #508]	; (8007e34 <HAL_I2C_Master_Receive+0x234>)
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f001 f872 	bl	8008d20 <I2C_WaitOnFlagUntilTimeout>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d001      	beq.n	8007c46 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8007c42:	2302      	movs	r3, #2
 8007c44:	e232      	b.n	80080ac <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d101      	bne.n	8007c54 <HAL_I2C_Master_Receive+0x54>
 8007c50:	2302      	movs	r3, #2
 8007c52:	e22b      	b.n	80080ac <HAL_I2C_Master_Receive+0x4ac>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d007      	beq.n	8007c7a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f042 0201 	orr.w	r2, r2, #1
 8007c78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2222      	movs	r2, #34	; 0x22
 8007c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2210      	movs	r2, #16
 8007c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	893a      	ldrh	r2, [r7, #8]
 8007caa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	4a5f      	ldr	r2, [pc, #380]	; (8007e38 <HAL_I2C_Master_Receive+0x238>)
 8007cba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007cbc:	8979      	ldrh	r1, [r7, #10]
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f000 fde0 	bl	8008888 <I2C_MasterRequestRead>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e1ec      	b.n	80080ac <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d113      	bne.n	8007d02 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cda:	2300      	movs	r3, #0
 8007cdc:	61fb      	str	r3, [r7, #28]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	61fb      	str	r3, [r7, #28]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	61fb      	str	r3, [r7, #28]
 8007cee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	e1c0      	b.n	8008084 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d11e      	bne.n	8007d48 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d1a:	b672      	cpsid	i
}
 8007d1c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d1e:	2300      	movs	r3, #0
 8007d20:	61bb      	str	r3, [r7, #24]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	61bb      	str	r3, [r7, #24]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	61bb      	str	r3, [r7, #24]
 8007d32:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007d44:	b662      	cpsie	i
}
 8007d46:	e035      	b.n	8007db4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d11e      	bne.n	8007d8e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d60:	b672      	cpsid	i
}
 8007d62:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d64:	2300      	movs	r3, #0
 8007d66:	617b      	str	r3, [r7, #20]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	617b      	str	r3, [r7, #20]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	617b      	str	r3, [r7, #20]
 8007d78:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007d8a:	b662      	cpsie	i
}
 8007d8c:	e012      	b.n	8007db4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d9e:	2300      	movs	r3, #0
 8007da0:	613b      	str	r3, [r7, #16]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	613b      	str	r3, [r7, #16]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	613b      	str	r3, [r7, #16]
 8007db2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007db4:	e166      	b.n	8008084 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	f200 811f 	bhi.w	8007ffe <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d123      	bne.n	8007e10 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f001 f8ff 	bl	8008fd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e167      	b.n	80080ac <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	691a      	ldr	r2, [r3, #16]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de6:	b2d2      	uxtb	r2, r2
 8007de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	1c5a      	adds	r2, r3, #1
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	3b01      	subs	r3, #1
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e0e:	e139      	b.n	8008084 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d152      	bne.n	8007ebe <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1e:	2200      	movs	r2, #0
 8007e20:	4906      	ldr	r1, [pc, #24]	; (8007e3c <HAL_I2C_Master_Receive+0x23c>)
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f000 ff7c 	bl	8008d20 <I2C_WaitOnFlagUntilTimeout>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d008      	beq.n	8007e40 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e13c      	b.n	80080ac <HAL_I2C_Master_Receive+0x4ac>
 8007e32:	bf00      	nop
 8007e34:	00100002 	.word	0x00100002
 8007e38:	ffff0000 	.word	0xffff0000
 8007e3c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007e40:	b672      	cpsid	i
}
 8007e42:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	691a      	ldr	r2, [r3, #16]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5e:	b2d2      	uxtb	r2, r2
 8007e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e66:	1c5a      	adds	r2, r3, #1
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e70:	3b01      	subs	r3, #1
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007e86:	b662      	cpsie	i
}
 8007e88:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	691a      	ldr	r2, [r3, #16]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e94:	b2d2      	uxtb	r2, r2
 8007e96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9c:	1c5a      	adds	r2, r3, #1
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ebc:	e0e2      	b.n	8008084 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	497b      	ldr	r1, [pc, #492]	; (80080b4 <HAL_I2C_Master_Receive+0x4b4>)
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f000 ff29 	bl	8008d20 <I2C_WaitOnFlagUntilTimeout>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d001      	beq.n	8007ed8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e0e9      	b.n	80080ac <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ee6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007ee8:	b672      	cpsid	i
}
 8007eea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	691a      	ldr	r2, [r3, #16]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef6:	b2d2      	uxtb	r2, r2
 8007ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	1c5a      	adds	r2, r3, #1
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	3b01      	subs	r3, #1
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007f1e:	4b66      	ldr	r3, [pc, #408]	; (80080b8 <HAL_I2C_Master_Receive+0x4b8>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	08db      	lsrs	r3, r3, #3
 8007f24:	4a65      	ldr	r2, [pc, #404]	; (80080bc <HAL_I2C_Master_Receive+0x4bc>)
 8007f26:	fba2 2303 	umull	r2, r3, r2, r3
 8007f2a:	0a1a      	lsrs	r2, r3, #8
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	00da      	lsls	r2, r3, #3
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007f38:	6a3b      	ldr	r3, [r7, #32]
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d118      	bne.n	8007f76 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5e:	f043 0220 	orr.w	r2, r3, #32
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007f66:	b662      	cpsie	i
}
 8007f68:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e09a      	b.n	80080ac <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	695b      	ldr	r3, [r3, #20]
 8007f7c:	f003 0304 	and.w	r3, r3, #4
 8007f80:	2b04      	cmp	r3, #4
 8007f82:	d1d9      	bne.n	8007f38 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	691a      	ldr	r2, [r3, #16]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9e:	b2d2      	uxtb	r2, r2
 8007fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa6:	1c5a      	adds	r2, r3, #1
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007fc6:	b662      	cpsie	i
}
 8007fc8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	691a      	ldr	r2, [r3, #16]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd4:	b2d2      	uxtb	r2, r2
 8007fd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fdc:	1c5a      	adds	r2, r3, #1
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ffc:	e042      	b.n	8008084 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008000:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f000 ffe4 	bl	8008fd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e04c      	b.n	80080ac <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	691a      	ldr	r2, [r3, #16]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801c:	b2d2      	uxtb	r2, r2
 800801e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008024:	1c5a      	adds	r2, r3, #1
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800802e:	3b01      	subs	r3, #1
 8008030:	b29a      	uxth	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800803a:	b29b      	uxth	r3, r3
 800803c:	3b01      	subs	r3, #1
 800803e:	b29a      	uxth	r2, r3
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	f003 0304 	and.w	r3, r3, #4
 800804e:	2b04      	cmp	r3, #4
 8008050:	d118      	bne.n	8008084 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	691a      	ldr	r2, [r3, #16]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805c:	b2d2      	uxtb	r2, r2
 800805e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008064:	1c5a      	adds	r2, r3, #1
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800806e:	3b01      	subs	r3, #1
 8008070:	b29a      	uxth	r2, r3
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800807a:	b29b      	uxth	r3, r3
 800807c:	3b01      	subs	r3, #1
 800807e:	b29a      	uxth	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008088:	2b00      	cmp	r3, #0
 800808a:	f47f ae94 	bne.w	8007db6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2220      	movs	r2, #32
 8008092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	e000      	b.n	80080ac <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80080aa:	2302      	movs	r3, #2
  }
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3728      	adds	r7, #40	; 0x28
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	00010004 	.word	0x00010004
 80080b8:	20000000 	.word	0x20000000
 80080bc:	14f8b589 	.word	0x14f8b589

080080c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b088      	sub	sp, #32
 80080c4:	af02      	add	r7, sp, #8
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	4608      	mov	r0, r1
 80080ca:	4611      	mov	r1, r2
 80080cc:	461a      	mov	r2, r3
 80080ce:	4603      	mov	r3, r0
 80080d0:	817b      	strh	r3, [r7, #10]
 80080d2:	460b      	mov	r3, r1
 80080d4:	813b      	strh	r3, [r7, #8]
 80080d6:	4613      	mov	r3, r2
 80080d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80080da:	f7fe ff17 	bl	8006f0c <HAL_GetTick>
 80080de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	2b20      	cmp	r3, #32
 80080ea:	f040 80d9 	bne.w	80082a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	2319      	movs	r3, #25
 80080f4:	2201      	movs	r2, #1
 80080f6:	496d      	ldr	r1, [pc, #436]	; (80082ac <HAL_I2C_Mem_Write+0x1ec>)
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 fe11 	bl	8008d20 <I2C_WaitOnFlagUntilTimeout>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008104:	2302      	movs	r3, #2
 8008106:	e0cc      	b.n	80082a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800810e:	2b01      	cmp	r3, #1
 8008110:	d101      	bne.n	8008116 <HAL_I2C_Mem_Write+0x56>
 8008112:	2302      	movs	r3, #2
 8008114:	e0c5      	b.n	80082a2 <HAL_I2C_Mem_Write+0x1e2>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	2b01      	cmp	r3, #1
 800812a:	d007      	beq.n	800813c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f042 0201 	orr.w	r2, r2, #1
 800813a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800814a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2221      	movs	r2, #33	; 0x21
 8008150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2240      	movs	r2, #64	; 0x40
 8008158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6a3a      	ldr	r2, [r7, #32]
 8008166:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800816c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008172:	b29a      	uxth	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	4a4d      	ldr	r2, [pc, #308]	; (80082b0 <HAL_I2C_Mem_Write+0x1f0>)
 800817c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800817e:	88f8      	ldrh	r0, [r7, #6]
 8008180:	893a      	ldrh	r2, [r7, #8]
 8008182:	8979      	ldrh	r1, [r7, #10]
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	9301      	str	r3, [sp, #4]
 8008188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	4603      	mov	r3, r0
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f000 fc48 	bl	8008a24 <I2C_RequestMemoryWrite>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d052      	beq.n	8008240 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e081      	b.n	80082a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f000 fe92 	bl	8008ecc <I2C_WaitOnTXEFlagUntilTimeout>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00d      	beq.n	80081ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b2:	2b04      	cmp	r3, #4
 80081b4:	d107      	bne.n	80081c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e06b      	b.n	80082a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ce:	781a      	ldrb	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081da:	1c5a      	adds	r2, r3, #1
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081e4:	3b01      	subs	r3, #1
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	3b01      	subs	r3, #1
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	695b      	ldr	r3, [r3, #20]
 8008200:	f003 0304 	and.w	r3, r3, #4
 8008204:	2b04      	cmp	r3, #4
 8008206:	d11b      	bne.n	8008240 <HAL_I2C_Mem_Write+0x180>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800820c:	2b00      	cmp	r3, #0
 800820e:	d017      	beq.n	8008240 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008214:	781a      	ldrb	r2, [r3, #0]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008220:	1c5a      	adds	r2, r3, #1
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800822a:	3b01      	subs	r3, #1
 800822c:	b29a      	uxth	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008236:	b29b      	uxth	r3, r3
 8008238:	3b01      	subs	r3, #1
 800823a:	b29a      	uxth	r2, r3
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1aa      	bne.n	800819e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f000 fe7e 	bl	8008f4e <I2C_WaitOnBTFFlagUntilTimeout>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00d      	beq.n	8008274 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825c:	2b04      	cmp	r3, #4
 800825e:	d107      	bne.n	8008270 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800826e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e016      	b.n	80082a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008282:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2220      	movs	r2, #32
 8008288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	e000      	b.n	80082a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80082a0:	2302      	movs	r3, #2
  }
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3718      	adds	r7, #24
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	00100002 	.word	0x00100002
 80082b0:	ffff0000 	.word	0xffff0000

080082b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b08c      	sub	sp, #48	; 0x30
 80082b8:	af02      	add	r7, sp, #8
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	4608      	mov	r0, r1
 80082be:	4611      	mov	r1, r2
 80082c0:	461a      	mov	r2, r3
 80082c2:	4603      	mov	r3, r0
 80082c4:	817b      	strh	r3, [r7, #10]
 80082c6:	460b      	mov	r3, r1
 80082c8:	813b      	strh	r3, [r7, #8]
 80082ca:	4613      	mov	r3, r2
 80082cc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80082d2:	f7fe fe1b 	bl	8006f0c <HAL_GetTick>
 80082d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b20      	cmp	r3, #32
 80082e2:	f040 8244 	bne.w	800876e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80082e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	2319      	movs	r3, #25
 80082ec:	2201      	movs	r2, #1
 80082ee:	4982      	ldr	r1, [pc, #520]	; (80084f8 <HAL_I2C_Mem_Read+0x244>)
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f000 fd15 	bl	8008d20 <I2C_WaitOnFlagUntilTimeout>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d001      	beq.n	8008300 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80082fc:	2302      	movs	r3, #2
 80082fe:	e237      	b.n	8008770 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008306:	2b01      	cmp	r3, #1
 8008308:	d101      	bne.n	800830e <HAL_I2C_Mem_Read+0x5a>
 800830a:	2302      	movs	r3, #2
 800830c:	e230      	b.n	8008770 <HAL_I2C_Mem_Read+0x4bc>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2201      	movs	r2, #1
 8008312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	2b01      	cmp	r3, #1
 8008322:	d007      	beq.n	8008334 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f042 0201 	orr.w	r2, r2, #1
 8008332:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008342:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2222      	movs	r2, #34	; 0x22
 8008348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2240      	movs	r2, #64	; 0x40
 8008350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800835e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008364:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800836a:	b29a      	uxth	r2, r3
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	4a62      	ldr	r2, [pc, #392]	; (80084fc <HAL_I2C_Mem_Read+0x248>)
 8008374:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008376:	88f8      	ldrh	r0, [r7, #6]
 8008378:	893a      	ldrh	r2, [r7, #8]
 800837a:	8979      	ldrh	r1, [r7, #10]
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	9301      	str	r3, [sp, #4]
 8008380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	4603      	mov	r3, r0
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f000 fbe2 	bl	8008b50 <I2C_RequestMemoryRead>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e1ec      	b.n	8008770 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800839a:	2b00      	cmp	r3, #0
 800839c:	d113      	bne.n	80083c6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800839e:	2300      	movs	r3, #0
 80083a0:	61fb      	str	r3, [r7, #28]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	61fb      	str	r3, [r7, #28]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	61fb      	str	r3, [r7, #28]
 80083b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	e1c0      	b.n	8008748 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d11e      	bne.n	800840c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80083de:	b672      	cpsid	i
}
 80083e0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083e2:	2300      	movs	r3, #0
 80083e4:	61bb      	str	r3, [r7, #24]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	61bb      	str	r3, [r7, #24]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	61bb      	str	r3, [r7, #24]
 80083f6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008406:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008408:	b662      	cpsie	i
}
 800840a:	e035      	b.n	8008478 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008410:	2b02      	cmp	r3, #2
 8008412:	d11e      	bne.n	8008452 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008422:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008424:	b672      	cpsid	i
}
 8008426:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008428:	2300      	movs	r3, #0
 800842a:	617b      	str	r3, [r7, #20]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	617b      	str	r3, [r7, #20]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	617b      	str	r3, [r7, #20]
 800843c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800844c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800844e:	b662      	cpsie	i
}
 8008450:	e012      	b.n	8008478 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008460:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008462:	2300      	movs	r3, #0
 8008464:	613b      	str	r3, [r7, #16]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	613b      	str	r3, [r7, #16]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	613b      	str	r3, [r7, #16]
 8008476:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8008478:	e166      	b.n	8008748 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800847e:	2b03      	cmp	r3, #3
 8008480:	f200 811f 	bhi.w	80086c2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008488:	2b01      	cmp	r3, #1
 800848a:	d123      	bne.n	80084d4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800848c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800848e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f000 fd9d 	bl	8008fd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e167      	b.n	8008770 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	691a      	ldr	r2, [r3, #16]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084aa:	b2d2      	uxtb	r2, r2
 80084ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b2:	1c5a      	adds	r2, r3, #1
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084bc:	3b01      	subs	r3, #1
 80084be:	b29a      	uxth	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	3b01      	subs	r3, #1
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80084d2:	e139      	b.n	8008748 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d152      	bne.n	8008582 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e2:	2200      	movs	r2, #0
 80084e4:	4906      	ldr	r1, [pc, #24]	; (8008500 <HAL_I2C_Mem_Read+0x24c>)
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f000 fc1a 	bl	8008d20 <I2C_WaitOnFlagUntilTimeout>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d008      	beq.n	8008504 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e13c      	b.n	8008770 <HAL_I2C_Mem_Read+0x4bc>
 80084f6:	bf00      	nop
 80084f8:	00100002 	.word	0x00100002
 80084fc:	ffff0000 	.word	0xffff0000
 8008500:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8008504:	b672      	cpsid	i
}
 8008506:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008516:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	691a      	ldr	r2, [r3, #16]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008522:	b2d2      	uxtb	r2, r2
 8008524:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008534:	3b01      	subs	r3, #1
 8008536:	b29a      	uxth	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008540:	b29b      	uxth	r3, r3
 8008542:	3b01      	subs	r3, #1
 8008544:	b29a      	uxth	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800854a:	b662      	cpsie	i
}
 800854c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	691a      	ldr	r2, [r3, #16]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008558:	b2d2      	uxtb	r2, r2
 800855a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008560:	1c5a      	adds	r2, r3, #1
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800856a:	3b01      	subs	r3, #1
 800856c:	b29a      	uxth	r2, r3
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008576:	b29b      	uxth	r3, r3
 8008578:	3b01      	subs	r3, #1
 800857a:	b29a      	uxth	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008580:	e0e2      	b.n	8008748 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008588:	2200      	movs	r2, #0
 800858a:	497b      	ldr	r1, [pc, #492]	; (8008778 <HAL_I2C_Mem_Read+0x4c4>)
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 fbc7 	bl	8008d20 <I2C_WaitOnFlagUntilTimeout>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e0e9      	b.n	8008770 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80085ac:	b672      	cpsid	i
}
 80085ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	691a      	ldr	r2, [r3, #16]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ba:	b2d2      	uxtb	r2, r2
 80085bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085cc:	3b01      	subs	r3, #1
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085d8:	b29b      	uxth	r3, r3
 80085da:	3b01      	subs	r3, #1
 80085dc:	b29a      	uxth	r2, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80085e2:	4b66      	ldr	r3, [pc, #408]	; (800877c <HAL_I2C_Mem_Read+0x4c8>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	08db      	lsrs	r3, r3, #3
 80085e8:	4a65      	ldr	r2, [pc, #404]	; (8008780 <HAL_I2C_Mem_Read+0x4cc>)
 80085ea:	fba2 2303 	umull	r2, r3, r2, r3
 80085ee:	0a1a      	lsrs	r2, r3, #8
 80085f0:	4613      	mov	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	00da      	lsls	r2, r3, #3
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	3b01      	subs	r3, #1
 8008600:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8008602:	6a3b      	ldr	r3, [r7, #32]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d118      	bne.n	800863a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2220      	movs	r2, #32
 8008612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008622:	f043 0220 	orr.w	r2, r3, #32
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800862a:	b662      	cpsie	i
}
 800862c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e09a      	b.n	8008770 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	695b      	ldr	r3, [r3, #20]
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	2b04      	cmp	r3, #4
 8008646:	d1d9      	bne.n	80085fc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	691a      	ldr	r2, [r3, #16]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	b2d2      	uxtb	r2, r2
 8008664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866a:	1c5a      	adds	r2, r3, #1
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008674:	3b01      	subs	r3, #1
 8008676:	b29a      	uxth	r2, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008680:	b29b      	uxth	r3, r3
 8008682:	3b01      	subs	r3, #1
 8008684:	b29a      	uxth	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800868a:	b662      	cpsie	i
}
 800868c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	691a      	ldr	r2, [r3, #16]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008698:	b2d2      	uxtb	r2, r2
 800869a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086aa:	3b01      	subs	r3, #1
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	3b01      	subs	r3, #1
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80086c0:	e042      	b.n	8008748 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f000 fc82 	bl	8008fd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d001      	beq.n	80086d6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e04c      	b.n	8008770 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	691a      	ldr	r2, [r3, #16]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e0:	b2d2      	uxtb	r2, r2
 80086e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e8:	1c5a      	adds	r2, r3, #1
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086f2:	3b01      	subs	r3, #1
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086fe:	b29b      	uxth	r3, r3
 8008700:	3b01      	subs	r3, #1
 8008702:	b29a      	uxth	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	f003 0304 	and.w	r3, r3, #4
 8008712:	2b04      	cmp	r3, #4
 8008714:	d118      	bne.n	8008748 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	691a      	ldr	r2, [r3, #16]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	b2d2      	uxtb	r2, r2
 8008722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008728:	1c5a      	adds	r2, r3, #1
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008732:	3b01      	subs	r3, #1
 8008734:	b29a      	uxth	r2, r3
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800873e:	b29b      	uxth	r3, r3
 8008740:	3b01      	subs	r3, #1
 8008742:	b29a      	uxth	r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800874c:	2b00      	cmp	r3, #0
 800874e:	f47f ae94 	bne.w	800847a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2220      	movs	r2, #32
 8008756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	e000      	b.n	8008770 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800876e:	2302      	movs	r3, #2
  }
}
 8008770:	4618      	mov	r0, r3
 8008772:	3728      	adds	r7, #40	; 0x28
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	00010004 	.word	0x00010004
 800877c:	20000000 	.word	0x20000000
 8008780:	14f8b589 	.word	0x14f8b589

08008784 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b088      	sub	sp, #32
 8008788:	af02      	add	r7, sp, #8
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	607a      	str	r2, [r7, #4]
 800878e:	603b      	str	r3, [r7, #0]
 8008790:	460b      	mov	r3, r1
 8008792:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008798:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	2b08      	cmp	r3, #8
 800879e:	d006      	beq.n	80087ae <I2C_MasterRequestWrite+0x2a>
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d003      	beq.n	80087ae <I2C_MasterRequestWrite+0x2a>
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80087ac:	d108      	bne.n	80087c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087bc:	601a      	str	r2, [r3, #0]
 80087be:	e00b      	b.n	80087d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c4:	2b12      	cmp	r3, #18
 80087c6:	d107      	bne.n	80087d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f000 fa9b 	bl	8008d20 <I2C_WaitOnFlagUntilTimeout>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00d      	beq.n	800880c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087fe:	d103      	bne.n	8008808 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008806:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008808:	2303      	movs	r3, #3
 800880a:	e035      	b.n	8008878 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008814:	d108      	bne.n	8008828 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008816:	897b      	ldrh	r3, [r7, #10]
 8008818:	b2db      	uxtb	r3, r3
 800881a:	461a      	mov	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008824:	611a      	str	r2, [r3, #16]
 8008826:	e01b      	b.n	8008860 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008828:	897b      	ldrh	r3, [r7, #10]
 800882a:	11db      	asrs	r3, r3, #7
 800882c:	b2db      	uxtb	r3, r3
 800882e:	f003 0306 	and.w	r3, r3, #6
 8008832:	b2db      	uxtb	r3, r3
 8008834:	f063 030f 	orn	r3, r3, #15
 8008838:	b2da      	uxtb	r2, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	490e      	ldr	r1, [pc, #56]	; (8008880 <I2C_MasterRequestWrite+0xfc>)
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f000 fac1 	bl	8008dce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d001      	beq.n	8008856 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e010      	b.n	8008878 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008856:	897b      	ldrh	r3, [r7, #10]
 8008858:	b2da      	uxtb	r2, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	4907      	ldr	r1, [pc, #28]	; (8008884 <I2C_MasterRequestWrite+0x100>)
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f000 fab1 	bl	8008dce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e000      	b.n	8008878 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	00010008 	.word	0x00010008
 8008884:	00010002 	.word	0x00010002

08008888 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b088      	sub	sp, #32
 800888c:	af02      	add	r7, sp, #8
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	607a      	str	r2, [r7, #4]
 8008892:	603b      	str	r3, [r7, #0]
 8008894:	460b      	mov	r3, r1
 8008896:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80088ac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2b08      	cmp	r3, #8
 80088b2:	d006      	beq.n	80088c2 <I2C_MasterRequestRead+0x3a>
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d003      	beq.n	80088c2 <I2C_MasterRequestRead+0x3a>
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80088c0:	d108      	bne.n	80088d4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088d0:	601a      	str	r2, [r3, #0]
 80088d2:	e00b      	b.n	80088ec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d8:	2b11      	cmp	r3, #17
 80088da:	d107      	bne.n	80088ec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 fa11 	bl	8008d20 <I2C_WaitOnFlagUntilTimeout>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00d      	beq.n	8008920 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800890e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008912:	d103      	bne.n	800891c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800891a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e079      	b.n	8008a14 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008928:	d108      	bne.n	800893c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800892a:	897b      	ldrh	r3, [r7, #10]
 800892c:	b2db      	uxtb	r3, r3
 800892e:	f043 0301 	orr.w	r3, r3, #1
 8008932:	b2da      	uxtb	r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	611a      	str	r2, [r3, #16]
 800893a:	e05f      	b.n	80089fc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800893c:	897b      	ldrh	r3, [r7, #10]
 800893e:	11db      	asrs	r3, r3, #7
 8008940:	b2db      	uxtb	r3, r3
 8008942:	f003 0306 	and.w	r3, r3, #6
 8008946:	b2db      	uxtb	r3, r3
 8008948:	f063 030f 	orn	r3, r3, #15
 800894c:	b2da      	uxtb	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	4930      	ldr	r1, [pc, #192]	; (8008a1c <I2C_MasterRequestRead+0x194>)
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 fa37 	bl	8008dce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d001      	beq.n	800896a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e054      	b.n	8008a14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800896a:	897b      	ldrh	r3, [r7, #10]
 800896c:	b2da      	uxtb	r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	4929      	ldr	r1, [pc, #164]	; (8008a20 <I2C_MasterRequestRead+0x198>)
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f000 fa27 	bl	8008dce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e044      	b.n	8008a14 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800898a:	2300      	movs	r3, #0
 800898c:	613b      	str	r3, [r7, #16]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	695b      	ldr	r3, [r3, #20]
 8008994:	613b      	str	r3, [r7, #16]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	613b      	str	r3, [r7, #16]
 800899e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089ae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 f9af 	bl	8008d20 <I2C_WaitOnFlagUntilTimeout>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00d      	beq.n	80089e4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089d6:	d103      	bne.n	80089e0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089de:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e017      	b.n	8008a14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80089e4:	897b      	ldrh	r3, [r7, #10]
 80089e6:	11db      	asrs	r3, r3, #7
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	f003 0306 	and.w	r3, r3, #6
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	f063 030e 	orn	r3, r3, #14
 80089f4:	b2da      	uxtb	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	4907      	ldr	r1, [pc, #28]	; (8008a20 <I2C_MasterRequestRead+0x198>)
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f000 f9e3 	bl	8008dce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d001      	beq.n	8008a12 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e000      	b.n	8008a14 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3718      	adds	r7, #24
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	00010008 	.word	0x00010008
 8008a20:	00010002 	.word	0x00010002

08008a24 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b088      	sub	sp, #32
 8008a28:	af02      	add	r7, sp, #8
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	4608      	mov	r0, r1
 8008a2e:	4611      	mov	r1, r2
 8008a30:	461a      	mov	r2, r3
 8008a32:	4603      	mov	r3, r0
 8008a34:	817b      	strh	r3, [r7, #10]
 8008a36:	460b      	mov	r3, r1
 8008a38:	813b      	strh	r3, [r7, #8]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 f960 	bl	8008d20 <I2C_WaitOnFlagUntilTimeout>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00d      	beq.n	8008a82 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a74:	d103      	bne.n	8008a7e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e05f      	b.n	8008b42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008a82:	897b      	ldrh	r3, [r7, #10]
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	461a      	mov	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008a90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a94:	6a3a      	ldr	r2, [r7, #32]
 8008a96:	492d      	ldr	r1, [pc, #180]	; (8008b4c <I2C_RequestMemoryWrite+0x128>)
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 f998 	bl	8008dce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e04c      	b.n	8008b42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	617b      	str	r3, [r7, #20]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	695b      	ldr	r3, [r3, #20]
 8008ab2:	617b      	str	r3, [r7, #20]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	617b      	str	r3, [r7, #20]
 8008abc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ac0:	6a39      	ldr	r1, [r7, #32]
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f000 fa02 	bl	8008ecc <I2C_WaitOnTXEFlagUntilTimeout>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00d      	beq.n	8008aea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad2:	2b04      	cmp	r3, #4
 8008ad4:	d107      	bne.n	8008ae6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ae4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e02b      	b.n	8008b42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008aea:	88fb      	ldrh	r3, [r7, #6]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d105      	bne.n	8008afc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008af0:	893b      	ldrh	r3, [r7, #8]
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	611a      	str	r2, [r3, #16]
 8008afa:	e021      	b.n	8008b40 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008afc:	893b      	ldrh	r3, [r7, #8]
 8008afe:	0a1b      	lsrs	r3, r3, #8
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b0c:	6a39      	ldr	r1, [r7, #32]
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f000 f9dc 	bl	8008ecc <I2C_WaitOnTXEFlagUntilTimeout>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00d      	beq.n	8008b36 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d107      	bne.n	8008b32 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e005      	b.n	8008b42 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b36:	893b      	ldrh	r3, [r7, #8]
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3718      	adds	r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	00010002 	.word	0x00010002

08008b50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b088      	sub	sp, #32
 8008b54:	af02      	add	r7, sp, #8
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	4608      	mov	r0, r1
 8008b5a:	4611      	mov	r1, r2
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	4603      	mov	r3, r0
 8008b60:	817b      	strh	r3, [r7, #10]
 8008b62:	460b      	mov	r3, r1
 8008b64:	813b      	strh	r3, [r7, #8]
 8008b66:	4613      	mov	r3, r2
 8008b68:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b78:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 f8c2 	bl	8008d20 <I2C_WaitOnFlagUntilTimeout>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00d      	beq.n	8008bbe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb0:	d103      	bne.n	8008bba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e0aa      	b.n	8008d14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008bbe:	897b      	ldrh	r3, [r7, #10]
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008bcc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd0:	6a3a      	ldr	r2, [r7, #32]
 8008bd2:	4952      	ldr	r1, [pc, #328]	; (8008d1c <I2C_RequestMemoryRead+0x1cc>)
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f000 f8fa 	bl	8008dce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d001      	beq.n	8008be4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e097      	b.n	8008d14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008be4:	2300      	movs	r3, #0
 8008be6:	617b      	str	r3, [r7, #20]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	617b      	str	r3, [r7, #20]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	617b      	str	r3, [r7, #20]
 8008bf8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bfc:	6a39      	ldr	r1, [r7, #32]
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f000 f964 	bl	8008ecc <I2C_WaitOnTXEFlagUntilTimeout>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00d      	beq.n	8008c26 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0e:	2b04      	cmp	r3, #4
 8008c10:	d107      	bne.n	8008c22 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	e076      	b.n	8008d14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c26:	88fb      	ldrh	r3, [r7, #6]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d105      	bne.n	8008c38 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c2c:	893b      	ldrh	r3, [r7, #8]
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	611a      	str	r2, [r3, #16]
 8008c36:	e021      	b.n	8008c7c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008c38:	893b      	ldrh	r3, [r7, #8]
 8008c3a:	0a1b      	lsrs	r3, r3, #8
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c48:	6a39      	ldr	r1, [r7, #32]
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f000 f93e 	bl	8008ecc <I2C_WaitOnTXEFlagUntilTimeout>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00d      	beq.n	8008c72 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5a:	2b04      	cmp	r3, #4
 8008c5c:	d107      	bne.n	8008c6e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e050      	b.n	8008d14 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c72:	893b      	ldrh	r3, [r7, #8]
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c7e:	6a39      	ldr	r1, [r7, #32]
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f000 f923 	bl	8008ecc <I2C_WaitOnTXEFlagUntilTimeout>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d00d      	beq.n	8008ca8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c90:	2b04      	cmp	r3, #4
 8008c92:	d107      	bne.n	8008ca4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ca2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e035      	b.n	8008d14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cb6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	6a3b      	ldr	r3, [r7, #32]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f000 f82b 	bl	8008d20 <I2C_WaitOnFlagUntilTimeout>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00d      	beq.n	8008cec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cde:	d103      	bne.n	8008ce8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ce6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	e013      	b.n	8008d14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008cec:	897b      	ldrh	r3, [r7, #10]
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	f043 0301 	orr.w	r3, r3, #1
 8008cf4:	b2da      	uxtb	r2, r3
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfe:	6a3a      	ldr	r2, [r7, #32]
 8008d00:	4906      	ldr	r1, [pc, #24]	; (8008d1c <I2C_RequestMemoryRead+0x1cc>)
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f000 f863 	bl	8008dce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d001      	beq.n	8008d12 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e000      	b.n	8008d14 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3718      	adds	r7, #24
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	00010002 	.word	0x00010002

08008d20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	603b      	str	r3, [r7, #0]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d30:	e025      	b.n	8008d7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d38:	d021      	beq.n	8008d7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d3a:	f7fe f8e7 	bl	8006f0c <HAL_GetTick>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	1ad3      	subs	r3, r2, r3
 8008d44:	683a      	ldr	r2, [r7, #0]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d302      	bcc.n	8008d50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d116      	bne.n	8008d7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2200      	movs	r2, #0
 8008d54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2220      	movs	r2, #32
 8008d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6a:	f043 0220 	orr.w	r2, r3, #32
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e023      	b.n	8008dc6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	0c1b      	lsrs	r3, r3, #16
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d10d      	bne.n	8008da4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	43da      	mvns	r2, r3
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	4013      	ands	r3, r2
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	bf0c      	ite	eq
 8008d9a:	2301      	moveq	r3, #1
 8008d9c:	2300      	movne	r3, #0
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	461a      	mov	r2, r3
 8008da2:	e00c      	b.n	8008dbe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	43da      	mvns	r2, r3
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	4013      	ands	r3, r2
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	bf0c      	ite	eq
 8008db6:	2301      	moveq	r3, #1
 8008db8:	2300      	movne	r3, #0
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	79fb      	ldrb	r3, [r7, #7]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d0b6      	beq.n	8008d32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	60f8      	str	r0, [r7, #12]
 8008dd6:	60b9      	str	r1, [r7, #8]
 8008dd8:	607a      	str	r2, [r7, #4]
 8008dda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008ddc:	e051      	b.n	8008e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	695b      	ldr	r3, [r3, #20]
 8008de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dec:	d123      	bne.n	8008e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dfc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008e06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2220      	movs	r2, #32
 8008e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e22:	f043 0204 	orr.w	r2, r3, #4
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e046      	b.n	8008ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e3c:	d021      	beq.n	8008e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e3e:	f7fe f865 	bl	8006f0c <HAL_GetTick>
 8008e42:	4602      	mov	r2, r0
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d302      	bcc.n	8008e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d116      	bne.n	8008e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6e:	f043 0220 	orr.w	r2, r3, #32
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e020      	b.n	8008ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	0c1b      	lsrs	r3, r3, #16
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d10c      	bne.n	8008ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	695b      	ldr	r3, [r3, #20]
 8008e92:	43da      	mvns	r2, r3
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	4013      	ands	r3, r2
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	bf14      	ite	ne
 8008e9e:	2301      	movne	r3, #1
 8008ea0:	2300      	moveq	r3, #0
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	e00b      	b.n	8008ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	43da      	mvns	r2, r3
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	bf14      	ite	ne
 8008eb8:	2301      	movne	r3, #1
 8008eba:	2300      	moveq	r3, #0
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d18d      	bne.n	8008dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008ed8:	e02d      	b.n	8008f36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	f000 f8ce 	bl	800907c <I2C_IsAcknowledgeFailed>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d001      	beq.n	8008eea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e02d      	b.n	8008f46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ef0:	d021      	beq.n	8008f36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ef2:	f7fe f80b 	bl	8006f0c <HAL_GetTick>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	1ad3      	subs	r3, r2, r3
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d302      	bcc.n	8008f08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d116      	bne.n	8008f36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2220      	movs	r2, #32
 8008f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f22:	f043 0220 	orr.w	r2, r3, #32
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	e007      	b.n	8008f46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	695b      	ldr	r3, [r3, #20]
 8008f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f40:	2b80      	cmp	r3, #128	; 0x80
 8008f42:	d1ca      	bne.n	8008eda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b084      	sub	sp, #16
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	60f8      	str	r0, [r7, #12]
 8008f56:	60b9      	str	r1, [r7, #8]
 8008f58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008f5a:	e02d      	b.n	8008fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f000 f88d 	bl	800907c <I2C_IsAcknowledgeFailed>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e02d      	b.n	8008fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f72:	d021      	beq.n	8008fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f74:	f7fd ffca 	bl	8006f0c <HAL_GetTick>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d302      	bcc.n	8008f8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d116      	bne.n	8008fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2220      	movs	r2, #32
 8008f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa4:	f043 0220 	orr.w	r2, r3, #32
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e007      	b.n	8008fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	f003 0304 	and.w	r3, r3, #4
 8008fc2:	2b04      	cmp	r3, #4
 8008fc4:	d1ca      	bne.n	8008f5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3710      	adds	r7, #16
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008fdc:	e042      	b.n	8009064 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	695b      	ldr	r3, [r3, #20]
 8008fe4:	f003 0310 	and.w	r3, r3, #16
 8008fe8:	2b10      	cmp	r3, #16
 8008fea:	d119      	bne.n	8009020 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f06f 0210 	mvn.w	r2, #16
 8008ff4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2220      	movs	r2, #32
 8009000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	e029      	b.n	8009074 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009020:	f7fd ff74 	bl	8006f0c <HAL_GetTick>
 8009024:	4602      	mov	r2, r0
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	429a      	cmp	r2, r3
 800902e:	d302      	bcc.n	8009036 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d116      	bne.n	8009064 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2220      	movs	r2, #32
 8009040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009050:	f043 0220 	orr.w	r2, r3, #32
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	e007      	b.n	8009074 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800906e:	2b40      	cmp	r3, #64	; 0x40
 8009070:	d1b5      	bne.n	8008fde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800908e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009092:	d11b      	bne.n	80090cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800909c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2220      	movs	r2, #32
 80090a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b8:	f043 0204 	orr.w	r2, r3, #4
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	e000      	b.n	80090ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bc80      	pop	{r7}
 80090d6:	4770      	bx	lr

080090d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e26c      	b.n	80095c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 8087 	beq.w	8009206 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80090f8:	4b92      	ldr	r3, [pc, #584]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	f003 030c 	and.w	r3, r3, #12
 8009100:	2b04      	cmp	r3, #4
 8009102:	d00c      	beq.n	800911e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009104:	4b8f      	ldr	r3, [pc, #572]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	f003 030c 	and.w	r3, r3, #12
 800910c:	2b08      	cmp	r3, #8
 800910e:	d112      	bne.n	8009136 <HAL_RCC_OscConfig+0x5e>
 8009110:	4b8c      	ldr	r3, [pc, #560]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800911c:	d10b      	bne.n	8009136 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800911e:	4b89      	ldr	r3, [pc, #548]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d06c      	beq.n	8009204 <HAL_RCC_OscConfig+0x12c>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d168      	bne.n	8009204 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e246      	b.n	80095c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800913e:	d106      	bne.n	800914e <HAL_RCC_OscConfig+0x76>
 8009140:	4b80      	ldr	r3, [pc, #512]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a7f      	ldr	r2, [pc, #508]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 8009146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800914a:	6013      	str	r3, [r2, #0]
 800914c:	e02e      	b.n	80091ac <HAL_RCC_OscConfig+0xd4>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d10c      	bne.n	8009170 <HAL_RCC_OscConfig+0x98>
 8009156:	4b7b      	ldr	r3, [pc, #492]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a7a      	ldr	r2, [pc, #488]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 800915c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009160:	6013      	str	r3, [r2, #0]
 8009162:	4b78      	ldr	r3, [pc, #480]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a77      	ldr	r2, [pc, #476]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 8009168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800916c:	6013      	str	r3, [r2, #0]
 800916e:	e01d      	b.n	80091ac <HAL_RCC_OscConfig+0xd4>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009178:	d10c      	bne.n	8009194 <HAL_RCC_OscConfig+0xbc>
 800917a:	4b72      	ldr	r3, [pc, #456]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a71      	ldr	r2, [pc, #452]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 8009180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009184:	6013      	str	r3, [r2, #0]
 8009186:	4b6f      	ldr	r3, [pc, #444]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a6e      	ldr	r2, [pc, #440]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 800918c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009190:	6013      	str	r3, [r2, #0]
 8009192:	e00b      	b.n	80091ac <HAL_RCC_OscConfig+0xd4>
 8009194:	4b6b      	ldr	r3, [pc, #428]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a6a      	ldr	r2, [pc, #424]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 800919a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800919e:	6013      	str	r3, [r2, #0]
 80091a0:	4b68      	ldr	r3, [pc, #416]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a67      	ldr	r2, [pc, #412]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 80091a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d013      	beq.n	80091dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091b4:	f7fd feaa 	bl	8006f0c <HAL_GetTick>
 80091b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091ba:	e008      	b.n	80091ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091bc:	f7fd fea6 	bl	8006f0c <HAL_GetTick>
 80091c0:	4602      	mov	r2, r0
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	1ad3      	subs	r3, r2, r3
 80091c6:	2b64      	cmp	r3, #100	; 0x64
 80091c8:	d901      	bls.n	80091ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80091ca:	2303      	movs	r3, #3
 80091cc:	e1fa      	b.n	80095c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091ce:	4b5d      	ldr	r3, [pc, #372]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d0f0      	beq.n	80091bc <HAL_RCC_OscConfig+0xe4>
 80091da:	e014      	b.n	8009206 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091dc:	f7fd fe96 	bl	8006f0c <HAL_GetTick>
 80091e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091e2:	e008      	b.n	80091f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091e4:	f7fd fe92 	bl	8006f0c <HAL_GetTick>
 80091e8:	4602      	mov	r2, r0
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	2b64      	cmp	r3, #100	; 0x64
 80091f0:	d901      	bls.n	80091f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80091f2:	2303      	movs	r3, #3
 80091f4:	e1e6      	b.n	80095c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091f6:	4b53      	ldr	r3, [pc, #332]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1f0      	bne.n	80091e4 <HAL_RCC_OscConfig+0x10c>
 8009202:	e000      	b.n	8009206 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f003 0302 	and.w	r3, r3, #2
 800920e:	2b00      	cmp	r3, #0
 8009210:	d063      	beq.n	80092da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009212:	4b4c      	ldr	r3, [pc, #304]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	f003 030c 	and.w	r3, r3, #12
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00b      	beq.n	8009236 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800921e:	4b49      	ldr	r3, [pc, #292]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	f003 030c 	and.w	r3, r3, #12
 8009226:	2b08      	cmp	r3, #8
 8009228:	d11c      	bne.n	8009264 <HAL_RCC_OscConfig+0x18c>
 800922a:	4b46      	ldr	r3, [pc, #280]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009232:	2b00      	cmp	r3, #0
 8009234:	d116      	bne.n	8009264 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009236:	4b43      	ldr	r3, [pc, #268]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 0302 	and.w	r3, r3, #2
 800923e:	2b00      	cmp	r3, #0
 8009240:	d005      	beq.n	800924e <HAL_RCC_OscConfig+0x176>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	2b01      	cmp	r3, #1
 8009248:	d001      	beq.n	800924e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	e1ba      	b.n	80095c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800924e:	4b3d      	ldr	r3, [pc, #244]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	00db      	lsls	r3, r3, #3
 800925c:	4939      	ldr	r1, [pc, #228]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 800925e:	4313      	orrs	r3, r2
 8009260:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009262:	e03a      	b.n	80092da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d020      	beq.n	80092ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800926c:	4b36      	ldr	r3, [pc, #216]	; (8009348 <HAL_RCC_OscConfig+0x270>)
 800926e:	2201      	movs	r2, #1
 8009270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009272:	f7fd fe4b 	bl	8006f0c <HAL_GetTick>
 8009276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009278:	e008      	b.n	800928c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800927a:	f7fd fe47 	bl	8006f0c <HAL_GetTick>
 800927e:	4602      	mov	r2, r0
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	2b02      	cmp	r3, #2
 8009286:	d901      	bls.n	800928c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009288:	2303      	movs	r3, #3
 800928a:	e19b      	b.n	80095c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800928c:	4b2d      	ldr	r3, [pc, #180]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 0302 	and.w	r3, r3, #2
 8009294:	2b00      	cmp	r3, #0
 8009296:	d0f0      	beq.n	800927a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009298:	4b2a      	ldr	r3, [pc, #168]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	695b      	ldr	r3, [r3, #20]
 80092a4:	00db      	lsls	r3, r3, #3
 80092a6:	4927      	ldr	r1, [pc, #156]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 80092a8:	4313      	orrs	r3, r2
 80092aa:	600b      	str	r3, [r1, #0]
 80092ac:	e015      	b.n	80092da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80092ae:	4b26      	ldr	r3, [pc, #152]	; (8009348 <HAL_RCC_OscConfig+0x270>)
 80092b0:	2200      	movs	r2, #0
 80092b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092b4:	f7fd fe2a 	bl	8006f0c <HAL_GetTick>
 80092b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092ba:	e008      	b.n	80092ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80092bc:	f7fd fe26 	bl	8006f0c <HAL_GetTick>
 80092c0:	4602      	mov	r2, r0
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d901      	bls.n	80092ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80092ca:	2303      	movs	r3, #3
 80092cc:	e17a      	b.n	80095c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092ce:	4b1d      	ldr	r3, [pc, #116]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 0302 	and.w	r3, r3, #2
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1f0      	bne.n	80092bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 0308 	and.w	r3, r3, #8
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d03a      	beq.n	800935c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d019      	beq.n	8009322 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092ee:	4b17      	ldr	r3, [pc, #92]	; (800934c <HAL_RCC_OscConfig+0x274>)
 80092f0:	2201      	movs	r2, #1
 80092f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80092f4:	f7fd fe0a 	bl	8006f0c <HAL_GetTick>
 80092f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092fa:	e008      	b.n	800930e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092fc:	f7fd fe06 	bl	8006f0c <HAL_GetTick>
 8009300:	4602      	mov	r2, r0
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	2b02      	cmp	r3, #2
 8009308:	d901      	bls.n	800930e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800930a:	2303      	movs	r3, #3
 800930c:	e15a      	b.n	80095c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800930e:	4b0d      	ldr	r3, [pc, #52]	; (8009344 <HAL_RCC_OscConfig+0x26c>)
 8009310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009312:	f003 0302 	and.w	r3, r3, #2
 8009316:	2b00      	cmp	r3, #0
 8009318:	d0f0      	beq.n	80092fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800931a:	2001      	movs	r0, #1
 800931c:	f000 fac4 	bl	80098a8 <RCC_Delay>
 8009320:	e01c      	b.n	800935c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009322:	4b0a      	ldr	r3, [pc, #40]	; (800934c <HAL_RCC_OscConfig+0x274>)
 8009324:	2200      	movs	r2, #0
 8009326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009328:	f7fd fdf0 	bl	8006f0c <HAL_GetTick>
 800932c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800932e:	e00f      	b.n	8009350 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009330:	f7fd fdec 	bl	8006f0c <HAL_GetTick>
 8009334:	4602      	mov	r2, r0
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	2b02      	cmp	r3, #2
 800933c:	d908      	bls.n	8009350 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e140      	b.n	80095c4 <HAL_RCC_OscConfig+0x4ec>
 8009342:	bf00      	nop
 8009344:	40021000 	.word	0x40021000
 8009348:	42420000 	.word	0x42420000
 800934c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009350:	4b9e      	ldr	r3, [pc, #632]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 8009352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009354:	f003 0302 	and.w	r3, r3, #2
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1e9      	bne.n	8009330 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 0304 	and.w	r3, r3, #4
 8009364:	2b00      	cmp	r3, #0
 8009366:	f000 80a6 	beq.w	80094b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800936a:	2300      	movs	r3, #0
 800936c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800936e:	4b97      	ldr	r3, [pc, #604]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 8009370:	69db      	ldr	r3, [r3, #28]
 8009372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d10d      	bne.n	8009396 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800937a:	4b94      	ldr	r3, [pc, #592]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 800937c:	69db      	ldr	r3, [r3, #28]
 800937e:	4a93      	ldr	r2, [pc, #588]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 8009380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009384:	61d3      	str	r3, [r2, #28]
 8009386:	4b91      	ldr	r3, [pc, #580]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 8009388:	69db      	ldr	r3, [r3, #28]
 800938a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800938e:	60bb      	str	r3, [r7, #8]
 8009390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009392:	2301      	movs	r3, #1
 8009394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009396:	4b8e      	ldr	r3, [pc, #568]	; (80095d0 <HAL_RCC_OscConfig+0x4f8>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d118      	bne.n	80093d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80093a2:	4b8b      	ldr	r3, [pc, #556]	; (80095d0 <HAL_RCC_OscConfig+0x4f8>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a8a      	ldr	r2, [pc, #552]	; (80095d0 <HAL_RCC_OscConfig+0x4f8>)
 80093a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80093ae:	f7fd fdad 	bl	8006f0c <HAL_GetTick>
 80093b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093b4:	e008      	b.n	80093c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093b6:	f7fd fda9 	bl	8006f0c <HAL_GetTick>
 80093ba:	4602      	mov	r2, r0
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	2b64      	cmp	r3, #100	; 0x64
 80093c2:	d901      	bls.n	80093c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e0fd      	b.n	80095c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093c8:	4b81      	ldr	r3, [pc, #516]	; (80095d0 <HAL_RCC_OscConfig+0x4f8>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d0f0      	beq.n	80093b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d106      	bne.n	80093ea <HAL_RCC_OscConfig+0x312>
 80093dc:	4b7b      	ldr	r3, [pc, #492]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 80093de:	6a1b      	ldr	r3, [r3, #32]
 80093e0:	4a7a      	ldr	r2, [pc, #488]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 80093e2:	f043 0301 	orr.w	r3, r3, #1
 80093e6:	6213      	str	r3, [r2, #32]
 80093e8:	e02d      	b.n	8009446 <HAL_RCC_OscConfig+0x36e>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10c      	bne.n	800940c <HAL_RCC_OscConfig+0x334>
 80093f2:	4b76      	ldr	r3, [pc, #472]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 80093f4:	6a1b      	ldr	r3, [r3, #32]
 80093f6:	4a75      	ldr	r2, [pc, #468]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 80093f8:	f023 0301 	bic.w	r3, r3, #1
 80093fc:	6213      	str	r3, [r2, #32]
 80093fe:	4b73      	ldr	r3, [pc, #460]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	4a72      	ldr	r2, [pc, #456]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 8009404:	f023 0304 	bic.w	r3, r3, #4
 8009408:	6213      	str	r3, [r2, #32]
 800940a:	e01c      	b.n	8009446 <HAL_RCC_OscConfig+0x36e>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	2b05      	cmp	r3, #5
 8009412:	d10c      	bne.n	800942e <HAL_RCC_OscConfig+0x356>
 8009414:	4b6d      	ldr	r3, [pc, #436]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 8009416:	6a1b      	ldr	r3, [r3, #32]
 8009418:	4a6c      	ldr	r2, [pc, #432]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 800941a:	f043 0304 	orr.w	r3, r3, #4
 800941e:	6213      	str	r3, [r2, #32]
 8009420:	4b6a      	ldr	r3, [pc, #424]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 8009422:	6a1b      	ldr	r3, [r3, #32]
 8009424:	4a69      	ldr	r2, [pc, #420]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 8009426:	f043 0301 	orr.w	r3, r3, #1
 800942a:	6213      	str	r3, [r2, #32]
 800942c:	e00b      	b.n	8009446 <HAL_RCC_OscConfig+0x36e>
 800942e:	4b67      	ldr	r3, [pc, #412]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 8009430:	6a1b      	ldr	r3, [r3, #32]
 8009432:	4a66      	ldr	r2, [pc, #408]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 8009434:	f023 0301 	bic.w	r3, r3, #1
 8009438:	6213      	str	r3, [r2, #32]
 800943a:	4b64      	ldr	r3, [pc, #400]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 800943c:	6a1b      	ldr	r3, [r3, #32]
 800943e:	4a63      	ldr	r2, [pc, #396]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 8009440:	f023 0304 	bic.w	r3, r3, #4
 8009444:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d015      	beq.n	800947a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800944e:	f7fd fd5d 	bl	8006f0c <HAL_GetTick>
 8009452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009454:	e00a      	b.n	800946c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009456:	f7fd fd59 	bl	8006f0c <HAL_GetTick>
 800945a:	4602      	mov	r2, r0
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	f241 3288 	movw	r2, #5000	; 0x1388
 8009464:	4293      	cmp	r3, r2
 8009466:	d901      	bls.n	800946c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009468:	2303      	movs	r3, #3
 800946a:	e0ab      	b.n	80095c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800946c:	4b57      	ldr	r3, [pc, #348]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 800946e:	6a1b      	ldr	r3, [r3, #32]
 8009470:	f003 0302 	and.w	r3, r3, #2
 8009474:	2b00      	cmp	r3, #0
 8009476:	d0ee      	beq.n	8009456 <HAL_RCC_OscConfig+0x37e>
 8009478:	e014      	b.n	80094a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800947a:	f7fd fd47 	bl	8006f0c <HAL_GetTick>
 800947e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009480:	e00a      	b.n	8009498 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009482:	f7fd fd43 	bl	8006f0c <HAL_GetTick>
 8009486:	4602      	mov	r2, r0
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	1ad3      	subs	r3, r2, r3
 800948c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009490:	4293      	cmp	r3, r2
 8009492:	d901      	bls.n	8009498 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009494:	2303      	movs	r3, #3
 8009496:	e095      	b.n	80095c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009498:	4b4c      	ldr	r3, [pc, #304]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 800949a:	6a1b      	ldr	r3, [r3, #32]
 800949c:	f003 0302 	and.w	r3, r3, #2
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1ee      	bne.n	8009482 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80094a4:	7dfb      	ldrb	r3, [r7, #23]
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d105      	bne.n	80094b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80094aa:	4b48      	ldr	r3, [pc, #288]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 80094ac:	69db      	ldr	r3, [r3, #28]
 80094ae:	4a47      	ldr	r2, [pc, #284]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 80094b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	69db      	ldr	r3, [r3, #28]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f000 8081 	beq.w	80095c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80094c0:	4b42      	ldr	r3, [pc, #264]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	f003 030c 	and.w	r3, r3, #12
 80094c8:	2b08      	cmp	r3, #8
 80094ca:	d061      	beq.n	8009590 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	69db      	ldr	r3, [r3, #28]
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d146      	bne.n	8009562 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094d4:	4b3f      	ldr	r3, [pc, #252]	; (80095d4 <HAL_RCC_OscConfig+0x4fc>)
 80094d6:	2200      	movs	r2, #0
 80094d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094da:	f7fd fd17 	bl	8006f0c <HAL_GetTick>
 80094de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80094e0:	e008      	b.n	80094f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094e2:	f7fd fd13 	bl	8006f0c <HAL_GetTick>
 80094e6:	4602      	mov	r2, r0
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	1ad3      	subs	r3, r2, r3
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d901      	bls.n	80094f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80094f0:	2303      	movs	r3, #3
 80094f2:	e067      	b.n	80095c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80094f4:	4b35      	ldr	r3, [pc, #212]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1f0      	bne.n	80094e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a1b      	ldr	r3, [r3, #32]
 8009504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009508:	d108      	bne.n	800951c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800950a:	4b30      	ldr	r3, [pc, #192]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	492d      	ldr	r1, [pc, #180]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 8009518:	4313      	orrs	r3, r2
 800951a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800951c:	4b2b      	ldr	r3, [pc, #172]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6a19      	ldr	r1, [r3, #32]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952c:	430b      	orrs	r3, r1
 800952e:	4927      	ldr	r1, [pc, #156]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 8009530:	4313      	orrs	r3, r2
 8009532:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009534:	4b27      	ldr	r3, [pc, #156]	; (80095d4 <HAL_RCC_OscConfig+0x4fc>)
 8009536:	2201      	movs	r2, #1
 8009538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800953a:	f7fd fce7 	bl	8006f0c <HAL_GetTick>
 800953e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009540:	e008      	b.n	8009554 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009542:	f7fd fce3 	bl	8006f0c <HAL_GetTick>
 8009546:	4602      	mov	r2, r0
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	2b02      	cmp	r3, #2
 800954e:	d901      	bls.n	8009554 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009550:	2303      	movs	r3, #3
 8009552:	e037      	b.n	80095c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009554:	4b1d      	ldr	r3, [pc, #116]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800955c:	2b00      	cmp	r3, #0
 800955e:	d0f0      	beq.n	8009542 <HAL_RCC_OscConfig+0x46a>
 8009560:	e02f      	b.n	80095c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009562:	4b1c      	ldr	r3, [pc, #112]	; (80095d4 <HAL_RCC_OscConfig+0x4fc>)
 8009564:	2200      	movs	r2, #0
 8009566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009568:	f7fd fcd0 	bl	8006f0c <HAL_GetTick>
 800956c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800956e:	e008      	b.n	8009582 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009570:	f7fd fccc 	bl	8006f0c <HAL_GetTick>
 8009574:	4602      	mov	r2, r0
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	2b02      	cmp	r3, #2
 800957c:	d901      	bls.n	8009582 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800957e:	2303      	movs	r3, #3
 8009580:	e020      	b.n	80095c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009582:	4b12      	ldr	r3, [pc, #72]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1f0      	bne.n	8009570 <HAL_RCC_OscConfig+0x498>
 800958e:	e018      	b.n	80095c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	69db      	ldr	r3, [r3, #28]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d101      	bne.n	800959c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	e013      	b.n	80095c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800959c:	4b0b      	ldr	r3, [pc, #44]	; (80095cc <HAL_RCC_OscConfig+0x4f4>)
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a1b      	ldr	r3, [r3, #32]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d106      	bne.n	80095be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d001      	beq.n	80095c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	e000      	b.n	80095c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3718      	adds	r7, #24
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	40021000 	.word	0x40021000
 80095d0:	40007000 	.word	0x40007000
 80095d4:	42420060 	.word	0x42420060

080095d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d101      	bne.n	80095ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	e0d0      	b.n	800978e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80095ec:	4b6a      	ldr	r3, [pc, #424]	; (8009798 <HAL_RCC_ClockConfig+0x1c0>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 0307 	and.w	r3, r3, #7
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d910      	bls.n	800961c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095fa:	4b67      	ldr	r3, [pc, #412]	; (8009798 <HAL_RCC_ClockConfig+0x1c0>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f023 0207 	bic.w	r2, r3, #7
 8009602:	4965      	ldr	r1, [pc, #404]	; (8009798 <HAL_RCC_ClockConfig+0x1c0>)
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	4313      	orrs	r3, r2
 8009608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800960a:	4b63      	ldr	r3, [pc, #396]	; (8009798 <HAL_RCC_ClockConfig+0x1c0>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 0307 	and.w	r3, r3, #7
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	429a      	cmp	r2, r3
 8009616:	d001      	beq.n	800961c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	e0b8      	b.n	800978e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 0302 	and.w	r3, r3, #2
 8009624:	2b00      	cmp	r3, #0
 8009626:	d020      	beq.n	800966a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f003 0304 	and.w	r3, r3, #4
 8009630:	2b00      	cmp	r3, #0
 8009632:	d005      	beq.n	8009640 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009634:	4b59      	ldr	r3, [pc, #356]	; (800979c <HAL_RCC_ClockConfig+0x1c4>)
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	4a58      	ldr	r2, [pc, #352]	; (800979c <HAL_RCC_ClockConfig+0x1c4>)
 800963a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800963e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 0308 	and.w	r3, r3, #8
 8009648:	2b00      	cmp	r3, #0
 800964a:	d005      	beq.n	8009658 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800964c:	4b53      	ldr	r3, [pc, #332]	; (800979c <HAL_RCC_ClockConfig+0x1c4>)
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	4a52      	ldr	r2, [pc, #328]	; (800979c <HAL_RCC_ClockConfig+0x1c4>)
 8009652:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8009656:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009658:	4b50      	ldr	r3, [pc, #320]	; (800979c <HAL_RCC_ClockConfig+0x1c4>)
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	494d      	ldr	r1, [pc, #308]	; (800979c <HAL_RCC_ClockConfig+0x1c4>)
 8009666:	4313      	orrs	r3, r2
 8009668:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	2b00      	cmp	r3, #0
 8009674:	d040      	beq.n	80096f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d107      	bne.n	800968e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800967e:	4b47      	ldr	r3, [pc, #284]	; (800979c <HAL_RCC_ClockConfig+0x1c4>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009686:	2b00      	cmp	r3, #0
 8009688:	d115      	bne.n	80096b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	e07f      	b.n	800978e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	2b02      	cmp	r3, #2
 8009694:	d107      	bne.n	80096a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009696:	4b41      	ldr	r3, [pc, #260]	; (800979c <HAL_RCC_ClockConfig+0x1c4>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d109      	bne.n	80096b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e073      	b.n	800978e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096a6:	4b3d      	ldr	r3, [pc, #244]	; (800979c <HAL_RCC_ClockConfig+0x1c4>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 0302 	and.w	r3, r3, #2
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d101      	bne.n	80096b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e06b      	b.n	800978e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80096b6:	4b39      	ldr	r3, [pc, #228]	; (800979c <HAL_RCC_ClockConfig+0x1c4>)
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	f023 0203 	bic.w	r2, r3, #3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	4936      	ldr	r1, [pc, #216]	; (800979c <HAL_RCC_ClockConfig+0x1c4>)
 80096c4:	4313      	orrs	r3, r2
 80096c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80096c8:	f7fd fc20 	bl	8006f0c <HAL_GetTick>
 80096cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096ce:	e00a      	b.n	80096e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096d0:	f7fd fc1c 	bl	8006f0c <HAL_GetTick>
 80096d4:	4602      	mov	r2, r0
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	f241 3288 	movw	r2, #5000	; 0x1388
 80096de:	4293      	cmp	r3, r2
 80096e0:	d901      	bls.n	80096e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80096e2:	2303      	movs	r3, #3
 80096e4:	e053      	b.n	800978e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096e6:	4b2d      	ldr	r3, [pc, #180]	; (800979c <HAL_RCC_ClockConfig+0x1c4>)
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	f003 020c 	and.w	r2, r3, #12
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d1eb      	bne.n	80096d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80096f8:	4b27      	ldr	r3, [pc, #156]	; (8009798 <HAL_RCC_ClockConfig+0x1c0>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f003 0307 	and.w	r3, r3, #7
 8009700:	683a      	ldr	r2, [r7, #0]
 8009702:	429a      	cmp	r2, r3
 8009704:	d210      	bcs.n	8009728 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009706:	4b24      	ldr	r3, [pc, #144]	; (8009798 <HAL_RCC_ClockConfig+0x1c0>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f023 0207 	bic.w	r2, r3, #7
 800970e:	4922      	ldr	r1, [pc, #136]	; (8009798 <HAL_RCC_ClockConfig+0x1c0>)
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	4313      	orrs	r3, r2
 8009714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009716:	4b20      	ldr	r3, [pc, #128]	; (8009798 <HAL_RCC_ClockConfig+0x1c0>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0307 	and.w	r3, r3, #7
 800971e:	683a      	ldr	r2, [r7, #0]
 8009720:	429a      	cmp	r2, r3
 8009722:	d001      	beq.n	8009728 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	e032      	b.n	800978e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 0304 	and.w	r3, r3, #4
 8009730:	2b00      	cmp	r3, #0
 8009732:	d008      	beq.n	8009746 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009734:	4b19      	ldr	r3, [pc, #100]	; (800979c <HAL_RCC_ClockConfig+0x1c4>)
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	4916      	ldr	r1, [pc, #88]	; (800979c <HAL_RCC_ClockConfig+0x1c4>)
 8009742:	4313      	orrs	r3, r2
 8009744:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 0308 	and.w	r3, r3, #8
 800974e:	2b00      	cmp	r3, #0
 8009750:	d009      	beq.n	8009766 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009752:	4b12      	ldr	r3, [pc, #72]	; (800979c <HAL_RCC_ClockConfig+0x1c4>)
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	00db      	lsls	r3, r3, #3
 8009760:	490e      	ldr	r1, [pc, #56]	; (800979c <HAL_RCC_ClockConfig+0x1c4>)
 8009762:	4313      	orrs	r3, r2
 8009764:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009766:	f000 f821 	bl	80097ac <HAL_RCC_GetSysClockFreq>
 800976a:	4602      	mov	r2, r0
 800976c:	4b0b      	ldr	r3, [pc, #44]	; (800979c <HAL_RCC_ClockConfig+0x1c4>)
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	091b      	lsrs	r3, r3, #4
 8009772:	f003 030f 	and.w	r3, r3, #15
 8009776:	490a      	ldr	r1, [pc, #40]	; (80097a0 <HAL_RCC_ClockConfig+0x1c8>)
 8009778:	5ccb      	ldrb	r3, [r1, r3]
 800977a:	fa22 f303 	lsr.w	r3, r2, r3
 800977e:	4a09      	ldr	r2, [pc, #36]	; (80097a4 <HAL_RCC_ClockConfig+0x1cc>)
 8009780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009782:	4b09      	ldr	r3, [pc, #36]	; (80097a8 <HAL_RCC_ClockConfig+0x1d0>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4618      	mov	r0, r3
 8009788:	f7fd fb7e 	bl	8006e88 <HAL_InitTick>

  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	40022000 	.word	0x40022000
 800979c:	40021000 	.word	0x40021000
 80097a0:	08009e38 	.word	0x08009e38
 80097a4:	20000000 	.word	0x20000000
 80097a8:	2000000c 	.word	0x2000000c

080097ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097ac:	b490      	push	{r4, r7}
 80097ae:	b08a      	sub	sp, #40	; 0x28
 80097b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80097b2:	4b2a      	ldr	r3, [pc, #168]	; (800985c <HAL_RCC_GetSysClockFreq+0xb0>)
 80097b4:	1d3c      	adds	r4, r7, #4
 80097b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80097b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80097bc:	f240 2301 	movw	r3, #513	; 0x201
 80097c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80097c2:	2300      	movs	r3, #0
 80097c4:	61fb      	str	r3, [r7, #28]
 80097c6:	2300      	movs	r3, #0
 80097c8:	61bb      	str	r3, [r7, #24]
 80097ca:	2300      	movs	r3, #0
 80097cc:	627b      	str	r3, [r7, #36]	; 0x24
 80097ce:	2300      	movs	r3, #0
 80097d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80097d2:	2300      	movs	r3, #0
 80097d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80097d6:	4b22      	ldr	r3, [pc, #136]	; (8009860 <HAL_RCC_GetSysClockFreq+0xb4>)
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	f003 030c 	and.w	r3, r3, #12
 80097e2:	2b04      	cmp	r3, #4
 80097e4:	d002      	beq.n	80097ec <HAL_RCC_GetSysClockFreq+0x40>
 80097e6:	2b08      	cmp	r3, #8
 80097e8:	d003      	beq.n	80097f2 <HAL_RCC_GetSysClockFreq+0x46>
 80097ea:	e02d      	b.n	8009848 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80097ec:	4b1d      	ldr	r3, [pc, #116]	; (8009864 <HAL_RCC_GetSysClockFreq+0xb8>)
 80097ee:	623b      	str	r3, [r7, #32]
      break;
 80097f0:	e02d      	b.n	800984e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	0c9b      	lsrs	r3, r3, #18
 80097f6:	f003 030f 	and.w	r3, r3, #15
 80097fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80097fe:	4413      	add	r3, r2
 8009800:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009804:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800980c:	2b00      	cmp	r3, #0
 800980e:	d013      	beq.n	8009838 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009810:	4b13      	ldr	r3, [pc, #76]	; (8009860 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	0c5b      	lsrs	r3, r3, #17
 8009816:	f003 0301 	and.w	r3, r3, #1
 800981a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800981e:	4413      	add	r3, r2
 8009820:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009824:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	4a0e      	ldr	r2, [pc, #56]	; (8009864 <HAL_RCC_GetSysClockFreq+0xb8>)
 800982a:	fb02 f203 	mul.w	r2, r2, r3
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	fbb2 f3f3 	udiv	r3, r2, r3
 8009834:	627b      	str	r3, [r7, #36]	; 0x24
 8009836:	e004      	b.n	8009842 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	4a0b      	ldr	r2, [pc, #44]	; (8009868 <HAL_RCC_GetSysClockFreq+0xbc>)
 800983c:	fb02 f303 	mul.w	r3, r2, r3
 8009840:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8009842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009844:	623b      	str	r3, [r7, #32]
      break;
 8009846:	e002      	b.n	800984e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009848:	4b06      	ldr	r3, [pc, #24]	; (8009864 <HAL_RCC_GetSysClockFreq+0xb8>)
 800984a:	623b      	str	r3, [r7, #32]
      break;
 800984c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800984e:	6a3b      	ldr	r3, [r7, #32]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3728      	adds	r7, #40	; 0x28
 8009854:	46bd      	mov	sp, r7
 8009856:	bc90      	pop	{r4, r7}
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	08009e28 	.word	0x08009e28
 8009860:	40021000 	.word	0x40021000
 8009864:	007a1200 	.word	0x007a1200
 8009868:	003d0900 	.word	0x003d0900

0800986c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800986c:	b480      	push	{r7}
 800986e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009870:	4b02      	ldr	r3, [pc, #8]	; (800987c <HAL_RCC_GetHCLKFreq+0x10>)
 8009872:	681b      	ldr	r3, [r3, #0]
}
 8009874:	4618      	mov	r0, r3
 8009876:	46bd      	mov	sp, r7
 8009878:	bc80      	pop	{r7}
 800987a:	4770      	bx	lr
 800987c:	20000000 	.word	0x20000000

08009880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009884:	f7ff fff2 	bl	800986c <HAL_RCC_GetHCLKFreq>
 8009888:	4602      	mov	r2, r0
 800988a:	4b05      	ldr	r3, [pc, #20]	; (80098a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	0a1b      	lsrs	r3, r3, #8
 8009890:	f003 0307 	and.w	r3, r3, #7
 8009894:	4903      	ldr	r1, [pc, #12]	; (80098a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009896:	5ccb      	ldrb	r3, [r1, r3]
 8009898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800989c:	4618      	mov	r0, r3
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	40021000 	.word	0x40021000
 80098a4:	08009e48 	.word	0x08009e48

080098a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80098b0:	4b0a      	ldr	r3, [pc, #40]	; (80098dc <RCC_Delay+0x34>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a0a      	ldr	r2, [pc, #40]	; (80098e0 <RCC_Delay+0x38>)
 80098b6:	fba2 2303 	umull	r2, r3, r2, r3
 80098ba:	0a5b      	lsrs	r3, r3, #9
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	fb02 f303 	mul.w	r3, r2, r3
 80098c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80098c4:	bf00      	nop
  }
  while (Delay --);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	1e5a      	subs	r2, r3, #1
 80098ca:	60fa      	str	r2, [r7, #12]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1f9      	bne.n	80098c4 <RCC_Delay+0x1c>
}
 80098d0:	bf00      	nop
 80098d2:	bf00      	nop
 80098d4:	3714      	adds	r7, #20
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bc80      	pop	{r7}
 80098da:	4770      	bx	lr
 80098dc:	20000000 	.word	0x20000000
 80098e0:	10624dd3 	.word	0x10624dd3

080098e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d101      	bne.n	80098f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e041      	b.n	800997a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d106      	bne.n	8009910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f7f7 f86a 	bl	80009e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2202      	movs	r2, #2
 8009914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	3304      	adds	r3, #4
 8009920:	4619      	mov	r1, r3
 8009922:	4610      	mov	r0, r2
 8009924:	f000 f8f2 	bl	8009b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b084      	sub	sp, #16
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
 800998a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009992:	2b01      	cmp	r3, #1
 8009994:	d101      	bne.n	800999a <HAL_TIM_ConfigClockSource+0x18>
 8009996:	2302      	movs	r3, #2
 8009998:	e0b3      	b.n	8009b02 <HAL_TIM_ConfigClockSource+0x180>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2201      	movs	r2, #1
 800999e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2202      	movs	r2, #2
 80099a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80099b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099c0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099d2:	d03e      	beq.n	8009a52 <HAL_TIM_ConfigClockSource+0xd0>
 80099d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099d8:	f200 8087 	bhi.w	8009aea <HAL_TIM_ConfigClockSource+0x168>
 80099dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099e0:	f000 8085 	beq.w	8009aee <HAL_TIM_ConfigClockSource+0x16c>
 80099e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099e8:	d87f      	bhi.n	8009aea <HAL_TIM_ConfigClockSource+0x168>
 80099ea:	2b70      	cmp	r3, #112	; 0x70
 80099ec:	d01a      	beq.n	8009a24 <HAL_TIM_ConfigClockSource+0xa2>
 80099ee:	2b70      	cmp	r3, #112	; 0x70
 80099f0:	d87b      	bhi.n	8009aea <HAL_TIM_ConfigClockSource+0x168>
 80099f2:	2b60      	cmp	r3, #96	; 0x60
 80099f4:	d050      	beq.n	8009a98 <HAL_TIM_ConfigClockSource+0x116>
 80099f6:	2b60      	cmp	r3, #96	; 0x60
 80099f8:	d877      	bhi.n	8009aea <HAL_TIM_ConfigClockSource+0x168>
 80099fa:	2b50      	cmp	r3, #80	; 0x50
 80099fc:	d03c      	beq.n	8009a78 <HAL_TIM_ConfigClockSource+0xf6>
 80099fe:	2b50      	cmp	r3, #80	; 0x50
 8009a00:	d873      	bhi.n	8009aea <HAL_TIM_ConfigClockSource+0x168>
 8009a02:	2b40      	cmp	r3, #64	; 0x40
 8009a04:	d058      	beq.n	8009ab8 <HAL_TIM_ConfigClockSource+0x136>
 8009a06:	2b40      	cmp	r3, #64	; 0x40
 8009a08:	d86f      	bhi.n	8009aea <HAL_TIM_ConfigClockSource+0x168>
 8009a0a:	2b30      	cmp	r3, #48	; 0x30
 8009a0c:	d064      	beq.n	8009ad8 <HAL_TIM_ConfigClockSource+0x156>
 8009a0e:	2b30      	cmp	r3, #48	; 0x30
 8009a10:	d86b      	bhi.n	8009aea <HAL_TIM_ConfigClockSource+0x168>
 8009a12:	2b20      	cmp	r3, #32
 8009a14:	d060      	beq.n	8009ad8 <HAL_TIM_ConfigClockSource+0x156>
 8009a16:	2b20      	cmp	r3, #32
 8009a18:	d867      	bhi.n	8009aea <HAL_TIM_ConfigClockSource+0x168>
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d05c      	beq.n	8009ad8 <HAL_TIM_ConfigClockSource+0x156>
 8009a1e:	2b10      	cmp	r3, #16
 8009a20:	d05a      	beq.n	8009ad8 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009a22:	e062      	b.n	8009aea <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6818      	ldr	r0, [r3, #0]
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	6899      	ldr	r1, [r3, #8]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	685a      	ldr	r2, [r3, #4]
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	f000 f943 	bl	8009cbe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009a46:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	609a      	str	r2, [r3, #8]
      break;
 8009a50:	e04e      	b.n	8009af0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6818      	ldr	r0, [r3, #0]
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	6899      	ldr	r1, [r3, #8]
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	685a      	ldr	r2, [r3, #4]
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	f000 f92c 	bl	8009cbe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	689a      	ldr	r2, [r3, #8]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a74:	609a      	str	r2, [r3, #8]
      break;
 8009a76:	e03b      	b.n	8009af0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6818      	ldr	r0, [r3, #0]
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	6859      	ldr	r1, [r3, #4]
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	461a      	mov	r2, r3
 8009a86:	f000 f8a3 	bl	8009bd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2150      	movs	r1, #80	; 0x50
 8009a90:	4618      	mov	r0, r3
 8009a92:	f000 f8fa 	bl	8009c8a <TIM_ITRx_SetConfig>
      break;
 8009a96:	e02b      	b.n	8009af0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6818      	ldr	r0, [r3, #0]
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	6859      	ldr	r1, [r3, #4]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	f000 f8c1 	bl	8009c2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2160      	movs	r1, #96	; 0x60
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f000 f8ea 	bl	8009c8a <TIM_ITRx_SetConfig>
      break;
 8009ab6:	e01b      	b.n	8009af0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6818      	ldr	r0, [r3, #0]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	6859      	ldr	r1, [r3, #4]
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	f000 f883 	bl	8009bd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2140      	movs	r1, #64	; 0x40
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f000 f8da 	bl	8009c8a <TIM_ITRx_SetConfig>
      break;
 8009ad6:	e00b      	b.n	8009af0 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	4610      	mov	r0, r2
 8009ae4:	f000 f8d1 	bl	8009c8a <TIM_ITRx_SetConfig>
        break;
 8009ae8:	e002      	b.n	8009af0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009aea:	bf00      	nop
 8009aec:	e000      	b.n	8009af0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009aee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
	...

08009b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4a29      	ldr	r2, [pc, #164]	; (8009bc4 <TIM_Base_SetConfig+0xb8>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d00b      	beq.n	8009b3c <TIM_Base_SetConfig+0x30>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b2a:	d007      	beq.n	8009b3c <TIM_Base_SetConfig+0x30>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a26      	ldr	r2, [pc, #152]	; (8009bc8 <TIM_Base_SetConfig+0xbc>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d003      	beq.n	8009b3c <TIM_Base_SetConfig+0x30>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a25      	ldr	r2, [pc, #148]	; (8009bcc <TIM_Base_SetConfig+0xc0>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d108      	bne.n	8009b4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a1c      	ldr	r2, [pc, #112]	; (8009bc4 <TIM_Base_SetConfig+0xb8>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d00b      	beq.n	8009b6e <TIM_Base_SetConfig+0x62>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b5c:	d007      	beq.n	8009b6e <TIM_Base_SetConfig+0x62>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a19      	ldr	r2, [pc, #100]	; (8009bc8 <TIM_Base_SetConfig+0xbc>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d003      	beq.n	8009b6e <TIM_Base_SetConfig+0x62>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a18      	ldr	r2, [pc, #96]	; (8009bcc <TIM_Base_SetConfig+0xc0>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d108      	bne.n	8009b80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	695b      	ldr	r3, [r3, #20]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	689a      	ldr	r2, [r3, #8]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	4a07      	ldr	r2, [pc, #28]	; (8009bc4 <TIM_Base_SetConfig+0xb8>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d103      	bne.n	8009bb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	691a      	ldr	r2, [r3, #16]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	615a      	str	r2, [r3, #20]
}
 8009bba:	bf00      	nop
 8009bbc:	3714      	adds	r7, #20
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bc80      	pop	{r7}
 8009bc2:	4770      	bx	lr
 8009bc4:	40012c00 	.word	0x40012c00
 8009bc8:	40000400 	.word	0x40000400
 8009bcc:	40000800 	.word	0x40000800

08009bd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b087      	sub	sp, #28
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6a1b      	ldr	r3, [r3, #32]
 8009be0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6a1b      	ldr	r3, [r3, #32]
 8009be6:	f023 0201 	bic.w	r2, r3, #1
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	699b      	ldr	r3, [r3, #24]
 8009bf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	011b      	lsls	r3, r3, #4
 8009c00:	693a      	ldr	r2, [r7, #16]
 8009c02:	4313      	orrs	r3, r2
 8009c04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f023 030a 	bic.w	r3, r3, #10
 8009c0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c0e:	697a      	ldr	r2, [r7, #20]
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	693a      	ldr	r2, [r7, #16]
 8009c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	621a      	str	r2, [r3, #32]
}
 8009c22:	bf00      	nop
 8009c24:	371c      	adds	r7, #28
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bc80      	pop	{r7}
 8009c2a:	4770      	bx	lr

08009c2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b087      	sub	sp, #28
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6a1b      	ldr	r3, [r3, #32]
 8009c3c:	f023 0210 	bic.w	r2, r3, #16
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	699b      	ldr	r3, [r3, #24]
 8009c48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6a1b      	ldr	r3, [r3, #32]
 8009c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	031b      	lsls	r3, r3, #12
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	011b      	lsls	r3, r3, #4
 8009c6e:	693a      	ldr	r2, [r7, #16]
 8009c70:	4313      	orrs	r3, r2
 8009c72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	693a      	ldr	r2, [r7, #16]
 8009c7e:	621a      	str	r2, [r3, #32]
}
 8009c80:	bf00      	nop
 8009c82:	371c      	adds	r7, #28
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bc80      	pop	{r7}
 8009c88:	4770      	bx	lr

08009c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c8a:	b480      	push	{r7}
 8009c8c:	b085      	sub	sp, #20
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
 8009c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	f043 0307 	orr.w	r3, r3, #7
 8009cac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	609a      	str	r2, [r3, #8]
}
 8009cb4:	bf00      	nop
 8009cb6:	3714      	adds	r7, #20
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bc80      	pop	{r7}
 8009cbc:	4770      	bx	lr

08009cbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b087      	sub	sp, #28
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	60f8      	str	r0, [r7, #12]
 8009cc6:	60b9      	str	r1, [r7, #8]
 8009cc8:	607a      	str	r2, [r7, #4]
 8009cca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009cd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	021a      	lsls	r2, r3, #8
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	431a      	orrs	r2, r3
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	697a      	ldr	r2, [r7, #20]
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	697a      	ldr	r2, [r7, #20]
 8009cf0:	609a      	str	r2, [r3, #8]
}
 8009cf2:	bf00      	nop
 8009cf4:	371c      	adds	r7, #28
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bc80      	pop	{r7}
 8009cfa:	4770      	bx	lr

08009cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d101      	bne.n	8009d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d10:	2302      	movs	r3, #2
 8009d12:	e046      	b.n	8009da2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2202      	movs	r2, #2
 8009d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a16      	ldr	r2, [pc, #88]	; (8009dac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d00e      	beq.n	8009d76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d60:	d009      	beq.n	8009d76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a12      	ldr	r2, [pc, #72]	; (8009db0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d004      	beq.n	8009d76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a10      	ldr	r2, [pc, #64]	; (8009db4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d10c      	bne.n	8009d90 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	68ba      	ldr	r2, [r7, #8]
 8009d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2201      	movs	r2, #1
 8009d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3714      	adds	r7, #20
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bc80      	pop	{r7}
 8009daa:	4770      	bx	lr
 8009dac:	40012c00 	.word	0x40012c00
 8009db0:	40000400 	.word	0x40000400
 8009db4:	40000800 	.word	0x40000800

08009db8 <__libc_init_array>:
 8009db8:	b570      	push	{r4, r5, r6, lr}
 8009dba:	2600      	movs	r6, #0
 8009dbc:	4d0c      	ldr	r5, [pc, #48]	; (8009df0 <__libc_init_array+0x38>)
 8009dbe:	4c0d      	ldr	r4, [pc, #52]	; (8009df4 <__libc_init_array+0x3c>)
 8009dc0:	1b64      	subs	r4, r4, r5
 8009dc2:	10a4      	asrs	r4, r4, #2
 8009dc4:	42a6      	cmp	r6, r4
 8009dc6:	d109      	bne.n	8009ddc <__libc_init_array+0x24>
 8009dc8:	f000 f822 	bl	8009e10 <_init>
 8009dcc:	2600      	movs	r6, #0
 8009dce:	4d0a      	ldr	r5, [pc, #40]	; (8009df8 <__libc_init_array+0x40>)
 8009dd0:	4c0a      	ldr	r4, [pc, #40]	; (8009dfc <__libc_init_array+0x44>)
 8009dd2:	1b64      	subs	r4, r4, r5
 8009dd4:	10a4      	asrs	r4, r4, #2
 8009dd6:	42a6      	cmp	r6, r4
 8009dd8:	d105      	bne.n	8009de6 <__libc_init_array+0x2e>
 8009dda:	bd70      	pop	{r4, r5, r6, pc}
 8009ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009de0:	4798      	blx	r3
 8009de2:	3601      	adds	r6, #1
 8009de4:	e7ee      	b.n	8009dc4 <__libc_init_array+0xc>
 8009de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dea:	4798      	blx	r3
 8009dec:	3601      	adds	r6, #1
 8009dee:	e7f2      	b.n	8009dd6 <__libc_init_array+0x1e>
 8009df0:	08009e50 	.word	0x08009e50
 8009df4:	08009e50 	.word	0x08009e50
 8009df8:	08009e50 	.word	0x08009e50
 8009dfc:	08009e54 	.word	0x08009e54

08009e00 <memset>:
 8009e00:	4603      	mov	r3, r0
 8009e02:	4402      	add	r2, r0
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d100      	bne.n	8009e0a <memset+0xa>
 8009e08:	4770      	bx	lr
 8009e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8009e0e:	e7f9      	b.n	8009e04 <memset+0x4>

08009e10 <_init>:
 8009e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e12:	bf00      	nop
 8009e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e16:	bc08      	pop	{r3}
 8009e18:	469e      	mov	lr, r3
 8009e1a:	4770      	bx	lr

08009e1c <_fini>:
 8009e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1e:	bf00      	nop
 8009e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e22:	bc08      	pop	{r3}
 8009e24:	469e      	mov	lr, r3
 8009e26:	4770      	bx	lr
